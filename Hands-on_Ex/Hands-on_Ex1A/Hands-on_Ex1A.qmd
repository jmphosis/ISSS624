---
title: "Hands-on Exercise 1A"
date: "17 November 2023"
format: html
execute: 
  echo: true #shows the code
  eval: true #shows the outcomes of the code
  warning: false #does not show the warnings
editor: visual
---

# 1 Geospatial Data Wrangling with R

## 1.1 Overview

In this page, I show how I had completed the Hands-on Exercise 1. It includes the codes used, the graphs obtained as well as the insights gathered.

## 1.2 Data Acquisition

The following data sets were used in this hands-on exercise:

-   [Master Plan 2014 Subzone Boundary (Web)](https://beta.data.gov.sg/collections/1708/view) from [data.gov.sg](https://data.gov.sg/)

-   [Pre-Schools Location](https://beta.data.gov.sg/collections/2064/view) from [data.gov.sg](https://data.gov.sg/)

-   [Cycling Path](https://datamall.lta.gov.sg/content/dam/datamall/datasets/Geospatial/CyclingPath.zip) from [LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)

-   Latest version of [Singapore Airbnb listing](http://data.insideairbnb.com/singapore/sg/singapore/2023-09-23/visualisations/listings.csv) data from [Inside Airbnb](http://insideairbnb.com/get-the-data.html)

The data sets were placed under two sub-folders:

-   geospatial (Master Plan Subzone Boundary, Pre-Schools Location, and Cycling Path), and

-   aspatial (Airbnb Listing).

These two sub-folders are within the data folder of my Hands-on_Ex1A folder.

## 1.3 Getting Started

The two R packages used in this hands-on exercises were:

-   **sf** for importing, managing, and processing geospatial data, and

-   **tidyverse** for performing data science tasks such as importing, wrangling, and visualising data.

They were loaded into the R environment using the following code:

```{r}
pacman::p_load(sf, tidyverse)
```

***Student Note***: This allowed for loading of multiple packages in one line of code.

## 1.4 Importing Geospatial Data

The **st_read()** (under sf package) was used to import the three geospatial data sets:

-   `MP14_SUBZONE_WEB_PL`, a polygon feature layer in ESRI shapefile format;

-   `CyclingPath`, a line feature layer in ESRI shapefile format; and

-   `PreSchool`, a point feature layer in kml file format.

### 1.4.1 Importing Polygon Feature Data in shapefile Format - Master Plan Subzone Boundary

The `MP14_SUBZONE_WEB_PL` data set was imported into R as a polygon feature data frame using **st_read()**.

```{r}
mpsz = st_read(dsn = "data/geospatial", 
               layer = "MP14_SUBZONE_WEB_PL")
```

***Student Note***: The geospatial objects are multipolygon features. There are a total of **323 features and 15 fields** in `mpsz` simple feature data frame. `mpsz` is in svy21 projected coordinate system. The bounding box provides the x extend and y extend of the data.

### 1.4.2 Importing Polyline Feature Data in shapefile Format - Cycling Path

The `CyclingPath` data set was imported into R as a line feature data frame using st_read().

```{r}
cyclingpath = st_read(dsn = "data/geospatial", 
                      layer = "CyclingPathGazette")
```

***Student Note***: The geospatial objects are multistring features. There are a total of **2,558 features and 2 fields** in `cyclingpath` linestring feature data frame. `cyclingpath` is in **svy21 projected coordinate system**.

### 1.4.3 Importing GIS Data in kml Format - Pre-Schools Location

The `PreSchool` data set was imported into R as a point feature data frame using st_read(). As it is in the kml format, the file extension is included.

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

***Student Note***: The geospatial objects are point features. There are a total of **2,290 features and 2 fields** in `preschool` point feature data frame. `preschool` is in **wgs84 coordinate system**.

## 1.5 Checking the Content of A Simple Feature Data Frame

The following ways to retrieve information related to the content of a simple feature data frame were applied on the three data frames: `mpsz`, `cyclingpath`, and `preschool`:

-   **st_geometry()** (under sf package) retrieves the geometries from an object.

-   **glimpse()** (under dplyr package) retrieves information about the associated attributes in the data frame.

-   **head()** (under Base R) reveals complete information of a feature object.

### 1.5.1 Master Plan Subzone Boundary

The three functions were applied to `mpsz`:

```{r}
st_geometry(mpsz)
```

***Student Note***: The above shows that `mpsz` is a multipolygon feature object and in the svy21 projected coordinates systems.

```{r}
glimpse(mpsz)
```

***Student Note***: The above shows the data type of each field and some examples of the values.

```{r}
head(mpsz, n=5)
```

***Student Note***: The above shows the first 5 records in `mpsz`.

### 1.5.2 Cycling Path

The three functions were applied to `cyclingpath`:

```{r}
st_geometry(cyclingpath)
```

***Student Note***: The above shows that `cyclingpath` is a multilinestring feature object and in the svy21 projected coordinates systems.

```{r}
glimpse(cyclingpath)
```

***Student Note***: The above shows the data type of each field and some examples of the values. The PLANNING_A column appears to only have 'NA' values.

```{r}
head(cyclingpath, n=5)
```

***Student Note***: The above shows the first 5 records in `cyclingpath`.

### 1.5.3 Pre-Schools Location

The three functions were applied to `preschool`:

```{r}
st_geometry(preschool)
```

***Student Note***: The above shows that `preschool` is a point feature object and in the wgs84 coordinates systems.

```{r}
glimpse(preschool)
```

***Student Note***: The above shows the data type of each field and some examples of the values.

```{r}
head(preschool, n=5)
```

***Student Note***: The above shows the first 5 records in `preschool`.

## 1.6 Plotting the Geospatial Data

The **plot()** (under R graphics) was used to visualise the geospatial features of the three data frames: `mpsz`, `cyclingpath`, and `preschool`.

### 1.6.1 Master Plan Subzone Boundary

```{r}
plot(mpsz)
```

```{r}
plot(st_geometry(mpsz))
```

```{r}
plot(mpsz["PLN_AREA_N"])
```

### 1.6.2 Cycling Path

```{r}
plot(st_geometry(cyclingpath))
```

```{r}
plot(cyclingpath["PLANNING_1"])
```

### 1.6.3 Pre-Schools Location

```{r}
plot(preschool)
```

```{r}
plot(st_geometry(preschool))
```

## 1.7 Working with Projection

It is essential for two geospatial data objects to be projected using similar coordinate systems. In the hands-on exercise, we projected a simple feature data frame from one coordinate system to another through **projection transformation**.

### 1.7.1 Assigning EPSG Code to A Simple Feature Data Frame

```{r}
st_crs(mpsz)
```

The above shows that the `mpsz` data frame has the wrong EPSG code (9001). Hence, the **st_set_crs()** (under sf package) is used to assign the correct EPSG code (3414).

```{r}
mpsz3414 = st_set_crs(mpsz, 3414)

st_crs(mpsz3414)
```

### 1.7.2 Transforming the Projection of Pre-Schools Location from wgs84 to svy21

In geospatial analytics, data in the geographic coordinate system are often transformed to the projected coordinate system. This allows analysis based on measurements such as distance and area.

The **st_transform()** (under sf package) is required when the coordinate system needs to be transformed (and not just a matter of changing the EPSG code).

```{r}
preschool3414 = st_transform(preschool, 
                             crs = 3414)

st_geometry(preschool3414)
```

## 1.8 Importing and Converting An Aspatial Data

Aspatial data are not geospatial data but have data fields that capture the x- and y-coordinates of the data points.

The Airbnb listing aspatial data is imported into the R environment as a tibble data frame, and converted to a simple feature data frame.

The csv file is imported using **read_csv()** (under readr package) as a tibble data frame. Then, a quick check is conducted on the imported data.

```{r}
listings = read_csv("data/aspatial/listings.csv")

list(listings)
```

***Student Note***: The `listing` tibble data frame contains **3,483 rows and 18 columns**.

The longitude and latitude columns are used to convert the tibble data frame into a simple feature data frame using **st_as_sf()** (under sf package). Then, the contents of the newly created simple feature data frame, `listings_sf`, is examined using **glimpse()** (under dplyr package). The longitude and latitude columns have been replaced by a new column, geometry.

```{r}
listings_sf = st_as_sf(listings,
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)

glimpse(listings_sf)
```

## 1.9 Geoprocessing with sf Package

The sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions. The following are utilised in this hands-on exercise:

-   **st_buffer()** creates a buffer around spatial geometries.

-   **st_area()** calculates the area of spatial geometries.

-   **st_intersects()** returns a logical vector indicating which geometries in a set intersect with a reference geometry.

### 1.9.1 Buffer for Cycling Path

*Scenario*: The authority is planning to upgrade the existing cycling paths. They need to acquire 5 metres of reserved land on both sides of the paths. Hence, need to find the extent of the land to be acquired and their total area.

*Solution*:

```{r}
buffer_cycling = st_buffer(cyclingpath,
                            dist=5, nQuadSegs = 30)

buffer_cycling$AREA = st_area(buffer_cycling)

sum(buffer_cycling$AREA)
```

### 1.9.2 Point-in-Polygon Count for Pre-Schools

*Scenario*: A pre-school service group wants to find out the numbers of pre-schools in each Planning Subzone.

*Solution*: The st_intersects identify pre-schools in `preschool3414` that are in each planning subzone of `mpsz3414`. The **length()** (under Base R) is used to count the number of pre-schools in each planning subzone. The **top_n()** (under dplyr) is used to obtain details of the planning subzone with the most number of preschools.

*Answer*: The new PreSch Count column shows the number of preschools in each planning subzone. The Tampines East subzone in Tampines planning area has the most number of preschools, a total of 72.

```{r}
mpsz3414$`PreSch Count` = lengths(st_intersects(mpsz3414, preschool3414))

summary(mpsz3414$`PreSch Count`)

top_n(mpsz3414, 1, `PreSch Count`)

```

*Scenario*: Find the density of pre-school by planning subzone.

*Solution*: The **st_area()** is used to derive the area of each planning subzone. Then, the **mutate()** (under dplyr) is used to compute the density.

*Answer*: The new PreSch Density column shows the number of preschools per square-kilometres in each planning subzone. The Cecil subzone in the Downtown Core planning area has the highest density of preschools, 35.6019 per square-kilometres.

```{r}
mpsz3414$Area = mpsz3414 %>% st_area()

mpsz3414 = mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)

summary(mpsz3414$`PreSch Density`)

top_n(mpsz3414, 1, `PreSch Density`)
```

### 1.9.3 \[*Extra!*\] Point-in-Polygon Count for Airbnb Listings

*Scenario*: Find out the number of Airbnb listings in each Planning Subzone.

*Solution*: The st_intersects identify Airbnb listings in `listings_sf` that are in each planning subzone of `mpsz3414`. The **length()** (under Base R) is used to count the number of listings in each planning subzone. The **top_n()** (under dplyr) is used to obtain details of the planning subzone with the most number of listings.

*Answer*: The new Airbnb Count column shows the number of preschools in each planning subzone. The Lavender subzone in Kallang planning area has the most number of listings, a total of 243.

```{r}
mpsz3414$`Airbnb Count` = lengths(st_intersects(mpsz3414, listings_sf))  

summary(mpsz3414$`Airbnb Count`)

top_n(mpsz3414, 1, `Airbnb Count`) 
```

*Scenario*: Find the density of Airbnb listings by planning subzone.

*Solution*: The **st_area()** is used to derive the area of each planning subzone. Then, the **mutate()** (under dplyr) is used to compute the density.

*Answer*: The new Airbnb Density column shows the number of listings per square-kilometres in each planning subzone. The People's Park subzone in the Outram planning area has the highest density of listings, 504.6143 per square-kilometres.

***Student Note***: A filter was added before calculating the Airbnb density in different subzones to avoid getting an error from dividing zero values (subzones with no listing).*\<*

```{r}
mpsz3414$Area = mpsz3414 %>% st_area()  

mpsz3414 = mpsz3414 %>%
  filter(`Airbnb Count` != 0) %>%
  mutate(`Airbnb Density` = `Airbnb Count`/Area * 1000000)  

summary(mpsz3414$`Airbnb Density`)  

top_n(mpsz3414, 1, `Airbnb Density`)
```

## 1.10 Exploratory Data Analysis (EDA)

The ggplot2 functions can be used to create useful statistical graphs for exploratory data analysis.

### 1.10.1 Histograms of Frequency of Pre-Schools Density

```{r}
hist(mpsz3414$`PreSch Density`)
```

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`))) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school evenly distributed in Singapore?",
       subtitle= "There are many planning subzones with a single pre-school, on the other hand, \nthere are two planning subzones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

***Student Note***: Based on both histograms, the density of pre-schools is right-skewed, with outliers at values above 20.

### 1.10.2 Scatterplot of Pre-Schools Density versus Pre-Schools Count

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
       x = "Pre-school density (per km sq)",
       y = "Pre-school count")
```

***Student Note***: There appears to be a positive correlation between pre-school count and pre-school density.

### 1.10.3 Histograms of Frequency of Airbnb Listings Density

```{r}
hist(mpsz3414$`Airbnb Density`)
```

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`Airbnb Density`))) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light green") +
  labs(title = "Are Airbnb listings evenly distributed in Singapore?",
       subtitle= "There are many planning subzones with less than 50 listings, on the other hand, \nthere are some planning subzones with more than a hundred listings",
      x = "Airbnb density (per km sq)",
      y = "Frequency")
```

***Student Note***: Based on both histograms, the density of Airbnb listings is right-skewed, with outliers at values above 200.

### 1.10.2 Scatterplot of Airbnb Listings Density versus Airbnb Listings Count

```{r}
ggplot(data=mpsz3414, 
       aes(y = `Airbnb Count`, 
           x= as.numeric(`Airbnb Density`)))+
  geom_point(color="black") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
       x = "Airbnb density (per km sq)",
       y = "Airbnb count")
```

***Student Note***: There appears to be a positive correlation between pre-school count and pre-school density.

[**\~\~\~ End of Hands-on Exercise 1A \~\~\~**]{.smallcaps}
