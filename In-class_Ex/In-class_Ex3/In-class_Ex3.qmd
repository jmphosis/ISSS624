---
title: "In-class Exercise 3"
date: "2 December 2023"
date-modified: "last-modified" #allows for updating to the latest date
format: html
execute: 
  echo: true #shows the code
  eval: true #shows the outcomes of the code
  warning: false #does not show the warnings
editor: visual
background-color: lightgrey;
font-family:  Palatino Linotype;
---

# 16 Calibrating Spatial Interaction Models with R

## 16.1 Overview

Spatial Interaction Models (SIMs) are mathematical models for estimating flows between spatial entities developed by Alan Wilson in the late 1960s and early 1970, with considerable uptake and refinement for transport modelling since then Boyce and Williams (2015).

There are four main types of traditional SIMs (Wilson 1971):

-   Unconstrained

-   Production-constrained

-   Attraction-constrained

-   Doubly-constrained

Ordinary least square (OLS), log-normal, Poisson and negative binomial (NB) regression methods have been used extensively to calibrate OD flow models by processing flow data as different types of dependent variables. In this chapter, you will gain hands-on experiences on using appropriate R packages to calibrate SIM by using there four regression methods.

***Note***: Calibration is the process of adjusting parameters in the model to try and get the estimates to agree with the observed data as much as possible. Adjusting the parameters is the sort of iterative process that computers are particularly good at and the goodness-of-fit statistics can be used to indicate when the optimum solution is found. Historically this process required a researcher with the requisite programming skills to write a computer algorithm to iteratively adjust each parameter, check the goodness-of-fit, and then start all over again until the goodness-of-fit statistic was maximised/minimised. (Adam Dennett, 2018)

## 16.2 The Case Study and Data

In this exercise, we are going to calibrate SIM to determine factors affecting the public bus passenger flows during the morning peak in Singapore.

## 16.3 Getting Started

For the purpose of this exercise, four r packages will be used. They are:

-   **sf** for importing, integrating, processing and transforming geospatial data.

-   **tidyverse** for importing, integrating, wrangling and visualising data.

-   **tmap** for creating thematic maps.

-   **sp** handles spatial data (efficient in terms of computation).

-   **performance** provides utilities for computing measures to assess model quality,

-   **reshape2** handles matrix format (predecessor of tidyr).

-   **ggpubr** for publication ready plots.

```{r}
pacman::p_load(tmap, sf, sp, DT,
               performance, reshape2,
               ggpubr, tidyverse)
```

## 16.4 The Data

This exercise is a continuation of **Chapter 15: Processing and Visualising Flow Data** and the following data will be used:

-   *od_data.rds*, weekday morning peak passenger flows at planning subzone level.

-   *mpsz.rds*, URA Master Plan 2019 Planning Subzone boundary in simple feature tibble data frame format.

Beside these two data sets, an additional attribute data file called pop.csv will be provided.

## 16.5 Computing Distance Matrix

In spatial interaction, a distance matrix is a table that shows the distance between pairs of locations. For example, in the table below we can see an Euclidean distance of 3926.0025 between MESZ01 and RVSZ05, of 3939.1079 between MESZ01 and SRSZ01, and so on. By definition, an location\'s distance from itself, which is shown in the main diagonal of the table, is 0.

In this section, we will compute a distance matrix by using URA Master Plan 2019 Planning Subzone boundary in which you saved as an rds file called *mpsz*.

First, let us import *mpsz.rds* into R environemnt by using the code chunk below. This is a sf tibble dataframe object class.

```{r}
mpsz = read_rds("data/rds/mpsz.rds")
mpsz
```

### 16.5.1 Converting from sf data.table to SpatialPolygonsDataFrame

There are at least two ways to compute the required distance matrix. One is based on sf and the other is based on sp. Past experience shown that computing distance matrix by using sf function took relatively longer time that sp method especially the data set is large. In view of this, sp method is used in the code chunks below.

First `as.Spatial()` will be used to convert *mpsz* from sf tibble data frame to SpatialPolygonsDataFrame of sp object as shown in the code chunk below.

> ***Student Note***: For SpatialPolygonsDataFrame, in order to select a variable within a dataframe within the object, we will need to use something like mpsz\@data\$var_name.

```{r}
mpsz_sp = as(mpsz, "Spatial")
mpsz_sp
```

### 16.5.2 Computing the Distance Matrix

Next, `spDists()` of **sp** package will be used to compute the Euclidean distance between the centroids of the planning subzones.

> ***Student Note***: Using centroid-to-centroid distance is a simplification and may not always capture the full complexity of spatial relationships. Calculating the distance between centroids is computationally less intensive compared to more detailed spatial analyses.

Notice that the output *dist* is a matrix object class of R. Also notice that the column heanders and row headers are not labeled with the planning subzone codes.

> ***Student Note***: If longlat = TRUE, longitude and latitude are used to calculate the distance.
>
> dist is a matrix 332 by 332 (from mpsz 332 observations).

```{r}
dist = spDists(mpsz_sp, 
                longlat = FALSE)
head(dist, n=c(10, 10))
```

### 16.5.3 Labelling Column and Row Headers of a Distance Matrix

First, a list sorted according to the the distance matrix by planning sub-zone code is created.

```{r}
sz_names = mpsz$SUBZONE_C
```

Next, the `SUBZONE_C` is attached to row and column for distance matrix matching ahead

```{r}
colnames(dist) = paste0(sz_names)
rownames(dist) = paste0(sz_names)
```

### 16.5.4 Pivoting Distance Value by SUBZONE_C

Next, we will pivot the distance matrix into a long table by using the row and column subzone codes as show in the code chunk below.

Notice that the within zone distance is 0.

> ***Student Note***: Do not use code to sort the data, otherwise the sequence will be messed up.

```{r}
distPair = melt(dist) %>%
  rename(dist = value)
head(distPair, 10)
```

### 16.5.5 Updating Intra-zonal Distances

In this section, we are going to append a constant value to replace the intra-zonal distance of 0.

First, we will select and find out the minimum value of the distance by using `summary()`.

```{r}
distPair %>%
  filter(dist > 0) %>%
  summary()
```

Next, a constant distance value of 50m is added into intra-zones distance.

```{r}
distPair$dist = ifelse(distPair$dist == 0,
                        50, distPair$dist)
```

The code chunk below will be used to check the result data.frame.

```{r}
distPair %>%
  summary()
```

The code chunk below is used to rename the origin and destination fields.

```{r}
distPair = distPair %>%
  rename(orig = Var1,
         dest = Var2)
```

Lastly, the code chunk below is used to save the dataframe for future use.

```{r}
write_rds(distPair, "data/rds/distPair.rds") 
```

## 16.6 Preparing Flow Data

The code chunk below is used import *od_data* save in Chapter 15 into R environment.

```{r}
od_data = read_rds("data/rds/od_data.rds")
```

Next, we will compute the total passenger trip between and within planning subzones by using the code chunk below. The output is all *flow_data*.

Use the code chunk below to display flow_data dataframe.

```{r}
flow_data = od_data %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>% 
  summarize(TRIPS = sum(MORNING_PEAK)) 

head(flow_data, 10)
```

### 16.6.1 Separating Intra-flow from Passenger Volume df

Code chunk below is used to add three new fields in `flow_data` dataframe.

```{r}
flow_data$FlowNoIntra = ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 
  0, flow_data$TRIPS)
flow_data$offset = ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 
  0.000001, 1)
```

### 16.6.2 Combining Passenger Volume Data with Distance Value

Before we can join *flow_data* and *distPair*, we need to convert data value type of *ORIGIN_SZ* and *DESTIN_SZ* fields of flow_data dataframe into factor data type.

```{r}
flow_data$ORIGIN_SZ = as.factor(flow_data$ORIGIN_SZ)
flow_data$DESTIN_SZ = as.factor(flow_data$DESTIN_SZ)
```

Now, `left_join()` of **dplyr** will be used to *flow_data* dataframe and *distPair* dataframe. The output is called *flow_data1*.

```{r}
flow_data1 = flow_data %>%
  left_join (distPair,
             by = c("ORIGIN_SZ" = "orig",
                    "DESTIN_SZ" = "dest"))
```

## 16.7 Preparing Origin and Destination Attributes

### 16.7.1 Importing Population Data

```{r}
pop = read_csv("data/aspatial/pop.csv")
```

### 16.7.2 Geospatial Data Wrangling

```{r}
pop = pop %>%
  left_join(mpsz,
            by = c("PA" = "PLN_AREA_N",
                   "SZ" = "SUBZONE_N")) %>%
  select(1:6) %>%
  rename(SZ_NAME = SZ,
         SZ = SUBZONE_C)
```

### 16.7.3 Preparing Origin Attribute

```{r}
flow_data1 = flow_data1 %>%
  left_join(pop,
            by = c(ORIGIN_SZ = "SZ")) %>%
  rename(ORIGIN_AGE7_12 = AGE7_12,
         ORIGIN_AGE13_24 = AGE13_24,
         ORIGIN_AGE25_64 = AGE25_64) %>%
  select(-c(PA, SZ_NAME))
```

### 16.7.4 Preparing Destination Attribute

```{r}
flow_data1 = flow_data1 %>%
  left_join(pop,
            by = c(DESTIN_SZ = "SZ")) %>%
  rename(DESTIN_AGE7_12 = AGE7_12,
         DESTIN_AGE13_24 = AGE13_24,
         DESTIN_AGE25_64 = AGE25_64) %>%
  select(-c(PA, SZ_NAME))
```

We will called the output data file *SIM_data*. it is in rds data file format.

```{r}
write_rds(flow_data1, "data/rds/SIM_data")
```

## 16.8 Calibrating Spatial Interaction Models

In this section, we will calibrate Spatial Interaction Models by using Poisson Regression method.

### 16.8.1 Importing the Modelling Data

Firstly, let us import the modelling data by using the code chunk below.

```{r}
SIM_data = read_rds("data/rds/SIM_data.rds")
```

### 16.8.2 Visualising the Dependent Variable

Firstly, let us plot the distribution of the dependent variable (i.e. TRIPS) by using histogram method by using the code chunk below.

Notice that the distribution is highly skewed and not resemble bell shape or also known as normal distribution.

```{r}
ggplot(data = SIM_data,
       aes(x = TRIPS)) +
  geom_histogram()
```

Next, let us visualise the relation between the dependent variable and one of the key independent variable in Spatial Interaction Model, namely distance.

Notice that their relationship hardly resemble linear relationship.

```{r}
ggplot(data = SIM_data,
       aes(x = dist,
           y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)
```

On the other hand, if we plot the scatter plot by using the log transformed version of both variables, we can see that their relationship is more resemble linear relationship.

```{r}
ggplot(data = SIM_data,
       aes(x = log(dist),
           y = log(TRIPS))) +
  geom_point() +
  geom_smooth(method = lm)
```

### 16.8.3 Checking for Variables with Zero Values

Since Poisson Regression is based of log and log 0 is undefined, it is important for us to ensure that no 0 values in the explanatory variables.

In the code chunk below, summary() of Base R is used to compute the summary statistics of all variables in *SIM_data* data frame.

```{r}
summary(SIM_data)
```

The print report above reveals that variables ORIGIN_AGE7_12, ORIGIN_AGE13_24, ORIGIN_AGE25_64,DESTIN_AGE7_12, DESTIN_AGE13_24, DESTIN_AGE25_64 consist of 0 values.

In view of this, code chunk below will be used to replace zero values with 0.99.

```{r}
SIM_data$DESTIN_AGE7_12 = ifelse(
  SIM_data$DESTIN_AGE7_12 == 0,
  0.99, SIM_data$DESTIN_AGE7_12)
SIM_data$DESTIN_AGE13_24 = ifelse(
  SIM_data$DESTIN_AGE13_24 == 0,
  0.99, SIM_data$DESTIN_AGE13_24)
SIM_data$DESTIN_AGE25_64 = ifelse(
  SIM_data$DESTIN_AGE25_64 == 0,
  0.99, SIM_data$DESTIN_AGE25_64)
SIM_data$ORIGIN_AGE7_12 = ifelse(
  SIM_data$ORIGIN_AGE7_12 == 0,
  0.99, SIM_data$ORIGIN_AGE7_12)
SIM_data$ORIGIN_AGE13_24 = ifelse(
  SIM_data$ORIGIN_AGE13_24 == 0,
  0.99, SIM_data$ORIGIN_AGE13_24)
SIM_data$ORIGIN_AGE25_64 = ifelse(
  SIM_data$ORIGIN_AGE25_64 == 0,
  0.99, SIM_data$ORIGIN_AGE25_64)

summary(SIM_data)
```

### 16.8.4 Unconstrained Spatial Interaction Model

In this section, you will learn how to calibrate an unconstrained spatial interaction model by using `glm()` of Base Stats. The explanatory variables are origin population by different age cohort, destination population by different age cohort (i.e. *ORIGIN_AGE25_64*) and distance between origin and destination in km (i.e. *dist*).

The code chunk used to calibrate to model is shown below:

```{r}
uncSIM = glm(formula = TRIPS ~ 
                log(ORIGIN_AGE25_64) + 
                log(DESTIN_AGE25_64) +
                log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)
uncSIM
```

### 16.8.5 R-squared Function

In order to measure how much variation of the trips can be accounted by the model we will write a function to calculate R-Squared value as shown below.

```{r}
CalcRSquared = function(observed,estimated){
  r = cor(observed,estimated)
  R2 = r^2
  R2
}
```

Next, we will compute the R-squared of the unconstrained SIM by using the code chunk below.

```{r}
CalcRSquared(uncSIM$data$TRIPS, uncSIM$fitted.values)
```

```{r}
r2_mcfadden(uncSIM)
```

### 16.8.6 Origin (Production) Constrained Spatial Interaction Model

In this section, we will fit an origin constrained SIM by using the code chunk below.

```{r}
orcSIM = glm(formula = TRIPS ~ 
                 ORIGIN_SZ +
                 log(DESTIN_AGE25_64) +
                 log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)
summary(orcSIM)
```

We can examine how the constraints hold for destinations this time.

```{r}
CalcRSquared(orcSIM$data$TRIPS, orcSIM$fitted.values)
```

### 16.8.7 Destination Constrained Spatial Interaction Model

In this section, we will fit a destination constrained SIM by using the code chunk below.

```{r}
decSIM = glm(formula = TRIPS ~ 
                DESTIN_SZ + 
                log(ORIGIN_AGE25_64) + 
                log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)
summary(decSIM)
```

We can examine how the constraints hold for destinations this time.

```{r}
CalcRSquared(decSIM$data$TRIPS, decSIM$fitted.values)
```

### 16.8.8 Doubly Constrained Spatial Interaction Model

In this section, we will fit a doubly constrained SIM by using the code chunk below.

```{r}
dbcSIM = glm(formula = TRIPS ~ 
                ORIGIN_SZ + 
                DESTIN_SZ + 
                log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)
summary(dbcSIM)
```

We can examine how the constraints hold for destinations this time.

Notice that there is a relatively greater improvement in the R\^2 value.

```{r}
CalcRSquared(dbcSIM$data$TRIPS, dbcSIM$fitted.values)
```

### 16.8.9 Model Comparison

Another useful model performance measure for continuous dependent variable is Root Mean Squared Error. In this sub-section, you will learn how to use `compare_performance()` of **performance** package

First of all, let us create a list called *model_list* by using the code chun below.

```{r}
model_list = list(unconstrained=uncSIM,
                   originConstrained=orcSIM,
                   destinationConstrained=decSIM,
                   doublyConstrained=dbcSIM)
```

Next, we will compute the RMSE of all the models in *model_list* file by using the code chunk below.

The print below reveals that doubly constrained SIM is the best model among all the four SIMs because it has the smallest RMSE value of 1487.111.

```{r}
compare_performance(model_list,
                    metrics = "RMSE")
```

### 16.8.10 Visualising Fitted Values

In this section, you will learn how to visualise the observed values and the fitted values.

Firstly we will extract the fitted values from each model by using the code chunk below.

```{r}
df = as.data.frame(uncSIM$fitted.values) %>%
  round(digits = 0)
```

Next, we will join the values to *SIM_data* data frame.

```{r}
SIM_data = SIM_data %>%
  cbind(df) %>%
  rename(uncTRIPS = "uncSIM$fitted.values")
```

Repeat the same step by for Origin Constrained SIM (i.e. orcSIM), Destination Constrained SIM (i.e. decSIM), and Doubly Constrained SIM (i.e. dbcSIM).

```{r}
df = as.data.frame(orcSIM$fitted.values) %>%
  round(digits = 0)

SIM_data = SIM_data %>%
  cbind(df) %>%
  rename(orcTRIPS = "orcSIM$fitted.values")

df = as.data.frame(decSIM$fitted.values) %>%
  round(digits = 0)

SIM_data = SIM_data %>%
  cbind(df) %>%
  rename(decTRIPS = "decSIM$fitted.values")

df = as.data.frame(dbcSIM$fitted.values) %>%
  round(digits = 0)

SIM_data = SIM_data %>%
  cbind(df) %>%
  rename(dbcTRIPS = "dbcSIM$fitted.values")

```

The plots are then visualised below:

```{r}
unc_p = ggplot(data = SIM_data,
                aes(x = uncTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)

orc_p = ggplot(data = SIM_data,
                aes(x = orcTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)

dec_p = ggplot(data = SIM_data,
                aes(x = decTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)

dbc_p = ggplot(data = SIM_data,
                aes(x = dbcTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)

ggarrange(unc_p, orc_p, dec_p, dbc_p,
          ncol = 2,
          nrow = 2)
```

[**\~\~\~ End of In-class Exercise 3 \~\~\~**]{.smallcaps}
