[
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models: A Case Study of Singapore Public Bus Commuter Flows",
    "section": "",
    "text": "Buses and the Mass Rapid Transit (MRT) system are the main modes of transport used by Singaporeans for their daily commutes. With an ever increasing population, the key challenge for public bus operators is balancing supply against demand by optimising its services, fleets, and manpower for different bus routes.\nHence, the identification and analysis of the movement patterns of public buses can provide insights on commuting in Singapore, allowing for the development of better urban management strategies by both the public and private sectors.\n\n\n\nThe study area is Singapore, a city-state in Southeast Asia, with a total land area of about 730 square kilometres and a total population of 5.92 million (as at June 2023).\nCommuting by public bus is the most common mode of transport in Singapore, with an average daily ridership of about 3.461 million in 2022, according to the LTA. The public bus fleet is approximately 5,800, plying more than 300 routes and 5,000 bus stops.\n\n\n\nIn this take-home exercise, I aim to answer the following analytical questions:\n\nIs the flow of public bus commuters evenly distributed geographically (between different origins and destinations)?\nWhich type of spatial interaction models is best suited for modelling public bus commuter flows?\nWhat factors affect the public bus commuter flows?\nBased on the analysis, what are the insights that can be derived for urban transport planning?\n\n\n\n\nHence, the objectives of this take-home exercise are to:\n\nConduct practice research on public bus commuter flows to show how disparate publicly available data can be integrated, analysed, and modelled to support policy making; and\nApply techniques in geospatial data science and analysis (GDSA) and demonstrate the potential value of GDSA in integrating publicly available data from multiple sources for building spatial interaction models to determine the factors affecting urban mobility patterns of public bus commuters.\n\nThe detailed tasks are:\n\nGeospatial Data Science:\n\nDerive an analytical hexagon data of 375m (i.e., perpendicular distance between the centre of the hexagon and its edges) to represent the traffic analysis zone (TAZ).\nConstruct an origin-destination (OD) matrix of commuter flows aggregated at the analytics hexagon level for one of the following time intervals by integrating Passenger Volume by Origin Destination Bus Stops and Bus Stop Location from the LTA DataMall:\n\n\n\nPeak Hour Period\nBus Tap On Time\n\n\n\n\nWeekday Morning Peak\n6am to 9am\n\n\nWeekday Afternoon Peak\n5pm to 8pm\n\n\nWeekend/Holiday Morning Peak\n11am to 2pm\n\n\nWeekend/Holiday Evening Peak\n4pm to 7pm\n\n\n\nNote: The selected peak hour period for this take-home exercise is the Weekday Morning Peak.\nDisplay the OD flows of the passenger trips using the appropriate geovisualisation methods.\nDescribe the spatial patterns revealed by the geovisualisation.\nAssemble at least three propulsive and three attractiveness variables using the aspatial and geospatial data from publicly available sources.\nCompute a distance matrix using the analytical hexagon data derived.\n\nSpatial Interaction Modelling (SIM):\n\nCalibrate spatial interactive models to determine factors affecting urban commuting flows during the selected time interval.\nPresent the modelling results using the appropriate geovisualisation and graphical visualisation methods.\nDescribe the modelling results based on the spatial interaction model output tables, maps, and data visualisations prepared."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#introduction",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#introduction",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models: A Case Study of Singapore Public Bus Commuter Flows",
    "section": "",
    "text": "Buses and the Mass Rapid Transit (MRT) system are the main modes of transport used by Singaporeans for their daily commutes. With an ever increasing population, the key challenge for public bus operators is balancing supply against demand by optimising its services, fleets, and manpower for different bus routes.\nHence, the identification and analysis of the movement patterns of public buses can provide insights on commuting in Singapore, allowing for the development of better urban management strategies by both the public and private sectors.\n\n\n\nThe study area is Singapore, a city-state in Southeast Asia, with a total land area of about 730 square kilometres and a total population of 5.92 million (as at June 2023).\nCommuting by public bus is the most common mode of transport in Singapore, with an average daily ridership of about 3.461 million in 2022, according to the LTA. The public bus fleet is approximately 5,800, plying more than 300 routes and 5,000 bus stops.\n\n\n\nIn this take-home exercise, I aim to answer the following analytical questions:\n\nIs the flow of public bus commuters evenly distributed geographically (between different origins and destinations)?\nWhich type of spatial interaction models is best suited for modelling public bus commuter flows?\nWhat factors affect the public bus commuter flows?\nBased on the analysis, what are the insights that can be derived for urban transport planning?\n\n\n\n\nHence, the objectives of this take-home exercise are to:\n\nConduct practice research on public bus commuter flows to show how disparate publicly available data can be integrated, analysed, and modelled to support policy making; and\nApply techniques in geospatial data science and analysis (GDSA) and demonstrate the potential value of GDSA in integrating publicly available data from multiple sources for building spatial interaction models to determine the factors affecting urban mobility patterns of public bus commuters.\n\nThe detailed tasks are:\n\nGeospatial Data Science:\n\nDerive an analytical hexagon data of 375m (i.e., perpendicular distance between the centre of the hexagon and its edges) to represent the traffic analysis zone (TAZ).\nConstruct an origin-destination (OD) matrix of commuter flows aggregated at the analytics hexagon level for one of the following time intervals by integrating Passenger Volume by Origin Destination Bus Stops and Bus Stop Location from the LTA DataMall:\n\n\n\nPeak Hour Period\nBus Tap On Time\n\n\n\n\nWeekday Morning Peak\n6am to 9am\n\n\nWeekday Afternoon Peak\n5pm to 8pm\n\n\nWeekend/Holiday Morning Peak\n11am to 2pm\n\n\nWeekend/Holiday Evening Peak\n4pm to 7pm\n\n\n\nNote: The selected peak hour period for this take-home exercise is the Weekday Morning Peak.\nDisplay the OD flows of the passenger trips using the appropriate geovisualisation methods.\nDescribe the spatial patterns revealed by the geovisualisation.\nAssemble at least three propulsive and three attractiveness variables using the aspatial and geospatial data from publicly available sources.\nCompute a distance matrix using the analytical hexagon data derived.\n\nSpatial Interaction Modelling (SIM):\n\nCalibrate spatial interactive models to determine factors affecting urban commuting flows during the selected time interval.\nPresent the modelling results using the appropriate geovisualisation and graphical visualisation methods.\nDescribe the modelling results based on the spatial interaction model output tables, maps, and data visualisations prepared."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#getting-started",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models: A Case Study of Singapore Public Bus Commuter Flows",
    "section": "2 Getting Started",
    "text": "2 Getting Started\n\n2.1 Setting the Analytical Tools\nThe R packages used in this hands-on exercise are:\n\nsf for importing, managing, and processing geospatial data;\nsp for handling spatial data in computationally efficient ways;\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data;\nfuture.apply for applying functions to elements in parallel;\nrvest for handling information from web pages;\nhttr for making HTTP requests;\ntmap for thematic mapping;\nreshape2 for handling matrix format;\nDT a wrapper of the JavaScript Library ‘DataTables’ for creating interactive and dynamic data tables;\nstplanr for working with spatial data related to transportation and urban planning;\nperformance for the assessment of regression models performance; and\nggpubr for creating customised and annotated ggplot2 plots for better visualisation.\n\nThey are loaded into the R environment:\n\npacman::p_load(sf, sp, tidyverse, future.apply, \n               rvest, httr, tmap, \n               reshape2, stplanr,\n               performance, ggpubr)\n\n\n\n2.2 Data Sources\nThe Land Transport Authority (LTA) studies commuter movements using the data collected from the use of smart cards and the Global Positioning System (GPS) devices on public buses. The LTA DataMall shares some of these data publicly, which helps to speed up the development of practical solutions to enhance reliability and efficiency of the transport system by other stakeholders, such as the private sector and individuals.\nThe data sets used in this take-home exercise are:\nOpen Government Data\n\nPassenger Volume by Origin Destination Bus Stops from the LTA DataMall for August 2023 in csv format. It contains data on the number of trips by weekdays and weekends from origin to destination bus stops.\nBus Stop Location from the LTA DataMall that was last updated in July 2023. This is a geospatial data set in ESRI shapefile format. It contains point representations that indicate the position of each bus stop where buses stop to pick up or drop off passengers.\nMRT/LRT Station Exits Location by the LTA from Data.gov.sg that was last updated in July 2019. This is a geospatial data set in GEOJSON format. It contains point representations that indicate the position of each MRT/LRT exit.\nHDB Property Information by the Housing Development Board from Data.gov.sg that was last updated in October 2023. The data set is in csv format and has been geocoded with the longitude and latitude of the addresses.\nSchool Directory and Information by the Ministry of Education that was last updated in March 2021. The data set is in csv format and contains the list of school names.\nMaster Plan 2019 Subzone Boundary by the Urban Redevelopment Authority (URA) from Data.gov.sg. This is a geospatial data set in ESRI shapefile format. It contains polygon representations that outline the URA’s planning subzones.\n\nSpecially Collected Data\n\nLocations of Activities for the following six categories:\n\nBusinesses,\nEntertainment,\nFood & Beverage,\nFinancial Services,\nLeisure & Recreation, and\nRetail.\n\n\nThe data sets are placed under two sub-folders:\n\ngeospatial (Bus Stop Location, MRT/LRT Exits Location, HDB Property Information, School Directory and Information, Master Plan Subzone Boundary, and Locations of Activities), and\naspatial (Passenger Volume by Origin Destination Bus Stops, and Property Information).\n\nThese two sub-folders are within the data folder of my Take-home_Ex2 folder."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#data-wrangling---bus-passengers-flow",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#data-wrangling---bus-passengers-flow",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models: A Case Study of Singapore Public Bus Commuter Flows",
    "section": "3 Data Wrangling - Bus Passengers Flow",
    "text": "3 Data Wrangling - Bus Passengers Flow\n\n3.1 Preparing the Geospatial Data - Bus Stop Locations\n\n3.1.1 Importing and Transforming Data\nThe Bus Stop Location shapefile is imported using st_read() in the sf package. The output is a simple feature data frame, busstop, which is in the SVY21 projected coordinates systems. It has 5,161 observations and 4 fields, including the geometry points indicating the bus stop locations.\n\nbusstop = st_read(dsn = \"data/geospatial\",\n                  layer = \"BusStop\")\n\nReading layer `BusStop' from data source \n  `C:\\jmphosis\\ISSS624\\Take-home_Ex\\Take-home_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\nglimpse(busstop)\n\nRows: 5,161\nColumns: 4\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\nThe st_crs() function in the sf package is then used to check the coordinate system of the busstop simple feature data frame. The output shows that although it is projected in SVY21, the EPSG is indicated as 9001, which is incorrect given that it should be 3414 instead.\n\nst_crs(busstop)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"WGS 84\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nTo correct the EPSG, the st_set_crs() function in the sf package is applied. A check to confirm that the projection transformation has been applied is then made using the st_crs() function again.\n\nbusstop = st_set_crs(busstop, 3414)  \n\nst_crs(busstop)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n3.1.2 Checking for Duplicates and Missing Values\nThe data sets from the LTA DataMall are expected to be relatively clean. Nevertheless, due diligence checks for duplicates and missing values are still made to confirm the assumptions.\nThe duplicated() function in the R base package and st_geometry() function in the sf package are used to check for duplicates in busstop. The output returned Bus Stop No. 96319 at row 3265. On closer inspection, rows 3264 and 3265 are found to be duplicates. Hence, the row 3264 is removed using the filter() and row_number() functions in the dplyr package. The same check is conducted again to confirm that there are no more duplicates.\n\nbusstop[duplicated(st_geometry(busstop)), ]\n\nSimple feature collection with 1 feature and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 42187.23 ymin: 34995.78 xmax: 42187.23 ymax: 34995.78\nProjected CRS: SVY21 / Singapore TM\n     BUS_STOP_N BUS_ROOF_N        LOC_DESC                  geometry\n3265      96319        NIL YUSEN LOGISTICS POINT (42187.23 34995.78)\n\n\n\nbusstop = busstop %&gt;%   \n  filter(row_number() != 3264)    \n\nbusstop[duplicated(st_geometry(busstop)), ]\n\nSimple feature collection with 0 features and 3 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: SVY21 / Singapore TM\n[1] BUS_STOP_N BUS_ROOF_N LOC_DESC   geometry  \n&lt;0 rows&gt; (or 0-length row.names)\n\n\nThe colSums() function in R base package is used to check for missing values in busstop. There are no missing values in the simple feature data frame for all columns except “LOC_DESC”. On closer inspection, there are several bus stops without location descriptions but they are retained because they have “BUS_STOP_N” values.\n\ncolSums(is.na(busstop))\n\nBUS_STOP_N BUS_ROOF_N   LOC_DESC   geometry \n         0          0          8          0 \n\n\n\n\n3.1.3 Selecting Columns and Removing Bus Stops in Malaysia\nThe select() function in dplyr package is used to drop the “BUS_ROOF_N” column in busstop since it is not required. As there are bus stops situated in Johor Bahru, Malaysia, they are removed using the filter() function in the dplyr package.\n\nbusstop = busstop %&gt;%   \n  select(-BUS_ROOF_N) %&gt;%   \n  filter(LOC_DESC != \"JOHOR BAHRU CHECKPT\" & LOC_DESC != \"LARKIN TER\")\n\nThe “BUS_STOP_N” is then converted to integer data type to facilitate matching later on.\n\nbusstop$BUS_STOP_N = as.integer(busstop$BUS_STOP_N)\n\nThere are a total of 5,149 bus stops. The output is saved in rds file format and imported into the R environment.\n\n\nShow the code\nwrite_rds(busstop, \"data/rds/busstop.rds\")  \nbusstop = read_rds(\"data/rds/busstop.rds\")\n\n\n\n\n3.1.4 Visualising Bus Stops Locations\nA quick visualisation of the locations of the bus stops is made using functions in the tmap package. To do so, the 2019 URA Master Plan Subzone boundary shapefile is imported into the R environment as a simple feature data frame, mpsz, using the st_read() and st_transform() functions in the sf package.\nBased on the visualisation, there is a lack of bus stops in the centre of Singapore. This is because it is the central water catchment area.\n\nmpsz = st_read(dsn = \"data/geospatial\",\n               layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\jmphosis\\ISSS624\\Take-home_Ex\\Take-home_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\ntmap_mode(\"plot\")\ntm_shape(mpsz) +\n  tm_polygons() +\ntm_shape(busstop) +\n  tm_dots(size = 0.1,\n          alpha = 0.1)\n\n\n\n\n\n\n\n3.2 Preparing the Aspatial Data - Bus Passenger Volume\n\n3.2.1 Importing and Exploring Data\nThe csv file for bus passenger volume is imported using the read.csv() function in the readr package. The output is a data frame, odbus.\n\nodbus = read.csv(\"data/aspatial/origin_destination_bus_202308.csv\")\n\nThe n_distinct() function in the dplyr package and the sapply() function in the R base package are applied to uncover the following observations regarding odbus:\n\nOverall, there are 5,709,512 rows (observations) and 7 columns.\nThe “YEAR_MONTH” column has one unique value, reflecting the observations from August 2023. Hence, it may be dropped.\nThe “DAY_TYPE” column has two unique values, reflecting observations from weekday or weekends/holiday.\nThe “TIME_PER_HOUR” has 24 unique values, reflecting that the observations are broken down into each of the 24 hours of a day.\nThe “PT_TYPE” column refers only has the value of “BUS” as the public transport type. Hence, it may be dropped.\nThe “ORIGIN_PT_CODE” and “DESTINATION_PT_CODE” columns have 5,067 and 5,071 unique values respectively, reflecting the number of bus stops with bus routes passing through them.\nThe “TOTAL_TRIPS” column contains values that reflect the number of passengers for each unique type of day, origin bus stop, destination bus stop. The minimum value is 1, i.e., there are no rows with zero values.\n\n\nsapply(odbus, function(x) n_distinct(x))\n\n         YEAR_MONTH            DAY_TYPE       TIME_PER_HOUR             PT_TYPE \n                  1                   2                  24                   1 \n     ORIGIN_PT_CODE DESTINATION_PT_CODE         TOTAL_TRIPS \n               5067                5071                3544 \n\n\n\n\n3.2.2 Checking for Duplicates and Missing Values\nThe data sets from the LTA DataMall are expected to be relatively clean. Nevertheless, due diligence checks for duplicates and missing values are still made to confirm the assumptions.\nThe duplicated() function in the R base package is used to check for duplicates in odbus. There are no duplicates in the tibble data frame.\n\nodbus[duplicated(odbus), ]\n\n[1] YEAR_MONTH          DAY_TYPE            TIME_PER_HOUR      \n[4] PT_TYPE             ORIGIN_PT_CODE      DESTINATION_PT_CODE\n[7] TOTAL_TRIPS        \n&lt;0 rows&gt; (or 0-length row.names)\n\n\nThe colSums() function in the R base package is used to check for missing values in odbus. There are no missing values in the tibble data frame, odbus.\n\ncolSums(is.na(odbus))\n\n         YEAR_MONTH            DAY_TYPE       TIME_PER_HOUR             PT_TYPE \n                  0                   0                   0                   0 \n     ORIGIN_PT_CODE DESTINATION_PT_CODE         TOTAL_TRIPS \n                  0                   0                   0 \n\n\n\n\n3.2.3 Filtering for Peak Hours Period and Selecting Columns\nThe filter() and select() functions in the dplyr package are used to filter for the rows with the “DAY_TYPE” (i.e., weekdays) and “TIME_PER_HOUR” (i.e., 6-9am) that are studied in this take-home exercise, and select the columns required (i.e., “ORIGIN_PT_CODE”, “DESTINATION_PT_CODE”, and “TOTAL_TRIPS”). The group_by() and summarise() functions in the dplyr package and the sum() function in the R base package are used to total up the number of bus passenger trips by unique origin-destination combinations (241,503 pairs).\n\nodbus = odbus %&gt;%      \n  filter(DAY_TYPE == \"WEEKDAY\" & TIME_PER_HOUR %in% c(6, 7, 8, 9)) %&gt;%\n  select(ORIGIN_PT_CODE, DESTINATION_PT_CODE, TOTAL_TRIPS) %&gt;%\n  group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\nThe “ORIGIN_PT_CODE” and “DESTINATION_PT_CODE” are converted to integer data type to facilitate matching later on.\n\nodbus$ORIGIN_PT_CODE = as.integer(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE = as.integer(odbus$DESTINATION_PT_CODE)\n\nThe output is saved in rds file format and imported into the R environment.\n\n\nCode\nwrite_rds(odbus, \"data/rds/odbus.rds\") \nodbus = read_rds(\"data/rds/odbus.rds\")\n\n\n\n\n\n3.3 Creating Analytical Hexagon Data\nSpatial grids are commonly used in spatial analysis. Regularly shaped grids may comprise of equilateral triangles, squares, or hexagons. The hexagon is the most circular-shaped polygon that can tessellate to form an evenly spaced grid, providing a low perimeter-to-area ratio that reduces sampling bias due to edge effects of the grid shape.\nA more circular polygon means that points near the border are closer to the centroid. Hexagons are often used when the analysis involves aspects of connectivity or movement paths. Locating neighbours is simpler using a hexagon grid because the contact edge or length is consistent on each side, resulting in equidistant centroids for each neighbour.\nA spatial hexagon grid, hgrid, for the study area of Singapore based on the busstop simple feature data frame is created using the st_make_grid() and st_sf() functions in the sf package, the mutate() function in the dplyr package, and the lengths() function in the R base package. A total of 2,299 hexagons are formed in the grid.\n\ngeo = st_make_grid(busstop, c(750, 750), what = \"polygons\", square = FALSE)\n\nhgrid = st_sf(geo) %&gt;%\n  mutate(grid_id = 1:length(lengths(geo)))\n\nrm(geo)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#geospatial-data-science",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#geospatial-data-science",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models: A Case Study of Singapore Public Bus Commuter Flows",
    "section": "4 Geospatial Data Science",
    "text": "4 Geospatial Data Science\n\n4.1 Computing Origin-Destination Matrix of Bus Commuter Flows\nThe “grid_id” of the hgrid simple feature data frame are populated into the busstop simple feature data frame using the st_intersection() function in the sf package. The output contains the geometry spatial objects that intersect between hgrid and busstop. Since one contains points, and the other contains polygons, the output will contain points (as the points are the common overlapping spatial objects).\nThe select() function in the dplyr package is then used to retain only the “BUS_STOP_N” and “grid_id” columns in the combined simple feature data frame, busstop_hgrid.\nThe st_drop_geometry() function is then used to remove the geometry column from busstop. The output is a data frame with only information of attributes.\n\nbusstop_hgrid = st_intersection(busstop, hgrid) %&gt;%\n  select(BUS_STOP_N, grid_id) %&gt;%\n  st_drop_geometry()\n\nThe output is saved in rds file format and imported into the R environment.\n\n\nCode\nwrite_rds(busstop_hgrid, \"data/rds/busstop_hgrid.rds\")\nbusstop_hgrid = read_rds(\"data/rds/busstop_hgrid.rds\")\n\n\nNext, the “grid_id” from the busstop_hgrid are matched to the odbus tibble data frame’s origin bus stops, “ORIGIN_PT_CODE”. The columns are renamed accordingly.\n\nodbus = left_join(odbus, busstop_hgrid,\n                       by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_GRID = grid_id)\n\nA check for duplicates is conducted. Since 754 records are found to be duplicates, they are removed and a confirmatory check is conducted.\n\nduplicate = odbus %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()  \n\nduplicate\n\n# A tibble: 754 × 4\n   ORIGIN_BS DESTINATION_PT_CODE TRIPS ORIGIN_GRID\n       &lt;int&gt;               &lt;int&gt; &lt;int&gt;       &lt;int&gt;\n 1     11009                1411     7         993\n 2     11009                1411     7         993\n 3     11009                1421    17         993\n 4     11009                1421    17         993\n 5     11009                1511    18         993\n 6     11009                1511    18         993\n 7     11009                1521     6         993\n 8     11009                1521     6         993\n 9     11009                1611     2         993\n10     11009                1611     2         993\n# ℹ 744 more rows\n\n\n\nodbus = unique(odbus)\n\nduplicate = odbus %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nduplicate\n\n# A tibble: 0 × 4\n# ℹ 4 variables: ORIGIN_BS &lt;int&gt;, DESTINATION_PT_CODE &lt;int&gt;, TRIPS &lt;int&gt;,\n#   ORIGIN_GRID &lt;int&gt;\n\n\nThe “grid_id” from the busstop_hgrid is then matched to the odbus tibble data frame’s destination bus stops, “DESTINATION_PT_CODE”. The columns are renamed accordingly.\n\nodbus = left_join(odbus, busstop_hgrid,\n                       by = c(\"DESTINATION_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(DESTIN_BS = DESTINATION_PT_CODE,\n         DESTIN_GRID = grid_id)\n\nAnother check for duplicates is then conducted. Since 828 records are found to be duplicates, they are removed and a confirmatory check is conducted.\n\nduplicate = odbus %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()  \n\nduplicate\n\n# A tibble: 828 × 5\n   ORIGIN_BS DESTIN_BS TRIPS ORIGIN_GRID DESTIN_GRID\n       &lt;int&gt;     &lt;int&gt; &lt;int&gt;       &lt;int&gt;       &lt;int&gt;\n 1      1013     51071     1        1334        1262\n 2      1013     51071     1        1334        1262\n 3      1112     51071    65        1354        1262\n 4      1112     51071    65        1354        1262\n 5      1121     51071     3        1392        1262\n 6      1121     51071     3        1392        1262\n 7      1239     51071    22        1392        1262\n 8      1239     51071    22        1392        1262\n 9      1329     51071    30        1411        1262\n10      1329     51071    30        1411        1262\n# ℹ 818 more rows\n\n\n\nodbus = unique(odbus)\n\nduplicate = odbus %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nduplicate\n\n# A tibble: 0 × 5\n# ℹ 5 variables: ORIGIN_BS &lt;int&gt;, DESTIN_BS &lt;int&gt;, TRIPS &lt;int&gt;,\n#   ORIGIN_GRID &lt;int&gt;, DESTIN_GRID &lt;int&gt;\n\n\nThe data frame is then tidied up, saved in rds format, and imported into the R environment.\n\n\nShow the code\nrm(duplicate)\n\nodbus = odbus %&gt;%   \n  drop_na() %&gt;%\n  group_by(ORIGIN_GRID, DESTIN_GRID) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\nwrite_rds(odbus, \"data/rds/odbus.rds\")  \nodbus = read_rds(\"data/rds/odbus.rds\")\n\n\n\n\n4.2 Visualising Origin-Destination Bus Commuter Flows\n\n4.2.1 Separating Intra- and Inter-zonal Flows\nThe intra- and inter-zonal flows are separated into two data sets, odbus_intraflow and odbus_interflow, respectively. There 633 observations of intra-zonal flows, and 64,888 observations of inter-zonal flows.\n\nodbus_interflow = odbus[odbus$ORIGIN_GRID!=odbus$DESTIN_GRID,]\nodbus_intraflow = odbus[odbus$ORIGIN_GRID==odbus$DESTIN_GRID,]\n\n\n\n4.2.2 Creating Inter-zonal Desire Lines\nThe od2line() function in the stplanr package is used to create the desire lines. The function is specifically used to convert origin-destination flow data into lines, typically referred to as desire lines, that represent the flow of movement between different zones or locations.\n\nThe “flow” argument represents the origin-destination flow data. It could be a data frame or a matrix containing information about the number of trips (flow) between pairs of zones or locations.\nThe “zone” argument represents the spatial information of the zones. It is usually a spatial dataset (e.g., points, polygons) that defines the zones involved in the OD flow.\nThe “zone_code” argument specifies the column in the zone data set that contains the zone or location codes.\n\nThe output is a simple feature data frame, interflowLine, representing the desire lines - stored as linestrings under the geometry column. There are 64,888 desire lines.\n\ninterflowLine = od2line(flow = odbus_interflow,                      \n                   zones = hgrid,                     \n                   zone_code = \"grid_id\")\n\n\n\n4.2.3 Visualising and Deriving Insights on Origin-Destination Bus Commuter Flows\nThe inner_join() and select() functions in the dplyr package, and the unique() function in the R base package are used to join the earlier prepared hgrid and busstop_hgrid to produce a grid of hexagons with bus stops, busstop_hgrid_geo. There are 832 hexagons in the grid.\n\nbusstop_hgrid_geo = inner_join(hgrid, busstop_hgrid) %&gt;%\n  select(grid_id) %&gt;%\n  unique()\n\nThe inter-zonal desire lines are then visualised using functions in the tmap package.\n\nThe “lwd” argument means that the values in “TRIPS” are used to determine the line width.\nThe “scale” argument serve as thresholds that define the ranges of quantiles (six in total, corresponding to “n” argument). The first and last values mean:\n\n0.1: Lines with values up to 0.1 (10% quantile).\n10: Lines with values between 7 and 10 (90-100% quantile).\n\n\n\ntmap_mode(\"plot\")\n\ntm_shape(busstop_hgrid_geo) +\n  tm_polygons(alpha = 0.1) +\ninterflowLine %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"TRIPS\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3)\n\n\n\n\nThe map above is not particularly useful given that it shows all the desire lines for the morning peak hour period. Due to overcrowding of the lines, no clear pattern is observed.\nIn order to gather better insights, a quick summary of the distribution of the desire lines by the number of trips is obtained using the summary() function in the R base package. We can see that the number of trips is highly skewed given that the median and mean values are 38.0 and 379.8 respectively.\n\nsummary(interflowLine$TRIPS)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    1.0     7.0    38.0   379.8   179.0 79622.0 \n\n\nThe cut-off value of 179.0 (third quartile) is used to map the desire lines.\n\ntmap_mode(\"plot\")\n\ntm_shape(busstop_hgrid_geo) +\n  tm_polygons(alpha = 0.1) +\ninterflowLine %&gt;%\n  filter(TRIPS &gt; 179.0) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"TRIPS\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3)\n\n\n\n\nA slightly improved map was obtained, revealing that the west and northwest regions do not have high flows relative to the rest of Singapore. Nevertheless, the hexagons with Joo Koon MRT and Boon Lay MRT emerge as the hubs in the west region.\nAnother round of filtering is done to visualise the desire lines with at least 5,000 trips.\n\ntmap_mode(\"plot\")\n\ntm_shape(busstop_hgrid_geo) +\n  tm_polygons(alpha = 0.1) +\ninterflowLine %&gt;%\n  filter(TRIPS &gt;= 5000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"TRIPS\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3)\n\n\n\n\nBased on the map above, a few regional hubs (not exhaustive) are identified:\n\nWest: Boon Lay MRT, Choa Chu Kang MRT;\nNorth: Woodlands MRT, Yishun MRT, Khatib MRT;\nCentral: Ang Mo Kio MRT, Toa Payoh MRT, Serangoon MRT; and\nEast: Bedok MRT, Pasir Ris MRT, Tampines MRT.\n\nThe lack of high bus commuter flows in the city area indicates that travel to/fro the city are likely to be effectively serviced by the MRT system during the morning peak hour period.\nInterestingly, the bus commuter flows within the towns of Punggol and Sengkang are not as high despite having a young adult population. This is likely because the LRT systems in the two towns (instead of buses) are used to commute to the MRT hubs.\nAlso, the “longest” desire line by Eucliean distance (not commuting distance) is between Woodlands and Tampines. This indicates that buses are likely to be preferred to MRT when travelling between the north and east regions in the morning peak hour period. This is likely because commuting by MRT is deemed less convenient as it requires commuters to make several transfers (e.g., at Bishan and Paya Lebar or MacPherson MRT interchanges). This may be one of the underlying considerations for the development of the Cross-Island MRT line that would link Ang Mo Kio MRT (on the North-South line) to Pasir Ris MRT (on the East-West line) to improve public transport commuting for those travelling between the north and east regions of Singapore.\nA final round of filtering is done to visualise the desire lines with at least 30,000 trips to identify areas with potential overcrowding during the morning peak hour period.\n\nThe argument “set.zoom.limits = c(11, 16)” allows for the zoom out limit to show the entire Singapore, and the zoom in limit to show the street names.\n\n\ntmap_mode(\"view\")\n\ntm_shape(busstop_hgrid_geo) +\n  tm_polygons(alpha = 0.1) +\ninterflowLine %&gt;%\n  filter(TRIPS &gt;= 30000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"TRIPS\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3) +\n  tm_view(set.zoom.limits = c(11, 16))\n\n\n\n\n\n\nBased on the map above, some of the problem areas that are especially overcrowded during the morning peak hour period are the hexagons with the following MRT stations:\n\nWest: Boon Lay MRT, Lakeside MRT, Choa Chu Kang MRT;\nNorth: Woodlands MRT, Kranji MRT, Yishun MRT;\nCentral: Ang Mo Kio MRT, Bishan MRT, Serangoon MRT; and\nEast: Pasir Ris MRT, Bedok MRT.\n\nIn particular, the large flows to/fro Kranji MRT is likely due to bus commuters from Johor Bahru, Malaysia who enter into Singapore during the morning peak hour period and commute to Kranji MRT in order to take the MRT to their workplaces or schools.\nThere are two important implications based on the observations above:\n\nBus deployments in these overcrowded areas during the morning peak hour periods would need to be maintained at high levels to service the large numbers of commuters.\nFor commuter flows between hexagons that are next to each other, the Government may wish to study if the provision of more sheltered walkways or cycling paths may encourage commuters to walk or cycle to the MRT stations instead of relying on buses for the short commutes.\n\nTo better visualise the direction of flows (origin to destination), the destination hexagons are plotted as dots on the map, with the intensity of the colour reflecting the number of trips. The st_centroid() function in the sf package is used to find the centroids of the hexagons to form the dots on the map.\n\ndestin_dots = odbus_interflow %&gt;% \n  filter(TRIPS &gt;= 30000) %&gt;%\n  select(DESTIN_GRID, TRIPS) %&gt;%\n  left_join(., busstop_hgrid_geo, by = c(\"DESTIN_GRID\" = \"grid_id\")) %&gt;%\n  st_as_sf(.) %&gt;%\n  st_centroid(.)\n\ntmap_mode(\"view\")\n\ntm_shape(busstop_hgrid_geo) +\n  tm_polygons(alpha = 0.1) +\ntm_shape(destin_dots) +\n  tm_dots(size = 0.5,\n          col = \"TRIPS\",\n          style = \"jenks\",\n          alpha = 0.3) +\ninterflowLine %&gt;%\n  filter(TRIPS &gt;= 30000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"TRIPS\",\n           style = \"jenks\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3) +\n  tm_view(set.zoom.limits = c(11, 16))\n\n\n\n\n\n\nBased on the map above, the earlier observations that the MRT hubs are attractions (destinations) for the bus commuters are confirmed.\n\n\n\n4.3 Visualising Intra-zonal Bus Commuter Flows\nThe intra-zonal bus commuter flows is visualised to gather insights on short-distance bus commuting trips during the morning peak hour period. The left_join() function in the dplyr package is used to join the odbus_intraflow tibble data frame with the busstop_hgrid_geo simple feature data frame. The output is a tibble data frame, intraflowPt, which matches the grid IDs to the hexagons. The select() and rename() functions in the dplyr package are used to clean up the output.\n\nintraflowPt = left_join(odbus_intraflow, busstop_hgrid_geo,\n                        by = c(\"ORIGIN_GRID\" = \"grid_id\"))\n\n\nintraflowPt = intraflowPt %&gt;%\n  select(-DESTIN_GRID) %&gt;%\n  rename(GRID = ORIGIN_GRID)\n\nThe ouput is then converted to a simple feature tibble data frame using the st_as_sf() function in the sf package.\n\nintraflowPt = st_as_sf(intraflowPt)\n\nThe number of trips for each intra-zonal flow is then visualised using functions in the tmap package.\n\nThe argument style = “jenks” produces a map based on natural breaks, which allows differences between hexagons to be seen at a glance.\nThe intensity of the colour corresponds to the number of trips, i.e., dark red means higher number of trips.\n\n\ntmap_mode(\"view\")\n\ntm_shape(busstop_hgrid_geo) +\n  tm_polygons(alpha = 0.1) +\ntm_shape(intraflowPt) +\n  tm_fill(col = \"TRIPS\",\n          palette = \"Reds\",\n           style = \"jenks\",\n           alpha = 0.3) +\n  tm_view(set.zoom.limits = c(11, 16))\n\n\n\n\n\n\nBased on the map above, one hexagon stood out as the only one in the last category (between 22,925 to 63,219 trips): Woodlands Avenue 6/Admiralty MRT. Similar to the suggestion for commuter flows between hexagons that are next to each other, the Government may wish to study if the Woodlands Avenue 6/Admiralty MRT hexagon should have more sheltered walkways or cycling paths to encourage people to walk or cycle within the hexagon instead of relying on buses for the short commutes.\nThere are other hexagons with large numbers of trips, in the category of between 12,005 to 22,925 trips, that may also be considered for the above-mentioned suggestion:\n\nWest: Bukit Batok MRT (22,102 trips);\nNorth/North-east: Woodlands MRT (20,038 trips), Punggol MRT (20,877 trips); and\nCentral: Tiong Bahru MRT (22,925 trips)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#computing-distance-matrix-using-analytical-hexagon-data",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#computing-distance-matrix-using-analytical-hexagon-data",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models: A Case Study of Singapore Public Bus Commuter Flows",
    "section": "5 Computing Distance Matrix Using Analytical Hexagon Data",
    "text": "5 Computing Distance Matrix Using Analytical Hexagon Data\nThe earlier prepared simple feature data frame, busstop_hgrid_geo, containing the “grid_id” and geometry feature of the hexagons with bus stops, is used to compute the distance matrix at the analytical hexagon level.\n\n5.1 Converting from Simple Feature Data Frame to Spatial Polygons Data Frame\nThere are at least two ways to compute the required distance matrix. One is based on sf and the other is based on sp. Past experience shown that computing distance matrix by using sf function took a relatively longer time than the sp method, especially when the data set is large. In view of this, the sp method is used in the code chunks below.\nThe as() function with “Class” argument set as “Spatial” is used to convert busstop_hgrid_geo from simple feature data frame to SpatialPolygonsDataFrame of sp object, busstop_hgrid_geosp.\n\nbusstop_hgrid_geosp = as(busstop_hgrid_geo, \"Spatial\")   \nbusstop_hgrid_geosp\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 832 \nextent      : 3595.122, 48595.12, 26049.09, 50297.8  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 1\nnames       : grid_id \nmin values  :      21 \nmax values  :    2267 \n\n\n\n\n5.2 Computing the Distance Matrix\nThe spDists() function in the sp package is used to compute the Euclidean distance between the centroids of the hexagons.\n\nThe argument “longlat = FALSE” means that longitude and latitude are not used to calculate the distance.\n\n\nNote: Calculating the distance between centroids is computationally less intensive compared to more detailed spatial analyses. However, using centroid-to-centroid distance is a simplification and may not always capture the full complexity of spatial relationships.\n\nThe output, dist, is a matrix object (832 by 832), and the column and row headers are not labelled.\n\ndist = spDists(busstop_hgrid_geosp,                \n               longlat = FALSE)   \n\nhead(dist, n=c(10, 10))\n\n          [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     [,7]     [,8]\n [1,]    0.000  750.000 3269.174 1500.000 2704.163 3968.627 1299.038 2250.000\n [2,]  750.000    0.000 2598.076  750.000 1984.313 3269.174  750.000 1500.000\n [3,] 3269.174 2598.076    0.000 1984.313  750.000  750.000 2704.163 1500.000\n [4,] 1500.000  750.000 1984.313    0.000 1299.038 2598.076  750.000  750.000\n [5,] 2704.163 1984.313  750.000 1299.038    0.000 1299.038 1984.313  750.000\n [6,] 3968.627 3269.174  750.000 2598.076 1299.038    0.000 3269.174 1984.313\n [7,] 1299.038  750.000 2704.163  750.000 1984.313 3269.174    0.000 1299.038\n [8,] 2250.000 1500.000 1500.000  750.000  750.000 1984.313 1299.038    0.000\n [9,] 3436.932 2704.163  750.000 1984.313  750.000  750.000 2598.076 1299.038\n[10,] 4683.748 3968.627 1500.000 3269.174 1984.313  750.000 3897.114 2598.076\n          [,9]    [,10]\n [1,] 3436.932 4683.748\n [2,] 2704.163 3968.627\n [3,]  750.000 1500.000\n [4,] 1984.313 3269.174\n [5,]  750.000 1984.313\n [6,]  750.000  750.000\n [7,] 2598.076 3897.114\n [8,] 1299.038 2598.076\n [9,]    0.000 1299.038\n[10,] 1299.038    0.000\n\n\n\n\n5.3 Labelling Column and Row Headers of a Distance Matrix\nA list sorted according to the the distance matrix by hexagon is created to hold the “grid_id”.\n\ngridID = busstop_hgrid_geo$grid_id\n\nNext, the “grid_id” are attached to row and column to facilitate distance matrix matching later on.\n\ncolnames(dist) = paste0(gridID)  \nrownames(dist) = paste0(gridID)\n\n\n\n5.4 Pivoting Distance Value by Grid ID\nThe distance matrix is then pivoted into a data frame, distPair, using the row and column “grid_id” using the melt() function in the reshape2 package. Within the same zone (i.e., when Var1 and Var2 are the same) distance is 0.\n\ndistPair = melt(dist) %&gt;%\n  rename(dist = value,\n         orig = Var1,\n         dest = Var2)   \n\nhead(distPair, 10)\n\n   orig dest     dist\n1    21   21    0.000\n2    40   21  750.000\n3    42   21 3269.174\n4    60   21 1500.000\n5    61   21 2704.163\n6    62   21 3968.627\n7    78   21 1299.038\n8    79   21 2250.000\n9    80   21 3436.932\n10   81   21 4683.748\n\n\n\n\n5.5 Updating Intra-zonal Distances\nA constant value is then used to replace the intra-zonal distance of 0.\nThe minimum value of the inter-zonal distance is derived using the filter() function in the dplyr package and the summary() function in the R base package. The minimum inter-zonal distance is 750m. Hence, by quick estimation, an intra-zonal distance proxy value of less than half of 750 would be appropriate.\n\ndistPair %&gt;%   \n  filter(dist &gt; 0) %&gt;%   \n  summary()\n\n      orig             dest             dist      \n Min.   :  21.0   Min.   :  21.0   Min.   :  750  \n 1st Qu.: 789.8   1st Qu.: 789.8   1st Qu.: 8352  \n Median :1199.5   Median :1199.5   Median :13269  \n Mean   :1149.4   Mean   :1149.4   Mean   :14141  \n 3rd Qu.:1528.2   3rd Qu.:1528.2   3rd Qu.:18929  \n Max.   :2267.0   Max.   :2267.0   Max.   :44680  \n\n\nHence, a constant distance value of 100m is added as the intra-zonal distance. The resulting data frame is checked using the summary() function in the R base package, showing that the minimum distance is now 100m.\n\ndistPair$dist = ifelse(distPair$dist == 0,\n                       100, distPair$dist)    \n\nsummary(distPair)\n\n      orig             dest             dist      \n Min.   :  21.0   Min.   :  21.0   Min.   :  100  \n 1st Qu.: 789.8   1st Qu.: 789.8   1st Qu.: 8250  \n Median :1199.5   Median :1199.5   Median :13269  \n Mean   :1149.4   Mean   :1149.4   Mean   :14124  \n 3rd Qu.:1528.2   3rd Qu.:1528.2   3rd Qu.:18929  \n Max.   :2267.0   Max.   :2267.0   Max.   :44680  \n\n\nThe output is saved in rds file format and imported into the R environment.\n\n\nShow the code\nwrite_rds(distPair, \"data/rds/distPair.rds\")    \ndistPair = read_rds(\"data/rds/distPair.rds\")\n\n\n\n\n5.6 Distinguishing Intra-zonal and Inter-zonal Flows\nA new field, “FlowNoIntra”, is created to differentiate between inter- and intra-zonal flows in the odbus tibble data frame containing the origin-destination flows. The value of 0 denotes intra-zonal flows, while the value of the number of trips denotes inter-zonal flows.\nAnother new field, “offset”, is created to hold the value of 0.000001 if there was intra-zonal flow, or hold the value of 1 if there was no inter-zonal flow.\n\nodbus$FlowNoIntra = ifelse(odbus$ORIGIN_GRID == odbus$DESTIN_GRID,\n                           0, odbus$TRIPS)    \n\nodbus$offset = ifelse(odbus$ORIGIN_GRID == odbus$DESTIN_GRID,\n                      0.000001, 1)\n\n\n\n5.7 Combining Passenger Volume Data with Distance Values\nThe left_join() function in the dplyr package is used to combine the odbus tibble data frame and the distPair data frame. The output is odbus_dist, a tibble data frame.\n\nodbus_dist = odbus %&gt;%   \n  left_join(distPair,             \n            by = c(\"ORIGIN_GRID\" = \"orig\",\n                   \"DESTIN_GRID\" = \"dest\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#preparing-propulsive-and-attractiveness-variables",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#preparing-propulsive-and-attractiveness-variables",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models: A Case Study of Singapore Public Bus Commuter Flows",
    "section": "6 Preparing Propulsive and Attractiveness Variables",
    "text": "6 Preparing Propulsive and Attractiveness Variables\nUsing the earlier prepared busstop simple feature data frame, the number of bus stops in each hexagon is counted using the lengths() function in the R base package and the st_intersects() function in the sf package. The output is a data frame, vars_attract, with the first attractiveness variable - number of bus stops. It is also a propulsive variable.\n\nvars_attract = busstop_hgrid_geo  \n\nvars_attract$`BUSSTOPS` = lengths(st_intersects(busstop_hgrid_geo, busstop))\n\n\n6.1 Preparing the Geospatial Data - MRT/LRT Exits Locations\n\n6.1.1 Importing and Transforming Data\nThe MRT/LRT Exits Location geojson file are imported using st_read() in the sf package. The output is a simple feature data frame, mrtlrtexits, which is in WGS84 geographic coordinate system. It has 563 observations and 3 fields, including the geometry points indicating the MRT/LRT exits locations.\n\nmrtlrtexits = st_read(\"data/geospatial/LTAMRTStationExitGEOJSON.geojson\")\n\nReading layer `LTAMRTStationExitGEOJSON' from data source \n  `C:\\jmphosis\\ISSS624\\Take-home_Ex\\Take-home_Ex2\\data\\geospatial\\LTAMRTStationExitGEOJSON.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 563 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6368 ymin: 1.264972 xmax: 103.9893 ymax: 1.449157\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nglimpse(mrtlrtexits)\n\nRows: 563\nColumns: 3\n$ Name        &lt;chr&gt; \"kml_1\", \"kml_2\", \"kml_3\", \"kml_4\", \"kml_5\", \"kml_6\", \"kml…\n$ Description &lt;chr&gt; \"&lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Att…\n$ geometry    &lt;POINT [°]&gt; POINT Z (103.9091 1.334922 0), POINT Z (103.9335 1.3…\n\n\nThe st_crs() function in the sf package is then used to check the coordinate system of the mrtlrtexits simple feature data frame. The output shows that it is projected in WGS84, with EPSG as 4326, which is incorrect.\n\nst_crs(mrtlrtexits)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nThe st_transform() function in the sf package is used to transform the geographic coordinate system to the projected coordinate system. This facilitates analysis based on measurements such as distance and area. A check to confirm that the projection transformation has been applied is then made using the st_crs() function again.\n\nmrtlrtexits = st_transform(mrtlrtexits,\n                           crs = 3414)  \n\nst_crs(mrtlrtexits)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n6.1.2 Checking for Duplicates and Missing Values\nThe data sets from the LTA DataMall are expected to be relatively clean. Nevertheless, due diligence checks for duplicates and missing values are still made to confirm the assumptions.\nThe duplicated() function in the R base package and st_geometry() function in the sf package are used to check for duplicates in mrtlrtexits. There are no duplicates in the simple feature data frame.\n\nmrtlrtexits[duplicated(st_geometry(mrtlrtexits)), ]\n\nSimple feature collection with 0 features and 2 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: SVY21 / Singapore TM\n[1] Name        Description geometry   \n&lt;0 rows&gt; (or 0-length row.names)\n\n\nThe colSums() function in the R base package is used to check for missing values in mrtlrtexits. There are no missing values in the simple feature data frame.\n\ncolSums(is.na(mrtlrtexits))\n\n       Name Description    geometry \n          0           0           0 \n\n\n\n\n6.1.3 Extracting Attributes and Selecting Columns\nThe future_lapply() function in the future.apply package, the slice(), pull() and as.tibble() functions in the dplyr package, the read_html(), html_node() and html_table() functions in the rvest package, and the pivot_wider() function in the tidyr package are used to extract the attributes (e.g., station name, exit code) from the “Description” column of mrtlrtexits.\nThe bind_cols(), mutate() and select() functions in the dplyr package are then used to bind the required attributes to the mrtlrtexits, combine the station name and exit code, and select the required column.\n\nattributes = future_lapply(X = 1:nrow(mrtlrtexits), \n                           FUN = function(x) {\n                             mrtlrtexits %&gt;% \n                               slice(x) %&gt;%\n                               pull(Description) %&gt;%\n                               read_html() %&gt;%\n                               html_node(\"table\") %&gt;%\n                               html_table(header = TRUE, trim = TRUE, dec = \".\", fill = TRUE) %&gt;% as_tibble(.name_repair = ~ make.names(c(\"Attribute\", \"Value\"))) %&gt;% pivot_wider(names_from = Attribute, values_from = Value)})\n\nmrtlrtexits = \n  mrtlrtexits %&gt;%\n  bind_cols(bind_rows(attributes)) %&gt;%\n  mutate(STATION_EXIT = paste(STATION_NA, EXIT_CODE, sep = \" \")) %&gt;%\n  select(STATION_EXIT)\n\nrm(attributes)\n\nThe output is saved in rds file format and imported into the R environment.\n\n\nShow the code\nwrite_rds(mrtlrtexits, \"data/rds/mrtlrtexits.rds\")  \nmrtlrtexits = read_rds(\"data/rds/mrtlrtexits.rds\")\n\n\n\n\n6.1.4 Performing Point in Hexagon Grid Count\nThe number of MRT/LRT exits in each hexagon is then counted using the lengths() function in the R base package and the st_intersects() function in the sf package. The output is a data frame, vars_attract, with the second attractiveness variable - number of MRT/LRT exits. It is also a propulsive variable.\n\nvars_attract$`MRTLRTEXITS` = lengths(st_intersects(busstop_hgrid_geo, mrtlrtexits))\n\n\n\n6.1.5 Visualising MRT/LRT Exits Locations\nA quick visualisation of the locations of the MRT/LRT exits is made using functions in the tmap package. Based on the visualisation, a rough outline of the various MRT lines in Singapore can be seen based on the exits.\n\ntmap_mode(\"plot\") \ntm_shape(mpsz) +   \n  tm_polygons() + \ntm_shape(mrtlrtexits) +   \n  tm_dots(size = 0.3,\n          alpha = 0.3)\n\n\n\n\n\n\n\n6.2 Preparing the Geospatial Data - Business Activities Locations\n\n6.2.1 Importing Data and Selecting Columns\nSince this take-home exercise is concerned with the morning peak hour period, the Business geospatial data set is imported the using st_read() function in the sf package. There are 6,550 features and 4 fields, including the geometry points indicating business activities locations. The select() function in the dplyr package is then used to select only “POI_NAME”, since the street numbers and street names are not required. The output is a simple feature data frame, biz.\nThe other types of activities (e.g., entertainment, leisure, F&B) are not selected since they are not expected to be relevant for studying the morning peak hour period.\n\nbiz = st_read(dsn = \"data/geospatial\",\n              layer = \"Business\") %&gt;%\n  select(POI_NAME)\n\nReading layer `Business' from data source \n  `C:\\jmphosis\\ISSS624\\Take-home_Ex\\Take-home_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 6550 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3669.148 ymin: 25408.41 xmax: 47034.83 ymax: 50148.54\nProjected CRS: SVY21 / Singapore TM\n\n\n\n\n6.2.2 Checking for Duplicates and Missing Values\nThe duplicated() function in the R base package is used to check for duplicates in biz. The output returned Keppel Distripark at row 5019. On closer inspection, rows 3886 and 5019 are found to be duplicates. Hence, the row 5019 is removed using the filter() and row_number() functions in the dplyr package. The same check is conducted again to confirm that there are no more duplicates.\n\nbiz[duplicated(biz), ]\n\nSimple feature collection with 1 feature and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 27455.94 ymin: 28233.69 xmax: 27455.94 ymax: 28233.69\nProjected CRS: SVY21 / Singapore TM\n              POI_NAME                  geometry\n5019 KEPPEL DISTRIPARK POINT (27455.94 28233.69)\n\n\n\nbiz = biz %&gt;%   \n  filter(row_number() != 5019)    \n\nbiz[duplicated(biz), ]\n\nSimple feature collection with 0 features and 1 field\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: SVY21 / Singapore TM\n[1] POI_NAME geometry\n&lt;0 rows&gt; (or 0-length row.names)\n\n\nThe colSums() function in the R base package is used to check for missing values in biz. There are no missing values in the simple feature data frame.\n\ncolSums(is.na(biz))\n\nPOI_NAME geometry \n       0        0 \n\n\nThe output is saved in rds file format and imported into the R environment.\n\n\nShow the code\nwrite_rds(biz, \"data/rds/biz.rds\")   \nbiz = read_rds(\"data/rds/biz.rds\")\n\n\n\n\n6.2.3 Performing Point in Hexagon Grid Count\nThe number of business activities locations in each hexagon is then counted using the lengths() function in the R base package and the st_intersects() function in the sf package. The output is a simple feature data frame, vars_attract, with the third attractiveness variable - number of business activities locations.\n\nvars_attract$`BIZ` = lengths(st_intersects(busstop_hgrid_geo, biz))\n\n\n\n6.2.4 Visualising Business Activities Locations\nA quick visualisation of the locations of the business activities is made using functions in the tmap package. Based on the visualisation, business activities are mainly concentrated in the west and central regions of Singapore.\n\ntmap_mode(\"plot\") \ntm_shape(mpsz) +   \n  tm_polygons() + \ntm_shape(biz) +   \n  tm_dots(size = 0.1,\n          alpha = 0.1)\n\n\n\n\n\n\n\n6.3 Preparing the Aspatial Data - Schools\n\n6.3.1 Importing and Geocoding with OneMap API\nGeocoding is the process of taking an aspatial description of a location, such as an address or postcode, and returning geographic coordinates, frequently latitude-longitude pair, to identify a location on the Earth’s surface. The Singapore Land Authority (SLA) supports an online geocoding service called OneMap API. The Search API looks up the address data or 6-digit postal code for an entered value. It then returns both latitude, longitude and x,y coordinates of the searched location.\nThe School Directory and Information csv is imported using the read_csv() function in the readr package. A collection of http call functions in the httr package is then used to pass the individual records to the geocoding server on OneMap. The output is two tibble data frames - found and not_found. The found data frame contains all records that are geocoded correctly, and the not_found data frame contains postal code(s) that fail to be geocoded.\nThe found data table is joined with the original csv data table using a unique identifier (i.e. “POSTAL”) that is common to both data tables. The output data table is saved as a csv file, found.\n\nurl = \"https://www.onemap.gov.sg/api/common/elastic/search\"\n\ncsv = read_csv(\"data/aspatial/Generalinformationofschools.csv\")\npostcodes = csv$`postal_code`\n\nfound = data.frame()\nnot_found = data.frame()\n\nfor(postcode in postcodes){\n  query = list('searchVal' = postcode, 'returnGeom' = 'Y', 'getAddrDetails' = 'Y', 'pageNum' = '1')\n  res = GET(url, query = query)\n  if((content(res)$found)!=0){\n  found = rbind(found, data.frame(content(res))[4:13])\n  } else{\n  not_found = data.frame(postcode)\n  }\n}\n\nNext, both the found and not_found data frames are combined into a tibble data frame, merged, and saved as a csv file, schools.\n\nmerged = merge(csv, found, by.x = 'postal_code', by.y = 'results.POSTAL', all = TRUE)\nwrite.csv(merged, file = 'data/aspatial/schools.csv')\n\nThe schools.csv is then imported into the R environment and the tibble data frame, schools, is tidied up using the rename() and select() functions in the dplyr package.\n\nschools = read_csv('data/aspatial/schools.csv') %&gt;%\n  rename(LATITUDE = \"results.LATITUDE\", \n         LONGITUDE = \"results.LONGITUDE\",\n         POSTAL_CODE = \"postal_code\",\n         SCHOOL = \"school_name\") %&gt;%\n  select(POSTAL_CODE, SCHOOL, LATITUDE, LONGITUDE)\n\nUsing Google Maps, the latitude and longitude of the school (Zhenghua Secondary School) that was not geocoded successfully are 1.389279 and 103.7651 respectively. This is manually coded into the schools data frame using the mutate() function in the dplyr package.\n\nschools = schools %&gt;%\n  mutate(LATITUDE = ifelse(SCHOOL == \"ZHENGHUA SECONDARY SCHOOL\", 1.389279, LATITUDE)) %&gt;%\n  mutate(LONGITUDE = ifelse(SCHOOL == \"ZHENGHUA SECONDARY SCHOOL\", 103.7651, LONGITUDE))\n\nrm(csv, query, res, found, not_found, merged)\n\n\n\n6.3.2 Converting into Simple Feature Tibble Data Frame\nNext, the schools tibble data frame is converted into a simple feature tibble data frame using the st_as_sf() function in the sf package and the values in the latitude and longitude fields. The st_transform() function in the sf package is then used to set the CRS value as 3414.\n\nschools = st_as_sf(schools,\n                      coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                      crs = 4326) %&gt;%\n  st_transform(crs = 3414)\n\nThe output is saved in rds file format and imported into the R environment.\n\n\nShow the code\nwrite_rds(schools, \"data/rds/schools.rds\")    \nschools = read_rds(\"data/rds/schools.rds\")\n\n\n\n\n6.3.3 Performing Point in Hexagon Grid Count\nThe number of schools in each hexagon is then counted using the lengths() function in the R base package and the st_intersects() function in the sf package. The output is a simple feature data frame, vars_attract, with the fourth attractiveness variable - number of schools.\n\nvars_attract$`SCHOOLS` = lengths(st_intersects(busstop_hgrid_geo, schools))\n\nThe geometry feature of vars_attract is then dropped, giving a data frame.\n\nvars_attract = vars_attract %&gt;% \n  st_drop_geometry()\n\nThe output is saved in rds file format and imported into the R environment.\n\n\nShow the code\nwrite_rds(vars_attract, \"data/rds/vars_attract.rds\")     \nvars_attract = read_rds(\"data/rds/vars_attract.rds\")\n\n\n\n\n6.3.4 Visualising Schools Locations\nA quick visualisation of the locations of the schools is made using functions in the tmap package. Based on the visualisation, schools are generally well distributed across Singapore. There is some degree of concentration in the northeast region, given that these are newer towns, with relatively younger populations.\n\ntmap_mode(\"plot\") \ntm_shape(mpsz) +   \n  tm_polygons() + \ntm_shape(schools) +   \n  tm_dots(size = 0.3,\n          alpha = 0.5)\n\n\n\n\n\n\n\n6.4 Preparing the Aspatial Data - Residents\n\n6.4.1 Importing and Geocoding with OneMap API\nSimilar to the schools dataset, geocoding is conducted for the residential dataset. The HDB Property Information csv is imported using the read_csv() function in the readr package.\n\nresidents = read_csv(\"data/aspatial/HDBPropertyInformation.csv\")\n\nA collection of http call functions in the httr package is then used to pass the individual records to the geocoding server on OneMap.\n\ngeocode = function(blk_no, street) {\n  url = \"https://www.onemap.gov.sg/api/common/elastic/search\"\n  address = paste(blk_no, street, sep = \" \")\n  query = list(\"searchVal\" = address, \n                \"returnGeom\" = \"Y\",\n                \"getAddrDetails\" = \"N\",\n                \"pageNum\" = \"1\")\n  \n  res = GET(url, query = query)\n  restext = content(res, as=\"text\")\n  \n  output = fromJSON(restext) %&gt;%\n    as.data.frame %&gt;%\n    select(results.LATITUDE, results.LONGITUDE)\n\n  return(output)\n}\n\n\nresidents$LATITUDE = 0\nresidents$LONGITUDE = 0\n\nfor (i in 0:nrow(residents)+1){\n  temp_output = geocode(residents[i, 1], residents[i, 2])\n  \n  residents$LATITUDE[i] = temp_output$results.LATITUDE\n  residents$LONGITUDE[i] = temp_output$results.LONGITUDE\n}\n\nThe output is a tibble data frame, residents, and is saved as a csv file.\n\nwrite.csv(residents, file = 'data/aspatial/residents.csv')\n\nThe residents.csv is then imported into the R environment and the tibble data frame, residents, is tidied up using the rename() and select() functions in the dplyr package.\n\nresidents = read_csv('data/aspatial/residents.csv')\n\n\nresidents = residents %&gt;%\n  select(\"blk_no\", \"street\", \"total_dwelling_units\", \"1room_sold\", \"2room_sold\", \n  \"3room_sold\", \"4room_sold\", \"5room_sold\", \"exec_sold\", \n  \"multigen_sold\", \"studio_apartment_sold\", \"1room_rental\",\n  \"2room_rental\", \"3room_rental\", \"other_room_rental\", \n  \"LATITUDE\", \"LONGITUDE\") %&gt;%\n  rename(HDB1R = \"1room_sold\",\n         HDB2R = \"2room_sold\",\n         HDB3R = \"3room_sold\",\n         HDB4R = \"4room_sold\",\n         HDB5R = \"5room_sold\",\n         HDBExec = \"exec_sold\",\n         HDBMultiGen = \"multigen_sold\",\n         HDBStudio = \"studio_apartment_sold\",\n         HDB1R_rent = \"1room_rental\",\n         HDB2R_rent = \"2room_rental\",\n         HDB3R_rent = \"3room_rental\",\n         HDBOther_rent = \"other_room_rental\")\n\n\n\n6.4.2 Deriving Number of Residents for Different Types of HDB Units\nGiven that the number of household members for different types of HDB properties differ, the number of HDB units for each type is multiplied by the average household size for the specific type based on information from the Department of Statistics on Resident Households by Household Size, Annual.\n\nresidents = residents %&gt;%\n  mutate(HDB1R = (HDB1R)*2.05,\n         HDB2R = (HDB2R)*2.05,\n         HDB3R = (HDB3R)*2.46,\n         HDB4R = (HDB4R)*3.15,\n         HDB5R = (HDB5R)*3.56,\n         HDBExec = (HDBExec)*3.56,\n         HDBMultiGen = (HDBMultiGen)*3.56,\n         HDBStudio = (HDBStudio)*2.05,\n         HDB1R_rent = (HDB1R_rent)*2.05,\n         HDB2R_rent = (HDB2R_rent)*2.05,\n         HDB3R_rent = (HDB3R_rent)*2.46,\n         HDBOther_rent = (HDBOther_rent)*3.02)\n\nThe mutate() function in the dplyr package is then used to consolidate the various categories to obtain a smaller selection of five propulsive variables:\n\nNumber of dwelling units;\nNumber of residents in 1- or 2-room HDB units;\nNumber of residents in 3- or 4-room HDB units;\nNumber of residents in 5-room, executive or multi-generation HDB units; and\nNumber of residents in HDB rental units.\n\nThe relevant columns are selected using the select() function in the dplyr package.\n\nresidents = residents %&gt;%\n  mutate(HDB12R = HDB1R+HDB2R+HDBStudio,\n         HDB34R = HDB3R+HDB4R,\n         HDB5RMore = HDB5R+HDBExec+HDBMultiGen,\n         HDBRent = HDB1R_rent+HDB2R_rent+HDB3R_rent+HDBOther_rent) %&gt;%\n  select(blk_no, street, total_dwelling_units,\n         HDB12R, HDB34R, HDB5RMore, HDBRent,\n         LATITUDE, LONGITUDE)\n\nThe output is saved in rds file format and imported into the R environment.\n\nwrite_rds(residents, \"data/rds/residents.rds\")  \nresidents = read_rds(\"data/rds/residents.rds\")\n\n\n\n6.4.3 Converting into Simple Feature Tibble Data Frame\nNext, the residents tibble data frame is converted into a simple feature tibble data frame using the st_as_sf() function in the sf package and the values in the latitude and longitude fields. The st_transform() function in the sf package is then used to set the CRS value as 3414.\n\nresidents = st_as_sf(residents,\n                      coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                      crs = 4326) %&gt;%\n  st_transform(crs = 3414)\n\nThe residents simple feature tibble data frame is then matched to the “grid_id” in busstop_hgrid_geo using the st_intersection() function in the sf package. The output is a tibble data frame, residents_grid.\n\nresidents_grid = st_intersection(busstop_hgrid_geo, residents) %&gt;%\n  select(-c(...1, blk_no, street)) %&gt;%\n  st_drop_geometry() %&gt;%\n  group_by(grid_id) %&gt;%\n  summarise(DU = sum(total_dwelling_units),\n            HDB12R = sum(HDB12R),\n            HDB34R = sum(HDB34R),\n            HDB5RMore = sum(HDB5RMore),\n            HDBRent = sum(HDBRent))\n\n\n\n\n6.5 Preparing Origin and Destination Attributes\nThe origin attributes (i.e., number of residents of different groups) in the residents_grid data frame are then added to the odbus_dist tibble data frame by matching “ORIGIN_GRID” to “grid_id”. The output is a tibble data frame, SIM.\n\nSIM = odbus_dist %&gt;%\n  left_join(residents_grid,\n            by = c(ORIGIN_GRID = \"grid_id\"))\n\nThe origin attribute (i.e., number of bus stops) in the vars_attract data frame is then added to the odbus_dist tibble data frame by matching “ORIGIN_GRID” to “grid_id”.\n\nSIM = SIM %&gt;%\n  left_join(vars_attract %&gt;% select(grid_id, BUSSTOPS, MRTLRTEXITS),\n            by = c(ORIGIN_GRID = \"grid_id\")) %&gt;%\n  rename(o_BUSSTOPS = BUSSTOPS,\n         o_MRTLRTEXITS = MRTLRTEXITS)\n\nThe destination attributes (i.e., number of bus stops, MRT/LRT exits, number of business activities, and number of schools) in the vars_attract data frame are then added to the SIM tibble data frame by matching “DESTIN_GRID” to “grid_id”.\n\nSIM = SIM %&gt;%\n  left_join(vars_attract,\n            by = c(DESTIN_GRID = \"grid_id\")) %&gt;%\n  rename(d_BUSSTOPS = BUSSTOPS,\n         d_MRTLRTEXITS = MRTLRTEXITS)\n\nThe “ORIGIN_GRID” and “DESTIN_GRID” variables are converted to character data type.\n\nSIM$ORIGIN_GRID = as.character(SIM$ORIGIN_GRID)\nSIM$DESTIN_GRID = as.character(SIM$DESTIN_GRID)\n\nThe output is saved in rds file format and imported into the R environment.\n\n\nShow the code\nwrite_rds(SIM, \"data/rds/SIM.rds\")     \nSIM = read_rds(\"data/rds/SIM.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#spatial-interaction-modelling",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#spatial-interaction-modelling",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models: A Case Study of Singapore Public Bus Commuter Flows",
    "section": "7 Spatial Interaction Modelling",
    "text": "7 Spatial Interaction Modelling\nThe spatial interaction models (SIMs) are calibrated by applying the Poisson Regression methods on the SIM tibble data frame.\n\n7.1 Visualising the Dependent Variable\nThe distribution of the dependent variable (i.e. “TRIPS”) is plotted by using the histogram method. The histogram shows that the distribution is highly skewed and does not resemble normal distribution.\n\nggplot(data = SIM,\n       aes(x = TRIPS)) +\n  geom_histogram()\n\n\n\n\nThe relation between the dependent variable and one of the key independent variable in SIM, namely distance is then visualised using the scatterplot method. The scatterplot shows that their relationship does not appear to be a linear one.\n\nggplot(data = SIM,\n       aes(x = dist,\n           y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\nHowever, if the log transformed version of both variables are plotted, the result better resembles a linear relationship.\n\nggplot(data = SIM,\n       aes(x = log(dist),\n           y = log(TRIPS))) +   \n  geom_point() +   \n  geom_smooth(method = lm)\n\n\n\n\n\n\n7.2 Checking for Variables with Zero or Missing Values\nSince Poisson Regression is based on log transformation, and log 0 is undefined, it is important to ensure that there are no zero values in the explanatory variables.\nThe summary() function in the R base package reveals that all variables, except the number of bus stops in origins and destinations, have zero values.\n\nsummary(SIM)\n\n ORIGIN_GRID        DESTIN_GRID            TRIPS          FlowNoIntra     \n Length:65521       Length:65521       Min.   :    1.0   Min.   :    0.0  \n Class :character   Class :character   1st Qu.:    7.0   1st Qu.:    7.0  \n Mode  :character   Mode  :character   Median :   39.0   Median :   37.0  \n                                       Mean   :  392.3   Mean   :  376.1  \n                                       3rd Qu.:  182.0   3rd Qu.:  176.0  \n                                       Max.   :79622.0   Max.   :79622.0  \n                                                                          \n     offset              dist             DU            HDB12R      \n Min.   :0.000001   Min.   :  100   Min.   :   0    Min.   :   0.0  \n 1st Qu.:1.000000   1st Qu.: 2704   1st Qu.: 992    1st Qu.:   0.0  \n Median :1.000000   Median : 5408   Median :2635    Median :   0.0  \n Mean   :0.990339   Mean   : 6272   Mean   :2854    Mean   : 187.0  \n 3rd Qu.:1.000000   3rd Qu.: 8842   3rd Qu.:4302    3rd Qu.: 266.5  \n Max.   :1.000000   Max.   :24784   Max.   :7946    Max.   :4268.1  \n                                    NA's   :22066   NA's   :22066   \n     HDB34R        HDB5RMore          HDBRent           o_BUSSTOPS    \n Min.   :    0   Min.   :    0.0   Min.   :   0.000   Min.   : 1.000  \n 1st Qu.: 1745   1st Qu.:  694.2   1st Qu.:   0.000   1st Qu.: 5.000  \n Median : 4517   Median : 1872.6   Median :   2.404   Median : 8.000  \n Mean   : 5237   Mean   : 2671.1   Mean   : 382.616   Mean   : 7.891  \n 3rd Qu.: 8061   3rd Qu.: 3634.8   3rd Qu.: 595.057   3rd Qu.:10.000  \n Max.   :17602   Max.   :20025.0   Max.   :4227.511   Max.   :19.000  \n NA's   :22066   NA's   :22066     NA's   :22066                      \n o_MRTLRTEXITS      d_BUSSTOPS     d_MRTLRTEXITS         BIZ        \n Min.   : 0.000   Min.   : 1.000   Min.   : 0.000   Min.   : 0.000  \n 1st Qu.: 0.000   1st Qu.: 5.000   1st Qu.: 0.000   1st Qu.: 0.000  \n Median : 0.000   Median : 7.000   Median : 0.000   Median : 1.000  \n Mean   : 1.251   Mean   : 7.769   Mean   : 1.343   Mean   : 7.303  \n 3rd Qu.: 2.000   3rd Qu.:10.000   3rd Qu.: 2.000   3rd Qu.: 6.000  \n Max.   :13.000   Max.   :19.000   Max.   :13.000   Max.   :97.000  \n                                                                    \n    SCHOOLS     \n Min.   :0.000  \n 1st Qu.:0.000  \n Median :0.000  \n Mean   :0.529  \n 3rd Qu.:1.000  \n Max.   :4.000  \n                \n\n\nHence, the ifelse() function in the R base package is used to replace the zero values with 0.99.\n\nSIM$DU = ifelse(SIM$DU == 0, 0.99, SIM$DU)\nSIM$HDB12R = ifelse(SIM$HDB12R == 0, 0.99, SIM$HDB12R)\nSIM$HDB34R = ifelse(SIM$HDB34R == 0, 0.99, SIM$HDB34R)\nSIM$HDB5RMore = ifelse(SIM$HDB5RMore == 0, 0.99, SIM$HDB5RMore)\nSIM$HDBRent = ifelse(SIM$HDBRent == 0, 0.99, SIM$HDBRent)\nSIM$o_MRTLRTEXITS = ifelse(SIM$o_MRTLRTEXITS == 0, 0.99, SIM$o_MRTLRTEXITS)\nSIM$d_MRTLRTEXITS = ifelse(SIM$d_MRTLRTEXITS == 0, 0.99, SIM$d_MRTLRTEXITS)\nSIM$BIZ = ifelse(SIM$BIZ == 0, 0.99, SIM$BIZ)\nSIM$SCHOOLS = ifelse(SIM$SCHOOLS == 0, 0.99, SIM$SCHOOLS)\n\nA confirmatory check is then made to ensure that the replacements have been made.\n\nsummary(SIM)\n\n ORIGIN_GRID        DESTIN_GRID            TRIPS          FlowNoIntra     \n Length:65521       Length:65521       Min.   :    1.0   Min.   :    0.0  \n Class :character   Class :character   1st Qu.:    7.0   1st Qu.:    7.0  \n Mode  :character   Mode  :character   Median :   39.0   Median :   37.0  \n                                       Mean   :  392.3   Mean   :  376.1  \n                                       3rd Qu.:  182.0   3rd Qu.:  176.0  \n                                       Max.   :79622.0   Max.   :79622.0  \n                                                                          \n     offset              dist             DU              HDB12R       \n Min.   :0.000001   Min.   :  100   Min.   :   0.99   Min.   :   0.99  \n 1st Qu.:1.000000   1st Qu.: 2704   1st Qu.: 992.00   1st Qu.:   0.99  \n Median :1.000000   Median : 5408   Median :2635.00   Median :   0.99  \n Mean   :0.990339   Mean   : 6272   Mean   :2853.60   Mean   : 187.54  \n 3rd Qu.:1.000000   3rd Qu.: 8842   3rd Qu.:4302.00   3rd Qu.: 266.50  \n Max.   :1.000000   Max.   :24784   Max.   :7946.00   Max.   :4268.10  \n                                    NA's   :22066     NA's   :22066    \n     HDB34R           HDB5RMore           HDBRent           o_BUSSTOPS    \n Min.   :    0.99   Min.   :    0.99   Min.   :   0.990   Min.   : 1.000  \n 1st Qu.: 1745.10   1st Qu.:  694.20   1st Qu.:   0.990   1st Qu.: 5.000  \n Median : 4517.34   Median : 1872.56   Median :   2.404   Median : 8.000  \n Mean   : 5236.62   Mean   : 2671.14   Mean   : 383.076   Mean   : 7.891  \n 3rd Qu.: 8061.27   3rd Qu.: 3634.76   3rd Qu.: 595.057   3rd Qu.:10.000  \n Max.   :17602.44   Max.   :20025.00   Max.   :4227.511   Max.   :19.000  \n NA's   :22066      NA's   :22066      NA's   :22066                      \n o_MRTLRTEXITS      d_BUSSTOPS     d_MRTLRTEXITS         BIZ        \n Min.   : 0.990   Min.   : 1.000   Min.   : 0.990   Min.   : 0.990  \n 1st Qu.: 0.990   1st Qu.: 5.000   1st Qu.: 0.990   1st Qu.: 0.990  \n Median : 0.990   Median : 7.000   Median : 0.990   Median : 1.000  \n Mean   : 1.879   Mean   : 7.769   Mean   : 1.965   Mean   : 7.731  \n 3rd Qu.: 2.000   3rd Qu.:10.000   3rd Qu.: 2.000   3rd Qu.: 6.000  \n Max.   :13.000   Max.   :19.000   Max.   :13.000   Max.   :97.000  \n                                                                    \n    SCHOOLS     \n Min.   :0.990  \n 1st Qu.:0.990  \n Median :0.990  \n Mean   :1.171  \n 3rd Qu.:1.000  \n Max.   :4.000  \n                \n\n\nA check for missing values using the colSums() and is.na() functions in the R base package revealed that the variables containing the number of residents in the different HDB housing types have NA values. This is because there are hexagons with bus stops but no residential populations.\n\ncolSums(is.na(SIM))\n\n  ORIGIN_GRID   DESTIN_GRID         TRIPS   FlowNoIntra        offset \n            0             0             0             0             0 \n         dist            DU        HDB12R        HDB34R     HDB5RMore \n            0         22066         22066         22066         22066 \n      HDBRent    o_BUSSTOPS o_MRTLRTEXITS    d_BUSSTOPS d_MRTLRTEXITS \n        22066             0             0             0             0 \n          BIZ       SCHOOLS \n            0             0 \n\n\nHence, the ifelse() function in the R base package is used to replace the missing values with 0.99.\n\nSIM$DU = ifelse(is.na(SIM$DU), 0.99, SIM$DU)\nSIM$HDB12R = ifelse(is.na(SIM$HDB12R), 0.99, SIM$HDB12R)\nSIM$HDB34R = ifelse(is.na(SIM$HDB34R), 0.99, SIM$HDB34R)\nSIM$HDB5RMore = ifelse(is.na(SIM$HDB5RMore), 0.99, SIM$HDB5RMore)\nSIM$HDBRent = ifelse(is.na(SIM$HDBRent), 0.99, SIM$HDBRent)\n\nA confirmatory check is then made to ensure that the replacements have been made.\n\ncolSums(is.na(SIM))\n\n  ORIGIN_GRID   DESTIN_GRID         TRIPS   FlowNoIntra        offset \n            0             0             0             0             0 \n         dist            DU        HDB12R        HDB34R     HDB5RMore \n            0             0             0             0             0 \n      HDBRent    o_BUSSTOPS o_MRTLRTEXITS    d_BUSSTOPS d_MRTLRTEXITS \n            0             0             0             0             0 \n          BIZ       SCHOOLS \n            0             0 \n\n\n\n\n7.3 Unconstrained Spatial Interaction Model\nAn unconstrained SIM, uncSIM, is calibrated below by using the glm() function of the R stats package. The explanatory variables are origin populations by different HDB housing types, the number of bus stops, the number of MRT/LRT exits, the counts of business activities and schools, and the distance between the origin and destination.\n\nuncSIM = glm(formula = TRIPS ~ \n               log(DU) + \n               log(HDB12R) +\n               log(HDB34R) +\n               log(HDB5RMore) +\n               log(HDBRent) +\n               log(o_BUSSTOPS) +\n               log(d_BUSSTOPS) +\n               log(o_MRTLRTEXITS) +\n               log(d_MRTLRTEXITS) +\n               log(BIZ) +\n               log(SCHOOLS) +\n               log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM,\n              na.action = na.exclude)\n\nuncSIM\n\n\nCall:  glm(formula = TRIPS ~ log(DU) + log(HDB12R) + log(HDB34R) + log(HDB5RMore) + \n    log(HDBRent) + log(o_BUSSTOPS) + log(d_BUSSTOPS) + log(o_MRTLRTEXITS) + \n    log(d_MRTLRTEXITS) + log(BIZ) + log(SCHOOLS) + log(dist), \n    family = poisson(link = \"log\"), data = SIM, na.action = na.exclude)\n\nCoefficients:\n       (Intercept)             log(DU)         log(HDB12R)         log(HDB34R)  \n        10.1642664          -0.0548204           0.0053367           0.0562224  \n    log(HDB5RMore)        log(HDBRent)     log(o_BUSSTOPS)     log(d_BUSSTOPS)  \n         0.1603708          -0.0004167           0.3596605           0.2874071  \nlog(o_MRTLRTEXITS)  log(d_MRTLRTEXITS)            log(BIZ)        log(SCHOOLS)  \n         0.1097120           0.5086618           0.0127605           0.2537553  \n         log(dist)  \n        -0.8451458  \n\nDegrees of Freedom: 65520 Total (i.e. Null);  65508 Residual\nNull Deviance:      103200000 \nResidual Deviance: 59160000     AIC: 59520000\n\n\nBased on the output, the number of trips is most positively correlated to the number of destination MRT/LRT exits (attractiveness variable) with a coefficient of 0.5086618, and most negatively correlated to distance (i.e., the greater the distance between origin and destination, the lower the number of trips), with a coefficient of -0.8451458. In fact, the number of destination MRT/LRT exits is more correlated to the number of trips than the number of origin bus stops (coefficient: 0.3596605) and of destination bus stops (coefficient: 0.2874071). This reflects the strong attractiveness of MRT stations in attracting bus commuters during the morning peak hour period.\nBetween the number of business activities (coefficient: 0.0127605) and the number of schools (coefficient: 0.2537553), the latter is more correlated to the number of trips than the latter.\nThe number of dwelling units and the number of residents for the different HDB housing types are not very strongly correlated to the number of trips.\nThe R-squared values are calculated to measure how much variation of the trips can be accounted for by the unconstrained SIM.\n\nCalcRSquared = function(observed, estimated){\n  r = cor(observed, estimated)\n  R2 = r^2\n  R2\n}\n\nCalcRSquared(uncSIM$data$TRIPS, uncSIM$fitted.values)\n\n[1] 0.09956593\n\nr2_kullback(uncSIM)\n\nKullback-Leibler R2 \n          0.4263825 \n\nr2_mcfadden(uncSIM)\n\n# R2 for Generalized Linear Regression\n       R2: 0.425\n  adj. R2: 0.425\n\n\nBased on the outcome from the cor() function in the R stats package, the R-squared value is 0.09956593. This means that about 9.96% of the variation in the number of trips can be accounted for by the unconstrained SIM.\nBased on the performance package, the R-squared values for generalised linear models can be computed using the r2_kullback() and r2_mcfadden() functions. The results are 0.4263825 and 0.425 respectively, i.e., that about 42.6% or 42.5% of the variation in the number of trips can be accounted for by the unconstrained SIM.\n\n\n7.4 Origin (Production) Constrained Spatial Interaction Model\nAn origin constrained SIM, orcSIM, is calibrated below by using the glm() function of the R stats package. The explanatory variables are the existence of MRT/LRT exits, the counts of business activities and schools, and the distance between the origin and destination.\n\norcSIM = glm(formula = TRIPS ~ \n               ORIGIN_GRID +\n               log(d_BUSSTOPS) +\n               log(d_MRTLRTEXITS) +\n               log(BIZ) +\n               log(SCHOOLS) +\n               log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM,\n              na.action = na.exclude)\n\nsummary(orcSIM)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_GRID + log(d_BUSSTOPS) + log(d_MRTLRTEXITS) + \n    log(BIZ) + log(SCHOOLS) + log(dist), family = poisson(link = \"log\"), \n    data = SIM, na.action = na.exclude)\n\nCoefficients:\n                     Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)         9.0844853  0.0762606   119.124  &lt; 2e-16 ***\nORIGIN_GRID1001    -0.2062014  0.0988269    -2.086 0.036934 *  \nORIGIN_GRID1002    -1.5692787  0.1234836   -12.708  &lt; 2e-16 ***\nORIGIN_GRID1003     1.4824789  0.0813483    18.224  &lt; 2e-16 ***\nORIGIN_GRID1004     4.5245490  0.0762701    59.323  &lt; 2e-16 ***\nORIGIN_GRID1005     2.6873905  0.0769108    34.942  &lt; 2e-16 ***\nORIGIN_GRID101      2.3451200  0.0770795    30.425  &lt; 2e-16 ***\nORIGIN_GRID1010     1.8276429  0.0766928    23.831  &lt; 2e-16 ***\nORIGIN_GRID1011     0.1091450  0.0788092     1.385 0.166075    \nORIGIN_GRID1012     0.8932235  0.0783744    11.397  &lt; 2e-16 ***\nORIGIN_GRID1013     1.4179265  0.0768357    18.454  &lt; 2e-16 ***\nORIGIN_GRID1014     1.1767703  0.0773480    15.214  &lt; 2e-16 ***\nORIGIN_GRID102     -0.8253745  0.1025125    -8.051 8.18e-16 ***\nORIGIN_GRID1023     3.7714226  0.0763636    49.388  &lt; 2e-16 ***\nORIGIN_GRID1024     3.8767361  0.0763243    50.793  &lt; 2e-16 ***\nORIGIN_GRID1025     2.5027784  0.0768322    32.575  &lt; 2e-16 ***\nORIGIN_GRID1028     0.7962321  0.0774833    10.276  &lt; 2e-16 ***\nORIGIN_GRID1030    -0.4932637  0.0837965    -5.886 3.95e-09 ***\nORIGIN_GRID1031     2.3898085  0.0763964    31.282  &lt; 2e-16 ***\nORIGIN_GRID1033     2.0783244  0.0764904    27.171  &lt; 2e-16 ***\nORIGIN_GRID1040     0.0474604  0.0921694     0.515 0.606605    \nORIGIN_GRID1041     0.8920333  0.0783003    11.392  &lt; 2e-16 ***\nORIGIN_GRID1042     4.0069356  0.0763119    52.507  &lt; 2e-16 ***\nORIGIN_GRID1043     2.9397844  0.0764913    38.433  &lt; 2e-16 ***\nORIGIN_GRID1048     1.1731608  0.0770557    15.225  &lt; 2e-16 ***\nORIGIN_GRID1049     2.2569027  0.0764328    29.528  &lt; 2e-16 ***\nORIGIN_GRID1050     3.0905333  0.0763163    40.496  &lt; 2e-16 ***\nORIGIN_GRID1061     4.1266952  0.0763236    54.068  &lt; 2e-16 ***\nORIGIN_GRID1062     4.5773983  0.0762921    59.998  &lt; 2e-16 ***\nORIGIN_GRID1063     1.4892180  0.0772713    19.273  &lt; 2e-16 ***\nORIGIN_GRID1064    -2.1182258  0.2613696    -8.104 5.30e-16 ***\nORIGIN_GRID1066     1.3829769  0.0767519    18.019  &lt; 2e-16 ***\nORIGIN_GRID1067     1.9465081  0.0765269    25.436  &lt; 2e-16 ***\nORIGIN_GRID1068     2.8433204  0.0763388    37.246  &lt; 2e-16 ***\nORIGIN_GRID1069     1.9163868  0.0765053    25.049  &lt; 2e-16 ***\nORIGIN_GRID1071     0.7254871  0.0772976     9.386  &lt; 2e-16 ***\nORIGIN_GRID1078     0.0711537  0.0897571     0.793 0.427932    \nORIGIN_GRID1080     3.0158366  0.0764380    39.455  &lt; 2e-16 ***\nORIGIN_GRID1081     3.1849366  0.0764052    41.685  &lt; 2e-16 ***\nORIGIN_GRID1082     1.3474952  0.0774894    17.389  &lt; 2e-16 ***\nORIGIN_GRID1086     2.3185938  0.0765209    30.300  &lt; 2e-16 ***\nORIGIN_GRID1087     1.8753186  0.0765507    24.498  &lt; 2e-16 ***\nORIGIN_GRID1089     2.3483145  0.0764388    30.721  &lt; 2e-16 ***\nORIGIN_GRID1090     2.0049246  0.0765153    26.203  &lt; 2e-16 ***\nORIGIN_GRID1097    -0.8632497  0.1291656    -6.683 2.34e-11 ***\nORIGIN_GRID1100     3.9210515  0.0763338    51.367  &lt; 2e-16 ***\nORIGIN_GRID1101     0.9420937  0.0861351    10.937  &lt; 2e-16 ***\nORIGIN_GRID1102    -0.3545546  0.0862555    -4.111 3.95e-05 ***\nORIGIN_GRID1104     2.9977214  0.0763402    39.268  &lt; 2e-16 ***\nORIGIN_GRID1105     2.6414480  0.0763676    34.589  &lt; 2e-16 ***\nORIGIN_GRID1106     2.2437017  0.0768118    29.210  &lt; 2e-16 ***\nORIGIN_GRID1107     0.4020617  0.0780407     5.152 2.58e-07 ***\nORIGIN_GRID1108     1.4235053  0.0767458    18.548  &lt; 2e-16 ***\nORIGIN_GRID1115    -1.5694739  0.1632408    -9.614  &lt; 2e-16 ***\nORIGIN_GRID1116    -0.4726793  0.1192374    -3.964 7.36e-05 ***\nORIGIN_GRID1119     1.5157270  0.0772707    19.616  &lt; 2e-16 ***\nORIGIN_GRID1120     1.3452738  0.0776283    17.330  &lt; 2e-16 ***\nORIGIN_GRID1123     1.2333432  0.0769259    16.033  &lt; 2e-16 ***\nORIGIN_GRID1124     2.2312856  0.0765228    29.158  &lt; 2e-16 ***\nORIGIN_GRID1125     2.5782892  0.0763840    33.754  &lt; 2e-16 ***\nORIGIN_GRID1128     1.2595406  0.0767683    16.407  &lt; 2e-16 ***\nORIGIN_GRID1138     2.7031844  0.0765699    35.304  &lt; 2e-16 ***\nORIGIN_GRID1139     3.6254667  0.0764003    47.454  &lt; 2e-16 ***\nORIGIN_GRID1140     1.4646614  0.0774033    18.922  &lt; 2e-16 ***\nORIGIN_GRID1142     1.9239062  0.0766668    25.094  &lt; 2e-16 ***\nORIGIN_GRID1143     2.3113502  0.0763919    30.256  &lt; 2e-16 ***\nORIGIN_GRID1144     1.2870850  0.0771313    16.687  &lt; 2e-16 ***\nORIGIN_GRID1145     0.6586810  0.0775813     8.490  &lt; 2e-16 ***\nORIGIN_GRID1146     1.8535889  0.0766001    24.198  &lt; 2e-16 ***\nORIGIN_GRID1147    -0.1472169  0.0808920    -1.820 0.068771 .  \nORIGIN_GRID1152    -1.9865823  0.1455980   -13.644  &lt; 2e-16 ***\nORIGIN_GRID1153     1.4419951  0.0771101    18.700  &lt; 2e-16 ***\nORIGIN_GRID1157     3.7109233  0.0763205    48.623  &lt; 2e-16 ***\nORIGIN_GRID1158     1.2301153  0.0773897    15.895  &lt; 2e-16 ***\nORIGIN_GRID116      2.3291436  0.0797005    29.224  &lt; 2e-16 ***\nORIGIN_GRID1161     3.0209945  0.0763271    39.580  &lt; 2e-16 ***\nORIGIN_GRID1162     2.8117998  0.0763761    36.815  &lt; 2e-16 ***\nORIGIN_GRID1163     3.3923070  0.0763064    44.456  &lt; 2e-16 ***\nORIGIN_GRID1164     1.5216796  0.0768706    19.795  &lt; 2e-16 ***\nORIGIN_GRID1167    -0.7576587  0.0891168    -8.502  &lt; 2e-16 ***\nORIGIN_GRID117     -0.8378459  0.1925201    -4.352 1.35e-05 ***\nORIGIN_GRID1171    -1.0002807  0.1060609    -9.431  &lt; 2e-16 ***\nORIGIN_GRID1172     3.1230385  0.0764634    40.844  &lt; 2e-16 ***\nORIGIN_GRID1173     0.5196302  0.0789387     6.583 4.62e-11 ***\nORIGIN_GRID1176     2.6496351  0.0764952    34.638  &lt; 2e-16 ***\nORIGIN_GRID1177     3.1955948  0.0764524    41.799  &lt; 2e-16 ***\nORIGIN_GRID118     -0.4191402  0.0926498    -4.524 6.07e-06 ***\nORIGIN_GRID1180     3.3881753  0.0763271    44.390  &lt; 2e-16 ***\nORIGIN_GRID1181     2.7216059  0.0763447    35.649  &lt; 2e-16 ***\nORIGIN_GRID1183    -0.6034659  0.0841425    -7.172 7.39e-13 ***\nORIGIN_GRID1184     1.9932243  0.0764820    26.061  &lt; 2e-16 ***\nORIGIN_GRID1186    -2.6092916  0.2037852   -12.804  &lt; 2e-16 ***\nORIGIN_GRID119      0.6942728  0.0825226     8.413  &lt; 2e-16 ***\nORIGIN_GRID1192    -0.2867660  0.0837969    -3.422 0.000621 ***\nORIGIN_GRID1193     1.6476969  0.0770546    21.383  &lt; 2e-16 ***\nORIGIN_GRID1194     1.0802359  0.0777968    13.885  &lt; 2e-16 ***\nORIGIN_GRID1195     3.6306440  0.0763148    47.575  &lt; 2e-16 ***\nORIGIN_GRID1196     2.2881652  0.0767623    29.808  &lt; 2e-16 ***\nORIGIN_GRID1199     0.9260930  0.0771682    12.001  &lt; 2e-16 ***\nORIGIN_GRID120     -0.9223488  0.0929455    -9.924  &lt; 2e-16 ***\nORIGIN_GRID1200     2.8952147  0.0763419    37.924  &lt; 2e-16 ***\nORIGIN_GRID1201     2.6297331  0.0763661    34.436  &lt; 2e-16 ***\nORIGIN_GRID1202     1.2018780  0.0767926    15.651  &lt; 2e-16 ***\nORIGIN_GRID1203     1.4051484  0.0770640    18.234  &lt; 2e-16 ***\nORIGIN_GRID1204     2.0546012  0.0766623    26.801  &lt; 2e-16 ***\nORIGIN_GRID1205    -2.6853990  0.2692227    -9.975  &lt; 2e-16 ***\nORIGIN_GRID1207     1.1139157  0.0771769    14.433  &lt; 2e-16 ***\nORIGIN_GRID1208     1.4644883  0.0770368    19.010  &lt; 2e-16 ***\nORIGIN_GRID1209     0.7425010  0.0780325     9.515  &lt; 2e-16 ***\nORIGIN_GRID121     -0.5928256  0.0862097    -6.877 6.13e-12 ***\nORIGIN_GRID1210    -1.7450881  0.1383750   -12.611  &lt; 2e-16 ***\nORIGIN_GRID1211    -1.1112618  0.0918260   -12.102  &lt; 2e-16 ***\nORIGIN_GRID1212    -1.9690178  0.1227743   -16.038  &lt; 2e-16 ***\nORIGIN_GRID1213     3.6564856  0.0763211    47.909  &lt; 2e-16 ***\nORIGIN_GRID1214     1.9792104  0.0767217    25.797  &lt; 2e-16 ***\nORIGIN_GRID1215    -1.5495836  0.2179006    -7.111 1.15e-12 ***\nORIGIN_GRID1218     2.2633825  0.0764901    29.591  &lt; 2e-16 ***\nORIGIN_GRID1219     3.6221466  0.0763006    47.472  &lt; 2e-16 ***\nORIGIN_GRID122      2.3843723  0.0799824    29.811  &lt; 2e-16 ***\nORIGIN_GRID1220     1.8307651  0.0764920    23.934  &lt; 2e-16 ***\nORIGIN_GRID1221     1.5874585  0.0766426    20.712  &lt; 2e-16 ***\nORIGIN_GRID1222     1.5992867  0.0769581    20.781  &lt; 2e-16 ***\nORIGIN_GRID1225     1.5845302  0.0766594    20.670  &lt; 2e-16 ***\nORIGIN_GRID1226     0.9332502  0.0772349    12.083  &lt; 2e-16 ***\nORIGIN_GRID1227     1.8135415  0.0766709    23.654  &lt; 2e-16 ***\nORIGIN_GRID1229     0.8736328  0.0784105    11.142  &lt; 2e-16 ***\nORIGIN_GRID1230     2.1817748  0.0765357    28.507  &lt; 2e-16 ***\nORIGIN_GRID1231     2.9090237  0.0764015    38.075  &lt; 2e-16 ***\nORIGIN_GRID1232     3.0298895  0.0764146    39.651  &lt; 2e-16 ***\nORIGIN_GRID1233     3.9015710  0.0763327    51.113  &lt; 2e-16 ***\nORIGIN_GRID1234    -0.1495785  0.0857746    -1.744 0.081184 .  \nORIGIN_GRID1238     1.2969804  0.0767149    16.906  &lt; 2e-16 ***\nORIGIN_GRID1239     1.0345506  0.0767548    13.479  &lt; 2e-16 ***\nORIGIN_GRID1240     2.0125409  0.0763951    26.344  &lt; 2e-16 ***\nORIGIN_GRID1241     1.5403775  0.0768590    20.042  &lt; 2e-16 ***\nORIGIN_GRID1242     0.9483203  0.0772861    12.270  &lt; 2e-16 ***\nORIGIN_GRID1243    -1.0183629  0.0893232   -11.401  &lt; 2e-16 ***\nORIGIN_GRID1244     0.9986671  0.0770996    12.953  &lt; 2e-16 ***\nORIGIN_GRID1245     2.2973287  0.0765811    29.999  &lt; 2e-16 ***\nORIGIN_GRID1246     1.9525377  0.0771918    25.295  &lt; 2e-16 ***\nORIGIN_GRID1249     0.3301257  0.0835856     3.950 7.83e-05 ***\nORIGIN_GRID1250     3.7448323  0.0762913    49.086  &lt; 2e-16 ***\nORIGIN_GRID1251     3.5122841  0.0763189    46.021  &lt; 2e-16 ***\nORIGIN_GRID1252     3.1239169  0.0764165    40.880  &lt; 2e-16 ***\nORIGIN_GRID1253     0.5866826  0.0799890     7.335 2.22e-13 ***\nORIGIN_GRID1256     1.7270768  0.0765179    22.571  &lt; 2e-16 ***\nORIGIN_GRID1257     0.7817476  0.0769506    10.159  &lt; 2e-16 ***\nORIGIN_GRID1258     1.8803124  0.0765078    24.577  &lt; 2e-16 ***\nORIGIN_GRID1259     2.0549411  0.0765129    26.857  &lt; 2e-16 ***\nORIGIN_GRID1260     0.9854780  0.0780155    12.632  &lt; 2e-16 ***\nORIGIN_GRID1261     0.4135203  0.0775922     5.329 9.85e-08 ***\nORIGIN_GRID1262     1.5730642  0.0765881    20.539  &lt; 2e-16 ***\nORIGIN_GRID1263     1.7574569  0.0765627    22.954  &lt; 2e-16 ***\nORIGIN_GRID1264     2.7241583  0.0763898    35.661  &lt; 2e-16 ***\nORIGIN_GRID1265     2.9145922  0.0764003    38.149  &lt; 2e-16 ***\nORIGIN_GRID1266     1.6370602  0.0769734    21.268  &lt; 2e-16 ***\nORIGIN_GRID1268     3.1475812  0.0764803    41.155  &lt; 2e-16 ***\nORIGIN_GRID1269     3.1402971  0.0763300    41.141  &lt; 2e-16 ***\nORIGIN_GRID1270     3.5229072  0.0763480    46.143  &lt; 2e-16 ***\nORIGIN_GRID1272     2.3796242  0.0776166    30.659  &lt; 2e-16 ***\nORIGIN_GRID1276     1.2731624  0.0765835    16.624  &lt; 2e-16 ***\nORIGIN_GRID1277     1.5396476  0.0766228    20.094  &lt; 2e-16 ***\nORIGIN_GRID1278     1.5972661  0.0764854    20.883  &lt; 2e-16 ***\nORIGIN_GRID1279     2.4148540  0.0763864    31.614  &lt; 2e-16 ***\nORIGIN_GRID1280     1.8281371  0.0764878    23.901  &lt; 2e-16 ***\nORIGIN_GRID1281     1.2736445  0.0767499    16.595  &lt; 2e-16 ***\nORIGIN_GRID1282     1.9777762  0.0765196    25.847  &lt; 2e-16 ***\nORIGIN_GRID1283     2.0619134  0.0764944    26.955  &lt; 2e-16 ***\nORIGIN_GRID1284     2.8723042  0.0763694    37.611  &lt; 2e-16 ***\nORIGIN_GRID1285     2.1770664  0.0764949    28.460  &lt; 2e-16 ***\nORIGIN_GRID1288     3.4677574  0.0763853    45.398  &lt; 2e-16 ***\nORIGIN_GRID1289     4.5125072  0.0763014    59.141  &lt; 2e-16 ***\nORIGIN_GRID1294     2.0194828  0.0764471    26.417  &lt; 2e-16 ***\nORIGIN_GRID1295     2.0803997  0.0763806    27.237  &lt; 2e-16 ***\nORIGIN_GRID1296     2.2052337  0.0763826    28.871  &lt; 2e-16 ***\nORIGIN_GRID1297     0.7430179  0.0778218     9.548  &lt; 2e-16 ***\nORIGIN_GRID1298     2.3333162  0.0764105    30.537  &lt; 2e-16 ***\nORIGIN_GRID1299     2.8888889  0.0763395    37.843  &lt; 2e-16 ***\nORIGIN_GRID1300    -0.1913215  0.0796010    -2.404 0.016239 *  \nORIGIN_GRID1301     2.9729673  0.0763549    38.936  &lt; 2e-16 ***\nORIGIN_GRID1302     3.3521780  0.0763044    43.932  &lt; 2e-16 ***\nORIGIN_GRID1303     3.7839823  0.0762870    49.602  &lt; 2e-16 ***\nORIGIN_GRID1304     0.2083033  0.0787275     2.646 0.008148 ** \nORIGIN_GRID1306     2.8536552  0.0765105    37.298  &lt; 2e-16 ***\nORIGIN_GRID1307     4.0936406  0.0763160    53.641  &lt; 2e-16 ***\nORIGIN_GRID1308     3.2916632  0.0765651    42.992  &lt; 2e-16 ***\nORIGIN_GRID1314     1.0832860  0.0765977    14.143  &lt; 2e-16 ***\nORIGIN_GRID1315     1.4950622  0.0765051    19.542  &lt; 2e-16 ***\nORIGIN_GRID1316     0.9743170  0.0774021    12.588  &lt; 2e-16 ***\nORIGIN_GRID1317     1.7312387  0.0766559    22.585  &lt; 2e-16 ***\nORIGIN_GRID1318     2.4511697  0.0764437    32.065  &lt; 2e-16 ***\nORIGIN_GRID1319     3.0420187  0.0763315    39.853  &lt; 2e-16 ***\nORIGIN_GRID1320     3.0729927  0.0763159    40.267  &lt; 2e-16 ***\nORIGIN_GRID1321     2.8766267  0.0763658    37.669  &lt; 2e-16 ***\nORIGIN_GRID1322     2.2245431  0.0764549    29.096  &lt; 2e-16 ***\nORIGIN_GRID1323     1.4459545  0.0771225    18.749  &lt; 2e-16 ***\nORIGIN_GRID1326     4.1796896  0.0763073    54.774  &lt; 2e-16 ***\nORIGIN_GRID1327     3.8658111  0.0763661    50.622  &lt; 2e-16 ***\nORIGIN_GRID1332    -0.1581623  0.0786240    -2.012 0.044259 *  \nORIGIN_GRID1333     0.7005855  0.0768182     9.120  &lt; 2e-16 ***\nORIGIN_GRID1334     1.7823324  0.0764038    23.328  &lt; 2e-16 ***\nORIGIN_GRID1335     2.7210953  0.0763371    35.646  &lt; 2e-16 ***\nORIGIN_GRID1336     2.3465498  0.0764690    30.686  &lt; 2e-16 ***\nORIGIN_GRID1337     3.5684458  0.0762815    46.780  &lt; 2e-16 ***\nORIGIN_GRID1338     2.0392339  0.0764833    26.662  &lt; 2e-16 ***\nORIGIN_GRID1339     2.2729841  0.0764344    29.738  &lt; 2e-16 ***\nORIGIN_GRID1340     3.7212848  0.0762810    48.784  &lt; 2e-16 ***\nORIGIN_GRID1341     1.6656726  0.0768346    21.679  &lt; 2e-16 ***\nORIGIN_GRID1342     1.1494022  0.0772821    14.873  &lt; 2e-16 ***\nORIGIN_GRID1345     3.5702032  0.0763748    46.746  &lt; 2e-16 ***\nORIGIN_GRID1352     0.6703533  0.0771178     8.693  &lt; 2e-16 ***\nORIGIN_GRID1353     1.4215478  0.0765212    18.577  &lt; 2e-16 ***\nORIGIN_GRID1354     2.2242154  0.0763562    29.129  &lt; 2e-16 ***\nORIGIN_GRID1355     2.5885945  0.0763803    33.891  &lt; 2e-16 ***\nORIGIN_GRID1356     3.1184545  0.0763344    40.853  &lt; 2e-16 ***\nORIGIN_GRID1357     3.2287355  0.0763118    42.310  &lt; 2e-16 ***\nORIGIN_GRID1358     3.2123065  0.0764029    42.044  &lt; 2e-16 ***\nORIGIN_GRID1359     3.2434475  0.0763160    42.500  &lt; 2e-16 ***\nORIGIN_GRID136      1.8206197  0.0787659    23.114  &lt; 2e-16 ***\nORIGIN_GRID1360     2.9344922  0.0763635    38.428  &lt; 2e-16 ***\nORIGIN_GRID1364    -1.2150137  0.1183681   -10.265  &lt; 2e-16 ***\nORIGIN_GRID137     -0.2705771  0.1009946    -2.679 0.007382 ** \nORIGIN_GRID1371     0.0687832  0.0788772     0.872 0.383193    \nORIGIN_GRID1372     1.6310098  0.0764895    21.323  &lt; 2e-16 ***\nORIGIN_GRID1373     1.9706431  0.0765036    25.759  &lt; 2e-16 ***\nORIGIN_GRID1374     2.1642789  0.0765484    28.273  &lt; 2e-16 ***\nORIGIN_GRID1375     3.6007206  0.0763690    47.149  &lt; 2e-16 ***\nORIGIN_GRID1376     2.7237094  0.0763781    35.661  &lt; 2e-16 ***\nORIGIN_GRID1377     1.2307987  0.0769640    15.992  &lt; 2e-16 ***\nORIGIN_GRID1378     3.5887458  0.0763051    47.032  &lt; 2e-16 ***\nORIGIN_GRID1379     1.6503746  0.0775627    21.278  &lt; 2e-16 ***\nORIGIN_GRID138     -0.7590623  0.1123240    -6.758 1.40e-11 ***\nORIGIN_GRID1380     1.8396300  0.0767692    23.963  &lt; 2e-16 ***\nORIGIN_GRID1383     1.5879510  0.0778634    20.394  &lt; 2e-16 ***\nORIGIN_GRID1389    -1.3411633  0.1152256   -11.639  &lt; 2e-16 ***\nORIGIN_GRID139     -0.0210888  0.0869614    -0.243 0.808387    \nORIGIN_GRID1390    -0.4981921  0.0819602    -6.078 1.21e-09 ***\nORIGIN_GRID1391     0.0757470  0.0779539     0.972 0.331205    \nORIGIN_GRID1392     1.7254725  0.0764631    22.566  &lt; 2e-16 ***\nORIGIN_GRID1393     2.2476536  0.0763841    29.426  &lt; 2e-16 ***\nORIGIN_GRID1394     2.9673508  0.0763445    38.868  &lt; 2e-16 ***\nORIGIN_GRID1395     4.2968332  0.0763658    56.266  &lt; 2e-16 ***\nORIGIN_GRID1396     1.2782126  0.0774787    16.498  &lt; 2e-16 ***\nORIGIN_GRID1397     1.4725507  0.0789292    18.657  &lt; 2e-16 ***\nORIGIN_GRID1398     2.9057345  0.0764806    37.993  &lt; 2e-16 ***\nORIGIN_GRID140      2.6005394  0.0767272    33.893  &lt; 2e-16 ***\nORIGIN_GRID1401    -0.7451104  0.0958778    -7.771 7.76e-15 ***\nORIGIN_GRID1408    -1.3266153  0.0964589   -13.753  &lt; 2e-16 ***\nORIGIN_GRID1409    -0.5740857  0.0827998    -6.933 4.11e-12 ***\nORIGIN_GRID141     -0.5869279  0.0840475    -6.983 2.88e-12 ***\nORIGIN_GRID1410     0.8588734  0.0781394    10.992  &lt; 2e-16 ***\nORIGIN_GRID1411     2.3291701  0.0763626    30.501  &lt; 2e-16 ***\nORIGIN_GRID1412     3.2889932  0.0763060    43.103  &lt; 2e-16 ***\nORIGIN_GRID1413     3.2608977  0.0763557    42.707  &lt; 2e-16 ***\nORIGIN_GRID1414     0.3909614  0.0785789     4.975 6.51e-07 ***\nORIGIN_GRID1415     1.8956699  0.0765398    24.767  &lt; 2e-16 ***\nORIGIN_GRID1416     1.0969989  0.0772549    14.200  &lt; 2e-16 ***\nORIGIN_GRID1417     1.0352849  0.0773438    13.385  &lt; 2e-16 ***\nORIGIN_GRID1418     0.4495156  0.0784323     5.731 9.97e-09 ***\nORIGIN_GRID1419    -1.2652282  0.1159646   -10.910  &lt; 2e-16 ***\nORIGIN_GRID142      0.7707249  0.0877745     8.781  &lt; 2e-16 ***\nORIGIN_GRID1420    -0.9586015  0.0968792    -9.895  &lt; 2e-16 ***\nORIGIN_GRID1428    -2.9579631  0.2613700   -11.317  &lt; 2e-16 ***\nORIGIN_GRID1430     1.1260091  0.0776966    14.492  &lt; 2e-16 ***\nORIGIN_GRID1431    -0.0827469  0.0784786    -1.054 0.291705    \nORIGIN_GRID1432     3.0344830  0.0763172    39.761  &lt; 2e-16 ***\nORIGIN_GRID1433     1.7377962  0.0785709    22.118  &lt; 2e-16 ***\nORIGIN_GRID1434     1.7354357  0.0768189    22.591  &lt; 2e-16 ***\nORIGIN_GRID1435     2.2185215  0.0766834    28.931  &lt; 2e-16 ***\nORIGIN_GRID1436     1.0115961  0.0772937    13.088  &lt; 2e-16 ***\nORIGIN_GRID1439    -0.5512371  0.0846064    -6.515 7.25e-11 ***\nORIGIN_GRID1440    -0.9487535  0.0998179    -9.505  &lt; 2e-16 ***\nORIGIN_GRID1448     2.8301488  0.0767307    36.884  &lt; 2e-16 ***\nORIGIN_GRID1449     1.5175360  0.0765478    19.825  &lt; 2e-16 ***\nORIGIN_GRID1450     2.4526060  0.0764451    32.083  &lt; 2e-16 ***\nORIGIN_GRID1451     3.2273319  0.0763194    42.287  &lt; 2e-16 ***\nORIGIN_GRID1452     1.6992577  0.0765865    22.187  &lt; 2e-16 ***\nORIGIN_GRID1453     2.9537249  0.0763362    38.694  &lt; 2e-16 ***\nORIGIN_GRID1454     2.9386348  0.0767131    38.307  &lt; 2e-16 ***\nORIGIN_GRID1455     1.6204092  0.0767657    21.108  &lt; 2e-16 ***\nORIGIN_GRID1456     3.1772458  0.0763442    41.617  &lt; 2e-16 ***\nORIGIN_GRID1457     2.9045444  0.0764074    38.014  &lt; 2e-16 ***\nORIGIN_GRID1458    -0.4384988  0.0969456    -4.523 6.09e-06 ***\nORIGIN_GRID1468     2.1976558  0.0786329    27.948  &lt; 2e-16 ***\nORIGIN_GRID1469     2.8071068  0.0763258    36.778  &lt; 2e-16 ***\nORIGIN_GRID1470     1.7706469  0.0766050    23.114  &lt; 2e-16 ***\nORIGIN_GRID1471     3.0884821  0.0763411    40.456  &lt; 2e-16 ***\nORIGIN_GRID1472     3.2860140  0.0762964    43.069  &lt; 2e-16 ***\nORIGIN_GRID1473     1.8967682  0.0765306    24.784  &lt; 2e-16 ***\nORIGIN_GRID1474     3.5917185  0.0762996    47.074  &lt; 2e-16 ***\nORIGIN_GRID1475     2.4405386  0.0765017    31.902  &lt; 2e-16 ***\nORIGIN_GRID1476     2.2494348  0.0765757    29.375  &lt; 2e-16 ***\nORIGIN_GRID1477    -0.9345072  0.0930765   -10.040  &lt; 2e-16 ***\nORIGIN_GRID1486     0.6327152  0.0804489     7.865 3.70e-15 ***\nORIGIN_GRID1487     2.7004787  0.0763436    35.373  &lt; 2e-16 ***\nORIGIN_GRID1488     0.9961746  0.0777766    12.808  &lt; 2e-16 ***\nORIGIN_GRID1489     2.2813439  0.0764472    29.842  &lt; 2e-16 ***\nORIGIN_GRID1490     2.1701627  0.0766620    28.308  &lt; 2e-16 ***\nORIGIN_GRID1491     2.2222714  0.0764261    29.077  &lt; 2e-16 ***\nORIGIN_GRID1492     2.6740325  0.0763680    35.015  &lt; 2e-16 ***\nORIGIN_GRID1493     3.3909188  0.0763104    44.436  &lt; 2e-16 ***\nORIGIN_GRID1494     2.9972219  0.0763862    39.238  &lt; 2e-16 ***\nORIGIN_GRID1506    -1.4975942  0.1490220   -10.049  &lt; 2e-16 ***\nORIGIN_GRID1507     2.9387395  0.0763209    38.505  &lt; 2e-16 ***\nORIGIN_GRID1508     1.8466401  0.0764987    24.140  &lt; 2e-16 ***\nORIGIN_GRID1509     3.1549701  0.0768154    41.072  &lt; 2e-16 ***\nORIGIN_GRID1510     2.9186929  0.0763563    38.225  &lt; 2e-16 ***\nORIGIN_GRID1512     3.5578900  0.0763009    46.630  &lt; 2e-16 ***\nORIGIN_GRID1513     4.0677620  0.0763821    53.255  &lt; 2e-16 ***\nORIGIN_GRID1514     3.1860425  0.0764232    41.689  &lt; 2e-16 ***\nORIGIN_GRID1524     1.8758111  0.0771463    24.315  &lt; 2e-16 ***\nORIGIN_GRID1525     2.5330854  0.0763961    33.157  &lt; 2e-16 ***\nORIGIN_GRID1526     2.5970530  0.0763910    33.997  &lt; 2e-16 ***\nORIGIN_GRID1527     2.3976301  0.0765557    31.319  &lt; 2e-16 ***\nORIGIN_GRID1528     1.5399846  0.0766618    20.088  &lt; 2e-16 ***\nORIGIN_GRID1529     1.1771593  0.0771348    15.261  &lt; 2e-16 ***\nORIGIN_GRID1530     2.7355335  0.0764863    35.765  &lt; 2e-16 ***\nORIGIN_GRID1531     3.1624010  0.0763424    41.424  &lt; 2e-16 ***\nORIGIN_GRID1532     2.2689000  0.0766157    29.614  &lt; 2e-16 ***\nORIGIN_GRID1544     2.4742762  0.0764531    32.363  &lt; 2e-16 ***\nORIGIN_GRID1545     2.4348010  0.0763810    31.877  &lt; 2e-16 ***\nORIGIN_GRID1546     3.1477439  0.0763174    41.245  &lt; 2e-16 ***\nORIGIN_GRID1547     2.1149093  0.0764708    27.656  &lt; 2e-16 ***\nORIGIN_GRID1548     3.2166371  0.0763352    42.138  &lt; 2e-16 ***\nORIGIN_GRID1549     2.9338862  0.0763622    38.421  &lt; 2e-16 ***\nORIGIN_GRID1550     3.5390294  0.0762992    46.384  &lt; 2e-16 ***\nORIGIN_GRID1551     1.1409132  0.0772120    14.776  &lt; 2e-16 ***\nORIGIN_GRID1552     3.3112832  0.0763593    43.364  &lt; 2e-16 ***\nORIGIN_GRID156      1.0062965  0.0994766    10.116  &lt; 2e-16 ***\nORIGIN_GRID1563     2.7191076  0.0763908    35.595  &lt; 2e-16 ***\nORIGIN_GRID1564     2.6531737  0.0763633    34.744  &lt; 2e-16 ***\nORIGIN_GRID1565     2.3429083  0.0764095    30.663  &lt; 2e-16 ***\nORIGIN_GRID1566     0.1258336  0.0791232     1.590 0.111756    \nORIGIN_GRID1567     2.8776807  0.0763760    37.678  &lt; 2e-16 ***\nORIGIN_GRID1568     3.2908352  0.0763129    43.123  &lt; 2e-16 ***\nORIGIN_GRID1569     3.0051867  0.0763502    39.361  &lt; 2e-16 ***\nORIGIN_GRID1570     3.1482200  0.0763397    41.240  &lt; 2e-16 ***\nORIGIN_GRID1571     4.0012710  0.0764324    52.350  &lt; 2e-16 ***\nORIGIN_GRID158      0.3086157  0.0895628     3.446 0.000569 ***\nORIGIN_GRID1582     1.4364264  0.0767790    18.709  &lt; 2e-16 ***\nORIGIN_GRID1583     2.5839295  0.0763541    33.841  &lt; 2e-16 ***\nORIGIN_GRID1584     1.7979587  0.0765173    23.497  &lt; 2e-16 ***\nORIGIN_GRID1585     1.2978413  0.0769754    16.860  &lt; 2e-16 ***\nORIGIN_GRID1587     3.3642333  0.0763199    44.081  &lt; 2e-16 ***\nORIGIN_GRID1588     3.4248039  0.0762964    44.888  &lt; 2e-16 ***\nORIGIN_GRID1589     3.0862873  0.0763278    40.435  &lt; 2e-16 ***\nORIGIN_GRID159      1.8973205  0.0768890    24.676  &lt; 2e-16 ***\nORIGIN_GRID1590     2.8197298  0.0763993    36.908  &lt; 2e-16 ***\nORIGIN_GRID1591     0.8149655  0.0821411     9.922  &lt; 2e-16 ***\nORIGIN_GRID160      3.1040770  0.0764796    40.587  &lt; 2e-16 ***\nORIGIN_GRID1601     2.3374956  0.0764416    30.579  &lt; 2e-16 ***\nORIGIN_GRID1602     2.5829879  0.0766391    33.703  &lt; 2e-16 ***\nORIGIN_GRID1603     1.3818683  0.0768312    17.986  &lt; 2e-16 ***\nORIGIN_GRID1604     0.9556160  0.0795969    12.006  &lt; 2e-16 ***\nORIGIN_GRID1606     2.9568543  0.0763409    38.732  &lt; 2e-16 ***\nORIGIN_GRID1607     2.6147622  0.0764102    34.220  &lt; 2e-16 ***\nORIGIN_GRID1608     3.4922208  0.0762979    45.771  &lt; 2e-16 ***\nORIGIN_GRID1609     3.4552435  0.0763236    45.271  &lt; 2e-16 ***\nORIGIN_GRID1610     3.1967608  0.0769863    41.524  &lt; 2e-16 ***\nORIGIN_GRID1620     2.8053963  0.0763740    36.732  &lt; 2e-16 ***\nORIGIN_GRID1621     2.2602007  0.0764697    29.557  &lt; 2e-16 ***\nORIGIN_GRID1622     2.7346022  0.0764827    35.755  &lt; 2e-16 ***\nORIGIN_GRID1623     0.9589642  0.0773274    12.401  &lt; 2e-16 ***\nORIGIN_GRID1624     0.8693170  0.0806632    10.777  &lt; 2e-16 ***\nORIGIN_GRID1625    -0.2673497  0.0826583    -3.234 0.001219 ** \nORIGIN_GRID1626     3.2789911  0.0763405    42.952  &lt; 2e-16 ***\nORIGIN_GRID1627     3.1244123  0.0763237    40.936  &lt; 2e-16 ***\nORIGIN_GRID1628     3.4003970  0.0763242    44.552  &lt; 2e-16 ***\nORIGIN_GRID1629     2.1187917  0.0765776    27.669  &lt; 2e-16 ***\nORIGIN_GRID1630     1.6338672  0.0799460    20.437  &lt; 2e-16 ***\nORIGIN_GRID1639     2.2665786  0.0765488    29.610  &lt; 2e-16 ***\nORIGIN_GRID1640     3.1584121  0.0763074    41.391  &lt; 2e-16 ***\nORIGIN_GRID1641     3.1063685  0.0763193    40.702  &lt; 2e-16 ***\nORIGIN_GRID1645     3.1027459  0.0763988    40.612  &lt; 2e-16 ***\nORIGIN_GRID1646     3.0399627  0.0763480    39.817  &lt; 2e-16 ***\nORIGIN_GRID1647     3.3880666  0.0763040    44.402  &lt; 2e-16 ***\nORIGIN_GRID1648     0.8041455  0.0833019     9.653  &lt; 2e-16 ***\nORIGIN_GRID1658     2.6734903  0.0763951    34.996  &lt; 2e-16 ***\nORIGIN_GRID1659     2.3512172  0.0764396    30.759  &lt; 2e-16 ***\nORIGIN_GRID1660     2.8040157  0.0763581    36.722  &lt; 2e-16 ***\nORIGIN_GRID1661     2.0936285  0.0765647    27.345  &lt; 2e-16 ***\nORIGIN_GRID1663    -0.3437863  0.0973503    -3.531 0.000413 ***\nORIGIN_GRID1665     2.3491313  0.0765474    30.689  &lt; 2e-16 ***\nORIGIN_GRID1666     4.1119565  0.0762798    53.906  &lt; 2e-16 ***\nORIGIN_GRID1667     0.3664530  0.0839037     4.368 1.26e-05 ***\nORIGIN_GRID1668     2.6876344  0.0768779    34.960  &lt; 2e-16 ***\nORIGIN_GRID1677     2.6024853  0.0763785    34.074  &lt; 2e-16 ***\nORIGIN_GRID1678     2.9359711  0.0763540    38.452  &lt; 2e-16 ***\nORIGIN_GRID1679     3.2437530  0.0763357    42.493  &lt; 2e-16 ***\nORIGIN_GRID1682     0.7693707  0.0801840     9.595  &lt; 2e-16 ***\nORIGIN_GRID1684     4.0488968  0.0766489    52.824  &lt; 2e-16 ***\nORIGIN_GRID1685     3.0961352  0.0763555    40.549  &lt; 2e-16 ***\nORIGIN_GRID1696     2.8705377  0.0764422    37.552  &lt; 2e-16 ***\nORIGIN_GRID1697     1.5680051  0.0772286    20.303  &lt; 2e-16 ***\nORIGIN_GRID1698     3.0813005  0.0768254    40.108  &lt; 2e-16 ***\nORIGIN_GRID1699     2.9042597  0.0763647    38.031  &lt; 2e-16 ***\nORIGIN_GRID1702    -0.5336245  0.0892193    -5.981 2.22e-09 ***\nORIGIN_GRID1704     2.9000977  0.0763732    37.973  &lt; 2e-16 ***\nORIGIN_GRID1705     3.1423355  0.0766729    40.984  &lt; 2e-16 ***\nORIGIN_GRID1715     2.7392417  0.0763676    35.869  &lt; 2e-16 ***\nORIGIN_GRID1716     1.4011340  0.0767807    18.249  &lt; 2e-16 ***\nORIGIN_GRID1717     2.2458304  0.0766916    29.284  &lt; 2e-16 ***\nORIGIN_GRID1718    -1.8250774  0.1447949   -12.605  &lt; 2e-16 ***\nORIGIN_GRID1721    -1.0659327  0.1021948   -10.430  &lt; 2e-16 ***\nORIGIN_GRID1723     2.4403794  0.0766819    31.825  &lt; 2e-16 ***\nORIGIN_GRID1735     1.6322949  0.0767200    21.276  &lt; 2e-16 ***\nORIGIN_GRID1736     3.5996798  0.0764174    47.105  &lt; 2e-16 ***\nORIGIN_GRID1737     2.8474170  0.0763904    37.275  &lt; 2e-16 ***\nORIGIN_GRID1740     0.5199204  0.0809689     6.421 1.35e-10 ***\nORIGIN_GRID1742     2.3599470  0.0767424    30.752  &lt; 2e-16 ***\nORIGIN_GRID1753     2.1997944  0.0765094    28.752  &lt; 2e-16 ***\nORIGIN_GRID1754     3.0441461  0.0763478    39.872  &lt; 2e-16 ***\nORIGIN_GRID1755     3.9332835  0.0763287    51.531  &lt; 2e-16 ***\nORIGIN_GRID1758    -0.2287153  0.0862258    -2.653 0.007989 ** \nORIGIN_GRID177     -0.4334714  0.1091400    -3.972 7.14e-05 ***\nORIGIN_GRID1773     1.9259239  0.0766680    25.120  &lt; 2e-16 ***\nORIGIN_GRID1774     3.8190883  0.0762799    50.067  &lt; 2e-16 ***\nORIGIN_GRID1775     2.5247118  0.0765149    32.996  &lt; 2e-16 ***\nORIGIN_GRID1776     3.4169958  0.0763415    44.759  &lt; 2e-16 ***\nORIGIN_GRID1778    -0.5224982  0.1123248    -4.652 3.29e-06 ***\nORIGIN_GRID178     -0.5822520  0.0854395    -6.815 9.44e-12 ***\nORIGIN_GRID179     -1.1660756  0.1455974    -8.009 1.16e-15 ***\nORIGIN_GRID1791     2.0334040  0.0766072    26.543  &lt; 2e-16 ***\nORIGIN_GRID1792     0.9402366  0.0773357    12.158  &lt; 2e-16 ***\nORIGIN_GRID1793     3.3932328  0.0763435    44.447  &lt; 2e-16 ***\nORIGIN_GRID1794     2.0468673  0.0769673    26.594  &lt; 2e-16 ***\nORIGIN_GRID1795     3.5817909  0.0763450    46.916  &lt; 2e-16 ***\nORIGIN_GRID1796     2.2206123  0.0765843    28.996  &lt; 2e-16 ***\nORIGIN_GRID1797     2.7932699  0.0764674    36.529  &lt; 2e-16 ***\nORIGIN_GRID1811     2.4547614  0.0764322    32.117  &lt; 2e-16 ***\nORIGIN_GRID1812     3.2965753  0.0763173    43.196  &lt; 2e-16 ***\nORIGIN_GRID1813     2.8820691  0.0763807    37.733  &lt; 2e-16 ***\nORIGIN_GRID1814     3.8195021  0.0763310    50.039  &lt; 2e-16 ***\nORIGIN_GRID1815     3.4949312  0.0763337    45.785  &lt; 2e-16 ***\nORIGIN_GRID1816     2.1585084  0.0767558    28.122  &lt; 2e-16 ***\nORIGIN_GRID1817     1.4105186  0.0778533    18.118  &lt; 2e-16 ***\nORIGIN_GRID1830     3.1319118  0.0764302    40.977  &lt; 2e-16 ***\nORIGIN_GRID1831     3.6086115  0.0763108    47.288  &lt; 2e-16 ***\nORIGIN_GRID1832     2.8678550  0.0763635    37.555  &lt; 2e-16 ***\nORIGIN_GRID1833     3.2602905  0.0763594    42.697  &lt; 2e-16 ***\nORIGIN_GRID1834     1.8940748  0.0770485    24.583  &lt; 2e-16 ***\nORIGIN_GRID1835     3.5302204  0.0763243    46.253  &lt; 2e-16 ***\nORIGIN_GRID1849     2.1504529  0.0765842    28.080  &lt; 2e-16 ***\nORIGIN_GRID1850     3.2393247  0.0763377    42.434  &lt; 2e-16 ***\nORIGIN_GRID1851    -0.3450112  0.0998177    -3.456 0.000547 ***\nORIGIN_GRID1852     3.2446330  0.0763199    42.514  &lt; 2e-16 ***\nORIGIN_GRID1853     3.3080589  0.0763961    43.301  &lt; 2e-16 ***\nORIGIN_GRID1854     3.2662467  0.0763582    42.775  &lt; 2e-16 ***\nORIGIN_GRID1855     2.7780571  0.0772948    35.941  &lt; 2e-16 ***\nORIGIN_GRID1868     3.2293670  0.0763654    42.288  &lt; 2e-16 ***\nORIGIN_GRID1869     1.8160597  0.0766637    23.689  &lt; 2e-16 ***\nORIGIN_GRID1870     2.1510536  0.0795676    27.034  &lt; 2e-16 ***\nORIGIN_GRID1871     3.9806154  0.0762751    52.188  &lt; 2e-16 ***\nORIGIN_GRID1872     3.2495348  0.0765195    42.467  &lt; 2e-16 ***\nORIGIN_GRID1873     3.1205219  0.0764061    40.841  &lt; 2e-16 ***\nORIGIN_GRID1887     1.7146370  0.0767696    22.335  &lt; 2e-16 ***\nORIGIN_GRID1888     3.4282067  0.0763270    44.915  &lt; 2e-16 ***\nORIGIN_GRID1889     2.2935268  0.0765117    29.976  &lt; 2e-16 ***\nORIGIN_GRID1890     3.0468266  0.0763565    39.903  &lt; 2e-16 ***\nORIGIN_GRID1891     2.8966465  0.0764781    37.875  &lt; 2e-16 ***\nORIGIN_GRID1892     3.5917088  0.0763004    47.073  &lt; 2e-16 ***\nORIGIN_GRID1893     0.2149659  0.0989867     2.172 0.029881 *  \nORIGIN_GRID1905    -0.6255985  0.1245911    -5.021 5.13e-07 ***\nORIGIN_GRID1906     0.3452199  0.0784221     4.402 1.07e-05 ***\nORIGIN_GRID1907     1.5749357  0.0766993    20.534  &lt; 2e-16 ***\nORIGIN_GRID1908     3.0204748  0.0764034    39.533  &lt; 2e-16 ***\nORIGIN_GRID1909     3.3281423  0.0763411    43.596  &lt; 2e-16 ***\nORIGIN_GRID1910     2.5014166  0.0765499    32.677  &lt; 2e-16 ***\nORIGIN_GRID1911     1.1909501  0.0853650    13.951  &lt; 2e-16 ***\nORIGIN_GRID1926     1.3894016  0.0773889    17.954  &lt; 2e-16 ***\nORIGIN_GRID1927     0.8872635  0.0776107    11.432  &lt; 2e-16 ***\nORIGIN_GRID1928     3.3612522  0.0763204    44.041  &lt; 2e-16 ***\nORIGIN_GRID1929     3.7102564  0.0763484    48.596  &lt; 2e-16 ***\nORIGIN_GRID1930     2.6663163  0.0764450    34.879  &lt; 2e-16 ***\nORIGIN_GRID1944     1.9006140  0.0770057    24.681  &lt; 2e-16 ***\nORIGIN_GRID1945     0.8981548  0.0777851    11.547  &lt; 2e-16 ***\nORIGIN_GRID1946     3.2956142  0.0763526    43.163  &lt; 2e-16 ***\nORIGIN_GRID1947     3.5590815  0.0762982    46.647  &lt; 2e-16 ***\nORIGIN_GRID1948     3.6551082  0.0763137    47.896  &lt; 2e-16 ***\nORIGIN_GRID1949     3.1104018  0.0764114    40.706  &lt; 2e-16 ***\nORIGIN_GRID195     -0.1534332  0.1152247    -1.332 0.182992    \nORIGIN_GRID196      3.3829697  0.0764091    44.274  &lt; 2e-16 ***\nORIGIN_GRID1965     2.0404441  0.0765221    26.665  &lt; 2e-16 ***\nORIGIN_GRID1966     2.5501355  0.0765953    33.294  &lt; 2e-16 ***\nORIGIN_GRID1967     2.7511093  0.0763875    36.015  &lt; 2e-16 ***\nORIGIN_GRID1968     3.1051417  0.0763963    40.645  &lt; 2e-16 ***\nORIGIN_GRID197      0.6287110  0.0790796     7.950 1.86e-15 ***\nORIGIN_GRID1983     2.2675689  0.0766166    29.596  &lt; 2e-16 ***\nORIGIN_GRID1984     1.4769778  0.0769562    19.192  &lt; 2e-16 ***\nORIGIN_GRID1985     2.7389962  0.0764453    35.830  &lt; 2e-16 ***\nORIGIN_GRID1986     2.8482066  0.0763846    37.288  &lt; 2e-16 ***\nORIGIN_GRID1987     2.8834626  0.0788026    36.591  &lt; 2e-16 ***\nORIGIN_GRID2002    -0.0455846  0.1123248    -0.406 0.684869    \nORIGIN_GRID2003    -0.4753490  0.0843473    -5.636 1.74e-08 ***\nORIGIN_GRID2004     0.6778797  0.0802632     8.446  &lt; 2e-16 ***\nORIGIN_GRID2005     2.6489618  0.0764965    34.629  &lt; 2e-16 ***\nORIGIN_GRID2006     1.7259616  0.0769612    22.426  &lt; 2e-16 ***\nORIGIN_GRID2021    -0.3473636  0.0879189    -3.951 7.78e-05 ***\nORIGIN_GRID2022     1.6455693  0.0785948    20.937  &lt; 2e-16 ***\nORIGIN_GRID2023     1.6177513  0.0772087    20.953  &lt; 2e-16 ***\nORIGIN_GRID2024     1.6485718  0.0772496    21.341  &lt; 2e-16 ***\nORIGIN_GRID2025    -0.1968174  0.0945466    -2.082 0.037370 *  \nORIGIN_GRID2042     0.4220035  0.0869441     4.854 1.21e-06 ***\nORIGIN_GRID2043     1.2144337  0.0785279    15.465  &lt; 2e-16 ***\nORIGIN_GRID2044     0.8541552  0.0775918    11.008  &lt; 2e-16 ***\nORIGIN_GRID2045     0.9963363  0.0830863    11.992  &lt; 2e-16 ***\nORIGIN_GRID2061     1.1580434  0.0845854    13.691  &lt; 2e-16 ***\nORIGIN_GRID2062     1.2921886  0.0777227    16.626  &lt; 2e-16 ***\nORIGIN_GRID2063     0.5051466  0.0786973     6.419 1.37e-10 ***\nORIGIN_GRID2064    -1.7478068  0.1269781   -13.765  &lt; 2e-16 ***\nORIGIN_GRID2079     2.3104927  0.0767213    30.115  &lt; 2e-16 ***\nORIGIN_GRID2082    -0.9191289  0.1017820    -9.030  &lt; 2e-16 ***\nORIGIN_GRID2083     0.5771415  0.0783724     7.364 1.78e-13 ***\nORIGIN_GRID2098     0.9038008  0.0783021    11.542  &lt; 2e-16 ***\nORIGIN_GRID2099     2.1628335  0.0768634    28.139  &lt; 2e-16 ***\nORIGIN_GRID21      -0.3953017  0.1481317    -2.669 0.007617 ** \nORIGIN_GRID2102     1.7242067  0.0770000    22.392  &lt; 2e-16 ***\nORIGIN_GRID2115     3.2381096  0.0776214    41.717  &lt; 2e-16 ***\nORIGIN_GRID2119     2.4511302  0.0767338    31.943  &lt; 2e-16 ***\nORIGIN_GRID2121     1.4603247  0.0774113    18.864  &lt; 2e-16 ***\nORIGIN_GRID2137     2.0059258  0.0770495    26.034  &lt; 2e-16 ***\nORIGIN_GRID2140    -1.4764026  0.1053810   -14.010  &lt; 2e-16 ***\nORIGIN_GRID215     -2.3951550  0.1773558   -13.505  &lt; 2e-16 ***\nORIGIN_GRID2153     3.1240471  0.0779443    40.081  &lt; 2e-16 ***\nORIGIN_GRID2158     1.6633970  0.0775520    21.449  &lt; 2e-16 ***\nORIGIN_GRID216     -0.8060693  0.1043560    -7.724 1.13e-14 ***\nORIGIN_GRID217     -0.5564041  0.1559888    -3.567 0.000361 ***\nORIGIN_GRID2177     1.5487751  0.0775311    19.976  &lt; 2e-16 ***\nORIGIN_GRID2178     0.0827397  0.0827868     0.999 0.317586    \nORIGIN_GRID2196     1.2323158  0.0803511    15.337  &lt; 2e-16 ***\nORIGIN_GRID2197     2.4249325  0.0769339    31.520  &lt; 2e-16 ***\nORIGIN_GRID2267     2.1720015  0.0853761    25.440  &lt; 2e-16 ***\nORIGIN_GRID233     -0.1415880  0.0956417    -1.480 0.138766    \nORIGIN_GRID234      0.1702839  0.0813946     2.092 0.036432 *  \nORIGIN_GRID235      0.3165636  0.0859295     3.684 0.000230 ***\nORIGIN_GRID252      0.5276349  0.0837160     6.303 2.93e-10 ***\nORIGIN_GRID253     -0.8049858  0.0877746    -9.171  &lt; 2e-16 ***\nORIGIN_GRID254     -0.7688938  0.0898691    -8.556  &lt; 2e-16 ***\nORIGIN_GRID270     -2.7620668  0.3419431    -8.078 6.61e-16 ***\nORIGIN_GRID271     -0.2935132  0.0924862    -3.174 0.001506 ** \nORIGIN_GRID272      2.3361647  0.0767005    30.458  &lt; 2e-16 ***\nORIGIN_GRID290      0.3930971  0.0905887     4.339 1.43e-05 ***\nORIGIN_GRID291     -0.7969186  0.1066286    -7.474 7.79e-14 ***\nORIGIN_GRID292      0.8502945  0.0861194     9.873  &lt; 2e-16 ***\nORIGIN_GRID308      0.7899378  0.0809071     9.764  &lt; 2e-16 ***\nORIGIN_GRID309     -0.4703844  0.0884194    -5.320 1.04e-07 ***\nORIGIN_GRID310     -0.0772629  0.0861196    -0.897 0.369635    \nORIGIN_GRID329      1.5027233  0.0848135    17.718  &lt; 2e-16 ***\nORIGIN_GRID330      0.5086897  0.0805960     6.312 2.76e-10 ***\nORIGIN_GRID347      0.2226811  0.0821339     2.711 0.006704 ** \nORIGIN_GRID348     -0.7170407  0.0904019    -7.932 2.16e-15 ***\nORIGIN_GRID349      0.9372348  0.0893224    10.493  &lt; 2e-16 ***\nORIGIN_GRID366      0.8731850  0.0815435    10.708  &lt; 2e-16 ***\nORIGIN_GRID367     -0.4565092  0.0919003    -4.967 6.78e-07 ***\nORIGIN_GRID368      4.2963403  0.0762857    56.319  &lt; 2e-16 ***\nORIGIN_GRID369      0.4621852  0.0855984     5.399 6.68e-08 ***\nORIGIN_GRID370      1.5905908  0.0782548    20.326  &lt; 2e-16 ***\nORIGIN_GRID385     -1.7054284  0.1224268   -13.930  &lt; 2e-16 ***\nORIGIN_GRID386      0.2474388  0.0820101     3.017 0.002551 ** \nORIGIN_GRID387     -0.4222611  0.0871948    -4.843 1.28e-06 ***\nORIGIN_GRID388     -0.1255122  0.1062017    -1.182 0.237274    \nORIGIN_GRID389      1.9138333  0.0781703    24.483  &lt; 2e-16 ***\nORIGIN_GRID40       0.0335978  0.1606675     0.209 0.834359    \nORIGIN_GRID404      0.2413709  0.0959968     2.514 0.011925 *  \nORIGIN_GRID405      0.0150870  0.0861946     0.175 0.861053    \nORIGIN_GRID406      0.3667033  0.0803539     4.564 5.03e-06 ***\nORIGIN_GRID407      3.3299323  0.0764811    43.539  &lt; 2e-16 ***\nORIGIN_GRID408      1.5175055  0.0781686    19.413  &lt; 2e-16 ***\nORIGIN_GRID42      -0.7837705  0.1198373    -6.540 6.14e-11 ***\nORIGIN_GRID424      0.2769487  0.0821233     3.372 0.000745 ***\nORIGIN_GRID425      1.2678547  0.0777054    16.316  &lt; 2e-16 ***\nORIGIN_GRID426      3.8726767  0.0763650    50.713  &lt; 2e-16 ***\nORIGIN_GRID427      2.1348416  0.0776168    27.505  &lt; 2e-16 ***\nORIGIN_GRID442      0.3698725  0.0941920     3.927 8.61e-05 ***\nORIGIN_GRID443     -1.8744768  0.1773558   -10.569  &lt; 2e-16 ***\nORIGIN_GRID444      1.7615007  0.0772211    22.811  &lt; 2e-16 ***\nORIGIN_GRID445      2.7154157  0.0765800    35.459  &lt; 2e-16 ***\nORIGIN_GRID447     -2.8011646  0.1832811   -15.283  &lt; 2e-16 ***\nORIGIN_GRID448     -0.2610409  0.0986701    -2.646 0.008155 ** \nORIGIN_GRID461      0.0043479  0.0845420     0.051 0.958984    \nORIGIN_GRID462      0.6920066  0.0803027     8.617  &lt; 2e-16 ***\nORIGIN_GRID463      1.6458515  0.0770065    21.373  &lt; 2e-16 ***\nORIGIN_GRID464      4.1986693  0.0763017    55.027  &lt; 2e-16 ***\nORIGIN_GRID465      0.8344439  0.0796567    10.475  &lt; 2e-16 ***\nORIGIN_GRID466     -0.0188751  0.0854276    -0.221 0.825133    \nORIGIN_GRID467     -2.6084395  0.1689423   -15.440  &lt; 2e-16 ***\nORIGIN_GRID480     -0.2625512  0.1157143    -2.269 0.023271 *  \nORIGIN_GRID481      0.9257183  0.0786234    11.774  &lt; 2e-16 ***\nORIGIN_GRID482      0.1147918  0.0802878     1.430 0.152788    \nORIGIN_GRID483      4.0334569  0.0762979    52.865  &lt; 2e-16 ***\nORIGIN_GRID484      4.1842092  0.0763179    54.826  &lt; 2e-16 ***\nORIGIN_GRID486      0.9446959  0.0803115    11.763  &lt; 2e-16 ***\nORIGIN_GRID487     -2.0859635  0.1417741   -14.713  &lt; 2e-16 ***\nORIGIN_GRID488     -1.8363724  0.2220195    -8.271  &lt; 2e-16 ***\nORIGIN_GRID489     -2.4534518  1.0029028    -2.446 0.014431 *  \nORIGIN_GRID499      0.0991235  0.0929027     1.067 0.285990    \nORIGIN_GRID500      0.6830472  0.0843576     8.097 5.63e-16 ***\nORIGIN_GRID501      0.7763076  0.0782030     9.927  &lt; 2e-16 ***\nORIGIN_GRID502      3.9706814  0.0763168    52.029  &lt; 2e-16 ***\nORIGIN_GRID503      3.1584875  0.0765421    41.265  &lt; 2e-16 ***\nORIGIN_GRID507     -0.6923975  0.1238470    -5.591 2.26e-08 ***\nORIGIN_GRID508      0.9228384  0.0885127    10.426  &lt; 2e-16 ***\nORIGIN_GRID509     -3.7263609  1.0029029    -3.716 0.000203 ***\nORIGIN_GRID518     -3.0055885  0.4153080    -7.237 4.59e-13 ***\nORIGIN_GRID519     -0.2446448  0.0868055    -2.818 0.004828 ** \nORIGIN_GRID520      0.9206236  0.0846596    10.874  &lt; 2e-16 ***\nORIGIN_GRID521      4.5229427  0.0762669    59.304  &lt; 2e-16 ***\nORIGIN_GRID522      3.4824873  0.0763796    45.594  &lt; 2e-16 ***\nORIGIN_GRID524     -1.2867365  0.1238469   -10.390  &lt; 2e-16 ***\nORIGIN_GRID528     -1.6911607  0.1291657   -13.093  &lt; 2e-16 ***\nORIGIN_GRID529     -2.2364425  0.4153084    -5.385 7.24e-08 ***\nORIGIN_GRID530      0.9780461  0.0919775    10.634  &lt; 2e-16 ***\nORIGIN_GRID537      0.1884639  0.0901899     2.090 0.036651 *  \nORIGIN_GRID538      0.8169798  0.0803080    10.173  &lt; 2e-16 ***\nORIGIN_GRID539      0.5465468  0.0785093     6.962 3.37e-12 ***\nORIGIN_GRID540      3.2533067  0.0763475    42.612  &lt; 2e-16 ***\nORIGIN_GRID541      0.3282271  0.0954132     3.440 0.000582 ***\nORIGIN_GRID547     -0.8924895  0.1336506    -6.678 2.43e-11 ***\nORIGIN_GRID548     -1.2069448  0.1978580    -6.100 1.06e-09 ***\nORIGIN_GRID557     -0.3956515  0.0890152    -4.445 8.80e-06 ***\nORIGIN_GRID558      0.4609309  0.0824402     5.591 2.26e-08 ***\nORIGIN_GRID559      1.0271557  0.0783338    13.113  &lt; 2e-16 ***\nORIGIN_GRID560      3.6793715  0.0763223    48.208  &lt; 2e-16 ***\nORIGIN_GRID562      0.6152691  0.0818725     7.515 5.69e-14 ***\nORIGIN_GRID577     -0.3648024  0.0867715    -4.204 2.62e-05 ***\nORIGIN_GRID578      3.3758729  0.0763409    44.221  &lt; 2e-16 ***\nORIGIN_GRID595      1.3084592  0.0778626    16.805  &lt; 2e-16 ***\nORIGIN_GRID596      2.5159424  0.0764858    32.894  &lt; 2e-16 ***\nORIGIN_GRID597      2.9749416  0.0764142    38.932  &lt; 2e-16 ***\nORIGIN_GRID598      3.9116417  0.0763017    51.265  &lt; 2e-16 ***\nORIGIN_GRID60      -0.5222685  0.1508745    -3.462 0.000537 ***\nORIGIN_GRID600      3.2280664  0.0765483    42.170  &lt; 2e-16 ***\nORIGIN_GRID61       0.6529707  0.0805247     8.109 5.11e-16 ***\nORIGIN_GRID613      1.5152680  0.0794800    19.065  &lt; 2e-16 ***\nORIGIN_GRID614     -0.8434712  0.0892702    -9.449  &lt; 2e-16 ***\nORIGIN_GRID615      3.7518287  0.0763131    49.164  &lt; 2e-16 ***\nORIGIN_GRID616      3.7709908  0.0763111    49.416  &lt; 2e-16 ***\nORIGIN_GRID617      2.9402562  0.0766718    38.349  &lt; 2e-16 ***\nORIGIN_GRID62      -0.8362508  0.1341979    -6.231 4.62e-10 ***\nORIGIN_GRID633      0.9984412  0.0794625    12.565  &lt; 2e-16 ***\nORIGIN_GRID634      2.6433700  0.0764638    34.570  &lt; 2e-16 ***\nORIGIN_GRID635      3.0009654  0.0764679    39.245  &lt; 2e-16 ***\nORIGIN_GRID636      3.7311208  0.0763110    48.894  &lt; 2e-16 ***\nORIGIN_GRID638      0.1937552  0.0825907     2.346 0.018978 *  \nORIGIN_GRID654      1.0664616  0.0782481    13.629  &lt; 2e-16 ***\nORIGIN_GRID657      0.1477820  0.0862572     1.713 0.086663 .  \nORIGIN_GRID671      1.3095533  0.0779394    16.802  &lt; 2e-16 ***\nORIGIN_GRID673      1.3461727  0.0772207    17.433  &lt; 2e-16 ***\nORIGIN_GRID674      3.1976710  0.0763548    41.879  &lt; 2e-16 ***\nORIGIN_GRID689      0.6187551  0.0810582     7.633 2.29e-14 ***\nORIGIN_GRID690      2.8111528  0.0765572    36.720  &lt; 2e-16 ***\nORIGIN_GRID691      0.0656504  0.0808242     0.812 0.416642    \nORIGIN_GRID692      3.6417122  0.0763017    47.728  &lt; 2e-16 ***\nORIGIN_GRID693      3.0906793  0.0766738    40.309  &lt; 2e-16 ***\nORIGIN_GRID695      4.2236898  0.0763194    55.342  &lt; 2e-16 ***\nORIGIN_GRID700     -0.7707937  0.1064843    -7.239 4.53e-13 ***\nORIGIN_GRID710     -0.0876017  0.0807087    -1.085 0.277742    \nORIGIN_GRID711      2.9556694  0.0763504    38.712  &lt; 2e-16 ***\nORIGIN_GRID712      2.4452880  0.0764614    31.981  &lt; 2e-16 ***\nORIGIN_GRID713      2.9325523  0.0765639    38.302  &lt; 2e-16 ***\nORIGIN_GRID714      3.5852379  0.0764114    46.920  &lt; 2e-16 ***\nORIGIN_GRID715      2.4536370  0.0769190    31.899  &lt; 2e-16 ***\nORIGIN_GRID727     -0.4118420  0.0928602    -4.435 9.20e-06 ***\nORIGIN_GRID728      3.6210763  0.0763376    47.435  &lt; 2e-16 ***\nORIGIN_GRID729      3.3332337  0.0763086    43.681  &lt; 2e-16 ***\nORIGIN_GRID730      3.1615084  0.0763512    41.407  &lt; 2e-16 ***\nORIGIN_GRID731      4.0472574  0.0763463    53.012  &lt; 2e-16 ***\nORIGIN_GRID732      2.4124626  0.0769970    31.332  &lt; 2e-16 ***\nORIGIN_GRID733      3.9324189  0.0763027    51.537  &lt; 2e-16 ***\nORIGIN_GRID734      3.4274152  0.0764363    44.840  &lt; 2e-16 ***\nORIGIN_GRID738      0.9999937  0.0807543    12.383  &lt; 2e-16 ***\nORIGIN_GRID746     -0.0630463  0.0851034    -0.741 0.458803    \nORIGIN_GRID748      1.2730576  0.0768693    16.561  &lt; 2e-16 ***\nORIGIN_GRID749      3.4271512  0.0763274    44.901  &lt; 2e-16 ***\nORIGIN_GRID750      3.4290744  0.0763197    44.930  &lt; 2e-16 ***\nORIGIN_GRID751      3.4776318  0.0763625    45.541  &lt; 2e-16 ***\nORIGIN_GRID752      3.6299691  0.0763970    47.515  &lt; 2e-16 ***\nORIGIN_GRID753      3.8837715  0.0762879    50.909  &lt; 2e-16 ***\nORIGIN_GRID754      3.3274197  0.0763960    43.555  &lt; 2e-16 ***\nORIGIN_GRID757      0.4485821  0.0813944     5.511 3.56e-08 ***\nORIGIN_GRID764     -0.6201556  0.1063417    -5.832 5.49e-09 ***\nORIGIN_GRID766      2.6912222  0.0764032    35.224  &lt; 2e-16 ***\nORIGIN_GRID767      1.8590057  0.0767298    24.228  &lt; 2e-16 ***\nORIGIN_GRID768      3.0264358  0.0763764    39.625  &lt; 2e-16 ***\nORIGIN_GRID769      2.1874247  0.0766049    28.555  &lt; 2e-16 ***\nORIGIN_GRID770      2.8529184  0.0764125    37.336  &lt; 2e-16 ***\nORIGIN_GRID771      3.3578559  0.0763399    43.986  &lt; 2e-16 ***\nORIGIN_GRID772      3.2322796  0.0764656    42.271  &lt; 2e-16 ***\nORIGIN_GRID773      4.7219723  0.0763176    61.873  &lt; 2e-16 ***\nORIGIN_GRID774      1.1115809  0.0802881    13.845  &lt; 2e-16 ***\nORIGIN_GRID775     -0.3638191  0.0874771    -4.159 3.20e-05 ***\nORIGIN_GRID776      1.3284168  0.0783514    16.955  &lt; 2e-16 ***\nORIGIN_GRID78       0.0278234  0.1107501     0.251 0.801639    \nORIGIN_GRID784      0.6208260  0.0807143     7.692 1.45e-14 ***\nORIGIN_GRID785      1.5068901  0.0770370    19.561  &lt; 2e-16 ***\nORIGIN_GRID786      0.7439407  0.0782257     9.510  &lt; 2e-16 ***\nORIGIN_GRID787      3.5073442  0.0764601    45.872  &lt; 2e-16 ***\nORIGIN_GRID788      3.8130777  0.0762856    49.984  &lt; 2e-16 ***\nORIGIN_GRID789      3.4328151  0.0764072    44.928  &lt; 2e-16 ***\nORIGIN_GRID79       0.7765966  0.1062002     7.313 2.62e-13 ***\nORIGIN_GRID790      1.5071987  0.0770171    19.570  &lt; 2e-16 ***\nORIGIN_GRID791      2.1123618  0.0768613    27.483  &lt; 2e-16 ***\nORIGIN_GRID792      2.0974594  0.0766289    27.372  &lt; 2e-16 ***\nORIGIN_GRID793     -1.1903669  0.0999906   -11.905  &lt; 2e-16 ***\nORIGIN_GRID794      0.1666836  0.0819745     2.033 0.042016 *  \nORIGIN_GRID795     -0.2705942  0.0854784    -3.166 0.001547 ** \nORIGIN_GRID80       1.3144307  0.0785469    16.734  &lt; 2e-16 ***\nORIGIN_GRID803      1.3676913  0.0773518    17.681  &lt; 2e-16 ***\nORIGIN_GRID804      2.4917297  0.0765327    32.558  &lt; 2e-16 ***\nORIGIN_GRID805     -0.1371954  0.0823027    -1.667 0.095522 .  \nORIGIN_GRID806      3.3765025  0.0763185    44.242  &lt; 2e-16 ***\nORIGIN_GRID807      2.5724660  0.0769809    33.417  &lt; 2e-16 ***\nORIGIN_GRID809      3.2994650  0.0763289    43.227  &lt; 2e-16 ***\nORIGIN_GRID81       0.1856491  0.0909449     2.041 0.041217 *  \nORIGIN_GRID810      1.5007698  0.0769235    19.510  &lt; 2e-16 ***\nORIGIN_GRID811      1.0025289  0.0776768    12.906  &lt; 2e-16 ***\nORIGIN_GRID812      0.0765841  0.0815194     0.939 0.347495    \nORIGIN_GRID813     -1.1655603  0.0971457   -11.998  &lt; 2e-16 ***\nORIGIN_GRID814      0.7678582  0.0822862     9.332  &lt; 2e-16 ***\nORIGIN_GRID82      -0.8461547  0.1447946    -5.844 5.10e-09 ***\nORIGIN_GRID822      2.1225632  0.0771303    27.519  &lt; 2e-16 ***\nORIGIN_GRID823      2.5357638  0.0764287    33.178  &lt; 2e-16 ***\nORIGIN_GRID824      0.7015818  0.0779374     9.002  &lt; 2e-16 ***\nORIGIN_GRID825      1.9267880  0.0766954    25.123  &lt; 2e-16 ***\nORIGIN_GRID826      3.0583117  0.0763452    40.059  &lt; 2e-16 ***\nORIGIN_GRID829      3.2210886  0.0763457    42.191  &lt; 2e-16 ***\nORIGIN_GRID831      2.4956017  0.0765553    32.599  &lt; 2e-16 ***\nORIGIN_GRID832     -0.6083688  0.0852131    -7.139 9.37e-13 ***\nORIGIN_GRID833      2.6078447  0.0767671    33.971  &lt; 2e-16 ***\nORIGIN_GRID840      1.6277727  0.0773228    21.052  &lt; 2e-16 ***\nORIGIN_GRID841      3.0180735  0.0763581    39.525  &lt; 2e-16 ***\nORIGIN_GRID842      3.6494581  0.0762900    47.837  &lt; 2e-16 ***\nORIGIN_GRID843      0.9085422  0.0780109    11.646  &lt; 2e-16 ***\nORIGIN_GRID844      1.2864211  0.0781838    16.454  &lt; 2e-16 ***\nORIGIN_GRID845      2.8995258  0.0764256    37.939  &lt; 2e-16 ***\nORIGIN_GRID846      0.6119715  0.0778681     7.859 3.87e-15 ***\nORIGIN_GRID847      3.5841343  0.0762899    46.980  &lt; 2e-16 ***\nORIGIN_GRID850     -2.3610466  0.2613697    -9.033  &lt; 2e-16 ***\nORIGIN_GRID851      3.7949629  0.0763210    49.724  &lt; 2e-16 ***\nORIGIN_GRID852     -0.4126661  0.1039912    -3.968 7.24e-05 ***\nORIGIN_GRID859      1.1143239  0.0773040    14.415  &lt; 2e-16 ***\nORIGIN_GRID860      3.2503845  0.0763771    42.557  &lt; 2e-16 ***\nORIGIN_GRID861      3.9613541  0.0762783    51.933  &lt; 2e-16 ***\nORIGIN_GRID862      1.4534363  0.0788020    18.444  &lt; 2e-16 ***\nORIGIN_GRID863      2.1529959  0.0767736    28.043  &lt; 2e-16 ***\nORIGIN_GRID864      0.5336942  0.0779705     6.845 7.66e-12 ***\nORIGIN_GRID865      2.5607012  0.0764157    33.510  &lt; 2e-16 ***\nORIGIN_GRID866      1.2200709  0.0769894    15.847  &lt; 2e-16 ***\nORIGIN_GRID867      3.4079868  0.0764222    44.594  &lt; 2e-16 ***\nORIGIN_GRID869      0.4495288  0.0898414     5.004 5.63e-07 ***\nORIGIN_GRID871      0.3369690  0.0819455     4.112 3.92e-05 ***\nORIGIN_GRID872     -0.2063194  0.1508760    -1.367 0.171476    \nORIGIN_GRID878      1.8998538  0.0765998    24.802  &lt; 2e-16 ***\nORIGIN_GRID879      3.1288252  0.0763206    40.996  &lt; 2e-16 ***\nORIGIN_GRID880      2.9799914  0.0763644    39.023  &lt; 2e-16 ***\nORIGIN_GRID882      2.2391021  0.0765558    29.248  &lt; 2e-16 ***\nORIGIN_GRID883      1.7970682  0.0767192    23.424  &lt; 2e-16 ***\nORIGIN_GRID884      0.4903674  0.0779247     6.293 3.12e-10 ***\nORIGIN_GRID885      3.5805360  0.0763167    46.917  &lt; 2e-16 ***\nORIGIN_GRID886      3.2250855  0.0765199    42.147  &lt; 2e-16 ***\nORIGIN_GRID890      1.1642191  0.0776306    14.997  &lt; 2e-16 ***\nORIGIN_GRID891      5.1629331  0.0763127    67.655  &lt; 2e-16 ***\nORIGIN_GRID897      1.7344439  0.0767085    22.611  &lt; 2e-16 ***\nORIGIN_GRID898      2.2211987  0.0765167    29.029  &lt; 2e-16 ***\nORIGIN_GRID899      1.9076011  0.0765718    24.913  &lt; 2e-16 ***\nORIGIN_GRID900      1.3084937  0.0769549    17.003  &lt; 2e-16 ***\nORIGIN_GRID901      2.7421918  0.0764129    35.887  &lt; 2e-16 ***\nORIGIN_GRID902      2.0734360  0.0765918    27.071  &lt; 2e-16 ***\nORIGIN_GRID903      0.8155371  0.0809226    10.078  &lt; 2e-16 ***\nORIGIN_GRID904      3.6215426  0.0763232    47.450  &lt; 2e-16 ***\nORIGIN_GRID905      3.6402901  0.0764099    47.642  &lt; 2e-16 ***\nORIGIN_GRID907      0.8024795  0.0799979    10.031  &lt; 2e-16 ***\nORIGIN_GRID909      3.3401445  0.0763347    43.757  &lt; 2e-16 ***\nORIGIN_GRID910      4.4855180  0.0762881    58.797  &lt; 2e-16 ***\nORIGIN_GRID915      0.3322274  0.0821613     4.044 5.26e-05 ***\nORIGIN_GRID916      0.2147420  0.0813673     2.639 0.008311 ** \nORIGIN_GRID917      0.6928245  0.0778973     8.894  &lt; 2e-16 ***\nORIGIN_GRID918      1.3146917  0.0769542    17.084  &lt; 2e-16 ***\nORIGIN_GRID919      0.8258854  0.0777234    10.626  &lt; 2e-16 ***\nORIGIN_GRID920      1.9682459  0.0765365    25.716  &lt; 2e-16 ***\nORIGIN_GRID922      2.4958926  0.0768063    32.496  &lt; 2e-16 ***\nORIGIN_GRID923      3.9183155  0.0763606    51.313  &lt; 2e-16 ***\nORIGIN_GRID927      2.7317588  0.0767598    35.588  &lt; 2e-16 ***\nORIGIN_GRID928      3.7663151  0.0763516    49.329  &lt; 2e-16 ***\nORIGIN_GRID929     -0.4651396  0.0924869    -5.029 4.92e-07 ***\nORIGIN_GRID935      1.3373377  0.0769996    17.368  &lt; 2e-16 ***\nORIGIN_GRID936      2.1492010  0.0765500    28.076  &lt; 2e-16 ***\nORIGIN_GRID937      2.7057380  0.0764130    35.409  &lt; 2e-16 ***\nORIGIN_GRID938      0.7926711  0.0776126    10.213  &lt; 2e-16 ***\nORIGIN_GRID939      1.8280536  0.0765460    23.882  &lt; 2e-16 ***\nORIGIN_GRID945      0.7935757  0.0799223     9.929  &lt; 2e-16 ***\nORIGIN_GRID947      3.2559530  0.0763511    42.644  &lt; 2e-16 ***\nORIGIN_GRID948      3.3402071  0.0763812    43.731  &lt; 2e-16 ***\nORIGIN_GRID953      2.6690726  0.0764198    34.926  &lt; 2e-16 ***\nORIGIN_GRID954      1.9451332  0.0766044    25.392  &lt; 2e-16 ***\nORIGIN_GRID955      2.8267783  0.0763953    37.002  &lt; 2e-16 ***\nORIGIN_GRID956      1.6062614  0.0767591    20.926  &lt; 2e-16 ***\nORIGIN_GRID964     -1.7532944  0.2477292    -7.077 1.47e-12 ***\nORIGIN_GRID966      3.4910336  0.0763743    45.710  &lt; 2e-16 ***\nORIGIN_GRID967      3.2620731  0.0765045    42.639  &lt; 2e-16 ***\nORIGIN_GRID972      2.1047984  0.0765765    27.486  &lt; 2e-16 ***\nORIGIN_GRID973      1.9758917  0.0766151    25.790  &lt; 2e-16 ***\nORIGIN_GRID974      1.5788150  0.0766916    20.587  &lt; 2e-16 ***\nORIGIN_GRID975      1.6568457  0.0768408    21.562  &lt; 2e-16 ***\nORIGIN_GRID977      2.5536986  0.0764105    33.421  &lt; 2e-16 ***\nORIGIN_GRID983     -1.6504612  0.1876860    -8.794  &lt; 2e-16 ***\nORIGIN_GRID985      3.4629655  0.0764019    45.326  &lt; 2e-16 ***\nORIGIN_GRID986      1.9399209  0.0771046    25.160  &lt; 2e-16 ***\nORIGIN_GRID99      -0.3662416  0.1175328    -3.116 0.001833 ** \nORIGIN_GRID990      0.0987306  0.0878163     1.124 0.260892    \nORIGIN_GRID991      0.2439608  0.0850920     2.867 0.004144 ** \nORIGIN_GRID992      2.0988519  0.0770857    27.228  &lt; 2e-16 ***\nORIGIN_GRID993      3.1942729  0.0763134    41.857  &lt; 2e-16 ***\nORIGIN_GRID994      0.6228241  0.0782355     7.961 1.71e-15 ***\nORIGIN_GRID995      2.0313450  0.0765177    26.547  &lt; 2e-16 ***\nlog(d_BUSSTOPS)     0.2701114  0.0004235   637.874  &lt; 2e-16 ***\nlog(d_MRTLRTEXITS)  0.5631769  0.0002803  2009.195  &lt; 2e-16 ***\nlog(BIZ)            0.0474138  0.0001701   278.778  &lt; 2e-16 ***\nlog(SCHOOLS)        0.2598870  0.0006419   404.887  &lt; 2e-16 ***\nlog(dist)          -0.8442760  0.0001400 -6028.742  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 103154058  on 65520  degrees of freedom\nResidual deviance:  49402878  on 64701  degrees of freedom\nAIC: 49766566\n\nNumber of Fisher Scoring iterations: 7\n\n\nSimilar to the unconstrained SIM, based on the output, the number of trips is most positively correlated to the number of destination MRT/LRT exits (attractiveness variable) with a coefficient of 0.5631769, and most negatively correlated to distance (i.e., the greater the distance between origin and destination, the lower the number of trips), with a coefficient of -0.8442760.\nBetween the number of business activities (coefficient: 0.0474138) and the number of schools (coefficient: 0.2598870), the latter is more correlated to the number of trips than the latter.\nThe R-squared values are calculated to measure how much variation of the trips can be accounted for by the origin constrained SIM.\n\nCalcRSquared(orcSIM$data$TRIPS, orcSIM$fitted.values)\n\n[1] 0.1339851\n\nr2_kullback(orcSIM)\n\nKullback-Leibler R2 \n          0.5150144 \n\nr2_mcfadden(orcSIM)\n\n# R2 for Generalized Linear Regression\n       R2: 0.519\n  adj. R2: 0.519\n\n\nBased on the outcome from the cor() function in the R stats package, the R2 is 0.1339851. This means that about 13.4% of the variation in the number of trips can be accounted for by the origin constrained SIM.\nBased on the performance package, the R-squared values for generalised linear models can be computed using the r2_kullback() and r2_mcfadden() functions. The results are 0.5150144 and 0.519 respectively, i.e., that about 51.5% or 51.9% of the variation in the number of trips can be accounted for by the origin constrained SIM.\nCompared to the unconstrained SIM, the origin constrained SIM has improved R-squared values, meaning that the latter model is better.\n\n\n7.5 Destination (Attraction) Constrained Spatial Interaction Model\nA destination constrained SIM, decSIM, is calibrated below by using the glm() function of the R stats package. The explanatory variables are origin populations by different HDB housing types, and the distance between the origin and destination.\n\ndecSIM = glm(formula = TRIPS ~ \n               DESTIN_GRID +\n               log(o_BUSSTOPS) +\n               log(o_MRTLRTEXITS) +\n               log(DU) + \n               log(HDB12R) +\n               log(HDB34R) +\n               log(HDB5RMore) +\n               log(HDBRent) +\n               log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM,\n              na.action = na.exclude)\n\nsummary(decSIM)\n\n\nCall:\nglm(formula = TRIPS ~ DESTIN_GRID + log(o_BUSSTOPS) + log(o_MRTLRTEXITS) + \n    log(DU) + log(HDB12R) + log(HDB34R) + log(HDB5RMore) + log(HDBRent) + \n    log(dist), family = poisson(link = \"log\"), data = SIM, na.action = na.exclude)\n\nCoefficients:\n                     Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)         8.121e+00  1.005e-01    80.794  &lt; 2e-16 ***\nDESTIN_GRID1001     3.947e+00  1.008e-01    39.137  &lt; 2e-16 ***\nDESTIN_GRID1002    -1.135e+00  1.363e-01    -8.326  &lt; 2e-16 ***\nDESTIN_GRID1003     3.272e+00  1.007e-01    32.476  &lt; 2e-16 ***\nDESTIN_GRID1004     4.745e+00  1.005e-01    47.203  &lt; 2e-16 ***\nDESTIN_GRID1005     1.524e+00  1.026e-01    14.859  &lt; 2e-16 ***\nDESTIN_GRID101      3.132e+00  1.012e-01    30.954  &lt; 2e-16 ***\nDESTIN_GRID1010     1.957e+00  1.008e-01    19.408  &lt; 2e-16 ***\nDESTIN_GRID1011     2.478e+00  1.007e-01    24.602  &lt; 2e-16 ***\nDESTIN_GRID1012     9.106e-01  1.019e-01     8.935  &lt; 2e-16 ***\nDESTIN_GRID1013     1.517e+00  1.010e-01    15.025  &lt; 2e-16 ***\nDESTIN_GRID1014     1.180e+00  1.018e-01    11.590  &lt; 2e-16 ***\nDESTIN_GRID102      1.444e+00  1.056e-01    13.680  &lt; 2e-16 ***\nDESTIN_GRID1023     2.307e+00  1.007e-01    22.897  &lt; 2e-16 ***\nDESTIN_GRID1024     2.945e+00  1.006e-01    29.266  &lt; 2e-16 ***\nDESTIN_GRID1025     4.285e+00  1.006e-01    42.592  &lt; 2e-16 ***\nDESTIN_GRID1028     3.269e+00  1.006e-01    32.498  &lt; 2e-16 ***\nDESTIN_GRID1030     1.339e+00  1.019e-01    13.148  &lt; 2e-16 ***\nDESTIN_GRID1031     1.958e+00  1.007e-01    19.440  &lt; 2e-16 ***\nDESTIN_GRID1033     1.789e+00  1.008e-01    17.745  &lt; 2e-16 ***\nDESTIN_GRID1040     1.300e+00  1.045e-01    12.438  &lt; 2e-16 ***\nDESTIN_GRID1041     1.723e+00  1.014e-01    17.002  &lt; 2e-16 ***\nDESTIN_GRID1042     2.243e+00  1.007e-01    22.277  &lt; 2e-16 ***\nDESTIN_GRID1043     2.769e+00  1.007e-01    27.505  &lt; 2e-16 ***\nDESTIN_GRID1048     1.369e+00  1.011e-01    13.548  &lt; 2e-16 ***\nDESTIN_GRID1049     1.408e+00  1.009e-01    13.958  &lt; 2e-16 ***\nDESTIN_GRID1050     3.014e+00  1.006e-01    29.968  &lt; 2e-16 ***\nDESTIN_GRID1061     2.848e+00  1.006e-01    28.301  &lt; 2e-16 ***\nDESTIN_GRID1062     4.489e+00  1.005e-01    44.659  &lt; 2e-16 ***\nDESTIN_GRID1063     3.563e+00  1.006e-01    35.414  &lt; 2e-16 ***\nDESTIN_GRID1064     9.703e-01  1.083e-01     8.960  &lt; 2e-16 ***\nDESTIN_GRID1066     3.477e+00  1.006e-01    34.578  &lt; 2e-16 ***\nDESTIN_GRID1067     2.553e+00  1.006e-01    25.373  &lt; 2e-16 ***\nDESTIN_GRID1068     2.678e+00  1.006e-01    26.627  &lt; 2e-16 ***\nDESTIN_GRID1069     1.516e+00  1.009e-01    15.029  &lt; 2e-16 ***\nDESTIN_GRID1071     3.089e+00  1.006e-01    30.707  &lt; 2e-16 ***\nDESTIN_GRID1078     1.485e+00  1.036e-01    14.335  &lt; 2e-16 ***\nDESTIN_GRID1080     3.083e+00  1.006e-01    30.647  &lt; 2e-16 ***\nDESTIN_GRID1081     2.981e+00  1.006e-01    29.624  &lt; 2e-16 ***\nDESTIN_GRID1082     3.252e+00  1.007e-01    32.302  &lt; 2e-16 ***\nDESTIN_GRID1086     2.267e+00  1.007e-01    22.509  &lt; 2e-16 ***\nDESTIN_GRID1087     1.943e+00  1.008e-01    19.285  &lt; 2e-16 ***\nDESTIN_GRID1089     1.986e+00  1.008e-01    19.709  &lt; 2e-16 ***\nDESTIN_GRID1090     1.682e+00  1.009e-01    16.678  &lt; 2e-16 ***\nDESTIN_GRID1097    -1.601e+00  2.771e-01    -5.779 7.52e-09 ***\nDESTIN_GRID1100     1.993e+00  1.008e-01    19.775  &lt; 2e-16 ***\nDESTIN_GRID1101     2.851e+00  1.011e-01    28.196  &lt; 2e-16 ***\nDESTIN_GRID1102     2.837e+00  1.010e-01    28.096  &lt; 2e-16 ***\nDESTIN_GRID1104     2.220e+00  1.007e-01    22.058  &lt; 2e-16 ***\nDESTIN_GRID1105     2.840e+00  1.006e-01    28.233  &lt; 2e-16 ***\nDESTIN_GRID1106     1.676e+00  1.012e-01    16.569  &lt; 2e-16 ***\nDESTIN_GRID1107     1.496e+00  1.011e-01    14.799  &lt; 2e-16 ***\nDESTIN_GRID1108     2.176e+00  1.007e-01    21.600  &lt; 2e-16 ***\nDESTIN_GRID1115     4.874e-01  1.151e-01     4.233 2.31e-05 ***\nDESTIN_GRID1116     1.933e+00  1.030e-01    18.756  &lt; 2e-16 ***\nDESTIN_GRID1119     3.015e+00  1.007e-01    29.953  &lt; 2e-16 ***\nDESTIN_GRID1120     2.546e+00  1.008e-01    25.255  &lt; 2e-16 ***\nDESTIN_GRID1123     1.226e+00  1.011e-01    12.118  &lt; 2e-16 ***\nDESTIN_GRID1124     1.743e+00  1.009e-01    17.282  &lt; 2e-16 ***\nDESTIN_GRID1125     2.692e+00  1.006e-01    26.755  &lt; 2e-16 ***\nDESTIN_GRID1128     1.592e+00  1.008e-01    15.792  &lt; 2e-16 ***\nDESTIN_GRID1138     2.064e+00  1.008e-01    20.464  &lt; 2e-16 ***\nDESTIN_GRID1139     2.871e+00  1.007e-01    28.512  &lt; 2e-16 ***\nDESTIN_GRID1140     3.677e+00  1.006e-01    36.540  &lt; 2e-16 ***\nDESTIN_GRID1142     1.208e+00  1.013e-01    11.919  &lt; 2e-16 ***\nDESTIN_GRID1143     3.158e+00  1.006e-01    31.410  &lt; 2e-16 ***\nDESTIN_GRID1144     2.523e+00  1.007e-01    25.050  &lt; 2e-16 ***\nDESTIN_GRID1145     2.211e+00  1.008e-01    21.941  &lt; 2e-16 ***\nDESTIN_GRID1146     2.346e+00  1.007e-01    23.297  &lt; 2e-16 ***\nDESTIN_GRID1147     7.437e-01  1.018e-01     7.302 2.84e-13 ***\nDESTIN_GRID1152    -1.542e+00  1.407e-01   -10.958  &lt; 2e-16 ***\nDESTIN_GRID1153     2.782e+00  1.007e-01    27.614  &lt; 2e-16 ***\nDESTIN_GRID1157     3.357e+00  1.006e-01    33.376  &lt; 2e-16 ***\nDESTIN_GRID1158     2.915e+00  1.007e-01    28.957  &lt; 2e-16 ***\nDESTIN_GRID116      3.499e+00  1.031e-01    33.927  &lt; 2e-16 ***\nDESTIN_GRID1161     3.498e+00  1.006e-01    34.793  &lt; 2e-16 ***\nDESTIN_GRID1162     3.332e+00  1.006e-01    33.132  &lt; 2e-16 ***\nDESTIN_GRID1163     2.941e+00  1.006e-01    29.242  &lt; 2e-16 ***\nDESTIN_GRID1164     1.901e+00  1.009e-01    18.836  &lt; 2e-16 ***\nDESTIN_GRID1167    -4.816e-01  1.068e-01    -4.508 6.56e-06 ***\nDESTIN_GRID117      5.940e-01  1.663e-01     3.573 0.000353 ***\nDESTIN_GRID1171    -1.283e+00  1.245e-01   -10.300  &lt; 2e-16 ***\nDESTIN_GRID1172     2.567e+00  1.008e-01    25.459  &lt; 2e-16 ***\nDESTIN_GRID1173     3.697e-01  1.032e-01     3.582 0.000341 ***\nDESTIN_GRID1176     2.424e+00  1.007e-01    24.076  &lt; 2e-16 ***\nDESTIN_GRID1177     2.370e+00  1.008e-01    23.504  &lt; 2e-16 ***\nDESTIN_GRID118      2.113e+00  1.029e-01    20.541  &lt; 2e-16 ***\nDESTIN_GRID1180     2.745e+00  1.006e-01    27.272  &lt; 2e-16 ***\nDESTIN_GRID1181     2.715e+00  1.006e-01    26.996  &lt; 2e-16 ***\nDESTIN_GRID1183     1.422e+00  1.020e-01    13.934  &lt; 2e-16 ***\nDESTIN_GRID1184     2.526e+00  1.006e-01    25.100  &lt; 2e-16 ***\nDESTIN_GRID1186    -2.246e+00  1.927e-01   -11.658  &lt; 2e-16 ***\nDESTIN_GRID119      2.401e+00  1.028e-01    23.351  &lt; 2e-16 ***\nDESTIN_GRID1192     1.198e+00  1.016e-01    11.788  &lt; 2e-16 ***\nDESTIN_GRID1193     1.186e+00  1.014e-01    11.702  &lt; 2e-16 ***\nDESTIN_GRID1194     1.040e+00  1.018e-01    10.211  &lt; 2e-16 ***\nDESTIN_GRID1195     3.701e+00  1.005e-01    36.808  &lt; 2e-16 ***\nDESTIN_GRID1196     1.624e+00  1.013e-01    16.025  &lt; 2e-16 ***\nDESTIN_GRID1198     2.610e+00  1.018e-01    25.638  &lt; 2e-16 ***\nDESTIN_GRID1199     7.176e-01  1.015e-01     7.068 1.58e-12 ***\nDESTIN_GRID120      2.800e+00  1.016e-01    27.571  &lt; 2e-16 ***\nDESTIN_GRID1200     2.308e+00  1.006e-01    22.936  &lt; 2e-16 ***\nDESTIN_GRID1201     2.535e+00  1.006e-01    25.191  &lt; 2e-16 ***\nDESTIN_GRID1202     2.260e+00  1.007e-01    22.445  &lt; 2e-16 ***\nDESTIN_GRID1203     2.229e+00  1.009e-01    22.101  &lt; 2e-16 ***\nDESTIN_GRID1204     3.307e+00  1.006e-01    32.866  &lt; 2e-16 ***\nDESTIN_GRID1205    -3.048e+00  2.855e-01   -10.676  &lt; 2e-16 ***\nDESTIN_GRID1207     8.043e-01  1.017e-01     7.910 2.57e-15 ***\nDESTIN_GRID1208     1.424e+00  1.013e-01    14.061  &lt; 2e-16 ***\nDESTIN_GRID1209     3.269e+00  1.006e-01    32.482  &lt; 2e-16 ***\nDESTIN_GRID121      2.594e+00  1.012e-01    25.624  &lt; 2e-16 ***\nDESTIN_GRID1210    -2.164e-01  1.100e-01    -1.967 0.049214 *  \nDESTIN_GRID1211    -4.794e-01  1.055e-01    -4.544 5.53e-06 ***\nDESTIN_GRID1212     3.902e-02  1.044e-01     0.374 0.708550    \nDESTIN_GRID1213     3.468e+00  1.006e-01    34.490  &lt; 2e-16 ***\nDESTIN_GRID1214     2.051e+00  1.009e-01    20.327  &lt; 2e-16 ***\nDESTIN_GRID1215    -1.275e+00  1.374e-01    -9.284  &lt; 2e-16 ***\nDESTIN_GRID1218     2.074e+00  1.008e-01    20.582  &lt; 2e-16 ***\nDESTIN_GRID1219     3.588e+00  1.005e-01    35.689  &lt; 2e-16 ***\nDESTIN_GRID122      3.034e+00  1.011e-01    29.996  &lt; 2e-16 ***\nDESTIN_GRID1220     2.089e+00  1.007e-01    20.742  &lt; 2e-16 ***\nDESTIN_GRID1221     3.005e+00  1.006e-01    29.866  &lt; 2e-16 ***\nDESTIN_GRID1222     1.691e+00  1.013e-01    16.693  &lt; 2e-16 ***\nDESTIN_GRID1225     2.315e+00  1.007e-01    22.993  &lt; 2e-16 ***\nDESTIN_GRID1226     1.496e+00  1.010e-01    14.818  &lt; 2e-16 ***\nDESTIN_GRID1227     1.492e+00  1.011e-01    14.767  &lt; 2e-16 ***\nDESTIN_GRID1229     6.838e-01  1.022e-01     6.689 2.25e-11 ***\nDESTIN_GRID1230     3.286e+00  1.006e-01    32.676  &lt; 2e-16 ***\nDESTIN_GRID1231     2.465e+00  1.007e-01    24.488  &lt; 2e-16 ***\nDESTIN_GRID1232     2.179e+00  1.007e-01    21.634  &lt; 2e-16 ***\nDESTIN_GRID1233     2.100e+00  1.008e-01    20.832  &lt; 2e-16 ***\nDESTIN_GRID1234     6.850e-01  1.041e-01     6.577 4.80e-11 ***\nDESTIN_GRID1238     1.229e+00  1.009e-01    12.170  &lt; 2e-16 ***\nDESTIN_GRID1239     1.523e+00  1.008e-01    15.100  &lt; 2e-16 ***\nDESTIN_GRID1240     3.144e+00  1.006e-01    31.264  &lt; 2e-16 ***\nDESTIN_GRID1241     2.333e+00  1.007e-01    23.160  &lt; 2e-16 ***\nDESTIN_GRID1242     2.232e+00  1.007e-01    22.156  &lt; 2e-16 ***\nDESTIN_GRID1243    -5.663e-01  1.057e-01    -5.359 8.37e-08 ***\nDESTIN_GRID1244     7.510e-01  1.014e-01     7.404 1.33e-13 ***\nDESTIN_GRID1245     2.558e+00  1.007e-01    25.394  &lt; 2e-16 ***\nDESTIN_GRID1246     1.237e+00  1.017e-01    12.165  &lt; 2e-16 ***\nDESTIN_GRID1249    -1.239e+00  1.205e-01   -10.281  &lt; 2e-16 ***\nDESTIN_GRID1250     3.951e+00  1.005e-01    39.297  &lt; 2e-16 ***\nDESTIN_GRID1251     4.488e+00  1.005e-01    44.642  &lt; 2e-16 ***\nDESTIN_GRID1252     3.550e+00  1.006e-01    35.296  &lt; 2e-16 ***\nDESTIN_GRID1253     1.045e+00  1.022e-01    10.219  &lt; 2e-16 ***\nDESTIN_GRID1256     1.843e+00  1.007e-01    18.298  &lt; 2e-16 ***\nDESTIN_GRID1257     1.837e+00  1.008e-01    18.236  &lt; 2e-16 ***\nDESTIN_GRID1258     2.336e+00  1.007e-01    23.198  &lt; 2e-16 ***\nDESTIN_GRID1259     3.199e+00  1.006e-01    31.800  &lt; 2e-16 ***\nDESTIN_GRID1260     2.685e+00  1.011e-01    26.559  &lt; 2e-16 ***\nDESTIN_GRID1261     1.843e+00  1.008e-01    18.286  &lt; 2e-16 ***\nDESTIN_GRID1262     2.033e+00  1.007e-01    20.195  &lt; 2e-16 ***\nDESTIN_GRID1263     1.918e+00  1.007e-01    19.040  &lt; 2e-16 ***\nDESTIN_GRID1264     2.730e+00  1.006e-01    27.130  &lt; 2e-16 ***\nDESTIN_GRID1265     1.897e+00  1.008e-01    18.826  &lt; 2e-16 ***\nDESTIN_GRID1266     1.211e+00  1.015e-01    11.933  &lt; 2e-16 ***\nDESTIN_GRID1268     1.860e+00  1.009e-01    18.424  &lt; 2e-16 ***\nDESTIN_GRID1269     3.317e+00  1.005e-01    32.993  &lt; 2e-16 ***\nDESTIN_GRID1270     2.785e+00  1.006e-01    27.672  &lt; 2e-16 ***\nDESTIN_GRID1272     1.762e+00  1.029e-01    17.133  &lt; 2e-16 ***\nDESTIN_GRID1276     2.414e+00  1.006e-01    23.990  &lt; 2e-16 ***\nDESTIN_GRID1277     2.227e+00  1.007e-01    22.102  &lt; 2e-16 ***\nDESTIN_GRID1278     2.869e+00  1.006e-01    28.520  &lt; 2e-16 ***\nDESTIN_GRID1279     2.339e+00  1.007e-01    23.239  &lt; 2e-16 ***\nDESTIN_GRID1280     2.183e+00  1.007e-01    21.683  &lt; 2e-16 ***\nDESTIN_GRID1281     2.608e+00  1.006e-01    25.913  &lt; 2e-16 ***\nDESTIN_GRID1282     2.204e+00  1.007e-01    21.886  &lt; 2e-16 ***\nDESTIN_GRID1283     2.413e+00  1.006e-01    23.980  &lt; 2e-16 ***\nDESTIN_GRID1284     2.642e+00  1.006e-01    26.255  &lt; 2e-16 ***\nDESTIN_GRID1285     1.986e+00  1.008e-01    19.711  &lt; 2e-16 ***\nDESTIN_GRID1288     2.579e+00  1.007e-01    25.624  &lt; 2e-16 ***\nDESTIN_GRID1289     3.211e+00  1.006e-01    31.917  &lt; 2e-16 ***\nDESTIN_GRID1294     2.420e+00  1.006e-01    24.046  &lt; 2e-16 ***\nDESTIN_GRID1295     3.093e+00  1.006e-01    30.754  &lt; 2e-16 ***\nDESTIN_GRID1296     2.740e+00  1.006e-01    27.241  &lt; 2e-16 ***\nDESTIN_GRID1297     2.215e+00  1.009e-01    21.948  &lt; 2e-16 ***\nDESTIN_GRID1298     3.145e+00  1.006e-01    31.270  &lt; 2e-16 ***\nDESTIN_GRID1299     2.684e+00  1.006e-01    26.679  &lt; 2e-16 ***\nDESTIN_GRID1300     1.390e+00  1.010e-01    13.758  &lt; 2e-16 ***\nDESTIN_GRID1301     2.164e+00  1.007e-01    21.497  &lt; 2e-16 ***\nDESTIN_GRID1302     2.751e+00  1.006e-01    27.357  &lt; 2e-16 ***\nDESTIN_GRID1303     3.431e+00  1.005e-01    34.127  &lt; 2e-16 ***\nDESTIN_GRID1304     2.766e+00  1.007e-01    27.471  &lt; 2e-16 ***\nDESTIN_GRID1306     7.490e-01  1.019e-01     7.352 1.95e-13 ***\nDESTIN_GRID1307     2.819e+00  1.006e-01    28.009  &lt; 2e-16 ***\nDESTIN_GRID1308     3.495e+00  1.007e-01    34.723  &lt; 2e-16 ***\nDESTIN_GRID1314     3.241e+00  1.005e-01    32.230  &lt; 2e-16 ***\nDESTIN_GRID1315     2.737e+00  1.006e-01    27.203  &lt; 2e-16 ***\nDESTIN_GRID1316     1.939e+00  1.010e-01    19.206  &lt; 2e-16 ***\nDESTIN_GRID1317     2.290e+00  1.007e-01    22.738  &lt; 2e-16 ***\nDESTIN_GRID1318     2.564e+00  1.006e-01    25.479  &lt; 2e-16 ***\nDESTIN_GRID1319     3.144e+00  1.006e-01    31.260  &lt; 2e-16 ***\nDESTIN_GRID1320     3.911e+00  1.005e-01    38.900  &lt; 2e-16 ***\nDESTIN_GRID1321     1.569e+00  1.008e-01    15.568  &lt; 2e-16 ***\nDESTIN_GRID1322     2.837e+00  1.006e-01    28.207  &lt; 2e-16 ***\nDESTIN_GRID1323     2.832e+00  1.007e-01    28.129  &lt; 2e-16 ***\nDESTIN_GRID1326     2.340e+00  1.007e-01    23.237  &lt; 2e-16 ***\nDESTIN_GRID1327     1.887e+00  1.010e-01    18.684  &lt; 2e-16 ***\nDESTIN_GRID1332     2.062e+00  1.007e-01    20.471  &lt; 2e-16 ***\nDESTIN_GRID1333     3.114e+00  1.006e-01    30.962  &lt; 2e-16 ***\nDESTIN_GRID1334     2.983e+00  1.006e-01    29.661  &lt; 2e-16 ***\nDESTIN_GRID1335     2.856e+00  1.006e-01    28.395  &lt; 2e-16 ***\nDESTIN_GRID1336     2.111e+00  1.007e-01    20.953  &lt; 2e-16 ***\nDESTIN_GRID1337     3.868e+00  1.005e-01    38.479  &lt; 2e-16 ***\nDESTIN_GRID1338     2.395e+00  1.006e-01    23.803  &lt; 2e-16 ***\nDESTIN_GRID1339     1.683e+00  1.007e-01    16.704  &lt; 2e-16 ***\nDESTIN_GRID1340     3.780e+00  1.005e-01    37.603  &lt; 2e-16 ***\nDESTIN_GRID1341     2.387e+00  1.007e-01    23.702  &lt; 2e-16 ***\nDESTIN_GRID1342     3.294e+00  1.006e-01    32.741  &lt; 2e-16 ***\nDESTIN_GRID1345     1.289e+00  1.012e-01    12.738  &lt; 2e-16 ***\nDESTIN_GRID1352     2.792e+00  1.006e-01    27.755  &lt; 2e-16 ***\nDESTIN_GRID1353     2.286e+00  1.006e-01    22.712  &lt; 2e-16 ***\nDESTIN_GRID1354     3.091e+00  1.006e-01    30.744  &lt; 2e-16 ***\nDESTIN_GRID1355     2.008e+00  1.007e-01    19.943  &lt; 2e-16 ***\nDESTIN_GRID1356     2.237e+00  1.007e-01    22.218  &lt; 2e-16 ***\nDESTIN_GRID1357     2.651e+00  1.006e-01    26.354  &lt; 2e-16 ***\nDESTIN_GRID1358     2.161e+00  1.008e-01    21.443  &lt; 2e-16 ***\nDESTIN_GRID1359     2.925e+00  1.006e-01    29.080  &lt; 2e-16 ***\nDESTIN_GRID136      2.243e+00  1.036e-01    21.642  &lt; 2e-16 ***\nDESTIN_GRID1360     2.898e+00  1.006e-01    28.817  &lt; 2e-16 ***\nDESTIN_GRID1364    -6.372e-01  1.196e-01    -5.328 9.95e-08 ***\nDESTIN_GRID137      2.465e+00  1.029e-01    23.946  &lt; 2e-16 ***\nDESTIN_GRID1370    -3.181e+00  7.142e-01    -4.454 8.41e-06 ***\nDESTIN_GRID1371     1.907e+00  1.013e-01    18.824  &lt; 2e-16 ***\nDESTIN_GRID1372     3.006e+00  1.006e-01    29.889  &lt; 2e-16 ***\nDESTIN_GRID1373     2.352e+00  1.007e-01    23.354  &lt; 2e-16 ***\nDESTIN_GRID1374     1.732e+00  1.008e-01    17.181  &lt; 2e-16 ***\nDESTIN_GRID1375     2.429e+00  1.008e-01    24.106  &lt; 2e-16 ***\nDESTIN_GRID1376     2.382e+00  1.006e-01    23.672  &lt; 2e-16 ***\nDESTIN_GRID1377     1.836e+00  1.008e-01    18.221  &lt; 2e-16 ***\nDESTIN_GRID1378     2.643e+00  1.006e-01    26.269  &lt; 2e-16 ***\nDESTIN_GRID1379     4.351e+00  1.006e-01    43.256  &lt; 2e-16 ***\nDESTIN_GRID138      3.871e+00  1.015e-01    38.144  &lt; 2e-16 ***\nDESTIN_GRID1380     1.516e+00  1.011e-01    14.995  &lt; 2e-16 ***\nDESTIN_GRID1383     6.480e-03  1.053e-01     0.062 0.950918    \nDESTIN_GRID1389     1.152e+00  1.157e-01     9.954  &lt; 2e-16 ***\nDESTIN_GRID139      3.247e+00  1.013e-01    32.049  &lt; 2e-16 ***\nDESTIN_GRID1390     6.751e-01  1.033e-01     6.533 6.46e-11 ***\nDESTIN_GRID1391     2.498e+00  1.007e-01    24.811  &lt; 2e-16 ***\nDESTIN_GRID1392     2.365e+00  1.006e-01    23.502  &lt; 2e-16 ***\nDESTIN_GRID1393     2.488e+00  1.006e-01    24.731  &lt; 2e-16 ***\nDESTIN_GRID1394     2.057e+00  1.007e-01    20.438  &lt; 2e-16 ***\nDESTIN_GRID1395     3.093e+00  1.007e-01    30.713  &lt; 2e-16 ***\nDESTIN_GRID1396     2.058e+00  1.009e-01    20.402  &lt; 2e-16 ***\nDESTIN_GRID1397     1.233e+00  1.039e-01    11.868  &lt; 2e-16 ***\nDESTIN_GRID1398     2.033e+00  1.009e-01    20.151  &lt; 2e-16 ***\nDESTIN_GRID140      1.811e+00  1.026e-01    17.653  &lt; 2e-16 ***\nDESTIN_GRID1401     1.682e+00  1.015e-01    16.569  &lt; 2e-16 ***\nDESTIN_GRID1408    -2.652e-01  1.222e-01    -2.170 0.029987 *  \nDESTIN_GRID1409     1.172e+00  1.019e-01    11.508  &lt; 2e-16 ***\nDESTIN_GRID141      1.967e+00  1.022e-01    19.252  &lt; 2e-16 ***\nDESTIN_GRID1410     2.454e+00  1.012e-01    24.243  &lt; 2e-16 ***\nDESTIN_GRID1411     2.909e+00  1.006e-01    28.923  &lt; 2e-16 ***\nDESTIN_GRID1412     3.122e+00  1.006e-01    31.043  &lt; 2e-16 ***\nDESTIN_GRID1413     2.319e+00  1.007e-01    23.031  &lt; 2e-16 ***\nDESTIN_GRID1414     3.653e-01  1.018e-01     3.588 0.000333 ***\nDESTIN_GRID1415     1.294e+00  1.009e-01    12.829  &lt; 2e-16 ***\nDESTIN_GRID1416     1.863e+00  1.008e-01    18.474  &lt; 2e-16 ***\nDESTIN_GRID1417     2.431e+00  1.007e-01    24.141  &lt; 2e-16 ***\nDESTIN_GRID1418     7.618e-01  1.018e-01     7.484 7.19e-14 ***\nDESTIN_GRID1419     1.272e+00  1.020e-01    12.467  &lt; 2e-16 ***\nDESTIN_GRID142      3.286e+00  1.024e-01    32.092  &lt; 2e-16 ***\nDESTIN_GRID1420     2.028e+00  1.011e-01    20.051  &lt; 2e-16 ***\nDESTIN_GRID1428     8.624e-01  1.366e-01     6.315 2.71e-10 ***\nDESTIN_GRID1430     2.162e-01  1.032e-01     2.096 0.036119 *  \nDESTIN_GRID1431     2.777e+00  1.006e-01    27.599  &lt; 2e-16 ***\nDESTIN_GRID1432     2.911e+00  1.006e-01    28.944  &lt; 2e-16 ***\nDESTIN_GRID1433     1.488e+00  1.024e-01    14.534  &lt; 2e-16 ***\nDESTIN_GRID1434     1.300e+00  1.011e-01    12.850  &lt; 2e-16 ***\nDESTIN_GRID1435     2.346e+00  1.008e-01    23.281  &lt; 2e-16 ***\nDESTIN_GRID1436     2.725e+00  1.006e-01    27.075  &lt; 2e-16 ***\nDESTIN_GRID1439     1.384e+00  1.013e-01    13.662  &lt; 2e-16 ***\nDESTIN_GRID1440     1.910e+00  1.014e-01    18.844  &lt; 2e-16 ***\nDESTIN_GRID1448     2.197e+00  1.014e-01    21.659  &lt; 2e-16 ***\nDESTIN_GRID1449     1.688e+00  1.007e-01    16.760  &lt; 2e-16 ***\nDESTIN_GRID1450     2.242e+00  1.007e-01    22.261  &lt; 2e-16 ***\nDESTIN_GRID1451     3.179e+00  1.006e-01    31.616  &lt; 2e-16 ***\nDESTIN_GRID1452     1.057e+00  1.010e-01    10.462  &lt; 2e-16 ***\nDESTIN_GRID1453     2.192e+00  1.006e-01    21.781  &lt; 2e-16 ***\nDESTIN_GRID1454     1.926e+00  1.013e-01    19.014  &lt; 2e-16 ***\nDESTIN_GRID1455     3.105e+00  1.006e-01    30.875  &lt; 2e-16 ***\nDESTIN_GRID1456     2.221e+00  1.007e-01    22.066  &lt; 2e-16 ***\nDESTIN_GRID1457     2.888e+00  1.006e-01    28.701  &lt; 2e-16 ***\nDESTIN_GRID1458     1.047e+00  1.037e-01    10.101  &lt; 2e-16 ***\nDESTIN_GRID1468     3.610e+00  1.010e-01    35.735  &lt; 2e-16 ***\nDESTIN_GRID1469     2.707e+00  1.006e-01    26.912  &lt; 2e-16 ***\nDESTIN_GRID1470     3.428e+00  1.006e-01    34.089  &lt; 2e-16 ***\nDESTIN_GRID1471     2.681e+00  1.006e-01    26.647  &lt; 2e-16 ***\nDESTIN_GRID1472     4.059e+00  1.005e-01    40.376  &lt; 2e-16 ***\nDESTIN_GRID1473     1.325e+00  1.009e-01    13.133  &lt; 2e-16 ***\nDESTIN_GRID1474     3.354e+00  1.006e-01    33.358  &lt; 2e-16 ***\nDESTIN_GRID1475     6.574e-01  1.015e-01     6.476 9.45e-11 ***\nDESTIN_GRID1476     1.256e+00  1.011e-01    12.426  &lt; 2e-16 ***\nDESTIN_GRID1477     9.842e-01  1.019e-01     9.657  &lt; 2e-16 ***\nDESTIN_GRID1486     5.785e-01  1.049e-01     5.516 3.47e-08 ***\nDESTIN_GRID1487     2.307e+00  1.006e-01    22.920  &lt; 2e-16 ***\nDESTIN_GRID1488     2.432e+00  1.008e-01    24.138  &lt; 2e-16 ***\nDESTIN_GRID1489     2.237e+00  1.007e-01    22.218  &lt; 2e-16 ***\nDESTIN_GRID1490     2.325e+00  1.008e-01    23.077  &lt; 2e-16 ***\nDESTIN_GRID1491     1.939e+00  1.007e-01    19.258  &lt; 2e-16 ***\nDESTIN_GRID1492     2.137e+00  1.006e-01    21.235  &lt; 2e-16 ***\nDESTIN_GRID1493     2.798e+00  1.006e-01    27.816  &lt; 2e-16 ***\nDESTIN_GRID1494     2.119e+00  1.007e-01    21.036  &lt; 2e-16 ***\nDESTIN_GRID1506    -5.758e-01  1.398e-01    -4.120 3.79e-05 ***\nDESTIN_GRID1507     2.880e+00  1.006e-01    28.639  &lt; 2e-16 ***\nDESTIN_GRID1508     2.995e+00  1.006e-01    29.778  &lt; 2e-16 ***\nDESTIN_GRID1509     2.040e+00  1.015e-01    20.095  &lt; 2e-16 ***\nDESTIN_GRID1510     1.976e+00  1.007e-01    19.628  &lt; 2e-16 ***\nDESTIN_GRID1512     2.698e+00  1.006e-01    26.824  &lt; 2e-16 ***\nDESTIN_GRID1513     2.006e+00  1.010e-01    19.856  &lt; 2e-16 ***\nDESTIN_GRID1514     1.375e+00  1.011e-01    13.590  &lt; 2e-16 ***\nDESTIN_GRID1524     2.627e+00  1.009e-01    26.040  &lt; 2e-16 ***\nDESTIN_GRID1525     1.538e+00  1.008e-01    15.250  &lt; 2e-16 ***\nDESTIN_GRID1526     2.388e+00  1.006e-01    23.730  &lt; 2e-16 ***\nDESTIN_GRID1527     2.614e+00  1.007e-01    25.955  &lt; 2e-16 ***\nDESTIN_GRID1528     1.898e+00  1.007e-01    18.842  &lt; 2e-16 ***\nDESTIN_GRID1529     1.348e+00  1.010e-01    13.347  &lt; 2e-16 ***\nDESTIN_GRID1530     1.066e+00  1.013e-01    10.528  &lt; 2e-16 ***\nDESTIN_GRID1531     2.905e+00  1.006e-01    28.884  &lt; 2e-16 ***\nDESTIN_GRID1532     8.657e-01  1.014e-01     8.538  &lt; 2e-16 ***\nDESTIN_GRID1544     2.215e+00  1.008e-01    21.981  &lt; 2e-16 ***\nDESTIN_GRID1545     1.486e+00  1.008e-01    14.743  &lt; 2e-16 ***\nDESTIN_GRID1546     2.327e+00  1.006e-01    23.126  &lt; 2e-16 ***\nDESTIN_GRID1547     2.739e+00  1.006e-01    27.226  &lt; 2e-16 ***\nDESTIN_GRID1548     2.602e+00  1.006e-01    25.863  &lt; 2e-16 ***\nDESTIN_GRID1549     3.484e+00  1.005e-01    34.653  &lt; 2e-16 ***\nDESTIN_GRID1550     2.749e+00  1.006e-01    27.329  &lt; 2e-16 ***\nDESTIN_GRID1551     5.343e-01  1.016e-01     5.257 1.46e-07 ***\nDESTIN_GRID1552     1.821e+00  1.008e-01    18.065  &lt; 2e-16 ***\nDESTIN_GRID156      1.556e+00  1.093e-01    14.236  &lt; 2e-16 ***\nDESTIN_GRID1563     2.691e+00  1.006e-01    26.744  &lt; 2e-16 ***\nDESTIN_GRID1564     2.646e+00  1.006e-01    26.308  &lt; 2e-16 ***\nDESTIN_GRID1565     2.858e+00  1.006e-01    28.418  &lt; 2e-16 ***\nDESTIN_GRID1566     1.871e+00  1.008e-01    18.551  &lt; 2e-16 ***\nDESTIN_GRID1567     2.895e+00  1.006e-01    28.781  &lt; 2e-16 ***\nDESTIN_GRID1568     2.484e+00  1.006e-01    24.688  &lt; 2e-16 ***\nDESTIN_GRID1569     1.466e+00  1.008e-01    14.547  &lt; 2e-16 ***\nDESTIN_GRID1570     2.648e+00  1.006e-01    26.324  &lt; 2e-16 ***\nDESTIN_GRID1571     1.727e+00  1.014e-01    17.032  &lt; 2e-16 ***\nDESTIN_GRID158      3.293e+00  1.015e-01    32.446  &lt; 2e-16 ***\nDESTIN_GRID1582     1.726e+00  1.009e-01    17.111  &lt; 2e-16 ***\nDESTIN_GRID1583     2.970e+00  1.006e-01    29.535  &lt; 2e-16 ***\nDESTIN_GRID1584     2.866e+00  1.006e-01    28.500  &lt; 2e-16 ***\nDESTIN_GRID1585     2.332e+00  1.007e-01    23.158  &lt; 2e-16 ***\nDESTIN_GRID1587     2.823e+00  1.006e-01    28.067  &lt; 2e-16 ***\nDESTIN_GRID1588     3.819e+00  1.005e-01    37.992  &lt; 2e-16 ***\nDESTIN_GRID1589     3.312e+00  1.005e-01    32.940  &lt; 2e-16 ***\nDESTIN_GRID159      2.744e+00  1.010e-01    27.165  &lt; 2e-16 ***\nDESTIN_GRID1590     2.296e+00  1.006e-01    22.811  &lt; 2e-16 ***\nDESTIN_GRID1591     1.266e+00  1.029e-01    12.301  &lt; 2e-16 ***\nDESTIN_GRID160      1.268e+00  1.039e-01    12.204  &lt; 2e-16 ***\nDESTIN_GRID1601     2.468e+00  1.007e-01    24.519  &lt; 2e-16 ***\nDESTIN_GRID1602     2.075e+00  1.007e-01    20.603  &lt; 2e-16 ***\nDESTIN_GRID1603     3.043e+00  1.006e-01    30.242  &lt; 2e-16 ***\nDESTIN_GRID1604     3.823e+00  1.007e-01    37.960  &lt; 2e-16 ***\nDESTIN_GRID1606     1.953e+00  1.007e-01    19.391  &lt; 2e-16 ***\nDESTIN_GRID1607     1.658e+00  1.008e-01    16.454  &lt; 2e-16 ***\nDESTIN_GRID1608     3.815e+00  1.005e-01    37.953  &lt; 2e-16 ***\nDESTIN_GRID1609     1.982e+00  1.007e-01    19.682  &lt; 2e-16 ***\nDESTIN_GRID1610     1.628e+00  1.025e-01    15.875  &lt; 2e-16 ***\nDESTIN_GRID1620     2.940e+00  1.006e-01    29.223  &lt; 2e-16 ***\nDESTIN_GRID1621     2.513e+00  1.006e-01    24.968  &lt; 2e-16 ***\nDESTIN_GRID1622     2.690e+00  1.007e-01    26.711  &lt; 2e-16 ***\nDESTIN_GRID1623     2.636e+00  1.006e-01    26.192  &lt; 2e-16 ***\nDESTIN_GRID1624     3.859e+00  1.008e-01    38.297  &lt; 2e-16 ***\nDESTIN_GRID1625     4.850e-01  1.025e-01     4.730 2.24e-06 ***\nDESTIN_GRID1626     2.553e+00  1.006e-01    25.372  &lt; 2e-16 ***\nDESTIN_GRID1627     2.197e+00  1.006e-01    21.832  &lt; 2e-16 ***\nDESTIN_GRID1628     2.503e+00  1.006e-01    24.872  &lt; 2e-16 ***\nDESTIN_GRID1629     1.655e+00  1.009e-01    16.410  &lt; 2e-16 ***\nDESTIN_GRID1630     4.528e-01  1.124e-01     4.028 5.63e-05 ***\nDESTIN_GRID1639     2.311e+00  1.008e-01    22.938  &lt; 2e-16 ***\nDESTIN_GRID1640     3.292e+00  1.005e-01    32.741  &lt; 2e-16 ***\nDESTIN_GRID1641     3.414e+00  1.005e-01    33.951  &lt; 2e-16 ***\nDESTIN_GRID1645     1.054e+00  1.012e-01    10.415  &lt; 2e-16 ***\nDESTIN_GRID1646     2.168e+00  1.006e-01    21.541  &lt; 2e-16 ***\nDESTIN_GRID1647     3.854e+00  1.005e-01    38.335  &lt; 2e-16 ***\nDESTIN_GRID1648     8.480e-02  1.092e-01     0.776 0.437562    \nDESTIN_GRID1658     3.259e+00  1.006e-01    32.407  &lt; 2e-16 ***\nDESTIN_GRID1659     2.161e+00  1.007e-01    21.462  &lt; 2e-16 ***\nDESTIN_GRID1660     1.942e+00  1.007e-01    19.286  &lt; 2e-16 ***\nDESTIN_GRID1661     2.011e+00  1.008e-01    19.955  &lt; 2e-16 ***\nDESTIN_GRID1663     2.212e+00  1.014e-01    21.813  &lt; 2e-16 ***\nDESTIN_GRID1665     9.396e-01  1.012e-01     9.286  &lt; 2e-16 ***\nDESTIN_GRID1666     3.510e+00  1.005e-01    34.913  &lt; 2e-16 ***\nDESTIN_GRID1667     9.590e-01  1.032e-01     9.297  &lt; 2e-16 ***\nDESTIN_GRID1668     1.662e+00  1.015e-01    16.372  &lt; 2e-16 ***\nDESTIN_GRID1677     2.435e+00  1.006e-01    24.190  &lt; 2e-16 ***\nDESTIN_GRID1678     2.747e+00  1.006e-01    27.301  &lt; 2e-16 ***\nDESTIN_GRID1679     2.834e+00  1.006e-01    28.172  &lt; 2e-16 ***\nDESTIN_GRID1682     3.036e+00  1.008e-01    30.109  &lt; 2e-16 ***\nDESTIN_GRID1684     2.119e+00  1.021e-01    20.743  &lt; 2e-16 ***\nDESTIN_GRID1685     2.352e+00  1.007e-01    23.372  &lt; 2e-16 ***\nDESTIN_GRID1696     1.957e+00  1.009e-01    19.392  &lt; 2e-16 ***\nDESTIN_GRID1697     7.440e-01  1.025e-01     7.258 3.94e-13 ***\nDESTIN_GRID1698     1.435e+00  1.026e-01    13.989  &lt; 2e-16 ***\nDESTIN_GRID1699     2.751e+00  1.006e-01    27.342  &lt; 2e-16 ***\nDESTIN_GRID1702     2.020e+00  1.014e-01    19.916  &lt; 2e-16 ***\nDESTIN_GRID1704     2.225e+00  1.007e-01    22.098  &lt; 2e-16 ***\nDESTIN_GRID1705     1.313e+00  1.022e-01    12.847  &lt; 2e-16 ***\nDESTIN_GRID1715     2.695e+00  1.006e-01    26.786  &lt; 2e-16 ***\nDESTIN_GRID1716     1.951e+00  1.008e-01    19.362  &lt; 2e-16 ***\nDESTIN_GRID1717     1.390e+00  1.011e-01    13.745  &lt; 2e-16 ***\nDESTIN_GRID1718     1.129e+00  1.035e-01    10.911  &lt; 2e-16 ***\nDESTIN_GRID1721     1.386e+00  1.025e-01    13.531  &lt; 2e-16 ***\nDESTIN_GRID1723     8.398e-01  1.018e-01     8.248  &lt; 2e-16 ***\nDESTIN_GRID1735     1.892e+00  1.009e-01    18.760  &lt; 2e-16 ***\nDESTIN_GRID1736     2.990e+00  1.007e-01    29.697  &lt; 2e-16 ***\nDESTIN_GRID1737     2.932e+00  1.006e-01    29.147  &lt; 2e-16 ***\nDESTIN_GRID1740     2.571e+00  1.010e-01    25.449  &lt; 2e-16 ***\nDESTIN_GRID1742     5.861e-01  1.023e-01     5.730 1.00e-08 ***\nDESTIN_GRID1753     2.186e+00  1.008e-01    21.699  &lt; 2e-16 ***\nDESTIN_GRID1754     2.977e+00  1.006e-01    29.600  &lt; 2e-16 ***\nDESTIN_GRID1755     2.121e+00  1.008e-01    21.045  &lt; 2e-16 ***\nDESTIN_GRID1758     1.488e+00  1.022e-01    14.562  &lt; 2e-16 ***\nDESTIN_GRID177      2.481e+00  1.047e-01    23.689  &lt; 2e-16 ***\nDESTIN_GRID1773     1.905e+00  1.009e-01    18.882  &lt; 2e-16 ***\nDESTIN_GRID1774     4.128e+00  1.005e-01    41.064  &lt; 2e-16 ***\nDESTIN_GRID1775     1.605e+00  1.009e-01    15.905  &lt; 2e-16 ***\nDESTIN_GRID1776     2.453e+00  1.007e-01    24.371  &lt; 2e-16 ***\nDESTIN_GRID1778     3.504e+00  1.011e-01    34.665  &lt; 2e-16 ***\nDESTIN_GRID178      2.879e+00  1.010e-01    28.508  &lt; 2e-16 ***\nDESTIN_GRID179      3.846e-01  1.255e-01     3.065 0.002179 ** \nDESTIN_GRID1791     2.112e+00  1.008e-01    20.950  &lt; 2e-16 ***\nDESTIN_GRID1792     2.366e+00  1.007e-01    23.495  &lt; 2e-16 ***\nDESTIN_GRID1793     2.161e+00  1.007e-01    21.459  &lt; 2e-16 ***\nDESTIN_GRID1794     2.837e+00  1.007e-01    28.159  &lt; 2e-16 ***\nDESTIN_GRID1795     2.455e+00  1.007e-01    24.393  &lt; 2e-16 ***\nDESTIN_GRID1796     2.520e+00  1.007e-01    25.030  &lt; 2e-16 ***\nDESTIN_GRID1797     2.614e+00  1.007e-01    25.972  &lt; 2e-16 ***\nDESTIN_GRID1811     2.266e+00  1.007e-01    22.502  &lt; 2e-16 ***\nDESTIN_GRID1812     2.549e+00  1.006e-01    25.334  &lt; 2e-16 ***\nDESTIN_GRID1813     2.981e+00  1.006e-01    29.636  &lt; 2e-16 ***\nDESTIN_GRID1814     3.259e+00  1.006e-01    32.404  &lt; 2e-16 ***\nDESTIN_GRID1815     2.194e+00  1.007e-01    21.787  &lt; 2e-16 ***\nDESTIN_GRID1816     3.390e+00  1.006e-01    33.697  &lt; 2e-16 ***\nDESTIN_GRID1817    -1.445e-02  1.048e-01    -0.138 0.890337    \nDESTIN_GRID1830     2.791e+00  1.007e-01    27.715  &lt; 2e-16 ***\nDESTIN_GRID1831     2.958e+00  1.006e-01    29.411  &lt; 2e-16 ***\nDESTIN_GRID1832     3.103e+00  1.006e-01    30.857  &lt; 2e-16 ***\nDESTIN_GRID1833     2.091e+00  1.007e-01    20.768  &lt; 2e-16 ***\nDESTIN_GRID1834     1.388e+00  1.012e-01    13.726  &lt; 2e-16 ***\nDESTIN_GRID1835     2.974e+00  1.006e-01    29.569  &lt; 2e-16 ***\nDESTIN_GRID1849     1.388e+00  1.011e-01    13.731  &lt; 2e-16 ***\nDESTIN_GRID1850     2.471e+00  1.006e-01    24.547  &lt; 2e-16 ***\nDESTIN_GRID1851     2.136e+00  1.012e-01    21.110  &lt; 2e-16 ***\nDESTIN_GRID1852     3.212e+00  1.006e-01    31.944  &lt; 2e-16 ***\nDESTIN_GRID1853     1.550e+00  1.009e-01    15.367  &lt; 2e-16 ***\nDESTIN_GRID1854     1.620e+00  1.008e-01    16.071  &lt; 2e-16 ***\nDESTIN_GRID1855     7.775e-02  1.042e-01     0.746 0.455739    \nDESTIN_GRID1868     2.367e+00  1.007e-01    23.504  &lt; 2e-16 ***\nDESTIN_GRID1869     2.171e+00  1.007e-01    21.555  &lt; 2e-16 ***\nDESTIN_GRID1870     6.116e-01  1.056e-01     5.791 6.98e-09 ***\nDESTIN_GRID1871     4.493e+00  1.005e-01    44.694  &lt; 2e-16 ***\nDESTIN_GRID1872     1.290e+00  1.013e-01    12.737  &lt; 2e-16 ***\nDESTIN_GRID1873     1.916e+00  1.008e-01    19.006  &lt; 2e-16 ***\nDESTIN_GRID1887     2.158e+00  1.008e-01    21.420  &lt; 2e-16 ***\nDESTIN_GRID1888     3.693e+00  1.006e-01    36.725  &lt; 2e-16 ***\nDESTIN_GRID1889     3.424e+00  1.006e-01    34.049  &lt; 2e-16 ***\nDESTIN_GRID1890     2.333e+00  1.006e-01    23.177  &lt; 2e-16 ***\nDESTIN_GRID1891     1.944e+00  1.009e-01    19.277  &lt; 2e-16 ***\nDESTIN_GRID1892     4.097e+00  1.005e-01    40.754  &lt; 2e-16 ***\nDESTIN_GRID1893    -2.642e-01  1.205e-01    -2.192 0.028373 *  \nDESTIN_GRID1905     1.882e+00  1.190e-01    15.823  &lt; 2e-16 ***\nDESTIN_GRID1906     8.465e-01  1.016e-01     8.333  &lt; 2e-16 ***\nDESTIN_GRID1907     3.640e+00  1.006e-01    36.204  &lt; 2e-16 ***\nDESTIN_GRID1908     3.232e+00  1.006e-01    32.134  &lt; 2e-16 ***\nDESTIN_GRID1909     2.321e+00  1.006e-01    23.064  &lt; 2e-16 ***\nDESTIN_GRID1910     1.236e+00  1.011e-01    12.219  &lt; 2e-16 ***\nDESTIN_GRID1911     9.013e-01  1.058e-01     8.522  &lt; 2e-16 ***\nDESTIN_GRID1926     2.750e+00  1.008e-01    27.275  &lt; 2e-16 ***\nDESTIN_GRID1927     2.241e+00  1.010e-01    22.195  &lt; 2e-16 ***\nDESTIN_GRID1928     2.405e+00  1.006e-01    23.896  &lt; 2e-16 ***\nDESTIN_GRID1929     2.322e+00  1.007e-01    23.058  &lt; 2e-16 ***\nDESTIN_GRID1930     2.009e+00  1.008e-01    19.941  &lt; 2e-16 ***\nDESTIN_GRID1944     1.699e+00  1.015e-01    16.729  &lt; 2e-16 ***\nDESTIN_GRID1945     1.706e+00  1.011e-01    16.882  &lt; 2e-16 ***\nDESTIN_GRID1946     1.901e+00  1.008e-01    18.860  &lt; 2e-16 ***\nDESTIN_GRID1947     3.715e+00  1.005e-01    36.956  &lt; 2e-16 ***\nDESTIN_GRID1948     2.647e+00  1.006e-01    26.313  &lt; 2e-16 ***\nDESTIN_GRID1949     1.617e+00  1.011e-01    15.995  &lt; 2e-16 ***\nDESTIN_GRID195      3.029e+00  1.046e-01    28.962  &lt; 2e-16 ***\nDESTIN_GRID196      2.431e+00  1.014e-01    23.967  &lt; 2e-16 ***\nDESTIN_GRID1965     2.836e+00  1.006e-01    28.186  &lt; 2e-16 ***\nDESTIN_GRID1966     1.343e+00  1.011e-01    13.289  &lt; 2e-16 ***\nDESTIN_GRID1967     1.748e+00  1.007e-01    17.352  &lt; 2e-16 ***\nDESTIN_GRID1968     2.335e+00  1.007e-01    23.191  &lt; 2e-16 ***\nDESTIN_GRID197      3.277e+00  1.009e-01    32.473  &lt; 2e-16 ***\nDESTIN_GRID1983     3.452e+00  1.007e-01    34.281  &lt; 2e-16 ***\nDESTIN_GRID1984     1.763e+00  1.011e-01    17.445  &lt; 2e-16 ***\nDESTIN_GRID1985     2.456e+00  1.007e-01    24.396  &lt; 2e-16 ***\nDESTIN_GRID1986     2.369e+00  1.006e-01    23.536  &lt; 2e-16 ***\nDESTIN_GRID1987     1.626e+00  1.066e-01    15.257  &lt; 2e-16 ***\nDESTIN_GRID2002     3.667e+00  1.013e-01    36.200  &lt; 2e-16 ***\nDESTIN_GRID2003     2.853e+00  1.008e-01    28.298  &lt; 2e-16 ***\nDESTIN_GRID2004     3.745e+00  1.007e-01    37.179  &lt; 2e-16 ***\nDESTIN_GRID2005     1.914e+00  1.009e-01    18.962  &lt; 2e-16 ***\nDESTIN_GRID2006     2.661e+00  1.007e-01    26.428  &lt; 2e-16 ***\nDESTIN_GRID2021     3.340e+00  1.010e-01    33.084  &lt; 2e-16 ***\nDESTIN_GRID2022     3.781e+00  1.008e-01    37.505  &lt; 2e-16 ***\nDESTIN_GRID2023     2.741e+00  1.009e-01    27.169  &lt; 2e-16 ***\nDESTIN_GRID2024     1.209e+00  1.014e-01    11.924  &lt; 2e-16 ***\nDESTIN_GRID2025     3.077e+00  1.011e-01    30.429  &lt; 2e-16 ***\nDESTIN_GRID2042     3.223e+00  1.012e-01    31.851  &lt; 2e-16 ***\nDESTIN_GRID2043     6.768e-01  1.039e-01     6.516 7.20e-11 ***\nDESTIN_GRID2044     2.269e+00  1.007e-01    22.522  &lt; 2e-16 ***\nDESTIN_GRID2045     3.629e+00  1.010e-01    35.931  &lt; 2e-16 ***\nDESTIN_GRID2061     2.005e+00  1.037e-01    19.339  &lt; 2e-16 ***\nDESTIN_GRID2062     1.584e+00  1.018e-01    15.560  &lt; 2e-16 ***\nDESTIN_GRID2063     2.234e+00  1.008e-01    22.165  &lt; 2e-16 ***\nDESTIN_GRID2064     9.533e-01  1.052e-01     9.063  &lt; 2e-16 ***\nDESTIN_GRID2079     1.155e+00  1.020e-01    11.322  &lt; 2e-16 ***\nDESTIN_GRID2082     1.439e+00  1.026e-01    14.029  &lt; 2e-16 ***\nDESTIN_GRID2083     1.849e+00  1.010e-01    18.312  &lt; 2e-16 ***\nDESTIN_GRID2098     3.275e+00  1.006e-01    32.537  &lt; 2e-16 ***\nDESTIN_GRID2099     3.526e+00  1.006e-01    35.044  &lt; 2e-16 ***\nDESTIN_GRID21       2.761e+00  1.125e-01    24.552  &lt; 2e-16 ***\nDESTIN_GRID2102     2.130e+00  1.009e-01    21.114  &lt; 2e-16 ***\nDESTIN_GRID2115     3.695e+00  1.016e-01    36.353  &lt; 2e-16 ***\nDESTIN_GRID2119     3.642e+00  1.006e-01    36.200  &lt; 2e-16 ***\nDESTIN_GRID2121     1.381e+00  1.013e-01    13.630  &lt; 2e-16 ***\nDESTIN_GRID2137     2.397e+00  1.009e-01    23.757  &lt; 2e-16 ***\nDESTIN_GRID2140     3.875e-01  1.047e-01     3.700 0.000216 ***\nDESTIN_GRID215      1.778e+00  1.050e-01    16.933  &lt; 2e-16 ***\nDESTIN_GRID2153     2.873e+00  1.033e-01    27.803  &lt; 2e-16 ***\nDESTIN_GRID2158     3.178e+00  1.007e-01    31.558  &lt; 2e-16 ***\nDESTIN_GRID216      2.774e+00  1.016e-01    27.313  &lt; 2e-16 ***\nDESTIN_GRID217      2.528e+00  1.049e-01    24.091  &lt; 2e-16 ***\nDESTIN_GRID2177     3.898e+00  1.006e-01    38.748  &lt; 2e-16 ***\nDESTIN_GRID2178     8.836e-01  1.032e-01     8.561  &lt; 2e-16 ***\nDESTIN_GRID2196     2.968e+00  1.011e-01    29.365  &lt; 2e-16 ***\nDESTIN_GRID2197     3.497e+00  1.007e-01    34.726  &lt; 2e-16 ***\nDESTIN_GRID2267     3.748e+00  1.021e-01    36.699  &lt; 2e-16 ***\nDESTIN_GRID233      3.405e+00  1.017e-01    33.496  &lt; 2e-16 ***\nDESTIN_GRID234      1.788e+00  1.023e-01    17.477  &lt; 2e-16 ***\nDESTIN_GRID235      3.348e+00  1.012e-01    33.091  &lt; 2e-16 ***\nDESTIN_GRID252      3.103e+00  1.014e-01    30.590  &lt; 2e-16 ***\nDESTIN_GRID253      2.551e+00  1.013e-01    25.176  &lt; 2e-16 ***\nDESTIN_GRID254      2.776e+00  1.012e-01    27.420  &lt; 2e-16 ***\nDESTIN_GRID270      6.510e-01  1.636e-01     3.979 6.91e-05 ***\nDESTIN_GRID271      3.408e+00  1.017e-01    33.503  &lt; 2e-16 ***\nDESTIN_GRID272      1.904e+00  1.018e-01    18.698  &lt; 2e-16 ***\nDESTIN_GRID290      4.026e+00  1.014e-01    39.690  &lt; 2e-16 ***\nDESTIN_GRID291      2.212e+00  1.032e-01    21.446  &lt; 2e-16 ***\nDESTIN_GRID292      4.212e+00  1.011e-01    41.648  &lt; 2e-16 ***\nDESTIN_GRID308      3.825e+00  1.010e-01    37.861  &lt; 2e-16 ***\nDESTIN_GRID309      3.137e+00  1.012e-01    30.996  &lt; 2e-16 ***\nDESTIN_GRID310      3.268e+00  1.010e-01    32.351  &lt; 2e-16 ***\nDESTIN_GRID329      4.021e+00  1.013e-01    39.681  &lt; 2e-16 ***\nDESTIN_GRID330      3.920e+00  1.008e-01    38.895  &lt; 2e-16 ***\nDESTIN_GRID347      3.591e+00  1.009e-01    35.599  &lt; 2e-16 ***\nDESTIN_GRID348      3.605e+00  1.008e-01    35.756  &lt; 2e-16 ***\nDESTIN_GRID349      4.156e+00  1.015e-01    40.928  &lt; 2e-16 ***\nDESTIN_GRID366      3.595e+00  1.012e-01    35.507  &lt; 2e-16 ***\nDESTIN_GRID367      3.455e+00  1.010e-01    34.209  &lt; 2e-16 ***\nDESTIN_GRID368      3.365e+00  1.006e-01    33.444  &lt; 2e-16 ***\nDESTIN_GRID369      3.826e+00  1.008e-01    37.960  &lt; 2e-16 ***\nDESTIN_GRID370      4.780e+00  1.006e-01    47.524  &lt; 2e-16 ***\nDESTIN_GRID385      1.622e+00  1.034e-01    15.691  &lt; 2e-16 ***\nDESTIN_GRID386      2.912e+00  1.010e-01    28.829  &lt; 2e-16 ***\nDESTIN_GRID387      5.867e-01  1.031e-01     5.693 1.25e-08 ***\nDESTIN_GRID388      3.292e+00  1.010e-01    32.600  &lt; 2e-16 ***\nDESTIN_GRID389      2.118e+00  1.027e-01    20.620  &lt; 2e-16 ***\nDESTIN_GRID40       3.958e+00  1.030e-01    38.426  &lt; 2e-16 ***\nDESTIN_GRID404      2.659e+00  1.029e-01    25.836  &lt; 2e-16 ***\nDESTIN_GRID405      2.489e+00  1.019e-01    24.431  &lt; 2e-16 ***\nDESTIN_GRID406      2.565e+00  1.011e-01    25.361  &lt; 2e-16 ***\nDESTIN_GRID407      2.811e+00  1.007e-01    27.906  &lt; 2e-16 ***\nDESTIN_GRID408      2.529e+00  1.011e-01    25.013  &lt; 2e-16 ***\nDESTIN_GRID42       3.694e+00  1.023e-01    36.110  &lt; 2e-16 ***\nDESTIN_GRID424      2.805e+00  1.010e-01    27.761  &lt; 2e-16 ***\nDESTIN_GRID425      2.401e+00  1.008e-01    23.808  &lt; 2e-16 ***\nDESTIN_GRID426      2.721e+00  1.007e-01    27.016  &lt; 2e-16 ***\nDESTIN_GRID427      2.458e+00  1.016e-01    24.181  &lt; 2e-16 ***\nDESTIN_GRID442      2.384e+00  1.028e-01    23.183  &lt; 2e-16 ***\nDESTIN_GRID443      7.820e-01  1.104e-01     7.084 1.41e-12 ***\nDESTIN_GRID444      2.969e+00  1.008e-01    29.438  &lt; 2e-16 ***\nDESTIN_GRID445      1.296e+00  1.013e-01    12.794  &lt; 2e-16 ***\nDESTIN_GRID447     -8.605e-02  1.112e-01    -0.774 0.439082    \nDESTIN_GRID448      1.972e+00  1.028e-01    19.188  &lt; 2e-16 ***\nDESTIN_GRID461      2.281e+00  1.016e-01    22.457  &lt; 2e-16 ***\nDESTIN_GRID462      2.958e+00  1.010e-01    29.300  &lt; 2e-16 ***\nDESTIN_GRID463      2.540e+00  1.007e-01    25.220  &lt; 2e-16 ***\nDESTIN_GRID464      2.488e+00  1.007e-01    24.715  &lt; 2e-16 ***\nDESTIN_GRID465      3.538e+00  1.007e-01    35.115  &lt; 2e-16 ***\nDESTIN_GRID466      2.716e+00  1.012e-01    26.849  &lt; 2e-16 ***\nDESTIN_GRID467      1.115e+00  1.048e-01    10.638  &lt; 2e-16 ***\nDESTIN_GRID480      2.165e+00  1.044e-01    20.729  &lt; 2e-16 ***\nDESTIN_GRID481      4.155e+00  1.007e-01    41.273  &lt; 2e-16 ***\nDESTIN_GRID482      2.780e+00  1.009e-01    27.559  &lt; 2e-16 ***\nDESTIN_GRID483      4.068e+00  1.005e-01    40.462  &lt; 2e-16 ***\nDESTIN_GRID484      2.565e+00  1.007e-01    25.472  &lt; 2e-16 ***\nDESTIN_GRID486      1.899e+00  1.020e-01    18.620  &lt; 2e-16 ***\nDESTIN_GRID487      8.119e-01  1.059e-01     7.670 1.72e-14 ***\nDESTIN_GRID488      7.805e-01  1.092e-01     7.149 8.75e-13 ***\nDESTIN_GRID489     -8.823e-01  2.694e-01    -3.275 0.001058 ** \nDESTIN_GRID499      2.947e+00  1.020e-01    28.902  &lt; 2e-16 ***\nDESTIN_GRID500      3.871e+00  1.010e-01    38.321  &lt; 2e-16 ***\nDESTIN_GRID501      2.364e+00  1.008e-01    23.442  &lt; 2e-16 ***\nDESTIN_GRID502      2.356e+00  1.007e-01    23.399  &lt; 2e-16 ***\nDESTIN_GRID503      2.974e+00  1.008e-01    29.518  &lt; 2e-16 ***\nDESTIN_GRID507      7.043e-01  1.136e-01     6.201 5.63e-10 ***\nDESTIN_GRID508      2.761e+00  1.018e-01    27.126  &lt; 2e-16 ***\nDESTIN_GRID509      4.721e-01  1.192e-01     3.960 7.50e-05 ***\nDESTIN_GRID518      2.440e+00  1.062e-01    22.987  &lt; 2e-16 ***\nDESTIN_GRID519      3.462e+00  1.010e-01    34.284  &lt; 2e-16 ***\nDESTIN_GRID520      3.254e+00  1.017e-01    32.003  &lt; 2e-16 ***\nDESTIN_GRID521      4.567e+00  1.005e-01    45.431  &lt; 2e-16 ***\nDESTIN_GRID522      2.670e+00  1.007e-01    26.527  &lt; 2e-16 ***\nDESTIN_GRID524     -1.162e+00  1.401e-01    -8.295  &lt; 2e-16 ***\nDESTIN_GRID528     -1.791e-01  1.176e-01    -1.523 0.127880    \nDESTIN_GRID529     -8.520e-01  2.084e-01    -4.088 4.35e-05 ***\nDESTIN_GRID530      1.634e+00  1.062e-01    15.387  &lt; 2e-16 ***\nDESTIN_GRID537      1.287e+00  1.035e-01    12.431  &lt; 2e-16 ***\nDESTIN_GRID538      2.819e+00  1.014e-01    27.809  &lt; 2e-16 ***\nDESTIN_GRID539      3.345e+00  1.007e-01    33.235  &lt; 2e-16 ***\nDESTIN_GRID540      2.660e+00  1.006e-01    26.441  &lt; 2e-16 ***\nDESTIN_GRID541      2.337e+00  1.016e-01    23.003  &lt; 2e-16 ***\nDESTIN_GRID547      6.164e-01  1.127e-01     5.467 4.58e-08 ***\nDESTIN_GRID548      1.053e+00  1.119e-01     9.407  &lt; 2e-16 ***\nDESTIN_GRID557      1.913e+00  1.015e-01    18.845  &lt; 2e-16 ***\nDESTIN_GRID558      3.047e+00  1.009e-01    30.206  &lt; 2e-16 ***\nDESTIN_GRID559      1.880e+00  1.009e-01    18.633  &lt; 2e-16 ***\nDESTIN_GRID560      2.304e+00  1.007e-01    22.888  &lt; 2e-16 ***\nDESTIN_GRID562      2.890e+00  1.011e-01    28.601  &lt; 2e-16 ***\nDESTIN_GRID577      2.607e+00  1.011e-01    25.802  &lt; 2e-16 ***\nDESTIN_GRID578      2.455e+00  1.006e-01    24.396  &lt; 2e-16 ***\nDESTIN_GRID595      3.204e+00  1.007e-01    31.811  &lt; 2e-16 ***\nDESTIN_GRID596      2.568e+00  1.007e-01    25.508  &lt; 2e-16 ***\nDESTIN_GRID597      2.617e+00  1.006e-01    26.002  &lt; 2e-16 ***\nDESTIN_GRID598      3.170e+00  1.006e-01    31.522  &lt; 2e-16 ***\nDESTIN_GRID60       2.424e+00  1.106e-01    21.920  &lt; 2e-16 ***\nDESTIN_GRID600      2.466e+00  1.012e-01    24.379  &lt; 2e-16 ***\nDESTIN_GRID61       3.066e+00  1.014e-01    30.234  &lt; 2e-16 ***\nDESTIN_GRID613      3.216e+00  1.009e-01    31.870  &lt; 2e-16 ***\nDESTIN_GRID614      1.686e+00  1.014e-01    16.623  &lt; 2e-16 ***\nDESTIN_GRID615      2.873e+00  1.006e-01    28.553  &lt; 2e-16 ***\nDESTIN_GRID616      4.623e+00  1.005e-01    45.988  &lt; 2e-16 ***\nDESTIN_GRID617      9.872e-01  1.020e-01     9.680  &lt; 2e-16 ***\nDESTIN_GRID62       3.545e+00  1.023e-01    34.645  &lt; 2e-16 ***\nDESTIN_GRID633      2.852e+00  1.009e-01    28.271  &lt; 2e-16 ***\nDESTIN_GRID634      2.290e+00  1.007e-01    22.734  &lt; 2e-16 ***\nDESTIN_GRID635      3.653e-01  1.023e-01     3.571 0.000356 ***\nDESTIN_GRID636      2.842e+00  1.006e-01    28.248  &lt; 2e-16 ***\nDESTIN_GRID638      2.625e+00  1.010e-01    25.980  &lt; 2e-16 ***\nDESTIN_GRID654      2.525e+00  1.009e-01    25.033  &lt; 2e-16 ***\nDESTIN_GRID657      9.143e-01  1.038e-01     8.809  &lt; 2e-16 ***\nDESTIN_GRID671      3.364e+00  1.007e-01    33.394  &lt; 2e-16 ***\nDESTIN_GRID673      2.131e-01  1.025e-01     2.079 0.037610 *  \nDESTIN_GRID674      2.876e+00  1.006e-01    28.589  &lt; 2e-16 ***\nDESTIN_GRID689      3.430e+00  1.008e-01    34.017  &lt; 2e-16 ***\nDESTIN_GRID690      1.481e+00  1.013e-01    14.615  &lt; 2e-16 ***\nDESTIN_GRID691      4.392e-01  1.024e-01     4.290 1.79e-05 ***\nDESTIN_GRID692      3.394e+00  1.005e-01    33.751  &lt; 2e-16 ***\nDESTIN_GRID693      2.765e+00  1.009e-01    27.390  &lt; 2e-16 ***\nDESTIN_GRID695      2.673e+00  1.007e-01    26.543  &lt; 2e-16 ***\nDESTIN_GRID700      1.425e+00  1.074e-01    13.270  &lt; 2e-16 ***\nDESTIN_GRID710      3.583e-01  1.026e-01     3.491 0.000482 ***\nDESTIN_GRID711      2.355e+00  1.006e-01    23.401  &lt; 2e-16 ***\nDESTIN_GRID712      2.688e+00  1.006e-01    26.721  &lt; 2e-16 ***\nDESTIN_GRID713      1.936e+00  1.010e-01    19.161  &lt; 2e-16 ***\nDESTIN_GRID714      1.117e+00  1.015e-01    11.008  &lt; 2e-16 ***\nDESTIN_GRID715      1.221e+00  1.019e-01    11.985  &lt; 2e-16 ***\nDESTIN_GRID727      2.574e+00  1.014e-01    25.379  &lt; 2e-16 ***\nDESTIN_GRID728      2.702e+00  1.007e-01    26.845  &lt; 2e-16 ***\nDESTIN_GRID729      3.887e+00  1.005e-01    38.666  &lt; 2e-16 ***\nDESTIN_GRID730      2.376e+00  1.006e-01    23.608  &lt; 2e-16 ***\nDESTIN_GRID731      2.541e+00  1.007e-01    25.228  &lt; 2e-16 ***\nDESTIN_GRID732      1.310e+00  1.020e-01    12.839  &lt; 2e-16 ***\nDESTIN_GRID733      2.910e+00  1.006e-01    28.929  &lt; 2e-16 ***\nDESTIN_GRID734      2.312e+00  1.008e-01    22.932  &lt; 2e-16 ***\nDESTIN_GRID738      2.391e+00  1.023e-01    23.369  &lt; 2e-16 ***\nDESTIN_GRID746      2.376e+00  1.014e-01    23.434  &lt; 2e-16 ***\nDESTIN_GRID748      2.448e+00  1.007e-01    24.315  &lt; 2e-16 ***\nDESTIN_GRID749      2.263e+00  1.007e-01    22.473  &lt; 2e-16 ***\nDESTIN_GRID750      2.675e+00  1.006e-01    26.587  &lt; 2e-16 ***\nDESTIN_GRID751      2.084e+00  1.008e-01    20.683  &lt; 2e-16 ***\nDESTIN_GRID752      1.268e+00  1.013e-01    12.518  &lt; 2e-16 ***\nDESTIN_GRID753      4.231e+00  1.005e-01    42.086  &lt; 2e-16 ***\nDESTIN_GRID754      4.247e+00  1.005e-01    42.245  &lt; 2e-16 ***\nDESTIN_GRID757      1.767e+00  1.025e-01    17.247  &lt; 2e-16 ***\nDESTIN_GRID764      2.305e+00  1.021e-01    22.580  &lt; 2e-16 ***\nDESTIN_GRID766      2.202e+00  1.007e-01    21.867  &lt; 2e-16 ***\nDESTIN_GRID767      3.211e+00  1.006e-01    31.924  &lt; 2e-16 ***\nDESTIN_GRID768      2.330e+00  1.007e-01    23.141  &lt; 2e-16 ***\nDESTIN_GRID769      1.804e+00  1.008e-01    17.898  &lt; 2e-16 ***\nDESTIN_GRID770      2.721e+00  1.006e-01    27.044  &lt; 2e-16 ***\nDESTIN_GRID771      2.230e+00  1.007e-01    22.153  &lt; 2e-16 ***\nDESTIN_GRID772      2.331e+00  1.008e-01    23.121  &lt; 2e-16 ***\nDESTIN_GRID773      2.532e+00  1.008e-01    25.126  &lt; 2e-16 ***\nDESTIN_GRID774      2.786e+00  1.014e-01    27.464  &lt; 2e-16 ***\nDESTIN_GRID775      1.734e+00  1.023e-01    16.945  &lt; 2e-16 ***\nDESTIN_GRID776      1.058e+00  1.050e-01    10.077  &lt; 2e-16 ***\nDESTIN_GRID78       3.097e+00  1.062e-01    29.156  &lt; 2e-16 ***\nDESTIN_GRID784      2.951e+00  1.010e-01    29.235  &lt; 2e-16 ***\nDESTIN_GRID785      3.587e+00  1.006e-01    35.658  &lt; 2e-16 ***\nDESTIN_GRID786      3.160e+00  1.006e-01    31.403  &lt; 2e-16 ***\nDESTIN_GRID787      4.357e+00  1.006e-01    43.307  &lt; 2e-16 ***\nDESTIN_GRID788      3.815e+00  1.005e-01    37.944  &lt; 2e-16 ***\nDESTIN_GRID789      4.068e+00  1.006e-01    40.454  &lt; 2e-16 ***\nDESTIN_GRID79       9.653e-01  1.307e-01     7.383 1.54e-13 ***\nDESTIN_GRID790      2.779e+00  1.006e-01    27.612  &lt; 2e-16 ***\nDESTIN_GRID791      2.824e+00  1.008e-01    28.020  &lt; 2e-16 ***\nDESTIN_GRID792      1.030e+00  1.013e-01    10.170  &lt; 2e-16 ***\nDESTIN_GRID793      1.156e+00  1.039e-01    11.127  &lt; 2e-16 ***\nDESTIN_GRID794      1.729e+00  1.021e-01    16.936  &lt; 2e-16 ***\nDESTIN_GRID795      2.657e+00  1.014e-01    26.198  &lt; 2e-16 ***\nDESTIN_GRID80       2.550e+00  1.019e-01    25.018  &lt; 2e-16 ***\nDESTIN_GRID803      2.367e+00  1.009e-01    23.471  &lt; 2e-16 ***\nDESTIN_GRID804      1.197e+00  1.014e-01    11.805  &lt; 2e-16 ***\nDESTIN_GRID805      2.092e+00  1.013e-01    20.657  &lt; 2e-16 ***\nDESTIN_GRID806      2.730e+00  1.006e-01    27.137  &lt; 2e-16 ***\nDESTIN_GRID807      1.901e+00  1.014e-01    18.741  &lt; 2e-16 ***\nDESTIN_GRID809      2.948e+00  1.006e-01    29.308  &lt; 2e-16 ***\nDESTIN_GRID81       3.374e+00  1.025e-01    32.929  &lt; 2e-16 ***\nDESTIN_GRID810      1.415e+00  1.011e-01    13.997  &lt; 2e-16 ***\nDESTIN_GRID811      2.184e+00  1.009e-01    21.648  &lt; 2e-16 ***\nDESTIN_GRID812      2.244e-01  1.054e-01     2.130 0.033188 *  \nDESTIN_GRID813      4.245e-01  1.043e-01     4.069 4.72e-05 ***\nDESTIN_GRID814      2.607e+00  1.018e-01    25.625  &lt; 2e-16 ***\nDESTIN_GRID82      -1.336e+00  7.142e-01    -1.871 0.061396 .  \nDESTIN_GRID822      2.542e+00  1.010e-01    25.161  &lt; 2e-16 ***\nDESTIN_GRID823      2.394e+00  1.007e-01    23.780  &lt; 2e-16 ***\nDESTIN_GRID824      1.453e+00  1.011e-01    14.369  &lt; 2e-16 ***\nDESTIN_GRID825      3.808e+00  1.006e-01    37.867  &lt; 2e-16 ***\nDESTIN_GRID826      1.875e+00  1.007e-01    18.616  &lt; 2e-16 ***\nDESTIN_GRID829      2.451e+00  1.006e-01    24.352  &lt; 2e-16 ***\nDESTIN_GRID831      3.299e+00  1.006e-01    32.781  &lt; 2e-16 ***\nDESTIN_GRID832      3.429e-02  1.076e-01     0.319 0.749863    \nDESTIN_GRID833      1.915e+00  1.016e-01    18.857  &lt; 2e-16 ***\nDESTIN_GRID840      1.265e+00  1.020e-01    12.412  &lt; 2e-16 ***\nDESTIN_GRID841      2.073e+00  1.007e-01    20.581  &lt; 2e-16 ***\nDESTIN_GRID842      3.218e+00  1.006e-01    32.000  &lt; 2e-16 ***\nDESTIN_GRID843      2.178e+00  1.010e-01    21.563  &lt; 2e-16 ***\nDESTIN_GRID844      8.251e-01  1.033e-01     7.988 1.37e-15 ***\nDESTIN_GRID845      2.517e+00  1.008e-01    24.975  &lt; 2e-16 ***\nDESTIN_GRID846      2.259e+00  1.008e-01    22.413  &lt; 2e-16 ***\nDESTIN_GRID847      4.049e+00  1.005e-01    40.282  &lt; 2e-16 ***\nDESTIN_GRID850     -5.116e-01  1.692e-01    -3.024 0.002492 ** \nDESTIN_GRID851      4.347e+00  1.006e-01    43.234  &lt; 2e-16 ***\nDESTIN_GRID852      1.800e+00  1.023e-01    17.597  &lt; 2e-16 ***\nDESTIN_GRID859      1.108e+00  1.015e-01    10.921  &lt; 2e-16 ***\nDESTIN_GRID860      3.207e+00  1.006e-01    31.880  &lt; 2e-16 ***\nDESTIN_GRID861      3.955e+00  1.005e-01    39.340  &lt; 2e-16 ***\nDESTIN_GRID862      3.185e+00  1.008e-01    31.606  &lt; 2e-16 ***\nDESTIN_GRID863      2.618e+00  1.008e-01    25.957  &lt; 2e-16 ***\nDESTIN_GRID864      6.400e-01  1.018e-01     6.288 3.22e-10 ***\nDESTIN_GRID865      3.291e+00  1.006e-01    32.721  &lt; 2e-16 ***\nDESTIN_GRID866      1.638e+00  1.009e-01    16.239  &lt; 2e-16 ***\nDESTIN_GRID867      2.245e+00  1.008e-01    22.270  &lt; 2e-16 ***\nDESTIN_GRID869      2.601e+00  1.023e-01    25.430  &lt; 2e-16 ***\nDESTIN_GRID871      2.332e+00  1.012e-01    23.049  &lt; 2e-16 ***\nDESTIN_GRID872      4.324e+00  1.006e-01    42.982  &lt; 2e-16 ***\nDESTIN_GRID878      2.390e+00  1.007e-01    23.732  &lt; 2e-16 ***\nDESTIN_GRID879      2.697e+00  1.006e-01    26.816  &lt; 2e-16 ***\nDESTIN_GRID880      2.054e+00  1.007e-01    20.398  &lt; 2e-16 ***\nDESTIN_GRID882      1.748e+00  1.010e-01    17.305  &lt; 2e-16 ***\nDESTIN_GRID883      7.967e-01  1.017e-01     7.832 4.82e-15 ***\nDESTIN_GRID884      1.526e+00  1.010e-01    15.100  &lt; 2e-16 ***\nDESTIN_GRID885      2.197e+00  1.007e-01    21.825  &lt; 2e-16 ***\nDESTIN_GRID886      1.922e+00  1.010e-01    19.028  &lt; 2e-16 ***\nDESTIN_GRID890      1.811e+00  1.011e-01    17.915  &lt; 2e-16 ***\nDESTIN_GRID891     -4.713e+00  1.005e+00    -4.690 2.74e-06 ***\nDESTIN_GRID897      2.495e+00  1.007e-01    24.772  &lt; 2e-16 ***\nDESTIN_GRID898      2.680e+00  1.006e-01    26.625  &lt; 2e-16 ***\nDESTIN_GRID899      1.477e+00  1.009e-01    14.636  &lt; 2e-16 ***\nDESTIN_GRID900      1.164e+00  1.012e-01    11.505  &lt; 2e-16 ***\nDESTIN_GRID901      2.082e+00  1.008e-01    20.665  &lt; 2e-16 ***\nDESTIN_GRID902      1.517e+00  1.011e-01    15.008  &lt; 2e-16 ***\nDESTIN_GRID903      2.672e+00  1.013e-01    26.383  &lt; 2e-16 ***\nDESTIN_GRID904      2.715e+00  1.006e-01    26.979  &lt; 2e-16 ***\nDESTIN_GRID905      2.034e+00  1.009e-01    20.157  &lt; 2e-16 ***\nDESTIN_GRID907      2.076e+00  1.017e-01    20.409  &lt; 2e-16 ***\nDESTIN_GRID909      3.878e+00  1.005e-01    38.567  &lt; 2e-16 ***\nDESTIN_GRID910      3.364e+00  1.006e-01    33.440  &lt; 2e-16 ***\nDESTIN_GRID915      2.219e+00  1.012e-01    21.934  &lt; 2e-16 ***\nDESTIN_GRID916      3.478e+00  1.007e-01    34.541  &lt; 2e-16 ***\nDESTIN_GRID917      2.617e+00  1.007e-01    25.984  &lt; 2e-16 ***\nDESTIN_GRID918      7.212e-01  1.017e-01     7.091 1.33e-12 ***\nDESTIN_GRID919      3.236e+00  1.006e-01    32.168  &lt; 2e-16 ***\nDESTIN_GRID920      3.559e+00  1.006e-01    35.390  &lt; 2e-16 ***\nDESTIN_GRID922      2.097e+00  1.012e-01    20.721  &lt; 2e-16 ***\nDESTIN_GRID923      2.759e+00  1.007e-01    27.410  &lt; 2e-16 ***\nDESTIN_GRID927      1.603e+00  1.013e-01    15.820  &lt; 2e-16 ***\nDESTIN_GRID928      2.783e+00  1.007e-01    27.646  &lt; 2e-16 ***\nDESTIN_GRID929     -9.261e-01  1.287e-01    -7.198 6.11e-13 ***\nDESTIN_GRID935      2.906e+00  1.007e-01    28.868  &lt; 2e-16 ***\nDESTIN_GRID936      3.107e+00  1.006e-01    30.882  &lt; 2e-16 ***\nDESTIN_GRID937      3.006e+00  1.006e-01    29.879  &lt; 2e-16 ***\nDESTIN_GRID938      3.284e+00  1.006e-01    32.646  &lt; 2e-16 ***\nDESTIN_GRID939      2.195e+00  1.007e-01    21.799  &lt; 2e-16 ***\nDESTIN_GRID945      2.748e+00  1.010e-01    27.199  &lt; 2e-16 ***\nDESTIN_GRID947      2.572e+00  1.006e-01    25.556  &lt; 2e-16 ***\nDESTIN_GRID948      3.202e+00  1.006e-01    31.817  &lt; 2e-16 ***\nDESTIN_GRID953      3.268e+00  1.006e-01    32.486  &lt; 2e-16 ***\nDESTIN_GRID954      3.111e+00  1.006e-01    30.924  &lt; 2e-16 ***\nDESTIN_GRID955      1.827e+00  1.008e-01    18.121  &lt; 2e-16 ***\nDESTIN_GRID956      1.460e+00  1.011e-01    14.449  &lt; 2e-16 ***\nDESTIN_GRID964     -4.996e-02  1.306e-01    -0.383 0.701998    \nDESTIN_GRID966      3.716e+00  1.006e-01    36.953  &lt; 2e-16 ***\nDESTIN_GRID967      3.672e+00  1.007e-01    36.471  &lt; 2e-16 ***\nDESTIN_GRID972      1.183e+00  1.013e-01    11.679  &lt; 2e-16 ***\nDESTIN_GRID973      3.053e+00  1.006e-01    30.341  &lt; 2e-16 ***\nDESTIN_GRID974      2.181e+00  1.007e-01    21.652  &lt; 2e-16 ***\nDESTIN_GRID975      1.664e+00  1.009e-01    16.490  &lt; 2e-16 ***\nDESTIN_GRID977      2.482e+00  1.007e-01    24.658  &lt; 2e-16 ***\nDESTIN_GRID983      8.520e-01  1.121e-01     7.601 2.95e-14 ***\nDESTIN_GRID985      2.964e+00  1.006e-01    29.449  &lt; 2e-16 ***\nDESTIN_GRID986      3.368e+00  1.006e-01    33.474  &lt; 2e-16 ***\nDESTIN_GRID99       2.531e+00  1.033e-01    24.494  &lt; 2e-16 ***\nDESTIN_GRID990     -6.864e-01  1.119e-01    -6.135 8.52e-10 ***\nDESTIN_GRID991      2.688e+00  1.014e-01    26.499  &lt; 2e-16 ***\nDESTIN_GRID992      3.012e+00  1.010e-01    29.822  &lt; 2e-16 ***\nDESTIN_GRID993      3.126e+00  1.006e-01    31.085  &lt; 2e-16 ***\nDESTIN_GRID994      6.429e-01  1.027e-01     6.259 3.88e-10 ***\nDESTIN_GRID995      1.827e+00  1.008e-01    18.126  &lt; 2e-16 ***\nlog(o_BUSSTOPS)     3.322e-01  5.011e-04   662.907  &lt; 2e-16 ***\nlog(o_MRTLRTEXITS)  1.632e-01  3.107e-04   525.126  &lt; 2e-16 ***\nlog(DU)             1.808e-02  5.097e-04    35.463  &lt; 2e-16 ***\nlog(HDB12R)         1.144e-02  8.077e-05   141.689  &lt; 2e-16 ***\nlog(HDB34R)         3.235e-02  3.873e-04    83.514  &lt; 2e-16 ***\nlog(HDB5RMore)      1.158e-01  2.010e-04   575.870  &lt; 2e-16 ***\nlog(HDBRent)       -5.055e-04  7.944e-05    -6.364 1.97e-10 ***\nlog(dist)          -8.329e-01  1.418e-04 -5874.640  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 103154058  on 65520  degrees of freedom\nResidual deviance:  46652288  on 64696  degrees of freedom\nAIC: 47015986\n\nNumber of Fisher Scoring iterations: 8\n\n\nUnlike the unconstrained SIM and origin constrained SIM, based on the output, the number of trips is most positively correlated to the number of origin bus stops (propulsiveness variable) with a relatively low coefficient of 0.322, and most negatively correlated to distance (i.e., the greater the distance between origin and destination, the lower the number of trips), with a coefficient of -0.8329.\nThe number of dwelling units and the number of residents for the different HDB housing types are not very strongly correlated to the number of trips. Out of these five variables, the number of residents in HDB 5-room, executive or multi-generation units has the highest absolute coefficient of 0.1158.\nThe R-squared values are calculated to measure how much variation of the trips can be accounted for by the destination constrained SIM.\n\nCalcRSquared(decSIM$data$TRIPS, decSIM$fitted.values)\n\n[1] 0.1693522\n\nr2_kullback(decSIM)\n\nKullback-Leibler R2 \n          0.5419814 \n\nr2_mcfadden(decSIM)\n\n# R2 for Generalized Linear Regression\n       R2: 0.546\n  adj. R2: 0.546\n\n\nBased on the outcome from the cor() function in the R stats package, the R2 is 0.1693522. This means that about 16.9% of the variation in the number of trips can be accounted for by the destination constrained SIM.\nBased on the performance package, the R-squared values for generalised linear models can be computed using the r2_kullback() and r2_mcfadden() functions. The results are 0.5419814 and 0.546 respectively, i.e., that about 54.2% or 54.6% of the variation in the number of trips can be accounted for by the destination constrained SIM.\nCompared to the unconstrained SIM and the origin constrained SIM, the destination constrained SIM has improved R-squared values, meaning that it is a better model.\n\n\n7.6 Doubly Constrained Spatial Interaction Model\nA doubly constrained SIM, dbcSIM, is calibrated below by using the glm() function of the R stats package. The explanatory variable is the distance between the origin and destination.\n\ndbcSIM = glm(formula = TRIPS ~ \n               ORIGIN_GRID +\n               DESTIN_GRID +\n               log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM,\n              na.action = na.exclude)\n\nsummary(dbcSIM)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_GRID + DESTIN_GRID + log(dist), \n    family = poisson(link = \"log\"), data = SIM, na.action = na.exclude)\n\nCoefficients:\n                  Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)      7.1268075  0.1264968    56.340  &lt; 2e-16 ***\nORIGIN_GRID1001 -0.0739624  0.0993326    -0.745 0.456517    \nORIGIN_GRID1002 -1.4143950  0.1239268   -11.413  &lt; 2e-16 ***\nORIGIN_GRID1003  1.1604722  0.0819251    14.165  &lt; 2e-16 ***\nORIGIN_GRID1004  4.1672744  0.0768677    54.214  &lt; 2e-16 ***\nORIGIN_GRID1005  2.0914212  0.0775194    26.979  &lt; 2e-16 ***\nORIGIN_GRID101   1.8958610  0.0772977    24.527  &lt; 2e-16 ***\nORIGIN_GRID1010  1.8041262  0.0772847    23.344  &lt; 2e-16 ***\nORIGIN_GRID1011  0.0835760  0.0793978     1.053 0.292514    \nORIGIN_GRID1012  0.8987278  0.0789638    11.382  &lt; 2e-16 ***\nORIGIN_GRID1013  1.6808750  0.0774261    21.709  &lt; 2e-16 ***\nORIGIN_GRID1014  1.5785749  0.0779411    20.253  &lt; 2e-16 ***\nORIGIN_GRID102  -0.9729818  0.1027582    -9.469  &lt; 2e-16 ***\nORIGIN_GRID1023  3.7682715  0.0769766    48.953  &lt; 2e-16 ***\nORIGIN_GRID1024  3.5704101  0.0769280    46.412  &lt; 2e-16 ***\nORIGIN_GRID1025  1.5371234  0.0774951    19.835  &lt; 2e-16 ***\nORIGIN_GRID1028  0.5975241  0.0780760     7.653 1.96e-14 ***\nORIGIN_GRID1030 -0.2692635  0.0843923    -3.191 0.001420 ** \nORIGIN_GRID1031  2.5776308  0.0769881    33.481  &lt; 2e-16 ***\nORIGIN_GRID1033  2.2269484  0.0770793    28.892  &lt; 2e-16 ***\nORIGIN_GRID1040 -0.3296234  0.0927055    -3.556 0.000377 ***\nORIGIN_GRID1041  1.2953925  0.0789264    16.413  &lt; 2e-16 ***\nORIGIN_GRID1042  3.8676276  0.0769141    50.285  &lt; 2e-16 ***\nORIGIN_GRID1043  2.5283112  0.0770999    32.793  &lt; 2e-16 ***\nORIGIN_GRID1048  1.2042799  0.0776423    15.511  &lt; 2e-16 ***\nORIGIN_GRID1049  2.3596422  0.0770230    30.636  &lt; 2e-16 ***\nORIGIN_GRID1050  3.2389774  0.0769087    42.115  &lt; 2e-16 ***\nORIGIN_GRID1061  4.1219815  0.0769360    53.577  &lt; 2e-16 ***\nORIGIN_GRID1062  3.9150012  0.0769038    50.908  &lt; 2e-16 ***\nORIGIN_GRID1063  0.9533024  0.0778869    12.240  &lt; 2e-16 ***\nORIGIN_GRID1064 -2.5919441  0.2615984    -9.908  &lt; 2e-16 ***\nORIGIN_GRID1066  1.2108748  0.0773443    15.656  &lt; 2e-16 ***\nORIGIN_GRID1067  1.9438129  0.0771192    25.205  &lt; 2e-16 ***\nORIGIN_GRID1068  2.9430579  0.0769307    38.256  &lt; 2e-16 ***\nORIGIN_GRID1069  2.1048061  0.0770950    27.301  &lt; 2e-16 ***\nORIGIN_GRID1071  0.7238956  0.0778835     9.295  &lt; 2e-16 ***\nORIGIN_GRID1078  0.0237898  0.0903181     0.263 0.792242    \nORIGIN_GRID1080  3.0164508  0.0770554    39.147  &lt; 2e-16 ***\nORIGIN_GRID1081  2.8789159  0.0770150    37.381  &lt; 2e-16 ***\nORIGIN_GRID1082  0.9056345  0.0781081    11.595  &lt; 2e-16 ***\nORIGIN_GRID1086  2.2850282  0.0771194    29.630  &lt; 2e-16 ***\nORIGIN_GRID1087  2.0088569  0.0771438    26.040  &lt; 2e-16 ***\nORIGIN_GRID1089  2.5568634  0.0770305    33.193  &lt; 2e-16 ***\nORIGIN_GRID1090  2.1735308  0.0771045    28.189  &lt; 2e-16 ***\nORIGIN_GRID1097 -0.7642918  0.1295466    -5.900 3.64e-09 ***\nORIGIN_GRID1100  3.7972462  0.0769393    49.354  &lt; 2e-16 ***\nORIGIN_GRID1101  0.3048211  0.0866809     3.517 0.000437 ***\nORIGIN_GRID1102 -0.8691275  0.0868536   -10.007  &lt; 2e-16 ***\nORIGIN_GRID1104  3.0168471  0.0769321    39.214  &lt; 2e-16 ***\nORIGIN_GRID1105  2.6289510  0.0769603    34.160  &lt; 2e-16 ***\nORIGIN_GRID1106  2.4273493  0.0774434    31.344  &lt; 2e-16 ***\nORIGIN_GRID1107  0.6379706  0.0786228     8.114 4.88e-16 ***\nORIGIN_GRID1108  1.6440808  0.0773362    21.259  &lt; 2e-16 ***\nORIGIN_GRID1115 -1.9121407  0.1635568   -11.691  &lt; 2e-16 ***\nORIGIN_GRID1116 -0.5263150  0.1196283    -4.400 1.08e-05 ***\nORIGIN_GRID1119  1.2698610  0.0778818    16.305  &lt; 2e-16 ***\nORIGIN_GRID1120  1.0702028  0.0782404    13.678  &lt; 2e-16 ***\nORIGIN_GRID1123  1.2447635  0.0775121    16.059  &lt; 2e-16 ***\nORIGIN_GRID1124  2.2514892  0.0771180    29.195  &lt; 2e-16 ***\nORIGIN_GRID1125  2.6151130  0.0769785    33.972  &lt; 2e-16 ***\nORIGIN_GRID1128  1.4394467  0.0773557    18.608  &lt; 2e-16 ***\nORIGIN_GRID1138  2.5818182  0.0771769    33.453  &lt; 2e-16 ***\nORIGIN_GRID1139  3.4291344  0.0770265    44.519  &lt; 2e-16 ***\nORIGIN_GRID1140  0.9177940  0.0780299    11.762  &lt; 2e-16 ***\nORIGIN_GRID1142  2.0378315  0.0772611    26.376  &lt; 2e-16 ***\nORIGIN_GRID1143  2.2674812  0.0769840    29.454  &lt; 2e-16 ***\nORIGIN_GRID1144  1.3628866  0.0777354    17.532  &lt; 2e-16 ***\nORIGIN_GRID1145  0.8422145  0.0781700    10.774  &lt; 2e-16 ***\nORIGIN_GRID1146  1.9757365  0.0771916    25.595  &lt; 2e-16 ***\nORIGIN_GRID1147  0.0568698  0.0814548     0.698 0.485067    \nORIGIN_GRID1152 -2.1001437  0.1459234   -14.392  &lt; 2e-16 ***\nORIGIN_GRID1153  1.5353563  0.0777156    19.756  &lt; 2e-16 ***\nORIGIN_GRID1157  3.6189123  0.0769278    47.043  &lt; 2e-16 ***\nORIGIN_GRID1158  0.9810950  0.0779952    12.579  &lt; 2e-16 ***\nORIGIN_GRID116   2.5290800  0.0805996    31.378  &lt; 2e-16 ***\nORIGIN_GRID1161  3.0186104  0.0769204    39.243  &lt; 2e-16 ***\nORIGIN_GRID1162  2.7082136  0.0769743    35.183  &lt; 2e-16 ***\nORIGIN_GRID1163  3.4256636  0.0769009    44.546  &lt; 2e-16 ***\nORIGIN_GRID1164  1.6478542  0.0774644    21.272  &lt; 2e-16 ***\nORIGIN_GRID1167 -0.4613677  0.0896297    -5.147 2.64e-07 ***\nORIGIN_GRID117  -0.6768583  0.1930291    -3.507 0.000454 ***\nORIGIN_GRID1171 -1.1891118  0.1065028   -11.165  &lt; 2e-16 ***\nORIGIN_GRID1172  3.2205101  0.0770611    41.792  &lt; 2e-16 ***\nORIGIN_GRID1173  0.7510948  0.0795199     9.445  &lt; 2e-16 ***\nORIGIN_GRID1176  2.6542176  0.0771005    34.425  &lt; 2e-16 ***\nORIGIN_GRID1177  3.0180583  0.0770693    39.160  &lt; 2e-16 ***\nORIGIN_GRID118  -0.2400153  0.0939619    -2.554 0.010637 *  \nORIGIN_GRID1180  3.5148299  0.0769265    45.691  &lt; 2e-16 ***\nORIGIN_GRID1181  2.7361263  0.0769374    35.563  &lt; 2e-16 ***\nORIGIN_GRID1183 -0.3743075  0.0846830    -4.420 9.87e-06 ***\nORIGIN_GRID1184  2.1647570  0.0770734    28.087  &lt; 2e-16 ***\nORIGIN_GRID1186 -2.3551246  0.2040127   -11.544  &lt; 2e-16 ***\nORIGIN_GRID119   0.5183628  0.0829457     6.249 4.12e-10 ***\nORIGIN_GRID1192 -0.2403151  0.0843437    -2.849 0.004382 ** \nORIGIN_GRID1193  1.6338814  0.0776472    21.042  &lt; 2e-16 ***\nORIGIN_GRID1194  0.9329289  0.0783855    11.902  &lt; 2e-16 ***\nORIGIN_GRID1195  3.5866149  0.0769210    46.627  &lt; 2e-16 ***\nORIGIN_GRID1196  2.2145466  0.0773709    28.622  &lt; 2e-16 ***\nORIGIN_GRID1199  1.0494721  0.0777552    13.497  &lt; 2e-16 ***\nORIGIN_GRID120  -1.0018668  0.0934084   -10.726  &lt; 2e-16 ***\nORIGIN_GRID1200  2.9647197  0.0769350    38.535  &lt; 2e-16 ***\nORIGIN_GRID1201  2.7274593  0.0769595    35.440  &lt; 2e-16 ***\nORIGIN_GRID1202  1.3945926  0.0773825    18.022  &lt; 2e-16 ***\nORIGIN_GRID1203  1.5231951  0.0776610    19.613  &lt; 2e-16 ***\nORIGIN_GRID1204  2.0139273  0.0772684    26.064  &lt; 2e-16 ***\nORIGIN_GRID1205 -2.5760873  0.2693962    -9.562  &lt; 2e-16 ***\nORIGIN_GRID1207  1.4055016  0.0777662    18.073  &lt; 2e-16 ***\nORIGIN_GRID1208  1.6746403  0.0776258    21.573  &lt; 2e-16 ***\nORIGIN_GRID1209  0.6922383  0.0786363     8.803  &lt; 2e-16 ***\nORIGIN_GRID121  -0.5660246  0.0866336    -6.534 6.42e-11 ***\nORIGIN_GRID1210 -1.8761490  0.1387060   -13.526  &lt; 2e-16 ***\nORIGIN_GRID1211 -1.1416919  0.0923218   -12.366  &lt; 2e-16 ***\nORIGIN_GRID1212 -2.0752375  0.1231496   -16.851  &lt; 2e-16 ***\nORIGIN_GRID1213  3.5239752  0.0769226    45.812  &lt; 2e-16 ***\nORIGIN_GRID1214  1.9901018  0.0773235    25.737  &lt; 2e-16 ***\nORIGIN_GRID1215 -1.8241080  0.2181344    -8.362  &lt; 2e-16 ***\nORIGIN_GRID1218  2.4141880  0.0770849    31.319  &lt; 2e-16 ***\nORIGIN_GRID1219  3.5624299  0.0768995    46.326  &lt; 2e-16 ***\nORIGIN_GRID122   3.1439929  0.0816044    38.527  &lt; 2e-16 ***\nORIGIN_GRID1220  2.0012986  0.0770837    25.963  &lt; 2e-16 ***\nORIGIN_GRID1221  1.6622899  0.0772362    21.522  &lt; 2e-16 ***\nORIGIN_GRID1222  1.9566718  0.0775555    25.229  &lt; 2e-16 ***\nORIGIN_GRID1225  1.7957254  0.0772531    23.245  &lt; 2e-16 ***\nORIGIN_GRID1226  1.1628798  0.0778244    14.942  &lt; 2e-16 ***\nORIGIN_GRID1227  2.0497973  0.0772654    26.529  &lt; 2e-16 ***\nORIGIN_GRID1229  0.8736336  0.0789895    11.060  &lt; 2e-16 ***\nORIGIN_GRID1230  2.1274308  0.0771320    27.582  &lt; 2e-16 ***\nORIGIN_GRID1231  2.9802270  0.0770013    38.704  &lt; 2e-16 ***\nORIGIN_GRID1232  2.9600703  0.0770165    38.434  &lt; 2e-16 ***\nORIGIN_GRID1233  3.9981588  0.0769397    51.965  &lt; 2e-16 ***\nORIGIN_GRID1234 -0.1382706  0.0863363    -1.602 0.109259    \nORIGIN_GRID1238  1.5005127  0.0773043    19.410  &lt; 2e-16 ***\nORIGIN_GRID1239  1.3792052  0.0773449    17.832  &lt; 2e-16 ***\nORIGIN_GRID1240  2.2638577  0.0769865    29.406  &lt; 2e-16 ***\nORIGIN_GRID1241  1.6471966  0.0774529    21.267  &lt; 2e-16 ***\nORIGIN_GRID1242  0.8999040  0.0778705    11.556  &lt; 2e-16 ***\nORIGIN_GRID1243 -0.9957305  0.0898305   -11.085  &lt; 2e-16 ***\nORIGIN_GRID1244  1.1700659  0.0776864    15.061  &lt; 2e-16 ***\nORIGIN_GRID1245  2.5652937  0.0772015    33.229  &lt; 2e-16 ***\nORIGIN_GRID1246  2.2596828  0.0778290    29.034  &lt; 2e-16 ***\nORIGIN_GRID1249  0.2835565  0.0841377     3.370 0.000751 ***\nORIGIN_GRID1250  3.7530931  0.0768886    48.812  &lt; 2e-16 ***\nORIGIN_GRID1251  3.2341552  0.0769221    42.045  &lt; 2e-16 ***\nORIGIN_GRID1252  2.9665568  0.0770347    38.509  &lt; 2e-16 ***\nORIGIN_GRID1253  0.7669795  0.0805846     9.518  &lt; 2e-16 ***\nORIGIN_GRID1256  1.9012717  0.0771084    24.657  &lt; 2e-16 ***\nORIGIN_GRID1257  1.0658390  0.0775398    13.746  &lt; 2e-16 ***\nORIGIN_GRID1258  2.0618425  0.0771008    26.742  &lt; 2e-16 ***\nORIGIN_GRID1259  2.1170423  0.0771088    27.455  &lt; 2e-16 ***\nORIGIN_GRID1260  1.2065786  0.0786461    15.342  &lt; 2e-16 ***\nORIGIN_GRID1261  0.5921233  0.0781777     7.574 3.62e-14 ***\nORIGIN_GRID1262  1.7423791  0.0771785    22.576  &lt; 2e-16 ***\nORIGIN_GRID1263  1.9885427  0.0771556    25.773  &lt; 2e-16 ***\nORIGIN_GRID1264  2.8479426  0.0769872    36.992  &lt; 2e-16 ***\nORIGIN_GRID1265  3.1784361  0.0769989    41.279  &lt; 2e-16 ***\nORIGIN_GRID1266  1.8721278  0.0775693    24.135  &lt; 2e-16 ***\nORIGIN_GRID1268  3.3221638  0.0770900    43.095  &lt; 2e-16 ***\nORIGIN_GRID1269  3.1826423  0.0769266    41.372  &lt; 2e-16 ***\nORIGIN_GRID1270  3.4640990  0.0769516    45.017  &lt; 2e-16 ***\nORIGIN_GRID1272  3.1291538  0.0785735    39.825  &lt; 2e-16 ***\nORIGIN_GRID1276  1.5571956  0.0771739    20.178  &lt; 2e-16 ***\nORIGIN_GRID1277  1.7585007  0.0772166    22.774  &lt; 2e-16 ***\nORIGIN_GRID1278  1.7903488  0.0770760    23.228  &lt; 2e-16 ***\nORIGIN_GRID1279  2.6584067  0.0769788    34.534  &lt; 2e-16 ***\nORIGIN_GRID1280  1.9314267  0.0770795    25.058  &lt; 2e-16 ***\nORIGIN_GRID1281  1.4804764  0.0773431    19.142  &lt; 2e-16 ***\nORIGIN_GRID1282  2.1400991  0.0771134    27.753  &lt; 2e-16 ***\nORIGIN_GRID1283  2.1461157  0.0770882    27.840  &lt; 2e-16 ***\nORIGIN_GRID1284  3.0287264  0.0769664    39.351  &lt; 2e-16 ***\nORIGIN_GRID1285  2.4377752  0.0770907    31.622  &lt; 2e-16 ***\nORIGIN_GRID1288  3.6796065  0.0769937    47.791  &lt; 2e-16 ***\nORIGIN_GRID1289  4.6227667  0.0769138    60.103  &lt; 2e-16 ***\nORIGIN_GRID1294  2.2245134  0.0770387    28.875  &lt; 2e-16 ***\nORIGIN_GRID1295  2.3364609  0.0769727    30.354  &lt; 2e-16 ***\nORIGIN_GRID1296  2.4408018  0.0769742    31.709  &lt; 2e-16 ***\nORIGIN_GRID1297  1.0007201  0.0784172    12.761  &lt; 2e-16 ***\nORIGIN_GRID1298  2.4074041  0.0770054    31.263  &lt; 2e-16 ***\nORIGIN_GRID1299  2.9139883  0.0769304    37.878  &lt; 2e-16 ***\nORIGIN_GRID1300  0.0070981  0.0801737     0.089 0.929452    \nORIGIN_GRID1301  3.0396890  0.0769490    39.503  &lt; 2e-16 ***\nORIGIN_GRID1302  3.3712004  0.0768982    43.840  &lt; 2e-16 ***\nORIGIN_GRID1303  3.8459880  0.0768828    50.024  &lt; 2e-16 ***\nORIGIN_GRID1304  0.2438779  0.0793170     3.075 0.002107 ** \nORIGIN_GRID1306  3.2457829  0.0771122    42.092  &lt; 2e-16 ***\nORIGIN_GRID1307  4.3959667  0.0769219    57.148  &lt; 2e-16 ***\nORIGIN_GRID1308  2.9524521  0.0772274    38.231  &lt; 2e-16 ***\nORIGIN_GRID1314  1.4675336  0.0771893    19.012  &lt; 2e-16 ***\nORIGIN_GRID1315  1.7648130  0.0770966    22.891  &lt; 2e-16 ***\nORIGIN_GRID1316  1.2199699  0.0780026    15.640  &lt; 2e-16 ***\nORIGIN_GRID1317  1.9326037  0.0772530    25.017  &lt; 2e-16 ***\nORIGIN_GRID1318  2.5007051  0.0770408    32.460  &lt; 2e-16 ***\nORIGIN_GRID1319  3.0644414  0.0769283    39.835  &lt; 2e-16 ***\nORIGIN_GRID1320  3.0012630  0.0769108    39.023  &lt; 2e-16 ***\nORIGIN_GRID1321  2.9602383  0.0769597    38.465  &lt; 2e-16 ***\nORIGIN_GRID1322  2.2005028  0.0770500    28.559  &lt; 2e-16 ***\nORIGIN_GRID1323  1.4002662  0.0777294    18.015  &lt; 2e-16 ***\nORIGIN_GRID1326  4.5578197  0.0769102    59.262  &lt; 2e-16 ***\nORIGIN_GRID1327  4.2388816  0.0769737    55.069  &lt; 2e-16 ***\nORIGIN_GRID1332  0.1980141  0.0792101     2.500 0.012424 *  \nORIGIN_GRID1333  1.0773852  0.0774082    13.918  &lt; 2e-16 ***\nORIGIN_GRID1334  2.0974024  0.0769947    27.241  &lt; 2e-16 ***\nORIGIN_GRID1335  2.9268110  0.0769302    38.045  &lt; 2e-16 ***\nORIGIN_GRID1336  2.4230187  0.0770638    31.442  &lt; 2e-16 ***\nORIGIN_GRID1337  3.5197068  0.0768744    45.785  &lt; 2e-16 ***\nORIGIN_GRID1338  2.1105457  0.0770761    27.383  &lt; 2e-16 ***\nORIGIN_GRID1339  2.3318264  0.0770272    30.273  &lt; 2e-16 ***\nORIGIN_GRID1340  3.6738616  0.0768752    47.790  &lt; 2e-16 ***\nORIGIN_GRID1341  1.4925501  0.0774319    19.276  &lt; 2e-16 ***\nORIGIN_GRID1342  1.0636560  0.0778875    13.656  &lt; 2e-16 ***\nORIGIN_GRID1345  4.0659292  0.0769779    52.819  &lt; 2e-16 ***\nORIGIN_GRID1352  1.2325428  0.0777161    15.860  &lt; 2e-16 ***\nORIGIN_GRID1353  1.8512769  0.0771119    24.008  &lt; 2e-16 ***\nORIGIN_GRID1354  2.4709227  0.0769485    32.111  &lt; 2e-16 ***\nORIGIN_GRID1355  2.9176933  0.0769751    37.904  &lt; 2e-16 ***\nORIGIN_GRID1356  3.2088030  0.0769291    41.711  &lt; 2e-16 ***\nORIGIN_GRID1357  3.2622974  0.0769048    42.420  &lt; 2e-16 ***\nORIGIN_GRID1358  3.3754985  0.0770094    43.832  &lt; 2e-16 ***\nORIGIN_GRID1359  3.2555768  0.0769109    42.329  &lt; 2e-16 ***\nORIGIN_GRID136   2.3050708  0.0806751    28.572  &lt; 2e-16 ***\nORIGIN_GRID1360  2.8281256  0.0769606    36.748  &lt; 2e-16 ***\nORIGIN_GRID1364 -1.1817380  0.1187600    -9.951  &lt; 2e-16 ***\nORIGIN_GRID137  -0.2057518  0.1014454    -2.028 0.042539 *  \nORIGIN_GRID1371  0.3738231  0.0794513     4.705 2.54e-06 ***\nORIGIN_GRID1372  1.8755484  0.0770809    24.332  &lt; 2e-16 ***\nORIGIN_GRID1373  2.2724540  0.0770993    29.474  &lt; 2e-16 ***\nORIGIN_GRID1374  2.2312488  0.0771432    28.923  &lt; 2e-16 ***\nORIGIN_GRID1375  3.6807164  0.0769748    47.817  &lt; 2e-16 ***\nORIGIN_GRID1376  2.6729301  0.0769716    34.726  &lt; 2e-16 ***\nORIGIN_GRID1377  1.1650034  0.0775525    15.022  &lt; 2e-16 ***\nORIGIN_GRID1378  3.5458691  0.0769002    46.110  &lt; 2e-16 ***\nORIGIN_GRID1379  1.8016337  0.0781510    23.053  &lt; 2e-16 ***\nORIGIN_GRID138  -0.7999754  0.1127671    -7.094 1.30e-12 ***\nORIGIN_GRID1380  2.0634461  0.0773658    26.671  &lt; 2e-16 ***\nORIGIN_GRID1383  1.8299915  0.0784537    23.326  &lt; 2e-16 ***\nORIGIN_GRID1389 -0.1821073  0.1159476    -1.571 0.116276    \nORIGIN_GRID139  -0.7268083  0.0878801    -8.270  &lt; 2e-16 ***\nORIGIN_GRID1390 -0.0876435  0.0825190    -1.062 0.288190    \nORIGIN_GRID1391  0.4691699  0.0785377     5.974 2.32e-09 ***\nORIGIN_GRID1392  1.9223059  0.0770547    24.947  &lt; 2e-16 ***\nORIGIN_GRID1393  2.4523974  0.0769768    31.859  &lt; 2e-16 ***\nORIGIN_GRID1394  3.0367040  0.0769378    39.470  &lt; 2e-16 ***\nORIGIN_GRID1395  4.3677486  0.0770150    56.713  &lt; 2e-16 ***\nORIGIN_GRID1396  1.1377219  0.0780741    14.572  &lt; 2e-16 ***\nORIGIN_GRID1397  1.8829938  0.0800717    23.516  &lt; 2e-16 ***\nORIGIN_GRID1398  2.8975512  0.0770840    37.590  &lt; 2e-16 ***\nORIGIN_GRID140   2.9662567  0.0773000    38.373  &lt; 2e-16 ***\nORIGIN_GRID1401 -0.4618649  0.0963595    -4.793 1.64e-06 ***\nORIGIN_GRID1408 -0.0347076  0.1008502    -0.344 0.730733    \nORIGIN_GRID1409 -0.1820627  0.0833456    -2.184 0.028931 *  \nORIGIN_GRID141  -0.4530890  0.0844457    -5.365 8.07e-08 ***\nORIGIN_GRID1410  1.3029957  0.0787196    16.552  &lt; 2e-16 ***\nORIGIN_GRID1411  2.4424218  0.0769551    31.738  &lt; 2e-16 ***\nORIGIN_GRID1412  3.3410066  0.0769004    43.446  &lt; 2e-16 ***\nORIGIN_GRID1413  3.0951492  0.0769501    40.223  &lt; 2e-16 ***\nORIGIN_GRID1414  0.2836930  0.0791551     3.584 0.000338 ***\nORIGIN_GRID1415  1.9262249  0.0771320    24.973  &lt; 2e-16 ***\nORIGIN_GRID1416  1.1280290  0.0778448    14.491  &lt; 2e-16 ***\nORIGIN_GRID1417  1.0502292  0.0779363    13.475  &lt; 2e-16 ***\nORIGIN_GRID1418  0.7594129  0.0790148     9.611  &lt; 2e-16 ***\nORIGIN_GRID1419 -1.1092451  0.1163660    -9.532  &lt; 2e-16 ***\nORIGIN_GRID142   0.9874702  0.0881630    11.201  &lt; 2e-16 ***\nORIGIN_GRID1420 -0.5309615  0.0974322    -5.450 5.05e-08 ***\nORIGIN_GRID1428 -1.9898415  0.2622855    -7.587 3.29e-14 ***\nORIGIN_GRID1430  1.5070638  0.0782911    19.249  &lt; 2e-16 ***\nORIGIN_GRID1431 -0.0701401  0.0790592    -0.887 0.374979    \nORIGIN_GRID1432  2.9927566  0.0769100    38.912  &lt; 2e-16 ***\nORIGIN_GRID1433  1.7468808  0.0793649    22.011  &lt; 2e-16 ***\nORIGIN_GRID1434  1.7804430  0.0774123    22.999  &lt; 2e-16 ***\nORIGIN_GRID1435  2.3503805  0.0772905    30.410  &lt; 2e-16 ***\nORIGIN_GRID1436  0.9443956  0.0778860    12.125  &lt; 2e-16 ***\nORIGIN_GRID1439 -0.0748854  0.0851621    -0.879 0.379223    \nORIGIN_GRID1440 -0.7169281  0.1002799    -7.149 8.72e-13 ***\nORIGIN_GRID1448  2.9553587  0.0774570    38.155  &lt; 2e-16 ***\nORIGIN_GRID1449  1.6461941  0.0771401    21.340  &lt; 2e-16 ***\nORIGIN_GRID1450  2.5043081  0.0770407    32.506  &lt; 2e-16 ***\nORIGIN_GRID1451  3.1888454  0.0769150    41.459  &lt; 2e-16 ***\nORIGIN_GRID1452  1.8160985  0.0771776    23.531  &lt; 2e-16 ***\nORIGIN_GRID1453  3.0198931  0.0769298    39.255  &lt; 2e-16 ***\nORIGIN_GRID1454  2.9519134  0.0773777    38.149  &lt; 2e-16 ***\nORIGIN_GRID1455  1.6004395  0.0773625    20.688  &lt; 2e-16 ***\nORIGIN_GRID1456  3.5173463  0.0769411    45.715  &lt; 2e-16 ***\nORIGIN_GRID1457  3.0777160  0.0770066    39.967  &lt; 2e-16 ***\nORIGIN_GRID1458  0.0449038  0.0974275     0.461 0.644874    \nORIGIN_GRID1468  2.7389063  0.0793045    34.537  &lt; 2e-16 ***\nORIGIN_GRID1469  2.8722173  0.0769190    37.341  &lt; 2e-16 ***\nORIGIN_GRID1470  1.5870483  0.0772008    20.557  &lt; 2e-16 ***\nORIGIN_GRID1471  3.2075488  0.0769358    41.691  &lt; 2e-16 ***\nORIGIN_GRID1472  3.2618713  0.0768906    42.422  &lt; 2e-16 ***\nORIGIN_GRID1473  2.0884810  0.0771231    27.080  &lt; 2e-16 ***\nORIGIN_GRID1474  3.5769130  0.0768955    46.517  &lt; 2e-16 ***\nORIGIN_GRID1475  2.7409916  0.0770967    35.553  &lt; 2e-16 ***\nORIGIN_GRID1476  2.8393752  0.0771748    36.791  &lt; 2e-16 ***\nORIGIN_GRID1477 -0.5778545  0.0935709    -6.176 6.59e-10 ***\nORIGIN_GRID1486  0.9411583  0.0811413    11.599  &lt; 2e-16 ***\nORIGIN_GRID1487  2.8210286  0.0769378    36.666  &lt; 2e-16 ***\nORIGIN_GRID1488  0.9295485  0.0783824    11.859  &lt; 2e-16 ***\nORIGIN_GRID1489  2.2279475  0.0770412    28.919  &lt; 2e-16 ***\nORIGIN_GRID1490  2.1196295  0.0772677    27.432  &lt; 2e-16 ***\nORIGIN_GRID1491  2.3427276  0.0770188    30.418  &lt; 2e-16 ***\nORIGIN_GRID1492  2.7901003  0.0769615    36.253  &lt; 2e-16 ***\nORIGIN_GRID1493  3.5226344  0.0769057    45.805  &lt; 2e-16 ***\nORIGIN_GRID1494  3.5983999  0.0769888    46.739  &lt; 2e-16 ***\nORIGIN_GRID1506 -1.6554890  0.1494630   -11.076  &lt; 2e-16 ***\nORIGIN_GRID1507  3.0223935  0.0769148    39.295  &lt; 2e-16 ***\nORIGIN_GRID1508  1.8584338  0.0770922    24.107  &lt; 2e-16 ***\nORIGIN_GRID1509  3.1751021  0.0774118    41.016  &lt; 2e-16 ***\nORIGIN_GRID1510  2.9804927  0.0769509    38.732  &lt; 2e-16 ***\nORIGIN_GRID1512  3.6105059  0.0768952    46.954  &lt; 2e-16 ***\nORIGIN_GRID1513  4.3712689  0.0769978    56.771  &lt; 2e-16 ***\nORIGIN_GRID1514  3.9117293  0.0770307    50.781  &lt; 2e-16 ***\nORIGIN_GRID1524  1.7697049  0.0777827    22.752  &lt; 2e-16 ***\nORIGIN_GRID1525  2.6910597  0.0769889    34.954  &lt; 2e-16 ***\nORIGIN_GRID1526  2.6904998  0.0769861    34.948  &lt; 2e-16 ***\nORIGIN_GRID1527  2.1861647  0.0771583    28.334  &lt; 2e-16 ***\nORIGIN_GRID1528  1.6068449  0.0772541    20.799  &lt; 2e-16 ***\nORIGIN_GRID1529  1.2942683  0.0777247    16.652  &lt; 2e-16 ***\nORIGIN_GRID1530  2.7571011  0.0770819    35.768  &lt; 2e-16 ***\nORIGIN_GRID1531  3.2771675  0.0769385    42.595  &lt; 2e-16 ***\nORIGIN_GRID1532  2.8486868  0.0772155    36.893  &lt; 2e-16 ***\nORIGIN_GRID1544  2.5813599  0.0770487    33.503  &lt; 2e-16 ***\nORIGIN_GRID1545  2.5445984  0.0769736    33.058  &lt; 2e-16 ***\nORIGIN_GRID1546  3.2610179  0.0769109    42.400  &lt; 2e-16 ***\nORIGIN_GRID1547  2.1091788  0.0770651    27.369  &lt; 2e-16 ***\nORIGIN_GRID1548  3.1977567  0.0769304    41.567  &lt; 2e-16 ***\nORIGIN_GRID1549  2.9361979  0.0769605    38.152  &lt; 2e-16 ***\nORIGIN_GRID1550  3.6278856  0.0768936    47.181  &lt; 2e-16 ***\nORIGIN_GRID1551  1.3560015  0.0778010    17.429  &lt; 2e-16 ***\nORIGIN_GRID1552  3.8198195  0.0769596    49.634  &lt; 2e-16 ***\nORIGIN_GRID156   0.8198883  0.1000457     8.195 2.50e-16 ***\nORIGIN_GRID1563  2.7787033  0.0769867    36.093  &lt; 2e-16 ***\nORIGIN_GRID1564  2.7030267  0.0769576    35.124  &lt; 2e-16 ***\nORIGIN_GRID1565  2.2346893  0.0770044    29.020  &lt; 2e-16 ***\nORIGIN_GRID1566  0.0736328  0.0796999     0.924 0.355551    \nORIGIN_GRID1567  2.8206136  0.0769720    36.645  &lt; 2e-16 ***\nORIGIN_GRID1568  3.3538973  0.0769071    43.610  &lt; 2e-16 ***\nORIGIN_GRID1569  3.1403628  0.0769439    40.814  &lt; 2e-16 ***\nORIGIN_GRID1570  3.3934171  0.0769360    44.107  &lt; 2e-16 ***\nORIGIN_GRID1571  5.2326867  0.0771012    67.868  &lt; 2e-16 ***\nORIGIN_GRID158   0.1666275  0.0902255     1.847 0.064778 .  \nORIGIN_GRID1582  1.5271719  0.0773705    19.738  &lt; 2e-16 ***\nORIGIN_GRID1583  2.5792248  0.0769469    33.520  &lt; 2e-16 ***\nORIGIN_GRID1584  1.7618548  0.0771106    22.848  &lt; 2e-16 ***\nORIGIN_GRID1585  1.0863065  0.0775715    14.004  &lt; 2e-16 ***\nORIGIN_GRID1587  3.3089790  0.0769154    43.021  &lt; 2e-16 ***\nORIGIN_GRID1588  3.3861006  0.0768910    44.038  &lt; 2e-16 ***\nORIGIN_GRID1589  3.2489682  0.0769239    42.236  &lt; 2e-16 ***\nORIGIN_GRID159   2.2019832  0.0774308    28.438  &lt; 2e-16 ***\nORIGIN_GRID1590  3.2142743  0.0769979    41.745  &lt; 2e-16 ***\nORIGIN_GRID1591  1.7182283  0.0827431    20.766  &lt; 2e-16 ***\nORIGIN_GRID160   3.2615222  0.0769165    42.403  &lt; 2e-16 ***\nORIGIN_GRID1601  2.3835728  0.0770360    30.941  &lt; 2e-16 ***\nORIGIN_GRID1602  2.4415654  0.0772324    31.613  &lt; 2e-16 ***\nORIGIN_GRID1603  1.2894696  0.0774279    16.654  &lt; 2e-16 ***\nORIGIN_GRID1604 -0.3226033  0.0803046    -4.017 5.89e-05 ***\nORIGIN_GRID1606  3.0881148  0.0769349    40.139  &lt; 2e-16 ***\nORIGIN_GRID1607  2.8362048  0.0770049    36.831  &lt; 2e-16 ***\nORIGIN_GRID1608  3.5823897  0.0768940    46.589  &lt; 2e-16 ***\nORIGIN_GRID1609  3.8245446  0.0769200    49.721  &lt; 2e-16 ***\nORIGIN_GRID1610  4.1116671  0.0776412    52.957  &lt; 2e-16 ***\nORIGIN_GRID1620  2.7969492  0.0769696    36.338  &lt; 2e-16 ***\nORIGIN_GRID1621  2.3032525  0.0770636    29.888  &lt; 2e-16 ***\nORIGIN_GRID1622  2.6518466  0.0770942    34.397  &lt; 2e-16 ***\nORIGIN_GRID1623  0.7401765  0.0779198     9.499  &lt; 2e-16 ***\nORIGIN_GRID1624 -0.5811343  0.0814026    -7.139 9.40e-13 ***\nORIGIN_GRID1625 -0.2739605  0.0832162    -3.292 0.000994 ***\nORIGIN_GRID1626  3.5223669  0.0769372    45.782  &lt; 2e-16 ***\nORIGIN_GRID1627  3.5110483  0.0769186    45.646  &lt; 2e-16 ***\nORIGIN_GRID1628  3.5743051  0.0769204    46.468  &lt; 2e-16 ***\nORIGIN_GRID1629  2.7128123  0.0771769    35.151  &lt; 2e-16 ***\nORIGIN_GRID1630  2.7185048  0.0805900    33.733  &lt; 2e-16 ***\nORIGIN_GRID1639  2.3217737  0.0771412    30.098  &lt; 2e-16 ***\nORIGIN_GRID1640  3.0974770  0.0769012    40.279  &lt; 2e-16 ***\nORIGIN_GRID1641  2.9311120  0.0769150    38.108  &lt; 2e-16 ***\nORIGIN_GRID1645  3.5335754  0.0769965    45.893  &lt; 2e-16 ***\nORIGIN_GRID1646  3.5137492  0.0769453    45.666  &lt; 2e-16 ***\nORIGIN_GRID1647  3.6152658  0.0769014    47.012  &lt; 2e-16 ***\nORIGIN_GRID1648  1.7044723  0.0838988    20.316  &lt; 2e-16 ***\nORIGIN_GRID1658  2.5710458  0.0769918    33.394  &lt; 2e-16 ***\nORIGIN_GRID1659  2.3749253  0.0770328    30.830  &lt; 2e-16 ***\nORIGIN_GRID1660  2.7106800  0.0769524    35.225  &lt; 2e-16 ***\nORIGIN_GRID1661  2.0292986  0.0771602    26.300  &lt; 2e-16 ***\nORIGIN_GRID1663 -0.6006174  0.0978447    -6.138 8.33e-10 ***\nORIGIN_GRID1665  2.8094868  0.0771434    36.419  &lt; 2e-16 ***\nORIGIN_GRID1666  4.2705411  0.0768759    55.551  &lt; 2e-16 ***\nORIGIN_GRID1667  1.1886525  0.0844813    14.070  &lt; 2e-16 ***\nORIGIN_GRID1668  4.1286387  0.0777887    53.075  &lt; 2e-16 ***\nORIGIN_GRID1677  2.6213736  0.0769721    34.056  &lt; 2e-16 ***\nORIGIN_GRID1678  2.9458889  0.0769487    38.284  &lt; 2e-16 ***\nORIGIN_GRID1679  3.1554084  0.0769322    41.015  &lt; 2e-16 ***\nORIGIN_GRID1682  0.2972963  0.0808757     3.676 0.000237 ***\nORIGIN_GRID1684  4.4812900  0.0772654    57.999  &lt; 2e-16 ***\nORIGIN_GRID1685  3.6333830  0.0769547    47.215  &lt; 2e-16 ***\nORIGIN_GRID1696  2.9992858  0.0770433    38.930  &lt; 2e-16 ***\nORIGIN_GRID1697  1.5877744  0.0778228    20.402  &lt; 2e-16 ***\nORIGIN_GRID1698  3.9099324  0.0775724    50.404  &lt; 2e-16 ***\nORIGIN_GRID1699  2.8317617  0.0769608    36.795  &lt; 2e-16 ***\nORIGIN_GRID1702 -0.6358851  0.0898318    -7.079 1.46e-12 ***\nORIGIN_GRID1704  3.3972219  0.0769706    44.137  &lt; 2e-16 ***\nORIGIN_GRID1705  4.2028777  0.0773486    54.337  &lt; 2e-16 ***\nORIGIN_GRID1715  2.7800210  0.0769621    36.122  &lt; 2e-16 ***\nORIGIN_GRID1716  1.4051319  0.0773719    18.161  &lt; 2e-16 ***\nORIGIN_GRID1717  2.4417362  0.0772922    31.591  &lt; 2e-16 ***\nORIGIN_GRID1718 -1.9000885  0.1451165   -13.094  &lt; 2e-16 ***\nORIGIN_GRID1721 -1.0274651  0.1027472   -10.000  &lt; 2e-16 ***\nORIGIN_GRID1723  3.2807803  0.0772935    42.446  &lt; 2e-16 ***\nORIGIN_GRID1735  1.7381945  0.0773133    22.482  &lt; 2e-16 ***\nORIGIN_GRID1736  3.2868787  0.0770457    42.661  &lt; 2e-16 ***\nORIGIN_GRID1737  2.7262435  0.0769877    35.411  &lt; 2e-16 ***\nORIGIN_GRID1740  0.2930495  0.0816584     3.589 0.000332 ***\nORIGIN_GRID1742  3.0932054  0.0773496    39.990  &lt; 2e-16 ***\nORIGIN_GRID1753  2.2435912  0.0771041    29.098  &lt; 2e-16 ***\nORIGIN_GRID1754  2.9680384  0.0769431    38.574  &lt; 2e-16 ***\nORIGIN_GRID1755  3.9128720  0.0769289    50.864  &lt; 2e-16 ***\nORIGIN_GRID1758 -0.2357339  0.0868312    -2.715 0.006631 ** \nORIGIN_GRID177  -0.8371110  0.1097601    -7.627 2.41e-14 ***\nORIGIN_GRID1773  1.9462819  0.0772630    25.190  &lt; 2e-16 ***\nORIGIN_GRID1774  3.6179025  0.0768746    47.062  &lt; 2e-16 ***\nORIGIN_GRID1775  2.4248625  0.0771110    31.446  &lt; 2e-16 ***\nORIGIN_GRID1776  3.3177867  0.0769385    43.123  &lt; 2e-16 ***\nORIGIN_GRID1778 -0.8144690  0.1127654    -7.223 5.10e-13 ***\nORIGIN_GRID178  -0.6355508  0.0859302    -7.396 1.40e-13 ***\nORIGIN_GRID179  -1.1198546  0.1458884    -7.676 1.64e-14 ***\nORIGIN_GRID1791  2.0428276  0.0772022    26.461  &lt; 2e-16 ***\nORIGIN_GRID1792  0.8727459  0.0779276    11.199  &lt; 2e-16 ***\nORIGIN_GRID1793  3.2725696  0.0769412    42.533  &lt; 2e-16 ***\nORIGIN_GRID1794  1.9432961  0.0775584    25.056  &lt; 2e-16 ***\nORIGIN_GRID1795  3.3782098  0.0769445    43.904  &lt; 2e-16 ***\nORIGIN_GRID1796  1.9897068  0.0771850    25.778  &lt; 2e-16 ***\nORIGIN_GRID1797  2.7479946  0.0770621    35.659  &lt; 2e-16 ***\nORIGIN_GRID1811  2.4686422  0.0770268    32.049  &lt; 2e-16 ***\nORIGIN_GRID1812  3.1906344  0.0769127    41.484  &lt; 2e-16 ***\nORIGIN_GRID1813  2.7087122  0.0769781    35.188  &lt; 2e-16 ***\nORIGIN_GRID1814  3.5179290  0.0769349    45.726  &lt; 2e-16 ***\nORIGIN_GRID1815  3.3087974  0.0769320    43.009  &lt; 2e-16 ***\nORIGIN_GRID1816  1.9676263  0.0773486    25.438  &lt; 2e-16 ***\nORIGIN_GRID1817  1.2858582  0.0784389    16.393  &lt; 2e-16 ***\nORIGIN_GRID1830  2.9562286  0.0770410    38.372  &lt; 2e-16 ***\nORIGIN_GRID1831  3.4523922  0.0769077    44.890  &lt; 2e-16 ***\nORIGIN_GRID1832  2.6929342  0.0769602    34.991  &lt; 2e-16 ***\nORIGIN_GRID1833  3.0377048  0.0769569    39.473  &lt; 2e-16 ***\nORIGIN_GRID1834  1.8039509  0.0776515    23.231  &lt; 2e-16 ***\nORIGIN_GRID1835  3.4689224  0.0769229    45.096  &lt; 2e-16 ***\nORIGIN_GRID1849  2.1779673  0.0771780    28.220  &lt; 2e-16 ***\nORIGIN_GRID1850  3.0718795  0.0769344    39.929  &lt; 2e-16 ***\nORIGIN_GRID1851 -0.8382789  0.1002842    -8.359  &lt; 2e-16 ***\nORIGIN_GRID1852  3.0529659  0.0769160    39.692  &lt; 2e-16 ***\nORIGIN_GRID1853  3.1203061  0.0769952    40.526  &lt; 2e-16 ***\nORIGIN_GRID1854  3.2437925  0.0769556    42.151  &lt; 2e-16 ***\nORIGIN_GRID1855  2.7624495  0.0779037    35.460  &lt; 2e-16 ***\nORIGIN_GRID1868  3.1442057  0.0769646    40.853  &lt; 2e-16 ***\nORIGIN_GRID1869  1.7031067  0.0772600    22.044  &lt; 2e-16 ***\nORIGIN_GRID1870  1.5520664  0.0801505    19.364  &lt; 2e-16 ***\nORIGIN_GRID1871  3.6794259  0.0768721    47.864  &lt; 2e-16 ***\nORIGIN_GRID1872  3.0500601  0.0771257    39.547  &lt; 2e-16 ***\nORIGIN_GRID1873  3.1341070  0.0770063    40.699  &lt; 2e-16 ***\nORIGIN_GRID1887  1.6385035  0.0773639    21.179  &lt; 2e-16 ***\nORIGIN_GRID1888  3.1344151  0.0769275    40.745  &lt; 2e-16 ***\nORIGIN_GRID1889  1.9934215  0.0771114    25.851  &lt; 2e-16 ***\nORIGIN_GRID1890  2.8883128  0.0769537    37.533  &lt; 2e-16 ***\nORIGIN_GRID1891  2.7939005  0.0770809    36.246  &lt; 2e-16 ***\nORIGIN_GRID1892  3.3093006  0.0768987    43.035  &lt; 2e-16 ***\nORIGIN_GRID1893 -0.0502909  0.0994759    -0.506 0.613167    \nORIGIN_GRID1905 -0.2616018  0.1249659    -2.093 0.036315 *  \nORIGIN_GRID1906  0.2885891  0.0790029     3.653 0.000259 ***\nORIGIN_GRID1907  1.2885151  0.0772971    16.670  &lt; 2e-16 ***\nORIGIN_GRID1908  2.6491365  0.0770091    34.400  &lt; 2e-16 ***\nORIGIN_GRID1909  3.0954136  0.0769404    40.231  &lt; 2e-16 ***\nORIGIN_GRID1910  2.4521049  0.0771470    31.785  &lt; 2e-16 ***\nORIGIN_GRID1911  0.5959989  0.0859175     6.937 4.01e-12 ***\nORIGIN_GRID1926  1.1728653  0.0779970    15.037  &lt; 2e-16 ***\nORIGIN_GRID1927  0.7102037  0.0782075     9.081  &lt; 2e-16 ***\nORIGIN_GRID1928  3.2408919  0.0769173    42.135  &lt; 2e-16 ***\nORIGIN_GRID1929  3.6648493  0.0769530    47.625  &lt; 2e-16 ***\nORIGIN_GRID1930  2.5732438  0.0770439    33.400  &lt; 2e-16 ***\nORIGIN_GRID1944  1.8722089  0.0776099    24.123  &lt; 2e-16 ***\nORIGIN_GRID1945  0.6973968  0.0783802     8.898  &lt; 2e-16 ***\nORIGIN_GRID1946  3.2170961  0.0769529    41.806  &lt; 2e-16 ***\nORIGIN_GRID1947  3.3639440  0.0768975    43.746  &lt; 2e-16 ***\nORIGIN_GRID1948  3.6425582  0.0769114    47.360  &lt; 2e-16 ***\nORIGIN_GRID1949  3.0448922  0.0770149    39.536  &lt; 2e-16 ***\nORIGIN_GRID195   0.9916526  0.1157832     8.565  &lt; 2e-16 ***\nORIGIN_GRID196   3.7724568  0.0769575    49.020  &lt; 2e-16 ***\nORIGIN_GRID1965  2.1016274  0.0771233    27.250  &lt; 2e-16 ***\nORIGIN_GRID1966  2.4148710  0.0771961    31.282  &lt; 2e-16 ***\nORIGIN_GRID1967  2.7340927  0.0769831    35.515  &lt; 2e-16 ***\nORIGIN_GRID1968  2.9855992  0.0770004    38.774  &lt; 2e-16 ***\nORIGIN_GRID197   0.4926992  0.0796461     6.186 6.17e-10 ***\nORIGIN_GRID1983  1.9778989  0.0772523    25.603  &lt; 2e-16 ***\nORIGIN_GRID1984  1.4630005  0.0775536    18.864  &lt; 2e-16 ***\nORIGIN_GRID1985  2.4619874  0.0770539    31.952  &lt; 2e-16 ***\nORIGIN_GRID1986  2.7516857  0.0769825    35.744  &lt; 2e-16 ***\nORIGIN_GRID1987  2.5946054  0.0794084    32.674  &lt; 2e-16 ***\nORIGIN_GRID2002 -0.7925474  0.1127773    -7.028 2.10e-12 ***\nORIGIN_GRID2003 -0.6512697  0.0849365    -7.668 1.75e-14 ***\nORIGIN_GRID2004 -0.5112762  0.0809828    -6.313 2.73e-10 ***\nORIGIN_GRID2005  2.5452459  0.0771037    33.011  &lt; 2e-16 ***\nORIGIN_GRID2006  1.4080290  0.0775677    18.152  &lt; 2e-16 ***\nORIGIN_GRID2021 -1.1071919  0.0886727   -12.486  &lt; 2e-16 ***\nORIGIN_GRID2022  0.0954128  0.0794530     1.201 0.229801    \nORIGIN_GRID2023  1.2790375  0.0778522    16.429  &lt; 2e-16 ***\nORIGIN_GRID2024  1.3299771  0.0778452    17.085  &lt; 2e-16 ***\nORIGIN_GRID2025 -0.2451653  0.0950514    -2.579 0.009900 ** \nORIGIN_GRID2042 -0.5296956  0.0875606    -6.049 1.45e-09 ***\nORIGIN_GRID2043  1.1918795  0.0791186    15.064  &lt; 2e-16 ***\nORIGIN_GRID2044  0.7209023  0.0781914     9.220  &lt; 2e-16 ***\nORIGIN_GRID2045  0.7316597  0.0837214     8.739  &lt; 2e-16 ***\nORIGIN_GRID2061  1.0830155  0.0851420    12.720  &lt; 2e-16 ***\nORIGIN_GRID2062  1.4811469  0.0783524    18.904  &lt; 2e-16 ***\nORIGIN_GRID2063  0.2531796  0.0792989     3.193 0.001409 ** \nORIGIN_GRID2064 -1.4397913  0.1276841   -11.276  &lt; 2e-16 ***\nORIGIN_GRID2079  2.3330617  0.0773179    30.175  &lt; 2e-16 ***\nORIGIN_GRID2082 -0.9643974  0.1022395    -9.433  &lt; 2e-16 ***\nORIGIN_GRID2083  0.5371988  0.0789644     6.803 1.02e-11 ***\nORIGIN_GRID2098  0.4504041  0.0789068     5.708 1.14e-08 ***\nORIGIN_GRID2099  1.9180148  0.0774561    24.763  &lt; 2e-16 ***\nORIGIN_GRID21   -0.9918038  0.1490197    -6.656 2.82e-11 ***\nORIGIN_GRID2102  1.6836458  0.0776084    21.694  &lt; 2e-16 ***\nORIGIN_GRID2115  2.5922736  0.0783562    33.083  &lt; 2e-16 ***\nORIGIN_GRID2119  2.2190451  0.0773270    28.697  &lt; 2e-16 ***\nORIGIN_GRID2121  1.2616661  0.0780047    16.174  &lt; 2e-16 ***\nORIGIN_GRID2137  1.7719614  0.0776400    22.823  &lt; 2e-16 ***\nORIGIN_GRID2140 -1.6061079  0.1058354   -15.176  &lt; 2e-16 ***\nORIGIN_GRID215  -1.8804486  0.1779195   -10.569  &lt; 2e-16 ***\nORIGIN_GRID2153  2.1792603  0.0787627    27.669  &lt; 2e-16 ***\nORIGIN_GRID2158  1.0101608  0.0781900    12.919  &lt; 2e-16 ***\nORIGIN_GRID216  -0.6313669  0.1047599    -6.027 1.67e-09 ***\nORIGIN_GRID217  -0.2142520  0.1564569    -1.369 0.170874    \nORIGIN_GRID2177  0.6179254  0.0781691     7.905 2.68e-15 ***\nORIGIN_GRID2178 -0.1010589  0.0833711    -1.212 0.225452    \nORIGIN_GRID2196  0.3021664  0.0812029     3.721 0.000198 ***\nORIGIN_GRID2197  1.6239884  0.0776108    20.925  &lt; 2e-16 ***\nORIGIN_GRID2267  1.5646214  0.0860325    18.186  &lt; 2e-16 ***\nORIGIN_GRID233  -0.7709243  0.0963560    -8.001 1.24e-15 ***\nORIGIN_GRID234   0.6254582  0.0820177     7.626 2.42e-14 ***\nORIGIN_GRID235   0.2991571  0.0863547     3.464 0.000532 ***\nORIGIN_GRID252  -0.8763642  0.0849086   -10.321  &lt; 2e-16 ***\nORIGIN_GRID253  -1.0401783  0.0883215   -11.777  &lt; 2e-16 ***\nORIGIN_GRID254  -0.8630987  0.0904051    -9.547  &lt; 2e-16 ***\nORIGIN_GRID270  -4.0902873  0.3421676   -11.954  &lt; 2e-16 ***\nORIGIN_GRID271  -0.9098841  0.0930631    -9.777  &lt; 2e-16 ***\nORIGIN_GRID272   2.4901868  0.0772746    32.225  &lt; 2e-16 ***\nORIGIN_GRID290  -1.0804269  0.0912391   -11.842  &lt; 2e-16 ***\nORIGIN_GRID291  -1.1194420  0.1076499   -10.399  &lt; 2e-16 ***\nORIGIN_GRID292   0.6771761  0.0866638     7.814 5.55e-15 ***\nORIGIN_GRID308  -0.9649542  0.0818424   -11.790  &lt; 2e-16 ***\nORIGIN_GRID309  -1.4761920  0.0890217   -16.582  &lt; 2e-16 ***\nORIGIN_GRID310  -0.2319974  0.0868878    -2.670 0.007583 ** \nORIGIN_GRID329   0.6982196  0.0855534     8.161 3.32e-16 ***\nORIGIN_GRID330  -0.0587040  0.0812460    -0.723 0.469958    \nORIGIN_GRID347  -0.9445034  0.0827841   -11.409  &lt; 2e-16 ***\nORIGIN_GRID348  -1.3261791  0.0909434   -14.582  &lt; 2e-16 ***\nORIGIN_GRID349   1.2236490  0.0896826    13.644  &lt; 2e-16 ***\nORIGIN_GRID366  -0.4307091  0.0827110    -5.207 1.92e-07 ***\nORIGIN_GRID367  -1.5941154  0.0925971   -17.216  &lt; 2e-16 ***\nORIGIN_GRID368   4.0599803  0.0768040    52.862  &lt; 2e-16 ***\nORIGIN_GRID369  -0.7522082  0.0863162    -8.715  &lt; 2e-16 ***\nORIGIN_GRID370  -0.1071407  0.0788986    -1.358 0.174479    \nORIGIN_GRID385  -1.9034061  0.1230133   -15.473  &lt; 2e-16 ***\nORIGIN_GRID386  -0.1899992  0.0826151    -2.300 0.021459 *  \nORIGIN_GRID387  -0.5392561  0.0876396    -6.153 7.60e-10 ***\nORIGIN_GRID388  -0.4493293  0.1066239    -4.214 2.51e-05 ***\nORIGIN_GRID389   1.1397485  0.0788736    14.450  &lt; 2e-16 ***\nORIGIN_GRID40    0.4024035  0.1614117     2.493 0.012666 *  \nORIGIN_GRID404  -0.2348377  0.0966156    -2.431 0.015072 *  \nORIGIN_GRID405  -0.7845037  0.0867321    -9.045  &lt; 2e-16 ***\nORIGIN_GRID406   0.3698606  0.0809219     4.571 4.86e-06 ***\nORIGIN_GRID407   3.4391059  0.0770758    44.620  &lt; 2e-16 ***\nORIGIN_GRID408   0.7974272  0.0787845    10.122  &lt; 2e-16 ***\nORIGIN_GRID42   -1.0733302  0.1202175    -8.928  &lt; 2e-16 ***\nORIGIN_GRID424   0.0007523  0.0827226     0.009 0.992744    \nORIGIN_GRID425   1.3618199  0.0782724    17.398  &lt; 2e-16 ***\nORIGIN_GRID426   3.6035181  0.0769585    46.824  &lt; 2e-16 ***\nORIGIN_GRID427   1.5041915  0.0783359    19.202  &lt; 2e-16 ***\nORIGIN_GRID442  -0.8140634  0.0947495    -8.592  &lt; 2e-16 ***\nORIGIN_GRID443  -2.2826023  0.1777088   -12.845  &lt; 2e-16 ***\nORIGIN_GRID444   1.6690454  0.0778242    21.446  &lt; 2e-16 ***\nORIGIN_GRID445   2.8887797  0.0771572    37.440  &lt; 2e-16 ***\nORIGIN_GRID447  -2.6553791  0.1835564   -14.466  &lt; 2e-16 ***\nORIGIN_GRID448  -0.4108157  0.0991632    -4.143 3.43e-05 ***\nORIGIN_GRID461  -1.0682632  0.0852424   -12.532  &lt; 2e-16 ***\nORIGIN_GRID462  -0.1083042  0.0809378    -1.338 0.180859    \nORIGIN_GRID463   1.4520888  0.0775769    18.718  &lt; 2e-16 ***\nORIGIN_GRID464   4.1451571  0.0768740    53.921  &lt; 2e-16 ***\nORIGIN_GRID465   0.1916486  0.0803087     2.386 0.017014 *  \nORIGIN_GRID466  -0.1545653  0.0861294    -1.795 0.072722 .  \nORIGIN_GRID467  -1.7444104  0.1695050   -10.291  &lt; 2e-16 ***\nORIGIN_GRID480  -1.7105467  0.1161889   -14.722  &lt; 2e-16 ***\nORIGIN_GRID481  -0.6777416  0.0793093    -8.546  &lt; 2e-16 ***\nORIGIN_GRID482  -0.2550613  0.0808517    -3.155 0.001607 ** \nORIGIN_GRID483   3.6986402  0.0768698    48.116  &lt; 2e-16 ***\nORIGIN_GRID484   4.3303367  0.0768975    56.313  &lt; 2e-16 ***\nORIGIN_GRID486   1.1227127  0.0809061    13.877  &lt; 2e-16 ***\nORIGIN_GRID487  -1.2269166  0.1423801    -8.617  &lt; 2e-16 ***\nORIGIN_GRID488  -1.6497440  0.2222365    -7.423 1.14e-13 ***\nORIGIN_GRID489  -1.4462442  1.0035373    -1.441 0.149543    \nORIGIN_GRID499  -1.3970972  0.0934909   -14.944  &lt; 2e-16 ***\nORIGIN_GRID500  -0.9905942  0.0853591   -11.605  &lt; 2e-16 ***\nORIGIN_GRID501   0.4668594  0.0787770     5.926 3.10e-09 ***\nORIGIN_GRID502   4.0563010  0.0768806    52.761  &lt; 2e-16 ***\nORIGIN_GRID503   2.7982462  0.0771567    36.267  &lt; 2e-16 ***\nORIGIN_GRID507  -0.3287968  0.1243142    -2.645 0.008172 ** \nORIGIN_GRID508   1.2361837  0.0890518    13.882  &lt; 2e-16 ***\nORIGIN_GRID509  -1.8654032  1.0042536    -1.858 0.063240 .  \nORIGIN_GRID518  -3.4250786  0.4155700    -8.242  &lt; 2e-16 ***\nORIGIN_GRID519  -1.8307938  0.0875454   -20.913  &lt; 2e-16 ***\nORIGIN_GRID520   0.5344056  0.0851847     6.273 3.53e-10 ***\nORIGIN_GRID521   4.1407978  0.0768429    53.887  &lt; 2e-16 ***\nORIGIN_GRID522   3.4013683  0.0769645    44.194  &lt; 2e-16 ***\nORIGIN_GRID524  -1.3063570  0.1242357   -10.515  &lt; 2e-16 ***\nORIGIN_GRID528  -0.7600641  0.1298204    -5.855 4.78e-09 ***\nORIGIN_GRID529  -1.9483644  0.4154291    -4.690 2.73e-06 ***\nORIGIN_GRID530   1.3585817  0.0925049    14.687  &lt; 2e-16 ***\nORIGIN_GRID537  -0.2020425  0.0907118    -2.227 0.025927 *  \nORIGIN_GRID538  -0.4714363  0.0810543    -5.816 6.02e-09 ***\nORIGIN_GRID539  -0.0419619  0.0790929    -0.531 0.595738    \nORIGIN_GRID540   3.1567365  0.0769282    41.035  &lt; 2e-16 ***\nORIGIN_GRID541   0.4125088  0.0958931     4.302 1.69e-05 ***\nORIGIN_GRID547  -0.5022582  0.1340771    -3.746 0.000180 ***\nORIGIN_GRID548  -0.9217580  0.1980948    -4.653 3.27e-06 ***\nORIGIN_GRID557  -1.3846993  0.0895670   -15.460  &lt; 2e-16 ***\nORIGIN_GRID558  -0.3940320  0.0830219    -4.746 2.07e-06 ***\nORIGIN_GRID559   0.6040350  0.0789222     7.654 1.96e-14 ***\nORIGIN_GRID560   3.6948052  0.0769053    48.044  &lt; 2e-16 ***\nORIGIN_GRID562   0.8364131  0.0824375    10.146  &lt; 2e-16 ***\nORIGIN_GRID577  -0.6845777  0.0873678    -7.836 4.67e-15 ***\nORIGIN_GRID578   3.2557475  0.0769256    42.323  &lt; 2e-16 ***\nORIGIN_GRID595   0.8286601  0.0784934    10.557  &lt; 2e-16 ***\nORIGIN_GRID596   2.3577656  0.0770770    30.590  &lt; 2e-16 ***\nORIGIN_GRID597   2.8311047  0.0770044    36.765  &lt; 2e-16 ***\nORIGIN_GRID598   3.8123748  0.0768870    49.584  &lt; 2e-16 ***\nORIGIN_GRID60   -0.1495295  0.1514356    -0.987 0.323440    \nORIGIN_GRID600   3.5050310  0.0771863    45.410  &lt; 2e-16 ***\nORIGIN_GRID61    0.1461005  0.0814410     1.794 0.072822 .  \nORIGIN_GRID613   1.1767169  0.0800713    14.696  &lt; 2e-16 ***\nORIGIN_GRID614  -1.0773028  0.0897950   -11.997  &lt; 2e-16 ***\nORIGIN_GRID615   3.6051522  0.0769035    46.879  &lt; 2e-16 ***\nORIGIN_GRID616   3.2604860  0.0769052    42.396  &lt; 2e-16 ***\nORIGIN_GRID617   2.9494762  0.0772722    38.170  &lt; 2e-16 ***\nORIGIN_GRID62   -1.3881806  0.1347529   -10.302  &lt; 2e-16 ***\nORIGIN_GRID633   0.6677554  0.0800414     8.343  &lt; 2e-16 ***\nORIGIN_GRID634   2.5466250  0.0770535    33.050  &lt; 2e-16 ***\nORIGIN_GRID635   2.9064540  0.0770556    37.719  &lt; 2e-16 ***\nORIGIN_GRID636   3.6614546  0.0768967    47.615  &lt; 2e-16 ***\nORIGIN_GRID638   0.3227841  0.0832118     3.879 0.000105 ***\nORIGIN_GRID654   0.8033597  0.0788414    10.190  &lt; 2e-16 ***\nORIGIN_GRID657   0.2820509  0.0867889     3.250 0.001155 ** \nORIGIN_GRID671   0.7036077  0.0785935     8.952  &lt; 2e-16 ***\nORIGIN_GRID673   1.3663965  0.0778021    17.562  &lt; 2e-16 ***\nORIGIN_GRID674   3.1640044  0.0769408    41.123  &lt; 2e-16 ***\nORIGIN_GRID689  -0.1857255  0.0818068    -2.270 0.023190 *  \nORIGIN_GRID690   2.6976378  0.0771644    34.960  &lt; 2e-16 ***\nORIGIN_GRID691  -0.0380951  0.0813793    -0.468 0.639700    \nORIGIN_GRID692   3.6399837  0.0768881    47.341  &lt; 2e-16 ***\nORIGIN_GRID693   2.9513113  0.0772604    38.200  &lt; 2e-16 ***\nORIGIN_GRID695   4.5635527  0.0769196    59.329  &lt; 2e-16 ***\nORIGIN_GRID700  -0.6662283  0.1069908    -6.227 4.76e-10 ***\nORIGIN_GRID710  -0.1509477  0.0812672    -1.857 0.063251 .  \nORIGIN_GRID711   2.8812235  0.0769374    37.449  &lt; 2e-16 ***\nORIGIN_GRID712   2.5091788  0.0770495    32.566  &lt; 2e-16 ***\nORIGIN_GRID713   2.9771367  0.0771627    38.583  &lt; 2e-16 ***\nORIGIN_GRID714   4.0553695  0.0770108    52.660  &lt; 2e-16 ***\nORIGIN_GRID715   2.8834516  0.0775287    37.192  &lt; 2e-16 ***\nORIGIN_GRID727  -0.8016387  0.0933901    -8.584  &lt; 2e-16 ***\nORIGIN_GRID728   3.4737475  0.0769350    45.152  &lt; 2e-16 ***\nORIGIN_GRID729   3.1634009  0.0768984    41.137  &lt; 2e-16 ***\nORIGIN_GRID730   3.2030205  0.0769380    41.631  &lt; 2e-16 ***\nORIGIN_GRID731   4.2966454  0.0769516    55.836  &lt; 2e-16 ***\nORIGIN_GRID732   2.3481901  0.0775821    30.267  &lt; 2e-16 ***\nORIGIN_GRID733   4.1242791  0.0768933    53.636  &lt; 2e-16 ***\nORIGIN_GRID734   3.6594390  0.0770587    47.489  &lt; 2e-16 ***\nORIGIN_GRID738   1.2338541  0.0814099    15.156  &lt; 2e-16 ***\nORIGIN_GRID746  -0.3753742  0.0857974    -4.375 1.21e-05 ***\nORIGIN_GRID748   1.1928040  0.0774555    15.400  &lt; 2e-16 ***\nORIGIN_GRID749   3.3539761  0.0769162    43.606  &lt; 2e-16 ***\nORIGIN_GRID750   3.5145216  0.0769084    45.697  &lt; 2e-16 ***\nORIGIN_GRID751   3.4951722  0.0769539    45.419  &lt; 2e-16 ***\nORIGIN_GRID752   4.0349144  0.0769969    52.404  &lt; 2e-16 ***\nORIGIN_GRID753   3.9903578  0.0768807    51.903  &lt; 2e-16 ***\nORIGIN_GRID754   3.2310616  0.0770435    41.938  &lt; 2e-16 ***\nORIGIN_GRID757   0.7849076  0.0822997     9.537  &lt; 2e-16 ***\nORIGIN_GRID764  -1.0577223  0.1068064    -9.903  &lt; 2e-16 ***\nORIGIN_GRID766   2.6304229  0.0769940    34.164  &lt; 2e-16 ***\nORIGIN_GRID767   1.7500205  0.0773195    22.634  &lt; 2e-16 ***\nORIGIN_GRID768   3.0302045  0.0769654    39.371  &lt; 2e-16 ***\nORIGIN_GRID769   2.2548182  0.0771935    29.210  &lt; 2e-16 ***\nORIGIN_GRID770   2.9299184  0.0770030    38.049  &lt; 2e-16 ***\nORIGIN_GRID771   3.5720159  0.0769296    46.432  &lt; 2e-16 ***\nORIGIN_GRID772   3.4435357  0.0770849    44.672  &lt; 2e-16 ***\nORIGIN_GRID773   5.1465598  0.0769511    66.881  &lt; 2e-16 ***\nORIGIN_GRID774   1.4175773  0.0809075    17.521  &lt; 2e-16 ***\nORIGIN_GRID775  -0.1407793  0.0882248    -1.596 0.110558    \nORIGIN_GRID776   1.6468264  0.0790996    20.820  &lt; 2e-16 ***\nORIGIN_GRID78   -0.7063597  0.1121828    -6.297 3.04e-10 ***\nORIGIN_GRID784   0.1734178  0.0814495     2.129 0.033242 *  \nORIGIN_GRID785   1.1968495  0.0776393    15.416  &lt; 2e-16 ***\nORIGIN_GRID786   0.5143388  0.0788101     6.526 6.74e-11 ***\nORIGIN_GRID787   2.6899802  0.0771263    34.878  &lt; 2e-16 ***\nORIGIN_GRID788   3.8209948  0.0768751    49.704  &lt; 2e-16 ***\nORIGIN_GRID789   3.2407587  0.0770419    42.065  &lt; 2e-16 ***\nORIGIN_GRID79    1.1308055  0.1066432    10.604  &lt; 2e-16 ***\nORIGIN_GRID790   1.5508083  0.0776040    19.984  &lt; 2e-16 ***\nORIGIN_GRID791   2.2948383  0.0774513    29.629  &lt; 2e-16 ***\nORIGIN_GRID792   2.2687197  0.0772230    29.379  &lt; 2e-16 ***\nORIGIN_GRID793  -0.8044168  0.1006226    -7.994 1.30e-15 ***\nORIGIN_GRID794   0.3124781  0.0826394     3.781 0.000156 ***\nORIGIN_GRID795  -0.2769912  0.0862497    -3.212 0.001320 ** \nORIGIN_GRID80    1.0895121  0.0793761    13.726  &lt; 2e-16 ***\nORIGIN_GRID803   1.1436758  0.0779517    14.672  &lt; 2e-16 ***\nORIGIN_GRID804   2.5263272  0.0771216    32.758  &lt; 2e-16 ***\nORIGIN_GRID805  -0.3570444  0.0828758    -4.308 1.65e-05 ***\nORIGIN_GRID806   3.4636875  0.0769086    45.036  &lt; 2e-16 ***\nORIGIN_GRID807   2.6808997  0.0776746    34.515  &lt; 2e-16 ***\nORIGIN_GRID809   3.4832844  0.0769182    45.286  &lt; 2e-16 ***\nORIGIN_GRID81   -0.2887320  0.0913884    -3.159 0.001581 ** \nORIGIN_GRID810   1.7010428  0.0775144    21.945  &lt; 2e-16 ***\nORIGIN_GRID811   1.1265360  0.0782746    14.392  &lt; 2e-16 ***\nORIGIN_GRID812   0.2003738  0.0820883     2.441 0.014649 *  \nORIGIN_GRID813  -1.1395533  0.0976472   -11.670  &lt; 2e-16 ***\nORIGIN_GRID814   0.8519321  0.0829092    10.275  &lt; 2e-16 ***\nORIGIN_GRID82   -0.4852578  0.1451334    -3.344 0.000827 ***\nORIGIN_GRID822   1.9691620  0.0778193    25.304  &lt; 2e-16 ***\nORIGIN_GRID823   2.4832719  0.0770183    32.243  &lt; 2e-16 ***\nORIGIN_GRID824   0.6269484  0.0785174     7.985 1.41e-15 ***\nORIGIN_GRID825   1.5937897  0.0772950    20.620  &lt; 2e-16 ***\nORIGIN_GRID826   3.1986486  0.0769343    41.576  &lt; 2e-16 ***\nORIGIN_GRID829   3.4504636  0.0769366    44.848  &lt; 2e-16 ***\nORIGIN_GRID831   2.4297888  0.0771637    31.489  &lt; 2e-16 ***\nORIGIN_GRID832  -0.3329283  0.0857668    -3.882 0.000104 ***\nORIGIN_GRID833   2.6040136  0.0773796    33.652  &lt; 2e-16 ***\nORIGIN_GRID840   1.6489833  0.0779233    21.162  &lt; 2e-16 ***\nORIGIN_GRID841   2.9499635  0.0769488    38.337  &lt; 2e-16 ***\nORIGIN_GRID842   3.5594094  0.0768786    46.299  &lt; 2e-16 ***\nORIGIN_GRID843   0.7937236  0.0785917    10.099  &lt; 2e-16 ***\nORIGIN_GRID844   1.1565003  0.0787649    14.683  &lt; 2e-16 ***\nORIGIN_GRID845   3.0475222  0.0770218    39.567  &lt; 2e-16 ***\nORIGIN_GRID846   0.6812148  0.0784491     8.684  &lt; 2e-16 ***\nORIGIN_GRID847   3.7363888  0.0768790    48.601  &lt; 2e-16 ***\nORIGIN_GRID850  -2.9519895  0.2615983   -11.284  &lt; 2e-16 ***\nORIGIN_GRID851   3.6395226  0.0769305    47.309  &lt; 2e-16 ***\nORIGIN_GRID852  -0.9831290  0.1044574    -9.412  &lt; 2e-16 ***\nORIGIN_GRID859   1.1426404  0.0778898    14.670  &lt; 2e-16 ***\nORIGIN_GRID860   3.0793652  0.0769779    40.003  &lt; 2e-16 ***\nORIGIN_GRID861   3.8063185  0.0768684    49.517  &lt; 2e-16 ***\nORIGIN_GRID862   1.2030078  0.0793745    15.156  &lt; 2e-16 ***\nORIGIN_GRID863   2.1104378  0.0773827    27.273  &lt; 2e-16 ***\nORIGIN_GRID864   0.7698171  0.0785480     9.801  &lt; 2e-16 ***\nORIGIN_GRID865   2.6412708  0.0770079    34.299  &lt; 2e-16 ***\nORIGIN_GRID866   1.3695268  0.0775744    17.654  &lt; 2e-16 ***\nORIGIN_GRID867   3.8467385  0.0770328    49.936  &lt; 2e-16 ***\nORIGIN_GRID869   0.1919504  0.0904095     2.123 0.033744 *  \nORIGIN_GRID871   0.1145365  0.0825090     1.388 0.165085    \nORIGIN_GRID872  -0.5378703  0.1512023    -3.557 0.000375 ***\nORIGIN_GRID878   1.7911925  0.0771911    23.205  &lt; 2e-16 ***\nORIGIN_GRID879   3.0389015  0.0769105    39.512  &lt; 2e-16 ***\nORIGIN_GRID880   3.0236925  0.0769550    39.292  &lt; 2e-16 ***\nORIGIN_GRID882   2.4500209  0.0771463    31.758  &lt; 2e-16 ***\nORIGIN_GRID883   2.0178566  0.0773073    26.102  &lt; 2e-16 ***\nORIGIN_GRID884   0.6538771  0.0785042     8.329  &lt; 2e-16 ***\nORIGIN_GRID885   3.8036150  0.0769069    49.457  &lt; 2e-16 ***\nORIGIN_GRID886   3.7132806  0.0771346    48.140  &lt; 2e-16 ***\nORIGIN_GRID890   0.9438714  0.0782221    12.067  &lt; 2e-16 ***\nORIGIN_GRID891   5.3511290  0.0769099    69.577  &lt; 2e-16 ***\nORIGIN_GRID897   1.6842212  0.0773008    21.788  &lt; 2e-16 ***\nORIGIN_GRID898   2.0640760  0.0771086    26.768  &lt; 2e-16 ***\nORIGIN_GRID899   1.9251015  0.0771602    24.949  &lt; 2e-16 ***\nORIGIN_GRID900   1.3559299  0.0775410    17.487  &lt; 2e-16 ***\nORIGIN_GRID901   2.8139870  0.0770045    36.543  &lt; 2e-16 ***\nORIGIN_GRID902   2.2646332  0.0771807    29.342  &lt; 2e-16 ***\nORIGIN_GRID903   0.8647497  0.0817773    10.574  &lt; 2e-16 ***\nORIGIN_GRID904   3.7517863  0.0769154    48.778  &lt; 2e-16 ***\nORIGIN_GRID905   4.1358776  0.0770190    53.699  &lt; 2e-16 ***\nORIGIN_GRID907   0.7740779  0.0807112     9.591  &lt; 2e-16 ***\nORIGIN_GRID909   3.1531054  0.0769326    40.985  &lt; 2e-16 ***\nORIGIN_GRID910   4.3094900  0.0768894    56.048  &lt; 2e-16 ***\nORIGIN_GRID915   0.1307727  0.0827150     1.581 0.113877    \nORIGIN_GRID916  -0.4056479  0.0820047    -4.947 7.55e-07 ***\nORIGIN_GRID917   0.5631260  0.0784870     7.175 7.24e-13 ***\nORIGIN_GRID918   1.5156157  0.0775420    19.546  &lt; 2e-16 ***\nORIGIN_GRID919   0.7937635  0.0783022    10.137  &lt; 2e-16 ***\nORIGIN_GRID920   1.9753262  0.0771295    25.611  &lt; 2e-16 ***\nORIGIN_GRID922   2.7571953  0.0774261    35.611  &lt; 2e-16 ***\nORIGIN_GRID923   4.1919846  0.0769673    54.465  &lt; 2e-16 ***\nORIGIN_GRID927   2.6818782  0.0773767    34.660  &lt; 2e-16 ***\nORIGIN_GRID928   3.6585617  0.0769567    47.541  &lt; 2e-16 ***\nORIGIN_GRID929  -0.9023068  0.0929918    -9.703  &lt; 2e-16 ***\nORIGIN_GRID935   1.2177073  0.0775945    15.693  &lt; 2e-16 ***\nORIGIN_GRID936   1.9959129  0.0771444    25.872  &lt; 2e-16 ***\nORIGIN_GRID937   2.6562482  0.0770078    34.493  &lt; 2e-16 ***\nORIGIN_GRID938   0.8116854  0.0781922    10.381  &lt; 2e-16 ***\nORIGIN_GRID939   1.8786009  0.0771340    24.355  &lt; 2e-16 ***\nORIGIN_GRID945   0.5695432  0.0806293     7.064 1.62e-12 ***\nORIGIN_GRID947   3.1092682  0.0769468    40.408  &lt; 2e-16 ***\nORIGIN_GRID948   3.0905859  0.0769875    40.144  &lt; 2e-16 ***\nORIGIN_GRID953   2.5389254  0.0770177    32.965  &lt; 2e-16 ***\nORIGIN_GRID954   1.7794576  0.0772006    23.050  &lt; 2e-16 ***\nORIGIN_GRID955   2.8508435  0.0769870    37.030  &lt; 2e-16 ***\nORIGIN_GRID956   1.8082471  0.0773501    23.377  &lt; 2e-16 ***\nORIGIN_GRID964  -1.5911573  0.2479485    -6.417 1.39e-10 ***\nORIGIN_GRID966   3.1188034  0.0769833    40.513  &lt; 2e-16 ***\nORIGIN_GRID967   2.8489792  0.0771487    36.928  &lt; 2e-16 ***\nORIGIN_GRID972   2.1524144  0.0771689    27.892  &lt; 2e-16 ***\nORIGIN_GRID973   1.9551517  0.0772182    25.320  &lt; 2e-16 ***\nORIGIN_GRID974   1.6040501  0.0772857    20.755  &lt; 2e-16 ***\nORIGIN_GRID975   1.8140761  0.0774339    23.427  &lt; 2e-16 ***\nORIGIN_GRID977   2.5973167  0.0770004    33.731  &lt; 2e-16 ***\nORIGIN_GRID983  -2.5632004  0.1880173   -13.633  &lt; 2e-16 ***\nORIGIN_GRID985   3.2047320  0.0770122    41.613  &lt; 2e-16 ***\nORIGIN_GRID986   1.3641567  0.0777206    17.552  &lt; 2e-16 ***\nORIGIN_GRID99   -0.2792562  0.1178422    -2.370 0.017800 *  \nORIGIN_GRID990  -0.0243794  0.0883349    -0.276 0.782557    \nORIGIN_GRID991   0.2416771  0.0856437     2.822 0.004774 ** \nORIGIN_GRID992   2.0748769  0.0782900    26.502  &lt; 2e-16 ***\nORIGIN_GRID993   3.2520967  0.0769059    42.287  &lt; 2e-16 ***\nORIGIN_GRID994   1.0319295  0.0788203    13.092  &lt; 2e-16 ***\nORIGIN_GRID995   2.1561004  0.0771064    27.963  &lt; 2e-16 ***\nDESTIN_GRID1001  4.0966463  0.1010274    40.550  &lt; 2e-16 ***\nDESTIN_GRID1002 -1.1204331  0.1364305    -8.212  &lt; 2e-16 ***\nDESTIN_GRID1003  3.0471829  0.1009299    30.191  &lt; 2e-16 ***\nDESTIN_GRID1004  4.4767367  0.1006831    44.464  &lt; 2e-16 ***\nDESTIN_GRID1005  1.1690099  0.1027680    11.375  &lt; 2e-16 ***\nDESTIN_GRID101   3.1967138  0.1015670    31.474  &lt; 2e-16 ***\nDESTIN_GRID1010  2.1763448  0.1010043    21.547  &lt; 2e-16 ***\nDESTIN_GRID1011  2.7704530  0.1009044    27.456  &lt; 2e-16 ***\nDESTIN_GRID1012  1.2765071  0.1020719    12.506  &lt; 2e-16 ***\nDESTIN_GRID1013  1.7540642  0.1011541    17.341  &lt; 2e-16 ***\nDESTIN_GRID1014  1.2347835  0.1019941    12.106  &lt; 2e-16 ***\nDESTIN_GRID102   0.9427638  0.1056861     8.920  &lt; 2e-16 ***\nDESTIN_GRID1023  2.0123611  0.1009360    19.937  &lt; 2e-16 ***\nDESTIN_GRID1024  2.7243955  0.1007957    27.029  &lt; 2e-16 ***\nDESTIN_GRID1025  4.0576057  0.1008036    40.253  &lt; 2e-16 ***\nDESTIN_GRID1028  3.4973952  0.1007646    34.709  &lt; 2e-16 ***\nDESTIN_GRID1030  1.8319890  0.1020404    17.954  &lt; 2e-16 ***\nDESTIN_GRID1031  2.1776965  0.1008778    21.587  &lt; 2e-16 ***\nDESTIN_GRID1033  1.8086763  0.1009524    17.916  &lt; 2e-16 ***\nDESTIN_GRID1040  1.0603879  0.1046676    10.131  &lt; 2e-16 ***\nDESTIN_GRID1041  1.7423672  0.1015576    17.156  &lt; 2e-16 ***\nDESTIN_GRID1042  1.9705841  0.1008676    19.536  &lt; 2e-16 ***\nDESTIN_GRID1043  2.6388353  0.1008666    26.162  &lt; 2e-16 ***\nDESTIN_GRID1048  1.6824767  0.1012210    16.622  &lt; 2e-16 ***\nDESTIN_GRID1049  1.6726422  0.1010363    16.555  &lt; 2e-16 ***\nDESTIN_GRID1050  3.2212721  0.1007319    31.979  &lt; 2e-16 ***\nDESTIN_GRID1061  2.4380141  0.1008311    24.179  &lt; 2e-16 ***\nDESTIN_GRID1062  4.2130048  0.1007026    41.836  &lt; 2e-16 ***\nDESTIN_GRID1063  3.5302828  0.1007882    35.027  &lt; 2e-16 ***\nDESTIN_GRID1064  1.2174408  0.1084748    11.223  &lt; 2e-16 ***\nDESTIN_GRID1066  3.7400803  0.1007173    37.134  &lt; 2e-16 ***\nDESTIN_GRID1067  2.7966399  0.1007852    27.749  &lt; 2e-16 ***\nDESTIN_GRID1068  2.9622890  0.1007526    29.402  &lt; 2e-16 ***\nDESTIN_GRID1069  1.7053611  0.1010166    16.882  &lt; 2e-16 ***\nDESTIN_GRID1071  3.1481379  0.1007525    31.246  &lt; 2e-16 ***\nDESTIN_GRID1078  1.2679893  0.1037703    12.219  &lt; 2e-16 ***\nDESTIN_GRID1080  3.0484980  0.1007900    30.246  &lt; 2e-16 ***\nDESTIN_GRID1081  2.9358278  0.1008020    29.125  &lt; 2e-16 ***\nDESTIN_GRID1082  3.2864792  0.1008390    32.591  &lt; 2e-16 ***\nDESTIN_GRID1086  2.6604302  0.1009002    26.367  &lt; 2e-16 ***\nDESTIN_GRID1087  2.3542395  0.1009146    23.329  &lt; 2e-16 ***\nDESTIN_GRID1089  2.1559214  0.1009164    21.363  &lt; 2e-16 ***\nDESTIN_GRID1090  1.6998018  0.1010176    16.827  &lt; 2e-16 ***\nDESTIN_GRID1097 -1.8037149  0.2771674    -6.508 7.63e-11 ***\nDESTIN_GRID1100  1.7278267  0.1009808    17.110  &lt; 2e-16 ***\nDESTIN_GRID1101  2.5892963  0.1013052    25.559  &lt; 2e-16 ***\nDESTIN_GRID1102  2.9355901  0.1011360    29.026  &lt; 2e-16 ***\nDESTIN_GRID1104  2.4481954  0.1008219    24.282  &lt; 2e-16 ***\nDESTIN_GRID1105  3.1375026  0.1007438    31.143  &lt; 2e-16 ***\nDESTIN_GRID1106  2.0856142  0.1013928    20.570  &lt; 2e-16 ***\nDESTIN_GRID1107  1.7145195  0.1012203    16.938  &lt; 2e-16 ***\nDESTIN_GRID1108  2.3466790  0.1008942    23.259  &lt; 2e-16 ***\nDESTIN_GRID1115  0.3058536  0.1153075     2.653 0.007990 ** \nDESTIN_GRID1116  1.8473306  0.1032073    17.899  &lt; 2e-16 ***\nDESTIN_GRID1119  2.8770412  0.1008308    28.533  &lt; 2e-16 ***\nDESTIN_GRID1120  2.4949527  0.1009944    24.704  &lt; 2e-16 ***\nDESTIN_GRID1123  1.3902627  0.1012993    13.724  &lt; 2e-16 ***\nDESTIN_GRID1124  2.0930904  0.1010368    20.716  &lt; 2e-16 ***\nDESTIN_GRID1125  3.0430732  0.1007752    30.197  &lt; 2e-16 ***\nDESTIN_GRID1128  1.6999263  0.1009933    16.832  &lt; 2e-16 ***\nDESTIN_GRID1138  1.9490504  0.1010223    19.293  &lt; 2e-16 ***\nDESTIN_GRID1139  2.6470453  0.1008682    26.243  &lt; 2e-16 ***\nDESTIN_GRID1140  3.6763732  0.1007954    36.474  &lt; 2e-16 ***\nDESTIN_GRID1142  1.4310881  0.1015078    14.098  &lt; 2e-16 ***\nDESTIN_GRID1143  3.4281766  0.1007144    34.039  &lt; 2e-16 ***\nDESTIN_GRID1144  2.8322720  0.1009036    28.069  &lt; 2e-16 ***\nDESTIN_GRID1145  2.4049431  0.1009549    23.822  &lt; 2e-16 ***\nDESTIN_GRID1146  2.4089773  0.1008685    23.882  &lt; 2e-16 ***\nDESTIN_GRID1147  0.9206058  0.1020062     9.025  &lt; 2e-16 ***\nDESTIN_GRID1152 -2.0631408  0.1408725   -14.645  &lt; 2e-16 ***\nDESTIN_GRID1153  2.6187203  0.1009001    25.954  &lt; 2e-16 ***\nDESTIN_GRID1157  3.2391498  0.1007449    32.152  &lt; 2e-16 ***\nDESTIN_GRID1158  2.8545543  0.1008422    28.307  &lt; 2e-16 ***\nDESTIN_GRID116   3.7480339  0.1033526    36.265  &lt; 2e-16 ***\nDESTIN_GRID1161  3.5695957  0.1007136    35.443  &lt; 2e-16 ***\nDESTIN_GRID1162  3.6307080  0.1007301    36.044  &lt; 2e-16 ***\nDESTIN_GRID1163  3.1519561  0.1007458    31.286  &lt; 2e-16 ***\nDESTIN_GRID1164  2.1636482  0.1010844    21.404  &lt; 2e-16 ***\nDESTIN_GRID1167 -0.1955068  0.1069911    -1.827 0.067652 .  \nDESTIN_GRID117  -0.4239454  0.1668657    -2.541 0.011065 *  \nDESTIN_GRID1171 -1.3479068  0.1246632   -10.812  &lt; 2e-16 ***\nDESTIN_GRID1172  2.4462883  0.1010165    24.217  &lt; 2e-16 ***\nDESTIN_GRID1173  0.1294260  0.1033989     1.252 0.210674    \nDESTIN_GRID1176  2.4881443  0.1008713    24.667  &lt; 2e-16 ***\nDESTIN_GRID1177  2.3494029  0.1010101    23.259  &lt; 2e-16 ***\nDESTIN_GRID118   2.3667816  0.1031103    22.954  &lt; 2e-16 ***\nDESTIN_GRID1180  2.8589936  0.1008079    28.361  &lt; 2e-16 ***\nDESTIN_GRID1181  2.9822291  0.1007451    29.602  &lt; 2e-16 ***\nDESTIN_GRID1183  1.5807646  0.1021773    15.471  &lt; 2e-16 ***\nDESTIN_GRID1184  2.6086290  0.1008019    25.879  &lt; 2e-16 ***\nDESTIN_GRID1186 -2.0247453  0.1927749   -10.503  &lt; 2e-16 ***\nDESTIN_GRID119   2.1946868  0.1029577    21.316  &lt; 2e-16 ***\nDESTIN_GRID1192  0.8890011  0.1018160     8.731  &lt; 2e-16 ***\nDESTIN_GRID1193  0.9202451  0.1015502     9.062  &lt; 2e-16 ***\nDESTIN_GRID1194  0.9542919  0.1019864     9.357  &lt; 2e-16 ***\nDESTIN_GRID1195  3.6360678  0.1007206    36.101  &lt; 2e-16 ***\nDESTIN_GRID1196  1.4904837  0.1014913    14.686  &lt; 2e-16 ***\nDESTIN_GRID1198  2.7299405  0.1019631    26.774  &lt; 2e-16 ***\nDESTIN_GRID1199  0.9373335  0.1017001     9.217  &lt; 2e-16 ***\nDESTIN_GRID120   2.5875404  0.1016939    25.444  &lt; 2e-16 ***\nDESTIN_GRID1200  2.5408896  0.1008109    25.205  &lt; 2e-16 ***\nDESTIN_GRID1201  2.7970920  0.1007842    27.753  &lt; 2e-16 ***\nDESTIN_GRID1202  2.4845272  0.1008595    24.634  &lt; 2e-16 ***\nDESTIN_GRID1203  2.3150168  0.1010438    22.911  &lt; 2e-16 ***\nDESTIN_GRID1204  3.3101939  0.1007904    32.842  &lt; 2e-16 ***\nDESTIN_GRID1205 -2.9917666  0.2855930   -10.476  &lt; 2e-16 ***\nDESTIN_GRID1207  0.9775983  0.1018406     9.599  &lt; 2e-16 ***\nDESTIN_GRID1208  1.5686809  0.1014534    15.462  &lt; 2e-16 ***\nDESTIN_GRID1209  3.1743697  0.1008120    31.488  &lt; 2e-16 ***\nDESTIN_GRID121   2.6750911  0.1013417    26.397  &lt; 2e-16 ***\nDESTIN_GRID1210 -0.3388188  0.1101951    -3.075 0.002107 ** \nDESTIN_GRID1211 -0.4588867  0.1056714    -4.343 1.41e-05 ***\nDESTIN_GRID1212 -0.2510719  0.1045476    -2.402 0.016328 *  \nDESTIN_GRID1213  3.1592079  0.1007351    31.362  &lt; 2e-16 ***\nDESTIN_GRID1214  2.0604827  0.1010603    20.389  &lt; 2e-16 ***\nDESTIN_GRID1215 -1.4944917  0.1375193   -10.868  &lt; 2e-16 ***\nDESTIN_GRID1218  2.3235174  0.1009461    23.017  &lt; 2e-16 ***\nDESTIN_GRID1219  3.7949087  0.1007174    37.679  &lt; 2e-16 ***\nDESTIN_GRID122   2.7682418  0.1012381    27.344  &lt; 2e-16 ***\nDESTIN_GRID1220  2.3311446  0.1008678    23.111  &lt; 2e-16 ***\nDESTIN_GRID1221  3.1404710  0.1007857    31.160  &lt; 2e-16 ***\nDESTIN_GRID1222  1.5277874  0.1015024    15.052  &lt; 2e-16 ***\nDESTIN_GRID1225  2.6063449  0.1008374    25.847  &lt; 2e-16 ***\nDESTIN_GRID1226  1.7191099  0.1011470    16.996  &lt; 2e-16 ***\nDESTIN_GRID1227  1.4642729  0.1012302    14.465  &lt; 2e-16 ***\nDESTIN_GRID1229  0.6886264  0.1023888     6.726 1.75e-11 ***\nDESTIN_GRID1230  3.2107921  0.1007300    31.875  &lt; 2e-16 ***\nDESTIN_GRID1231  2.2489973  0.1008446    22.302  &lt; 2e-16 ***\nDESTIN_GRID1232  1.9350096  0.1009046    19.177  &lt; 2e-16 ***\nDESTIN_GRID1233  1.7563733  0.1010041    17.389  &lt; 2e-16 ***\nDESTIN_GRID1234  0.7078793  0.1043255     6.785 1.16e-11 ***\nDESTIN_GRID1238  1.5630378  0.1011111    15.459  &lt; 2e-16 ***\nDESTIN_GRID1239  1.9594271  0.1009955    19.401  &lt; 2e-16 ***\nDESTIN_GRID1240  3.2728240  0.1007218    32.494  &lt; 2e-16 ***\nDESTIN_GRID1241  2.4385431  0.1009125    24.165  &lt; 2e-16 ***\nDESTIN_GRID1242  2.3889820  0.1008881    23.680  &lt; 2e-16 ***\nDESTIN_GRID1243 -0.4041799  0.1058249    -3.819 0.000134 ***\nDESTIN_GRID1244  0.9859257  0.1016036     9.704  &lt; 2e-16 ***\nDESTIN_GRID1245  2.8642028  0.1009178    28.382  &lt; 2e-16 ***\nDESTIN_GRID1246  1.4900092  0.1019150    14.620  &lt; 2e-16 ***\nDESTIN_GRID1249 -1.5059439  0.1206709   -12.480  &lt; 2e-16 ***\nDESTIN_GRID1250  3.7657962  0.1006963    37.398  &lt; 2e-16 ***\nDESTIN_GRID1251  4.2209171  0.1006930    41.919  &lt; 2e-16 ***\nDESTIN_GRID1252  3.4810100  0.1007576    34.548  &lt; 2e-16 ***\nDESTIN_GRID1253  0.8996221  0.1024198     8.784  &lt; 2e-16 ***\nDESTIN_GRID1256  2.1671819  0.1008763    21.484  &lt; 2e-16 ***\nDESTIN_GRID1257  2.2134238  0.1009187    21.933  &lt; 2e-16 ***\nDESTIN_GRID1258  2.6057022  0.1008554    25.836  &lt; 2e-16 ***\nDESTIN_GRID1259  3.2499900  0.1007564    32.256  &lt; 2e-16 ***\nDESTIN_GRID1260  2.3722000  0.1012920    23.419  &lt; 2e-16 ***\nDESTIN_GRID1261  2.0621134  0.1009770    20.422  &lt; 2e-16 ***\nDESTIN_GRID1262  2.2407292  0.1008418    22.220  &lt; 2e-16 ***\nDESTIN_GRID1263  2.1703600  0.1008931    21.511  &lt; 2e-16 ***\nDESTIN_GRID1264  2.8997135  0.1007867    28.771  &lt; 2e-16 ***\nDESTIN_GRID1265  1.8979928  0.1009413    18.803  &lt; 2e-16 ***\nDESTIN_GRID1266  1.3055035  0.1016796    12.839  &lt; 2e-16 ***\nDESTIN_GRID1268  1.5260843  0.1011351    15.090  &lt; 2e-16 ***\nDESTIN_GRID1269  3.1057454  0.1007168    30.836  &lt; 2e-16 ***\nDESTIN_GRID1270  2.3913959  0.1007999    23.724  &lt; 2e-16 ***\nDESTIN_GRID1272  0.8725184  0.1036114     8.421  &lt; 2e-16 ***\nDESTIN_GRID1276  2.8135124  0.1007734    27.919  &lt; 2e-16 ***\nDESTIN_GRID1277  2.6075266  0.1009082    25.841  &lt; 2e-16 ***\nDESTIN_GRID1278  3.0190997  0.1007414    29.969  &lt; 2e-16 ***\nDESTIN_GRID1279  2.3967070  0.1008244    23.771  &lt; 2e-16 ***\nDESTIN_GRID1280  2.3485870  0.1008225    23.294  &lt; 2e-16 ***\nDESTIN_GRID1281  2.8376894  0.1007995    28.152  &lt; 2e-16 ***\nDESTIN_GRID1282  2.4508212  0.1008744    24.296  &lt; 2e-16 ***\nDESTIN_GRID1283  2.6413657  0.1007944    26.205  &lt; 2e-16 ***\nDESTIN_GRID1284  2.7541481  0.1007966    27.324  &lt; 2e-16 ***\nDESTIN_GRID1285  2.1959819  0.1009174    21.760  &lt; 2e-16 ***\nDESTIN_GRID1288  2.1285254  0.1008435    21.107  &lt; 2e-16 ***\nDESTIN_GRID1289  2.3490037  0.1007902    23.306  &lt; 2e-16 ***\nDESTIN_GRID1294  2.6958947  0.1007828    26.750  &lt; 2e-16 ***\nDESTIN_GRID1295  3.3945246  0.1007218    33.702  &lt; 2e-16 ***\nDESTIN_GRID1296  2.8419676  0.1007415    28.210  &lt; 2e-16 ***\nDESTIN_GRID1297  2.2845108  0.1010734    22.602  &lt; 2e-16 ***\nDESTIN_GRID1298  3.3090689  0.1007377    32.848  &lt; 2e-16 ***\nDESTIN_GRID1299  2.8770347  0.1007623    28.553  &lt; 2e-16 ***\nDESTIN_GRID1300  1.7280952  0.1011968    17.077  &lt; 2e-16 ***\nDESTIN_GRID1301  2.2802088  0.1008444    22.611  &lt; 2e-16 ***\nDESTIN_GRID1302  2.8347610  0.1007390    28.140  &lt; 2e-16 ***\nDESTIN_GRID1303  3.3673898  0.1007143    33.435  &lt; 2e-16 ***\nDESTIN_GRID1304  2.9339556  0.1008461    29.093  &lt; 2e-16 ***\nDESTIN_GRID1306  0.2605824  0.1020599     2.553 0.010673 *  \nDESTIN_GRID1307  2.0513515  0.1008249    20.346  &lt; 2e-16 ***\nDESTIN_GRID1308  3.0340780  0.1008626    30.081  &lt; 2e-16 ***\nDESTIN_GRID1314  3.4471686  0.1007089    34.229  &lt; 2e-16 ***\nDESTIN_GRID1315  2.9987873  0.1007678    29.759  &lt; 2e-16 ***\nDESTIN_GRID1316  2.3206445  0.1011416    22.945  &lt; 2e-16 ***\nDESTIN_GRID1317  2.6169510  0.1008987    25.936  &lt; 2e-16 ***\nDESTIN_GRID1318  2.8361590  0.1008109    28.133  &lt; 2e-16 ***\nDESTIN_GRID1319  3.3983922  0.1007496    33.731  &lt; 2e-16 ***\nDESTIN_GRID1320  4.0626161  0.1006913    40.347  &lt; 2e-16 ***\nDESTIN_GRID1321  1.6977688  0.1009675    16.815  &lt; 2e-16 ***\nDESTIN_GRID1322  3.0300154  0.1007456    30.076  &lt; 2e-16 ***\nDESTIN_GRID1323  2.9476574  0.1008471    29.229  &lt; 2e-16 ***\nDESTIN_GRID1326  1.6106247  0.1008856    15.965  &lt; 2e-16 ***\nDESTIN_GRID1327  1.0008684  0.1011848     9.891  &lt; 2e-16 ***\nDESTIN_GRID1332  2.2636297  0.1009105    22.432  &lt; 2e-16 ***\nDESTIN_GRID1333  3.3644483  0.1007235    33.403  &lt; 2e-16 ***\nDESTIN_GRID1334  3.1854012  0.1007153    31.628  &lt; 2e-16 ***\nDESTIN_GRID1335  3.0192058  0.1007427    29.969  &lt; 2e-16 ***\nDESTIN_GRID1336  2.3181939  0.1008904    22.977  &lt; 2e-16 ***\nDESTIN_GRID1337  3.9554849  0.1006863    39.285  &lt; 2e-16 ***\nDESTIN_GRID1338  2.5600252  0.1007814    25.402  &lt; 2e-16 ***\nDESTIN_GRID1339  1.8608210  0.1009011    18.442  &lt; 2e-16 ***\nDESTIN_GRID1340  3.8303592  0.1006912    38.041  &lt; 2e-16 ***\nDESTIN_GRID1341  2.5141674  0.1008701    24.925  &lt; 2e-16 ***\nDESTIN_GRID1342  3.4182340  0.1007773    33.919  &lt; 2e-16 ***\nDESTIN_GRID1345  0.6315582  0.1013734     6.230 4.66e-10 ***\nDESTIN_GRID1352  2.9456750  0.1007480    29.238  &lt; 2e-16 ***\nDESTIN_GRID1353  2.5092722  0.1007941    24.895  &lt; 2e-16 ***\nDESTIN_GRID1354  3.3229805  0.1007152    32.994  &lt; 2e-16 ***\nDESTIN_GRID1355  2.2977767  0.1008767    22.778  &lt; 2e-16 ***\nDESTIN_GRID1356  2.4396512  0.1008362    24.194  &lt; 2e-16 ***\nDESTIN_GRID1357  2.7264797  0.1007445    27.063  &lt; 2e-16 ***\nDESTIN_GRID1358  2.2598755  0.1009846    22.378  &lt; 2e-16 ***\nDESTIN_GRID1359  2.9863018  0.1007333    29.646  &lt; 2e-16 ***\nDESTIN_GRID136   1.4591290  0.1053462    13.851  &lt; 2e-16 ***\nDESTIN_GRID1360  3.0380348  0.1007441    30.156  &lt; 2e-16 ***\nDESTIN_GRID1364 -0.9018907  0.1197563    -7.531 5.03e-14 ***\nDESTIN_GRID137   2.4840403  0.1030526    24.105  &lt; 2e-16 ***\nDESTIN_GRID1370 -2.3019709  0.7145007    -3.222 0.001274 ** \nDESTIN_GRID1371  2.3245499  0.1014765    22.907  &lt; 2e-16 ***\nDESTIN_GRID1372  3.2278839  0.1007170    32.049  &lt; 2e-16 ***\nDESTIN_GRID1373  2.6660225  0.1008591    26.433  &lt; 2e-16 ***\nDESTIN_GRID1374  2.0669915  0.1009617    20.473  &lt; 2e-16 ***\nDESTIN_GRID1375  2.1461943  0.1009674    21.256  &lt; 2e-16 ***\nDESTIN_GRID1376  2.4833529  0.1007877    24.639  &lt; 2e-16 ***\nDESTIN_GRID1377  1.9448967  0.1009277    19.270  &lt; 2e-16 ***\nDESTIN_GRID1378  2.6286900  0.1007721    26.085  &lt; 2e-16 ***\nDESTIN_GRID1379  4.4706203  0.1007427    44.377  &lt; 2e-16 ***\nDESTIN_GRID138   3.6100162  0.1016925    35.499  &lt; 2e-16 ***\nDESTIN_GRID1380  1.5579345  0.1012882    15.381  &lt; 2e-16 ***\nDESTIN_GRID1383 -0.4079272  0.1054357    -3.869 0.000109 ***\nDESTIN_GRID1389  2.4436546  0.1166027    20.957  &lt; 2e-16 ***\nDESTIN_GRID139   3.4303444  0.1015824    33.769  &lt; 2e-16 ***\nDESTIN_GRID1390  0.8900044  0.1034934     8.600  &lt; 2e-16 ***\nDESTIN_GRID1391  2.7319514  0.1008241    27.096  &lt; 2e-16 ***\nDESTIN_GRID1392  2.6641180  0.1007785    26.435  &lt; 2e-16 ***\nDESTIN_GRID1393  2.7961566  0.1007564    27.752  &lt; 2e-16 ***\nDESTIN_GRID1394  2.1619231  0.1008291    21.441  &lt; 2e-16 ***\nDESTIN_GRID1395  2.3011449  0.1009368    22.798  &lt; 2e-16 ***\nDESTIN_GRID1396  2.2335149  0.1010547    22.102  &lt; 2e-16 ***\nDESTIN_GRID1397  1.5281495  0.1047583    14.587  &lt; 2e-16 ***\nDESTIN_GRID1398  2.0694768  0.1010572    20.478  &lt; 2e-16 ***\nDESTIN_GRID140   0.9940649  0.1028307     9.667  &lt; 2e-16 ***\nDESTIN_GRID1401  1.4347304  0.1017095    14.106  &lt; 2e-16 ***\nDESTIN_GRID1408  1.3098223  0.1260421    10.392  &lt; 2e-16 ***\nDESTIN_GRID1409  1.3741865  0.1020216    13.470  &lt; 2e-16 ***\nDESTIN_GRID141   1.8877690  0.1022518    18.462  &lt; 2e-16 ***\nDESTIN_GRID1410  2.4364823  0.1013865    24.032  &lt; 2e-16 ***\nDESTIN_GRID1411  3.1902184  0.1007261    31.672  &lt; 2e-16 ***\nDESTIN_GRID1412  3.2894758  0.1007223    32.659  &lt; 2e-16 ***\nDESTIN_GRID1413  2.3020379  0.1008696    22.822  &lt; 2e-16 ***\nDESTIN_GRID1414  0.5597686  0.1019539     5.490 4.01e-08 ***\nDESTIN_GRID1415  1.4268323  0.1010577    14.119  &lt; 2e-16 ***\nDESTIN_GRID1416  1.9551897  0.1009886    19.361  &lt; 2e-16 ***\nDESTIN_GRID1417  2.4850118  0.1008537    24.640  &lt; 2e-16 ***\nDESTIN_GRID1418  0.8459018  0.1019496     8.297  &lt; 2e-16 ***\nDESTIN_GRID1419  1.0457796  0.1021611    10.237  &lt; 2e-16 ***\nDESTIN_GRID142   2.1635650  0.1029764    21.010  &lt; 2e-16 ***\nDESTIN_GRID1420  1.8376690  0.1013040    18.140  &lt; 2e-16 ***\nDESTIN_GRID1428  1.7900037  0.1368392    13.081  &lt; 2e-16 ***\nDESTIN_GRID1430  0.6632016  0.1033522     6.417 1.39e-10 ***\nDESTIN_GRID1431  3.0817473  0.1007635    30.584  &lt; 2e-16 ***\nDESTIN_GRID1432  3.0662246  0.1007279    30.441  &lt; 2e-16 ***\nDESTIN_GRID1433  1.6591122  0.1027489    16.147  &lt; 2e-16 ***\nDESTIN_GRID1434  1.6091920  0.1012965    15.886  &lt; 2e-16 ***\nDESTIN_GRID1435  2.3436173  0.1009383    23.218  &lt; 2e-16 ***\nDESTIN_GRID1436  2.8113755  0.1008020    27.890  &lt; 2e-16 ***\nDESTIN_GRID1439  1.2537140  0.1015013    12.352  &lt; 2e-16 ***\nDESTIN_GRID1440  1.6407156  0.1015280    16.160  &lt; 2e-16 ***\nDESTIN_GRID1448  1.7891554  0.1017524    17.583  &lt; 2e-16 ***\nDESTIN_GRID1449  1.9077525  0.1008926    18.909  &lt; 2e-16 ***\nDESTIN_GRID1450  2.5046012  0.1008642    24.831  &lt; 2e-16 ***\nDESTIN_GRID1451  3.3426137  0.1007284    33.184  &lt; 2e-16 ***\nDESTIN_GRID1452  1.3065098  0.1011620    12.915  &lt; 2e-16 ***\nDESTIN_GRID1453  2.3183690  0.1008034    22.999  &lt; 2e-16 ***\nDESTIN_GRID1454  1.9105728  0.1015414    18.816  &lt; 2e-16 ***\nDESTIN_GRID1455  3.1437936  0.1007468    31.205  &lt; 2e-16 ***\nDESTIN_GRID1456  2.1748887  0.1008352    21.569  &lt; 2e-16 ***\nDESTIN_GRID1457  2.6629555  0.1007830    26.423  &lt; 2e-16 ***\nDESTIN_GRID1458  0.9243381  0.1038414     8.901  &lt; 2e-16 ***\nDESTIN_GRID1468  3.6148787  0.1012679    35.696  &lt; 2e-16 ***\nDESTIN_GRID1469  2.8923364  0.1007374    28.712  &lt; 2e-16 ***\nDESTIN_GRID1470  3.6320387  0.1007273    36.058  &lt; 2e-16 ***\nDESTIN_GRID1471  2.7633506  0.1007795    27.420  &lt; 2e-16 ***\nDESTIN_GRID1472  4.2128474  0.1006846    41.842  &lt; 2e-16 ***\nDESTIN_GRID1473  1.4083833  0.1010249    13.941  &lt; 2e-16 ***\nDESTIN_GRID1474  3.3871304  0.1007181    33.630  &lt; 2e-16 ***\nDESTIN_GRID1475  0.6106294  0.1016921     6.005 1.92e-09 ***\nDESTIN_GRID1476  1.2088802  0.1012467    11.940  &lt; 2e-16 ***\nDESTIN_GRID1477  0.7695683  0.1020792     7.539 4.74e-14 ***\nDESTIN_GRID1486  0.6673563  0.1051244     6.348 2.18e-10 ***\nDESTIN_GRID1487  2.3950047  0.1008108    23.757  &lt; 2e-16 ***\nDESTIN_GRID1488  2.8016638  0.1009212    27.761  &lt; 2e-16 ***\nDESTIN_GRID1489  2.4123119  0.1008429    23.921  &lt; 2e-16 ***\nDESTIN_GRID1490  2.7164043  0.1009386    26.911  &lt; 2e-16 ***\nDESTIN_GRID1491  2.0347096  0.1008356    20.178  &lt; 2e-16 ***\nDESTIN_GRID1492  2.2166429  0.1008076    21.989  &lt; 2e-16 ***\nDESTIN_GRID1493  2.7856183  0.1007400    27.652  &lt; 2e-16 ***\nDESTIN_GRID1494  2.0712001  0.1009008    20.527  &lt; 2e-16 ***\nDESTIN_GRID1506 -0.9764845  0.1400090    -6.974 3.07e-12 ***\nDESTIN_GRID1507  3.0525041  0.1007317    30.303  &lt; 2e-16 ***\nDESTIN_GRID1508  3.2102959  0.1007317    31.870  &lt; 2e-16 ***\nDESTIN_GRID1509  2.2937271  0.1016775    22.559  &lt; 2e-16 ***\nDESTIN_GRID1510  2.0690720  0.1008592    20.514  &lt; 2e-16 ***\nDESTIN_GRID1512  2.6698156  0.1007496    26.500  &lt; 2e-16 ***\nDESTIN_GRID1513  1.2900920  0.1012448    12.742  &lt; 2e-16 ***\nDESTIN_GRID1514  1.0632778  0.1013473    10.491  &lt; 2e-16 ***\nDESTIN_GRID1524  2.7207234  0.1010485    26.925  &lt; 2e-16 ***\nDESTIN_GRID1525  1.7141685  0.1010144    16.970  &lt; 2e-16 ***\nDESTIN_GRID1526  2.5975945  0.1007997    25.770  &lt; 2e-16 ***\nDESTIN_GRID1527  2.7687805  0.1008737    27.448  &lt; 2e-16 ***\nDESTIN_GRID1528  2.0537883  0.1008782    20.359  &lt; 2e-16 ***\nDESTIN_GRID1529  1.5156065  0.1011313    14.987  &lt; 2e-16 ***\nDESTIN_GRID1530  1.0468830  0.1014327    10.321  &lt; 2e-16 ***\nDESTIN_GRID1531  2.8994552  0.1007468    28.780  &lt; 2e-16 ***\nDESTIN_GRID1532  0.9916787  0.1015712     9.763  &lt; 2e-16 ***\nDESTIN_GRID1544  2.3071569  0.1009306    22.859  &lt; 2e-16 ***\nDESTIN_GRID1545  1.6743585  0.1009580    16.585  &lt; 2e-16 ***\nDESTIN_GRID1546  2.5017739  0.1007824    24.824  &lt; 2e-16 ***\nDESTIN_GRID1547  2.8695746  0.1007563    28.480  &lt; 2e-16 ***\nDESTIN_GRID1548  2.6517313  0.1007761    26.313  &lt; 2e-16 ***\nDESTIN_GRID1549  3.5644827  0.1007151    35.392  &lt; 2e-16 ***\nDESTIN_GRID1550  2.7440357  0.1007412    27.238  &lt; 2e-16 ***\nDESTIN_GRID1551  0.6419919  0.1017850     6.307 2.84e-10 ***\nDESTIN_GRID1552  1.6739102  0.1009724    16.578  &lt; 2e-16 ***\nDESTIN_GRID156   1.4998899  0.1095148    13.696  &lt; 2e-16 ***\nDESTIN_GRID1563  2.8282716  0.1008011    28.058  &lt; 2e-16 ***\nDESTIN_GRID1564  2.8121409  0.1007516    27.912  &lt; 2e-16 ***\nDESTIN_GRID1565  2.9977662  0.1007397    29.758  &lt; 2e-16 ***\nDESTIN_GRID1566  1.9769992  0.1010028    19.574  &lt; 2e-16 ***\nDESTIN_GRID1567  2.9747577  0.1007509    29.526  &lt; 2e-16 ***\nDESTIN_GRID1568  2.5048474  0.1007603    24.859  &lt; 2e-16 ***\nDESTIN_GRID1569  1.5380859  0.1009512    15.236  &lt; 2e-16 ***\nDESTIN_GRID1570  2.6799105  0.1007630    26.596  &lt; 2e-16 ***\nDESTIN_GRID1571  0.0682485  0.1017288     0.671 0.502293    \nDESTIN_GRID158   2.8277359  0.1017125    27.801  &lt; 2e-16 ***\nDESTIN_GRID1582  1.8643017  0.1010407    18.451  &lt; 2e-16 ***\nDESTIN_GRID1583  3.1467506  0.1007219    31.242  &lt; 2e-16 ***\nDESTIN_GRID1584  3.0195926  0.1007394    29.974  &lt; 2e-16 ***\nDESTIN_GRID1585  2.4703209  0.1008456    24.496  &lt; 2e-16 ***\nDESTIN_GRID1587  2.8535542  0.1007488    28.323  &lt; 2e-16 ***\nDESTIN_GRID1588  3.8700600  0.1006906    38.435  &lt; 2e-16 ***\nDESTIN_GRID1589  3.3656028  0.1007115    33.418  &lt; 2e-16 ***\nDESTIN_GRID159   2.4668470  0.1011482    24.388  &lt; 2e-16 ***\nDESTIN_GRID1590  2.3243080  0.1008064    23.057  &lt; 2e-16 ***\nDESTIN_GRID1591  0.4618062  0.1031794     4.476 7.61e-06 ***\nDESTIN_GRID160   0.2938874  0.1040318     2.825 0.004728 ** \nDESTIN_GRID1601  2.5916068  0.1008305    25.703  &lt; 2e-16 ***\nDESTIN_GRID1602  2.2480584  0.1008638    22.288  &lt; 2e-16 ***\nDESTIN_GRID1603  3.2384862  0.1007722    32.137  &lt; 2e-16 ***\nDESTIN_GRID1604  4.2252605  0.1009029    41.875  &lt; 2e-16 ***\nDESTIN_GRID1606  1.9544600  0.1008681    19.376  &lt; 2e-16 ***\nDESTIN_GRID1607  1.6906626  0.1009294    16.751  &lt; 2e-16 ***\nDESTIN_GRID1608  3.7976165  0.1006939    37.714  &lt; 2e-16 ***\nDESTIN_GRID1609  1.7276419  0.1008851    17.125  &lt; 2e-16 ***\nDESTIN_GRID1610  1.0811320  0.1027904    10.518  &lt; 2e-16 ***\nDESTIN_GRID1620  2.9643660  0.1007748    29.416  &lt; 2e-16 ***\nDESTIN_GRID1621  2.6675244  0.1008112    26.461  &lt; 2e-16 ***\nDESTIN_GRID1622  2.9312966  0.1008839    29.056  &lt; 2e-16 ***\nDESTIN_GRID1623  2.7733489  0.1008114    27.510  &lt; 2e-16 ***\nDESTIN_GRID1624  4.2685280  0.1009404    42.288  &lt; 2e-16 ***\nDESTIN_GRID1625  0.6441879  0.1027030     6.272 3.56e-10 ***\nDESTIN_GRID1626  2.5065138  0.1007866    24.870  &lt; 2e-16 ***\nDESTIN_GRID1627  2.2648155  0.1007914    22.470  &lt; 2e-16 ***\nDESTIN_GRID1628  2.3958258  0.1007856    23.772  &lt; 2e-16 ***\nDESTIN_GRID1629  1.5668317  0.1010432    15.507  &lt; 2e-16 ***\nDESTIN_GRID1630 -0.0333780  0.1128496    -0.296 0.767402    \nDESTIN_GRID1639  2.4402254  0.1009332    24.177  &lt; 2e-16 ***\nDESTIN_GRID1640  3.4078709  0.1007073    33.839  &lt; 2e-16 ***\nDESTIN_GRID1641  3.5745846  0.1007063    35.495  &lt; 2e-16 ***\nDESTIN_GRID1645  0.9192519  0.1013421     9.071  &lt; 2e-16 ***\nDESTIN_GRID1646  2.0852274  0.1008158    20.684  &lt; 2e-16 ***\nDESTIN_GRID1647  3.7095670  0.1006981    36.838  &lt; 2e-16 ***\nDESTIN_GRID1648 -0.0214651  0.1096420    -0.196 0.844787    \nDESTIN_GRID1658  3.3942085  0.1007386    33.693  &lt; 2e-16 ***\nDESTIN_GRID1659  2.1997465  0.1008793    21.806  &lt; 2e-16 ***\nDESTIN_GRID1660  2.0424843  0.1008630    20.250  &lt; 2e-16 ***\nDESTIN_GRID1661  2.1712049  0.1009281    21.512  &lt; 2e-16 ***\nDESTIN_GRID1663  2.2466688  0.1015660    22.120  &lt; 2e-16 ***\nDESTIN_GRID1665  0.9527959  0.1013501     9.401  &lt; 2e-16 ***\nDESTIN_GRID1666  3.3608306  0.1007065    33.373  &lt; 2e-16 ***\nDESTIN_GRID1667  0.4595733  0.1033873     4.445 8.78e-06 ***\nDESTIN_GRID1668  0.8813809  0.1021809     8.626  &lt; 2e-16 ***\nDESTIN_GRID1677  2.4596633  0.1008092    24.399  &lt; 2e-16 ***\nDESTIN_GRID1678  2.7616617  0.1007698    27.406  &lt; 2e-16 ***\nDESTIN_GRID1679  2.9869974  0.1007551    29.646  &lt; 2e-16 ***\nDESTIN_GRID1682  3.2317168  0.1010027    31.996  &lt; 2e-16 ***\nDESTIN_GRID1684  2.1330634  0.1023297    20.845  &lt; 2e-16 ***\nDESTIN_GRID1685  2.2185169  0.1008260    22.003  &lt; 2e-16 ***\nDESTIN_GRID1696  2.0635585  0.1010733    20.416  &lt; 2e-16 ***\nDESTIN_GRID1697  0.7480500  0.1026810     7.285 3.21e-13 ***\nDESTIN_GRID1698  0.4977275  0.1031387     4.826 1.39e-06 ***\nDESTIN_GRID1699  2.8744341  0.1007669    28.526  &lt; 2e-16 ***\nDESTIN_GRID1702  2.2838735  0.1016159    22.476  &lt; 2e-16 ***\nDESTIN_GRID1704  2.1697139  0.1008369    21.517  &lt; 2e-16 ***\nDESTIN_GRID1705  0.2749571  0.1025933     2.680 0.007361 ** \nDESTIN_GRID1715  2.7500924  0.1007811    27.288  &lt; 2e-16 ***\nDESTIN_GRID1716  1.9789672  0.1009400    19.605  &lt; 2e-16 ***\nDESTIN_GRID1717  1.4751332  0.1013008    14.562  &lt; 2e-16 ***\nDESTIN_GRID1718  1.0861569  0.1036613    10.478  &lt; 2e-16 ***\nDESTIN_GRID1721  1.6572345  0.1026299    16.148  &lt; 2e-16 ***\nDESTIN_GRID1723  0.6501058  0.1020355     6.371 1.87e-10 ***\nDESTIN_GRID1735  1.9251995  0.1010216    19.057  &lt; 2e-16 ***\nDESTIN_GRID1736  3.0071221  0.1008664    29.813  &lt; 2e-16 ***\nDESTIN_GRID1737  3.0483179  0.1007586    30.254  &lt; 2e-16 ***\nDESTIN_GRID1740  2.7969764  0.1012197    27.633  &lt; 2e-16 ***\nDESTIN_GRID1742  0.4687980  0.1024933     4.574 4.79e-06 ***\nDESTIN_GRID1753  2.2164710  0.1009241    21.962  &lt; 2e-16 ***\nDESTIN_GRID1754  3.0083707  0.1007524    29.859  &lt; 2e-16 ***\nDESTIN_GRID1755  1.8452558  0.1009749    18.274  &lt; 2e-16 ***\nDESTIN_GRID1758  1.6888429  0.1023819    16.496  &lt; 2e-16 ***\nDESTIN_GRID177   1.5235185  0.1049738    14.513  &lt; 2e-16 ***\nDESTIN_GRID1773  1.9536492  0.1010759    19.329  &lt; 2e-16 ***\nDESTIN_GRID1774  4.1481055  0.1006852    41.199  &lt; 2e-16 ***\nDESTIN_GRID1775  1.8072335  0.1010948    17.877  &lt; 2e-16 ***\nDESTIN_GRID1776  2.4447564  0.1008257    24.247  &lt; 2e-16 ***\nDESTIN_GRID1778  3.5253892  0.1012616    34.815  &lt; 2e-16 ***\nDESTIN_GRID178   2.6694706  0.1011131    26.401  &lt; 2e-16 ***\nDESTIN_GRID179  -0.4750420  0.1257518    -3.778 0.000158 ***\nDESTIN_GRID1791  2.1602628  0.1009827    21.392  &lt; 2e-16 ***\nDESTIN_GRID1792  2.5077458  0.1008685    24.862  &lt; 2e-16 ***\nDESTIN_GRID1793  2.1846303  0.1008924    21.653  &lt; 2e-16 ***\nDESTIN_GRID1794  2.9605940  0.1009037    29.341  &lt; 2e-16 ***\nDESTIN_GRID1795  2.4727111  0.1008334    24.523  &lt; 2e-16 ***\nDESTIN_GRID1796  2.5943609  0.1008432    25.727  &lt; 2e-16 ***\nDESTIN_GRID1797  2.7214382  0.1008192    26.993  &lt; 2e-16 ***\nDESTIN_GRID1811  2.2843435  0.1008572    22.649  &lt; 2e-16 ***\nDESTIN_GRID1812  2.5705376  0.1007730    25.508  &lt; 2e-16 ***\nDESTIN_GRID1813  3.1227289  0.1007475    30.996  &lt; 2e-16 ***\nDESTIN_GRID1814  3.3066997  0.1007401    32.824  &lt; 2e-16 ***\nDESTIN_GRID1815  2.2643956  0.1008489    22.453  &lt; 2e-16 ***\nDESTIN_GRID1816  3.4420593  0.1007620    34.160  &lt; 2e-16 ***\nDESTIN_GRID1817  0.0138856  0.1049284     0.132 0.894720    \nDESTIN_GRID1830  2.8767157  0.1008697    28.519  &lt; 2e-16 ***\nDESTIN_GRID1831  2.9705326  0.1007515    29.484  &lt; 2e-16 ***\nDESTIN_GRID1832  3.2485409  0.1007293    32.250  &lt; 2e-16 ***\nDESTIN_GRID1833  2.1789153  0.1008579    21.604  &lt; 2e-16 ***\nDESTIN_GRID1834  1.6105695  0.1013293    15.894  &lt; 2e-16 ***\nDESTIN_GRID1835  3.0190718  0.1007494    29.966  &lt; 2e-16 ***\nDESTIN_GRID1849  1.3878308  0.1012659    13.705  &lt; 2e-16 ***\nDESTIN_GRID1850  2.4885074  0.1008117    24.685  &lt; 2e-16 ***\nDESTIN_GRID1851  2.2687831  0.1013379    22.388  &lt; 2e-16 ***\nDESTIN_GRID1852  3.3236955  0.1007174    33.000  &lt; 2e-16 ***\nDESTIN_GRID1853  1.5962582  0.1010494    15.797  &lt; 2e-16 ***\nDESTIN_GRID1854  1.6877720  0.1009966    16.711  &lt; 2e-16 ***\nDESTIN_GRID1855  0.1031744  0.1043960     0.988 0.323007    \nDESTIN_GRID1868  2.4353222  0.1008620    24.145  &lt; 2e-16 ***\nDESTIN_GRID1869  2.3484532  0.1009029    23.274  &lt; 2e-16 ***\nDESTIN_GRID1870  0.7659883  0.1057755     7.242 4.43e-13 ***\nDESTIN_GRID1871  4.5518161  0.1006815    45.210  &lt; 2e-16 ***\nDESTIN_GRID1872  1.4110697  0.1015075    13.901  &lt; 2e-16 ***\nDESTIN_GRID1873  1.9706285  0.1009821    19.515  &lt; 2e-16 ***\nDESTIN_GRID1887  2.2739931  0.1009205    22.533  &lt; 2e-16 ***\nDESTIN_GRID1888  3.5923202  0.1007253    35.665  &lt; 2e-16 ***\nDESTIN_GRID1889  3.5209266  0.1007333    34.953  &lt; 2e-16 ***\nDESTIN_GRID1890  2.4735937  0.1008077    24.538  &lt; 2e-16 ***\nDESTIN_GRID1891  2.0257612  0.1010438    20.048  &lt; 2e-16 ***\nDESTIN_GRID1892  4.2373868  0.1006904    42.083  &lt; 2e-16 ***\nDESTIN_GRID1893 -0.3774916  0.1207142    -3.127 0.001765 ** \nDESTIN_GRID1905  1.4014731  0.1191265    11.765  &lt; 2e-16 ***\nDESTIN_GRID1906  0.9093453  0.1017449     8.937  &lt; 2e-16 ***\nDESTIN_GRID1907  3.7561186  0.1007213    37.292  &lt; 2e-16 ***\nDESTIN_GRID1908  3.4880429  0.1007604    34.617  &lt; 2e-16 ***\nDESTIN_GRID1909  2.4424812  0.1008133    24.228  &lt; 2e-16 ***\nDESTIN_GRID1910  1.4385023  0.1012921    14.202  &lt; 2e-16 ***\nDESTIN_GRID1911  0.9349244  0.1059454     8.825  &lt; 2e-16 ***\nDESTIN_GRID1926  2.6924786  0.1009951    26.659  &lt; 2e-16 ***\nDESTIN_GRID1927  2.4212243  0.1011421    23.939  &lt; 2e-16 ***\nDESTIN_GRID1928  2.5047974  0.1007917    24.851  &lt; 2e-16 ***\nDESTIN_GRID1929  2.3131697  0.1009001    22.925  &lt; 2e-16 ***\nDESTIN_GRID1930  2.1310897  0.1009230    21.116  &lt; 2e-16 ***\nDESTIN_GRID1944  1.5935443  0.1017260    15.665  &lt; 2e-16 ***\nDESTIN_GRID1945  1.7725579  0.1012405    17.508  &lt; 2e-16 ***\nDESTIN_GRID1946  2.0580749  0.1009786    20.381  &lt; 2e-16 ***\nDESTIN_GRID1947  3.8632243  0.1007014    38.363  &lt; 2e-16 ***\nDESTIN_GRID1948  2.6956778  0.1007780    26.749  &lt; 2e-16 ***\nDESTIN_GRID1949  1.5012400  0.1012605    14.826  &lt; 2e-16 ***\nDESTIN_GRID195   2.8232796  0.1047110    26.963  &lt; 2e-16 ***\nDESTIN_GRID196   1.3651837  0.1016721    13.427  &lt; 2e-16 ***\nDESTIN_GRID1965  2.9562913  0.1007998    29.328  &lt; 2e-16 ***\nDESTIN_GRID1966  1.5228230  0.1012522    15.040  &lt; 2e-16 ***\nDESTIN_GRID1967  1.8705397  0.1009128    18.536  &lt; 2e-16 ***\nDESTIN_GRID1968  2.4973166  0.1008734    24.757  &lt; 2e-16 ***\nDESTIN_GRID197   3.1512553  0.1010259    31.193  &lt; 2e-16 ***\nDESTIN_GRID1983  3.4709453  0.1008739    34.409  &lt; 2e-16 ***\nDESTIN_GRID1984  1.8532655  0.1012280    18.308  &lt; 2e-16 ***\nDESTIN_GRID1985  2.6686978  0.1008528    26.461  &lt; 2e-16 ***\nDESTIN_GRID1986  2.5342938  0.1008106    25.139  &lt; 2e-16 ***\nDESTIN_GRID1987  1.4148242  0.1067622    13.252  &lt; 2e-16 ***\nDESTIN_GRID2002  3.3486251  0.1014924    32.994  &lt; 2e-16 ***\nDESTIN_GRID2003  2.9848402  0.1009841    29.558  &lt; 2e-16 ***\nDESTIN_GRID2004  4.2115025  0.1009221    41.730  &lt; 2e-16 ***\nDESTIN_GRID2005  2.0244910  0.1010958    20.025  &lt; 2e-16 ***\nDESTIN_GRID2006  2.8147008  0.1008373    27.913  &lt; 2e-16 ***\nDESTIN_GRID2021  3.6955169  0.1011391    36.539  &lt; 2e-16 ***\nDESTIN_GRID2022  4.3076795  0.1010338    42.636  &lt; 2e-16 ***\nDESTIN_GRID2023  2.9426897  0.1010537    29.120  &lt; 2e-16 ***\nDESTIN_GRID2024  1.3826535  0.1015712    13.613  &lt; 2e-16 ***\nDESTIN_GRID2025  3.3536291  0.1013177    33.100  &lt; 2e-16 ***\nDESTIN_GRID2042  3.4138369  0.1013869    33.671  &lt; 2e-16 ***\nDESTIN_GRID2043  0.8211839  0.1040296     7.894 2.93e-15 ***\nDESTIN_GRID2044  2.4737021  0.1009144    24.513  &lt; 2e-16 ***\nDESTIN_GRID2045  3.8928558  0.1011928    38.470  &lt; 2e-16 ***\nDESTIN_GRID2061  2.0898489  0.1038777    20.118  &lt; 2e-16 ***\nDESTIN_GRID2062  1.7617247  0.1019801    17.275  &lt; 2e-16 ***\nDESTIN_GRID2063  2.4678500  0.1009366    24.450  &lt; 2e-16 ***\nDESTIN_GRID2064  1.5520783  0.1054143    14.724  &lt; 2e-16 ***\nDESTIN_GRID2079  1.0144992  0.1021555     9.931  &lt; 2e-16 ***\nDESTIN_GRID2082  1.6255149  0.1027270    15.824  &lt; 2e-16 ***\nDESTIN_GRID2083  2.0978205  0.1011371    20.742  &lt; 2e-16 ***\nDESTIN_GRID2098  3.3530312  0.1008159    33.259  &lt; 2e-16 ***\nDESTIN_GRID2099  3.5615534  0.1007864    35.338  &lt; 2e-16 ***\nDESTIN_GRID21    2.4090654  0.1125648    21.402  &lt; 2e-16 ***\nDESTIN_GRID2102  2.3601689  0.1010532    23.356  &lt; 2e-16 ***\nDESTIN_GRID2115  3.4007254  0.1019359    33.361  &lt; 2e-16 ***\nDESTIN_GRID2119  3.6916745  0.1007813    36.631  &lt; 2e-16 ***\nDESTIN_GRID2121  1.5946582  0.1014701    15.716  &lt; 2e-16 ***\nDESTIN_GRID2137  2.4128793  0.1010731    23.873  &lt; 2e-16 ***\nDESTIN_GRID2140  0.7163211  0.1048929     6.829 8.55e-12 ***\nDESTIN_GRID215   1.1923226  0.1052004    11.334  &lt; 2e-16 ***\nDESTIN_GRID2153  2.3540063  0.1036995    22.700  &lt; 2e-16 ***\nDESTIN_GRID2158  3.3725208  0.1008814    33.431  &lt; 2e-16 ***\nDESTIN_GRID216   2.0346668  0.1016862    20.009  &lt; 2e-16 ***\nDESTIN_GRID217   1.5893789  0.1051662    15.113  &lt; 2e-16 ***\nDESTIN_GRID2177  4.1357591  0.1007731    41.040  &lt; 2e-16 ***\nDESTIN_GRID2178  1.1792990  0.1033773    11.408  &lt; 2e-16 ***\nDESTIN_GRID2196  3.2814987  0.1012863    32.398  &lt; 2e-16 ***\nDESTIN_GRID2197  3.6327179  0.1009017    36.003  &lt; 2e-16 ***\nDESTIN_GRID2267  3.3535564  0.1023635    32.761  &lt; 2e-16 ***\nDESTIN_GRID233   3.8917007  0.1017919    38.232  &lt; 2e-16 ***\nDESTIN_GRID234   1.7662219  0.1024404    17.241  &lt; 2e-16 ***\nDESTIN_GRID235   2.9953752  0.1012850    29.574  &lt; 2e-16 ***\nDESTIN_GRID252   4.0555363  0.1016467    39.898  &lt; 2e-16 ***\nDESTIN_GRID253   2.5071500  0.1014607    24.711  &lt; 2e-16 ***\nDESTIN_GRID254   2.7881107  0.1013540    27.509  &lt; 2e-16 ***\nDESTIN_GRID270  -0.1788730  0.1636811    -1.093 0.274475    \nDESTIN_GRID271   2.7894189  0.1018529    27.387  &lt; 2e-16 ***\nDESTIN_GRID272   1.6208629  0.1019955    15.892  &lt; 2e-16 ***\nDESTIN_GRID290   4.0792293  0.1015466    40.171  &lt; 2e-16 ***\nDESTIN_GRID291   2.2843618  0.1033606    22.101  &lt; 2e-16 ***\nDESTIN_GRID292   3.4823689  0.1012472    34.395  &lt; 2e-16 ***\nDESTIN_GRID308   4.6436447  0.1012037    45.884  &lt; 2e-16 ***\nDESTIN_GRID309   3.3543983  0.1013286    33.104  &lt; 2e-16 ***\nDESTIN_GRID310   3.0611035  0.1011463    30.264  &lt; 2e-16 ***\nDESTIN_GRID329   3.4439718  0.1014551    33.946  &lt; 2e-16 ***\nDESTIN_GRID330   3.6547105  0.1008878    36.225  &lt; 2e-16 ***\nDESTIN_GRID347   4.0690704  0.1010062    40.285  &lt; 2e-16 ***\nDESTIN_GRID348   3.2932546  0.1009443    32.624  &lt; 2e-16 ***\nDESTIN_GRID349   2.8253624  0.1016523    27.794  &lt; 2e-16 ***\nDESTIN_GRID366   4.0395924  0.1014605    39.814  &lt; 2e-16 ***\nDESTIN_GRID367   3.8378448  0.1011359    37.947  &lt; 2e-16 ***\nDESTIN_GRID368   2.7266130  0.1007288    27.069  &lt; 2e-16 ***\nDESTIN_GRID369   3.7250652  0.1009539    36.899  &lt; 2e-16 ***\nDESTIN_GRID370   4.7460763  0.1007474    47.109  &lt; 2e-16 ***\nDESTIN_GRID385   1.8843877  0.1035197    18.203  &lt; 2e-16 ***\nDESTIN_GRID386   2.7567751  0.1011196    27.263  &lt; 2e-16 ***\nDESTIN_GRID387   0.1313549  0.1031781     1.273 0.202986    \nDESTIN_GRID388   2.9949169  0.1011324    29.614  &lt; 2e-16 ***\nDESTIN_GRID389   2.0105391  0.1029824    19.523  &lt; 2e-16 ***\nDESTIN_GRID40    3.8886211  0.1031248    37.708  &lt; 2e-16 ***\nDESTIN_GRID404   2.8196502  0.1030914    27.351  &lt; 2e-16 ***\nDESTIN_GRID405   2.4286227  0.1020058    23.809  &lt; 2e-16 ***\nDESTIN_GRID406   2.2992543  0.1012504    22.709  &lt; 2e-16 ***\nDESTIN_GRID407   2.2488980  0.1009080    22.287  &lt; 2e-16 ***\nDESTIN_GRID408   2.3709375  0.1012742    23.411  &lt; 2e-16 ***\nDESTIN_GRID42    3.5268778  0.1023863    34.447  &lt; 2e-16 ***\nDESTIN_GRID424   2.6162795  0.1011770    25.858  &lt; 2e-16 ***\nDESTIN_GRID425   2.0845202  0.1009792    20.643  &lt; 2e-16 ***\nDESTIN_GRID426   2.2609658  0.1008634    22.416  &lt; 2e-16 ***\nDESTIN_GRID427   2.4062627  0.1019089    23.612  &lt; 2e-16 ***\nDESTIN_GRID442   2.7806221  0.1029876    27.000  &lt; 2e-16 ***\nDESTIN_GRID443   1.0002425  0.1105499     9.048  &lt; 2e-16 ***\nDESTIN_GRID444   2.8310592  0.1009917    28.033  &lt; 2e-16 ***\nDESTIN_GRID445   1.0220382  0.1014177    10.078  &lt; 2e-16 ***\nDESTIN_GRID447  -0.1544202  0.1113678    -1.387 0.165570    \nDESTIN_GRID448   1.5431376  0.1029571    14.988  &lt; 2e-16 ***\nDESTIN_GRID461   3.2816349  0.1017482    32.253  &lt; 2e-16 ***\nDESTIN_GRID462   3.0098541  0.1011087    29.768  &lt; 2e-16 ***\nDESTIN_GRID463   2.4402172  0.1008501    24.196  &lt; 2e-16 ***\nDESTIN_GRID464   2.0827132  0.1008223    20.657  &lt; 2e-16 ***\nDESTIN_GRID465   3.4348261  0.1009175    34.036  &lt; 2e-16 ***\nDESTIN_GRID466   2.6419301  0.1013378    26.071  &lt; 2e-16 ***\nDESTIN_GRID467   1.1454899  0.1049723    10.912  &lt; 2e-16 ***\nDESTIN_GRID480   2.7429299  0.1045914    26.225  &lt; 2e-16 ***\nDESTIN_GRID481   5.0099892  0.1008300    49.687  &lt; 2e-16 ***\nDESTIN_GRID482   2.7205542  0.1010014    26.936  &lt; 2e-16 ***\nDESTIN_GRID483   3.8484782  0.1006849    38.223  &lt; 2e-16 ***\nDESTIN_GRID484   1.9575791  0.1008475    19.411  &lt; 2e-16 ***\nDESTIN_GRID486   1.7503065  0.1021684    17.132  &lt; 2e-16 ***\nDESTIN_GRID487   0.8622898  0.1060495     8.131 4.26e-16 ***\nDESTIN_GRID488   0.4592610  0.1093450     4.200 2.67e-05 ***\nDESTIN_GRID489  -1.6443260  0.2695290    -6.101 1.06e-09 ***\nDESTIN_GRID499   3.5400215  0.1021424    34.658  &lt; 2e-16 ***\nDESTIN_GRID500   4.2176286  0.1012135    41.671  &lt; 2e-16 ***\nDESTIN_GRID501   2.1675951  0.1009933    21.463  &lt; 2e-16 ***\nDESTIN_GRID502   1.9048669  0.1008505    18.888  &lt; 2e-16 ***\nDESTIN_GRID503   2.6982592  0.1009354    26.733  &lt; 2e-16 ***\nDESTIN_GRID507   0.2432747  0.1137464     2.139 0.032456 *  \nDESTIN_GRID508   2.5484221  0.1019540    24.996  &lt; 2e-16 ***\nDESTIN_GRID509   0.0087350  0.1193800     0.073 0.941671    \nDESTIN_GRID518   2.4005683  0.1063203    22.579  &lt; 2e-16 ***\nDESTIN_GRID519   4.4410244  0.1011601    43.901  &lt; 2e-16 ***\nDESTIN_GRID520   3.0705958  0.1018304    30.154  &lt; 2e-16 ***\nDESTIN_GRID521   4.3566818  0.1006674    43.278  &lt; 2e-16 ***\nDESTIN_GRID522   2.2849368  0.1008239    22.663  &lt; 2e-16 ***\nDESTIN_GRID524  -1.4428452  0.1402101   -10.291  &lt; 2e-16 ***\nDESTIN_GRID528  -0.1195624  0.1178370    -1.015 0.310276    \nDESTIN_GRID529  -0.9551748  0.2086317    -4.578 4.69e-06 ***\nDESTIN_GRID530   1.3059929  0.1063776    12.277  &lt; 2e-16 ***\nDESTIN_GRID537   1.3373716  0.1036858    12.898  &lt; 2e-16 ***\nDESTIN_GRID538   3.5745173  0.1015658    35.194  &lt; 2e-16 ***\nDESTIN_GRID539   3.4514656  0.1008096    34.237  &lt; 2e-16 ***\nDESTIN_GRID540   2.4694320  0.1007669    24.506  &lt; 2e-16 ***\nDESTIN_GRID541   2.0298559  0.1017564    19.948  &lt; 2e-16 ***\nDESTIN_GRID547   0.3203643  0.1129352     2.837 0.004558 ** \nDESTIN_GRID548   0.6466199  0.1120578     5.770 7.91e-09 ***\nDESTIN_GRID557   2.0551229  0.1016781    20.212  &lt; 2e-16 ***\nDESTIN_GRID558   3.1049881  0.1010236    30.735  &lt; 2e-16 ***\nDESTIN_GRID559   1.8763317  0.1010477    18.569  &lt; 2e-16 ***\nDESTIN_GRID560   2.0560722  0.1008350    20.390  &lt; 2e-16 ***\nDESTIN_GRID562   2.4766048  0.1012260    24.466  &lt; 2e-16 ***\nDESTIN_GRID577   2.7382815  0.1012250    27.051  &lt; 2e-16 ***\nDESTIN_GRID578   2.3026257  0.1008027    22.843  &lt; 2e-16 ***\nDESTIN_GRID595   3.3210995  0.1008971    32.916  &lt; 2e-16 ***\nDESTIN_GRID596   2.6554244  0.1008292    26.336  &lt; 2e-16 ***\nDESTIN_GRID597   2.6427686  0.1008107    26.215  &lt; 2e-16 ***\nDESTIN_GRID598   2.9625766  0.1007250    29.413  &lt; 2e-16 ***\nDESTIN_GRID60    2.3378664  0.1106957    21.120  &lt; 2e-16 ***\nDESTIN_GRID600   1.5958214  0.1013937    15.739  &lt; 2e-16 ***\nDESTIN_GRID61    3.3231062  0.1016364    32.696  &lt; 2e-16 ***\nDESTIN_GRID613   3.2607186  0.1010750    32.260  &lt; 2e-16 ***\nDESTIN_GRID614   1.8053575  0.1015887    17.771  &lt; 2e-16 ***\nDESTIN_GRID615   2.8585955  0.1007659    28.369  &lt; 2e-16 ***\nDESTIN_GRID616   4.5511196  0.1006845    45.202  &lt; 2e-16 ***\nDESTIN_GRID617   0.8871592  0.1021883     8.682  &lt; 2e-16 ***\nDESTIN_GRID62    3.3640434  0.1024207    32.845  &lt; 2e-16 ***\nDESTIN_GRID633   2.8716079  0.1010441    28.419  &lt; 2e-16 ***\nDESTIN_GRID634   2.3376270  0.1008803    23.172  &lt; 2e-16 ***\nDESTIN_GRID635   0.3786775  0.1024556     3.696 0.000219 ***\nDESTIN_GRID636   2.6609127  0.1007521    26.410  &lt; 2e-16 ***\nDESTIN_GRID638   2.2032680  0.1012252    21.766  &lt; 2e-16 ***\nDESTIN_GRID654   2.4571236  0.1010243    24.322  &lt; 2e-16 ***\nDESTIN_GRID657   0.2803702  0.1039560     2.697 0.006997 ** \nDESTIN_GRID671   3.5204598  0.1009169    34.885  &lt; 2e-16 ***\nDESTIN_GRID673   0.2737013  0.1026704     2.666 0.007680 ** \nDESTIN_GRID674   2.7723097  0.1007539    27.516  &lt; 2e-16 ***\nDESTIN_GRID689   3.7084567  0.1010109    36.713  &lt; 2e-16 ***\nDESTIN_GRID690   1.5636799  0.1015122    15.404  &lt; 2e-16 ***\nDESTIN_GRID691   0.4353597  0.1025383     4.246 2.18e-05 ***\nDESTIN_GRID692   3.2416058  0.1007068    32.189  &lt; 2e-16 ***\nDESTIN_GRID693   2.5810005  0.1010997    25.529  &lt; 2e-16 ***\nDESTIN_GRID695   1.8366487  0.1008782    18.207  &lt; 2e-16 ***\nDESTIN_GRID700   1.2865122  0.1075890    11.958  &lt; 2e-16 ***\nDESTIN_GRID710   0.4895154  0.1027960     4.762 1.92e-06 ***\nDESTIN_GRID711   2.3063065  0.1007916    22.882  &lt; 2e-16 ***\nDESTIN_GRID712   2.5419955  0.1007735    25.225  &lt; 2e-16 ***\nDESTIN_GRID713   1.5975612  0.1012211    15.783  &lt; 2e-16 ***\nDESTIN_GRID714   0.4205196  0.1016666     4.136 3.53e-05 ***\nDESTIN_GRID715   0.6278466  0.1020818     6.150 7.73e-10 ***\nDESTIN_GRID727   2.5937941  0.1016107    25.527  &lt; 2e-16 ***\nDESTIN_GRID728   2.6562071  0.1008392    26.341  &lt; 2e-16 ***\nDESTIN_GRID729   3.7921394  0.1006950    37.660  &lt; 2e-16 ***\nDESTIN_GRID730   2.2433033  0.1008077    22.253  &lt; 2e-16 ***\nDESTIN_GRID731   1.9663586  0.1008973    19.489  &lt; 2e-16 ***\nDESTIN_GRID732   1.0811957  0.1021591    10.583  &lt; 2e-16 ***\nDESTIN_GRID733   2.4779111  0.1007556    24.593  &lt; 2e-16 ***\nDESTIN_GRID734   1.8992210  0.1010006    18.804  &lt; 2e-16 ***\nDESTIN_GRID738   2.3799796  0.1025314    23.212  &lt; 2e-16 ***\nDESTIN_GRID746   2.6741950  0.1015569    26.332  &lt; 2e-16 ***\nDESTIN_GRID748   2.4831242  0.1008264    24.628  &lt; 2e-16 ***\nDESTIN_GRID749   2.1310926  0.1008421    21.133  &lt; 2e-16 ***\nDESTIN_GRID750   2.5039470  0.1007623    24.850  &lt; 2e-16 ***\nDESTIN_GRID751   1.8708675  0.1009439    18.534  &lt; 2e-16 ***\nDESTIN_GRID752   0.6671617  0.1014524     6.576 4.83e-11 ***\nDESTIN_GRID753   3.8542202  0.1006897    38.278  &lt; 2e-16 ***\nDESTIN_GRID754   3.9868048  0.1007389    39.576  &lt; 2e-16 ***\nDESTIN_GRID757   2.0118998  0.1027806    19.575  &lt; 2e-16 ***\nDESTIN_GRID764   2.3280908  0.1022318    22.773  &lt; 2e-16 ***\nDESTIN_GRID766   2.3258643  0.1008685    23.058  &lt; 2e-16 ***\nDESTIN_GRID767   3.1342262  0.1007486    31.109  &lt; 2e-16 ***\nDESTIN_GRID768   2.2058677  0.1008381    21.875  &lt; 2e-16 ***\nDESTIN_GRID769   1.6245811  0.1009763    16.089  &lt; 2e-16 ***\nDESTIN_GRID770   2.4002660  0.1007887    23.815  &lt; 2e-16 ***\nDESTIN_GRID771   1.9479169  0.1008283    19.319  &lt; 2e-16 ***\nDESTIN_GRID772   1.8838249  0.1009991    18.652  &lt; 2e-16 ***\nDESTIN_GRID773   1.2591907  0.1010178    12.465  &lt; 2e-16 ***\nDESTIN_GRID774   2.8597002  0.1016152    28.142  &lt; 2e-16 ***\nDESTIN_GRID775   1.9589108  0.1025686    19.099  &lt; 2e-16 ***\nDESTIN_GRID776   0.9345432  0.1053940     8.867  &lt; 2e-16 ***\nDESTIN_GRID78    3.0236528  0.1063426    28.433  &lt; 2e-16 ***\nDESTIN_GRID784   3.2023958  0.1011416    31.663  &lt; 2e-16 ***\nDESTIN_GRID785   3.6604487  0.1007557    36.330  &lt; 2e-16 ***\nDESTIN_GRID786   3.0915161  0.1007850    30.674  &lt; 2e-16 ***\nDESTIN_GRID787   3.9409157  0.1008121    39.092  &lt; 2e-16 ***\nDESTIN_GRID788   3.6624266  0.1006917    36.373  &lt; 2e-16 ***\nDESTIN_GRID789   3.7575239  0.1007405    37.299  &lt; 2e-16 ***\nDESTIN_GRID79    0.2890075  0.1312860     2.201 0.027711 *  \nDESTIN_GRID790   2.4643584  0.1008012    24.448  &lt; 2e-16 ***\nDESTIN_GRID791   2.4563573  0.1009552    24.331  &lt; 2e-16 ***\nDESTIN_GRID792   0.7241152  0.1014870     7.135 9.67e-13 ***\nDESTIN_GRID793   1.4153049  0.1041398    13.590  &lt; 2e-16 ***\nDESTIN_GRID794   1.7964100  0.1022933    17.561  &lt; 2e-16 ***\nDESTIN_GRID795   2.6726304  0.1016437    26.294  &lt; 2e-16 ***\nDESTIN_GRID80    2.6608680  0.1021193    26.056  &lt; 2e-16 ***\nDESTIN_GRID803   2.4143221  0.1010214    23.899  &lt; 2e-16 ***\nDESTIN_GRID804   1.1032290  0.1015349    10.866  &lt; 2e-16 ***\nDESTIN_GRID805   2.0845859  0.1014326    20.551  &lt; 2e-16 ***\nDESTIN_GRID806   2.6765801  0.1007667    26.562  &lt; 2e-16 ***\nDESTIN_GRID807   1.8093519  0.1016886    17.793  &lt; 2e-16 ***\nDESTIN_GRID809   2.7059556  0.1007417    26.860  &lt; 2e-16 ***\nDESTIN_GRID81    3.0471549  0.1026062    29.698  &lt; 2e-16 ***\nDESTIN_GRID810   1.1319633  0.1012582    11.179  &lt; 2e-16 ***\nDESTIN_GRID811   2.0656130  0.1010492    20.442  &lt; 2e-16 ***\nDESTIN_GRID812  -0.1179340  0.1055297    -1.118 0.263762    \nDESTIN_GRID813   0.4496360  0.1045056     4.303 1.69e-05 ***\nDESTIN_GRID814   2.5969955  0.1019514    25.473  &lt; 2e-16 ***\nDESTIN_GRID82   -0.8938192  0.7144434    -1.251 0.210909    \nDESTIN_GRID822   2.6925074  0.1012405    26.595  &lt; 2e-16 ***\nDESTIN_GRID823   2.4033975  0.1008302    23.836  &lt; 2e-16 ***\nDESTIN_GRID824   1.3522588  0.1012926    13.350  &lt; 2e-16 ***\nDESTIN_GRID825   3.7546452  0.1007313    37.274  &lt; 2e-16 ***\nDESTIN_GRID826   1.8197154  0.1008991    18.035  &lt; 2e-16 ***\nDESTIN_GRID829   2.1673312  0.1008109    21.499  &lt; 2e-16 ***\nDESTIN_GRID831   3.0231982  0.1008072    29.990  &lt; 2e-16 ***\nDESTIN_GRID832  -0.4701259  0.1077240    -4.364 1.28e-05 ***\nDESTIN_GRID833   1.3033357  0.1017233    12.813  &lt; 2e-16 ***\nDESTIN_GRID840   1.2761836  0.1021299    12.496  &lt; 2e-16 ***\nDESTIN_GRID841   2.0800941  0.1008935    20.617  &lt; 2e-16 ***\nDESTIN_GRID842   3.1523910  0.1007136    31.301  &lt; 2e-16 ***\nDESTIN_GRID843   2.0577785  0.1011657    20.341  &lt; 2e-16 ***\nDESTIN_GRID844   0.6874497  0.1034473     6.645 3.02e-11 ***\nDESTIN_GRID845   2.2646396  0.1009353    22.437  &lt; 2e-16 ***\nDESTIN_GRID846   2.1276069  0.1009295    21.080  &lt; 2e-16 ***\nDESTIN_GRID847   3.8557406  0.1006852    38.295  &lt; 2e-16 ***\nDESTIN_GRID850  -0.8770549  0.1693067    -5.180 2.22e-07 ***\nDESTIN_GRID851   3.7238748  0.1007265    36.970  &lt; 2e-16 ***\nDESTIN_GRID852   0.7272652  0.1024444     7.099 1.26e-12 ***\nDESTIN_GRID859   1.2400105  0.1016586    12.198  &lt; 2e-16 ***\nDESTIN_GRID860   3.2733367  0.1007731    32.482  &lt; 2e-16 ***\nDESTIN_GRID861   3.9312491  0.1006894    39.043  &lt; 2e-16 ***\nDESTIN_GRID862   2.9861460  0.1009318    29.586  &lt; 2e-16 ***\nDESTIN_GRID863   2.4558550  0.1010245    24.310  &lt; 2e-16 ***\nDESTIN_GRID864   0.5838474  0.1019500     5.727 1.02e-08 ***\nDESTIN_GRID865   3.1473168  0.1007421    31.241  &lt; 2e-16 ***\nDESTIN_GRID866   1.6486258  0.1010409    16.316  &lt; 2e-16 ***\nDESTIN_GRID867   1.8017755  0.1010183    17.836  &lt; 2e-16 ***\nDESTIN_GRID869   2.7245829  0.1024821    26.586  &lt; 2e-16 ***\nDESTIN_GRID871   2.1632578  0.1013467    21.345  &lt; 2e-16 ***\nDESTIN_GRID872   4.0123488  0.1007808    39.813  &lt; 2e-16 ***\nDESTIN_GRID878   2.4990773  0.1008743    24.774  &lt; 2e-16 ***\nDESTIN_GRID879   2.8042752  0.1007463    27.835  &lt; 2e-16 ***\nDESTIN_GRID880   2.1330448  0.1008859    21.143  &lt; 2e-16 ***\nDESTIN_GRID882   1.6764408  0.1011554    16.573  &lt; 2e-16 ***\nDESTIN_GRID883   0.6111549  0.1018949     5.998 2.00e-09 ***\nDESTIN_GRID884   1.4017408  0.1012056    13.850  &lt; 2e-16 ***\nDESTIN_GRID885   1.9269830  0.1008507    19.107  &lt; 2e-16 ***\nDESTIN_GRID886   1.3392053  0.1012284    13.230  &lt; 2e-16 ***\nDESTIN_GRID890   1.2829981  0.1012370    12.673  &lt; 2e-16 ***\nDESTIN_GRID891  -5.8545289  1.0050578    -5.825 5.71e-09 ***\nDESTIN_GRID897   2.6153919  0.1008730    25.928  &lt; 2e-16 ***\nDESTIN_GRID898   2.7653118  0.1008090    27.431  &lt; 2e-16 ***\nDESTIN_GRID899   1.6053691  0.1010656    15.884  &lt; 2e-16 ***\nDESTIN_GRID900   1.3406330  0.1013194    13.232  &lt; 2e-16 ***\nDESTIN_GRID901   2.1163130  0.1009213    20.970  &lt; 2e-16 ***\nDESTIN_GRID902   1.3539460  0.1012507    13.372  &lt; 2e-16 ***\nDESTIN_GRID903   2.4635324  0.1015141    24.268  &lt; 2e-16 ***\nDESTIN_GRID904   2.3628332  0.1008174    23.437  &lt; 2e-16 ***\nDESTIN_GRID905   1.3698557  0.1010972    13.550  &lt; 2e-16 ***\nDESTIN_GRID907   2.0781325  0.1019053    20.393  &lt; 2e-16 ***\nDESTIN_GRID909   3.6548015  0.1007085    36.291  &lt; 2e-16 ***\nDESTIN_GRID910   2.5791980  0.1007616    25.597  &lt; 2e-16 ***\nDESTIN_GRID915   2.3084585  0.1013429    22.779  &lt; 2e-16 ***\nDESTIN_GRID916   3.7478849  0.1008619    37.159  &lt; 2e-16 ***\nDESTIN_GRID917   2.8435266  0.1008870    28.185  &lt; 2e-16 ***\nDESTIN_GRID918   0.8796621  0.1018701     8.635  &lt; 2e-16 ***\nDESTIN_GRID919   3.3375338  0.1007558    33.125  &lt; 2e-16 ***\nDESTIN_GRID920   3.4895056  0.1007249    34.644  &lt; 2e-16 ***\nDESTIN_GRID922   1.5231853  0.1013790    15.025  &lt; 2e-16 ***\nDESTIN_GRID923   2.1329346  0.1008337    21.153  &lt; 2e-16 ***\nDESTIN_GRID927   1.4647538  0.1014934    14.432  &lt; 2e-16 ***\nDESTIN_GRID928   2.5213655  0.1008418    25.003  &lt; 2e-16 ***\nDESTIN_GRID929  -1.6143605  0.1287985   -12.534  &lt; 2e-16 ***\nDESTIN_GRID935   3.0268083  0.1008265    30.020  &lt; 2e-16 ***\nDESTIN_GRID936   3.2678357  0.1007604    32.432  &lt; 2e-16 ***\nDESTIN_GRID937   3.1436396  0.1007672    31.197  &lt; 2e-16 ***\nDESTIN_GRID938   3.4120851  0.1007506    33.867  &lt; 2e-16 ***\nDESTIN_GRID939   2.2187806  0.1008359    22.004  &lt; 2e-16 ***\nDESTIN_GRID945   2.7672188  0.1012107    27.341  &lt; 2e-16 ***\nDESTIN_GRID947   2.3457654  0.1008089    23.269  &lt; 2e-16 ***\nDESTIN_GRID948   2.8513183  0.1008214    28.281  &lt; 2e-16 ***\nDESTIN_GRID953   3.3448431  0.1007632    33.195  &lt; 2e-16 ***\nDESTIN_GRID954   3.2959764  0.1007704    32.708  &lt; 2e-16 ***\nDESTIN_GRID955   1.9797445  0.1009796    19.605  &lt; 2e-16 ***\nDESTIN_GRID956   1.6903104  0.1012179    16.700  &lt; 2e-16 ***\nDESTIN_GRID964  -0.4257206  0.1307010    -3.257 0.001125 ** \nDESTIN_GRID966   3.4781510  0.1007407    34.526  &lt; 2e-16 ***\nDESTIN_GRID967   3.0863850  0.1008912    30.591  &lt; 2e-16 ***\nDESTIN_GRID972   1.3026531  0.1014983    12.834  &lt; 2e-16 ***\nDESTIN_GRID973   3.2522183  0.1007990    32.264  &lt; 2e-16 ***\nDESTIN_GRID974   2.4800651  0.1008879    24.582  &lt; 2e-16 ***\nDESTIN_GRID975   1.9328028  0.1010847    19.121  &lt; 2e-16 ***\nDESTIN_GRID977   2.4669461  0.1008172    24.469  &lt; 2e-16 ***\nDESTIN_GRID983   0.7252175  0.1122502     6.461 1.04e-10 ***\nDESTIN_GRID985   2.7964096  0.1008156    27.738  &lt; 2e-16 ***\nDESTIN_GRID986   3.3310037  0.1007948    33.047  &lt; 2e-16 ***\nDESTIN_GRID99    2.4100767  0.1034371    23.300  &lt; 2e-16 ***\nDESTIN_GRID990  -0.3936978  0.1120268    -3.514 0.000441 ***\nDESTIN_GRID991   2.8845906  0.1016169    28.387  &lt; 2e-16 ***\nDESTIN_GRID992   3.3300653  0.1015413    32.795  &lt; 2e-16 ***\nDESTIN_GRID993   3.3133191  0.1007292    32.893  &lt; 2e-16 ***\nDESTIN_GRID994   0.7807762  0.1028899     7.588 3.24e-14 ***\nDESTIN_GRID995   1.8281476  0.1009555    18.108  &lt; 2e-16 ***\nlog(dist)       -0.8431581  0.0001482 -5688.105  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 103154058  on 65520  degrees of freedom\nResidual deviance:  38627738  on 63889  degrees of freedom\nAIC: 38993049\n\nNumber of Fisher Scoring iterations: 8\n\n\nSimilar to the other three models, the number of trips is most negatively correlated to distance (i.e., the greater the distance between origin and destination, the lower the number of trips), with a coefficient of -0.8431581.\nThe R-squared values are calculated to measure how much variation of the trips can be accounted for by the doubly constrained SIM.\n\nCalcRSquared(dbcSIM$data$TRIPS, dbcSIM$fitted.values)\n\n[1] 0.2167286\n\nr2_kullback(dbcSIM)\n\nKullback-Leibler R2 \n          0.6159739 \n\nr2_mcfadden(dbcSIM)\n\n# R2 for Generalized Linear Regression\n       R2: 0.623\n  adj. R2: 0.623\n\n\nBased on the outcome from the cor() function in the R stats package, the R2 is 0.2167286. This means that about 20.3% of the variation in the number of trips can be accounted for by the doubly constrained SIM.\nBased on the performance package, the R-squared values for generalised linear models are computed using the r2_kullback() and r2_mcfadden() functions. The results are 0.6159739 and 0.623 respectively, i.e., that about 61.6% or 62.3% of the variation in the number of trips can be accounted for by the doubly constrained SIM.\nCompared to the three other models, the doubly constrained SIM has improved R-squared values, meaning that it is the best model.\n\n\n7.7 Model Comparison\nAnother useful model performance measure for continuous dependent variable is the Root Mean Squared Error (RMSE). The compare_performance() in the performance package is used to compare the different models.\nA list called models is created to hold the four models.\n\nmodels = list(unconstrained = uncSIM,\n              originConstrained = orcSIM,\n              destinationConstrained = decSIM,\n              doublyConstrained = dbcSIM)\n\nThe RMSE of the models are computed using the compare_performance() function in the performance package. Based on the RMSE, the doubly constrained SIM is the best model among the four SIMs because it has the smallest RMSE value of 1809.986. This corresponds to the earlier observations that the doubly constrained SIM is the best model out of the four models based on the R-squared values.\n\ncompare_performance(models,                     \n                    metrics = \"RMSE\")\n\n# Comparison of Model Performance Indices\n\nName                   | Model |     RMSE\n-----------------------------------------\nunconstrained          |   glm | 1829.126\noriginConstrained      |   glm | 1833.711\ndestinationConstrained |   glm | 1817.950\ndoublyConstrained      |   glm | 1809.986\n\n\n\n\n7.8 Visualising Fitted Values Versus Observed Values\nThe observed values and the fitted values for the four models are visualised below.\nThe fitted values are extracted using the as.data.frame() function in the R base package.\n\ndf_uncSIM = as.data.frame(uncSIM$fitted.values) %&gt;%   \n  round(digits = 0)\n\ndf_orcSIM = as.data.frame(orcSIM$fitted.values) %&gt;%   \n  round(digits = 0)\n\ndf_decSIM = as.data.frame(decSIM$fitted.values) %&gt;%   \n  round(digits = 0)\n\ndf_dbcSIM = as.data.frame(dbcSIM$fitted.values) %&gt;%   \n  round(digits = 0)\n\nThe fitted values are then added to the SIM data frame.\n\nSIM_vis = SIM %&gt;%\n  cbind(df_uncSIM) %&gt;%\n  rename(uncTRIPS = \"uncSIM$fitted.values\")%&gt;%\n  cbind(df_orcSIM) %&gt;%\n  rename(orcTRIPS = \"orcSIM$fitted.values\")%&gt;%\n  cbind(df_decSIM) %&gt;%\n  rename(decTRIPS = \"decSIM$fitted.values\")%&gt;%\n  cbind(df_dbcSIM) %&gt;%\n  rename(dbcTRIPS = \"dbcSIM$fitted.values\")\n\nThe plots are then visualised using functions in the ggplot2 package.\n\nunc_p = ggplot(data = SIM_vis,\n                aes(x = uncTRIPS,\n                    y = TRIPS)) +\n  xlim(0, 75000) +\n  ylim(0, 75000) +\n  geom_point() +\n  geom_smooth(method = lm)\n\norc_p = ggplot(data = SIM_vis,\n                aes(x = orcTRIPS,\n                    y = TRIPS)) +\n  xlim(0, 75000) +\n  ylim(0, 75000) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndec_p = ggplot(data = SIM_vis,\n                aes(x = decTRIPS,\n                    y = TRIPS)) +\n  xlim(0, 75000) +\n  ylim(0, 75000) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndbc_p = ggplot(data = SIM_vis,\n                aes(x = dbcTRIPS,\n                    y = TRIPS)) +\n  xlim(0, 75000) +\n  ylim(0, 75000) +\n  geom_point() +\n  geom_smooth(method = lm)\n\nggarrange(unc_p, orc_p, dec_p, dbc_p,\n          ncol = 2,\n          nrow = 2)\n\n\n\n\nWhen log transformation is applied to the observed and fitted values, the visualisations below show a clear positive linear relationship between the two set of log-transformed values for all four models.\n\nunc_p = ggplot(data = SIM_vis,\n                aes(x = log(uncTRIPS),\n                    y = log(TRIPS))) +\n  xlim(0, 12) +\n  ylim(0, 12) +\n  geom_point() +\n  geom_smooth(method = lm)\n\norc_p = ggplot(data = SIM_vis,\n                aes(x = log(orcTRIPS),\n                    y = log(TRIPS))) +\n  xlim(0, 12) +\n  ylim(0, 12) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndec_p = ggplot(data = SIM_vis,\n                aes(x = log(decTRIPS),\n                    y = log(TRIPS))) +\n  xlim(0, 12) +\n  ylim(0, 12) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndbc_p = ggplot(data = SIM_vis,\n                aes(x = log(dbcTRIPS),\n                    y = log(TRIPS))) +\n  xlim(0, 12) +\n  ylim(0, 12) +\n  geom_point() +\n  geom_smooth(method = lm)\n\nggarrange(unc_p, orc_p, dec_p, dbc_p,\n          ncol = 2,\n          nrow = 2)\n\n\n\n\nTo consider how the four models perform at different distances, the log-transformed ratio of the fitted values to the observed values are also plotted against the distance of the flows. Based on the visualisations below, in general, the fitted values perform better over shorter distances and perform worse over longer distances for all four models.\n\nunc_p = ggplot(data = SIM_vis,\n                aes(x = dist,\n                    y = log(uncTRIPS/TRIPS))) +\n  geom_point() +\n  geom_smooth(method = lm)\n\norc_p = ggplot(data = SIM_vis,\n                aes(x = dist,\n                    y = log(orcTRIPS/TRIPS))) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndec_p = ggplot(data = SIM_vis,\n                aes(x = dist,\n                    y = log(decTRIPS/TRIPS))) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndbc_p = ggplot(data = SIM_vis,\n                aes(x = dist,\n                    y = log(dbcTRIPS/TRIPS))) +\n  geom_point() +\n  geom_smooth(method = lm)\n\nggarrange(unc_p, orc_p, dec_p, dbc_p,\n          ncol = 2,\n          nrow = 2)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#conclusion",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#conclusion",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models: A Case Study of Singapore Public Bus Commuter Flows",
    "section": "8 Conclusion",
    "text": "8 Conclusion\nOverall, the objectives of this take-home exercise has been fulfilled by showing how a variety of publicly available data can be integrated, analysed, and modelled to support policy making using the case study of bus commuter flows. In addition, the application of techniques in geospatial data science and analysis (GDSA) has demonstrated the potential value of GDSA in integrating publicly available data from multiple sources for building spatial interaction models to determine the factors affecting urban mobility patterns of public bus commuters.\nBased on the outcome above, it can be seen that distance is a major factor affecting the number of bus trips in the morning peak hour period. However, as the distance is based on Euclidean distances between the analytical hexagons in the grid, it may be limited given that it may not accurately reflect the actual commuting distances. Hence, a possible area for further studies could be to incorporate commuting distances in the modelling.\nThe number of MRT/LRT exits also emerged as an important attractiveness variable for modelling the number of bus trips in the morning peak hour period. This reflects the importance of the MRT system in the morning peak hour period commute.\nAnother limitation of the outcomes above is that the role of the neighbouring hexagons of each hexagon was not included in the analysis. Hence, spatial econometric interaction modelling is another possible area for further studies.\n~~~ End of Take-home Exercise 2 ~~~"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/data/geospatial/Retails.html",
    "href": "Take-home_Ex/Take-home_Ex2/data/geospatial/Retails.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/data/geospatial/Liesure&Recreation.html",
    "href": "Take-home_Ex/Take-home_Ex2/data/geospatial/Liesure&Recreation.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/data/geospatial/F&B.html",
    "href": "Take-home_Ex/Take-home_Ex2/data/geospatial/F&B.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/data/geospatial/Business.html",
    "href": "Take-home_Ex/Take-home_Ex2/data/geospatial/Business.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624: Applied Geospatial Analytics",
    "section": "",
    "text": "Welcome to ISSS624 Applied Geospatial Analytics!\nIn this webpage, I am going to share my geospatial analytics learning journey.\n\n\n\n\n\nCredit: VectorStock"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/data/geospatial/Retails.html",
    "href": "In-class_Ex/In-class_Ex5/data/geospatial/Retails.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/data/geospatial/Liesure&Recreation.html",
    "href": "In-class_Ex/In-class_Ex5/data/geospatial/Liesure&Recreation.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/data/geospatial/F&B.html",
    "href": "In-class_Ex/In-class_Ex5/data/geospatial/F&B.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/data/geospatial/Business.html",
    "href": "In-class_Ex/In-class_Ex5/data/geospatial/Business.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/data/geospatial/Retails.html",
    "href": "In-class_Ex/In-class_Ex4/data/geospatial/Retails.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/data/geospatial/Liesure&Recreation.html",
    "href": "In-class_Ex/In-class_Ex4/data/geospatial/Liesure&Recreation.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/data/geospatial/F&B.html",
    "href": "In-class_Ex/In-class_Ex4/data/geospatial/F&B.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/data/geospatial/Business.html",
    "href": "In-class_Ex/In-class_Ex4/data/geospatial/Business.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex3/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Science",
    "section": "",
    "text": "Student Note: Delayed upload due to issues in linkage between R Studio and Github."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#task",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#task",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Science",
    "section": "1 Task",
    "text": "1 Task\nIn this in-class exercise, I prepared a choropleth map showing the distribution of passenger trips at planning subzone by integrating Passenger Volume by Origin Destination Bus Stops and bus stop data sets downloaded from the LTA DataMall and Planning Subzone boundary of the URA Master Plan 2019 downloaded from data.gov.sg.\nThe specific tasks are:\n\nImport Passenger Volume by Origin Destination Bus Stops data set downloaded from the LTA DataMall;\nImport geospatial data in ESRI shapefile format into sf data frame format;\nPerform data wrangling by using appropriate functions from tidyverse and sf packages; and\nVisualise the distribution of passenger trips by using tmap methods and functions."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#getting-started",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#getting-started",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Science",
    "section": "2 Getting Started",
    "text": "2 Getting Started\nThe code chunk below loads the following packages:\n\ntmap for thematic mapping;\nsf for geospatial data handling;\ntidyverse for non-spatial data handling; and\nknitr for creating html table.\n\n\npacman::p_load(tmap, sf, tidyverse, knitr)\n\nStudent Note: This allowed for loading of multiple packages in one line of code (and installation if not already installed). Also, by calling pacman via “pacman::”, it means that we are calling it dynamically, without having it installed in R Studio."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#preparing-the-flow-data",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#preparing-the-flow-data",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Science",
    "section": "3 Preparing the Flow Data",
    "text": "3 Preparing the Flow Data\n\n3.1 Importing the Origin-Destination Data\nThe Passenger Volume by Origin Destination Bus Stops dataset is downloaded from LTA DataMall and then imported by using read_csv() of readr package.\n\nodbus = read_csv(\"data/aspatial/origin_destination_bus_202308.csv\")\n\nStudent Note: There are 5,709,512 rows and 7 columns. Also, the “ORIGIN_PT_CODE” and “DESTINATON_PT_CODE” are numeric data type.\n\nglimpse(odbus)\n\nRows: 5,709,512\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-08\", \"2023-08\", \"2023-08\", \"2023-08\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKDAY\", \"WEEKENDS/HOLIDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 17, 7, 17, 14, 10, 10,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"4406…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"1722…\n$ TOTAL_TRIPS         &lt;dbl&gt; 7, 2, 3, 10, 5, 4, 3, 22, 3, 3, 7, 1, 3, 1, 3, 1, …\n\n\nThe following code chunk changes the bus stop fields from the numerical data type to the factor data type.\n\nodbus$ORIGIN_PT_CODE = as.factor(odbus$ORIGIN_PT_CODE)\n\nodbus$DESTINATION_PT_CODE = as.factor(odbus$DESTINATION_PT_CODE)\n\n\nglimpse(odbus)\n\nRows: 5,709,512\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-08\", \"2023-08\", \"2023-08\", \"2023-08\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKDAY\", \"WEEKENDS/HOLIDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 17, 7, 17, 14, 10, 10,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 44069, 20281, 2…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 17229, 20141, 2…\n$ TOTAL_TRIPS         &lt;dbl&gt; 7, 2, 3, 10, 5, 4, 3, 22, 3, 3, 7, 1, 3, 1, 3, 1, …\n\n\n\n\n3.2 Extracting the Study Data\nThe filter() (under dplyr package) is applied to extract the data for weekday 7:00-9:59am.\n\norigin7_9 = odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 7 & TIME_PER_HOUR &lt;=9) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\n\nkable(head(origin7_9))\n\n\n\n\nORIGIN_PT_CODE\nTRIPS\n\n\n\n\n01012\n1617\n\n\n01013\n813\n\n\n01019\n1620\n\n\n01029\n2383\n\n\n01039\n2727\n\n\n01059\n1415\n\n\n\n\n\nThe output is then saved in rds format for future use.\n\nwrite_rds(origin7_9, \"data/rds/origin7_9.rds\")\n\nIt can be improted using read_rds() (under readr package).\n\norigin7_9 = read_rds(\"data/rds/origin7_9.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#importing-geospatial-data",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#importing-geospatial-data",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Science",
    "section": "4 Importing Geospatial Data",
    "text": "4 Importing Geospatial Data\nIn this section, two shapefiles are imported:\n\nBusStop: This data provides the location of bus stop as at last quarter of 2022.\nMPSZ-2019: This data provides the subzone boundary of URA Master Plan 2019.\n\nBoth datasets are imported as sf data frames, busstop and mpsz, using st_read() (under sf package). The projection was changed to crs 3414.\nStudent Note: The busstop sf tibble data frame has 5,161 rows and 4 columns, which includes the points indicating the bus stop locations.\n\nbusstop = st_read(dsn = \"data/geospatial\",\n                  layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `C:\\jmphosis\\ISSS624\\In-class_Ex\\In-class_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\nglimpse(busstop)\n\nRows: 5,161\nColumns: 4\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\nStudent Note: The mpsz sf tibble data frame has 332 rows and 7 columns, which includes the polygons of the subzones.\n\nmpsz = st_read(dsn = \"data/geospatial\",\n               layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\jmphosis\\ISSS624\\In-class_Ex\\In-class_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nglimpse(mpsz)\n\nRows: 332\nColumns: 7\n$ SUBZONE_N  &lt;chr&gt; \"MARINA EAST\", \"INSTITUTION HILL\", \"ROBERTSON QUAY\", \"JURON…\n$ SUBZONE_C  &lt;chr&gt; \"MESZ01\", \"RVSZ05\", \"SRSZ01\", \"WISZ01\", \"MUSZ02\", \"MPSZ05\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA EAST\", \"RIVER VALLEY\", \"SINGAPORE RIVER\", \"WESTERN …\n$ PLN_AREA_C &lt;chr&gt; \"ME\", \"RV\", \"SR\", \"WI\", \"MU\", \"MP\", \"WI\", \"WI\", \"SI\", \"SI\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"WEST…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"WR\", \"CR\", \"CR\", \"WR\", \"WR\", \"CR\", \"CR\",…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((33222.98 29..., MULTIPOLYGON (…"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#geospatial-data-wrangling---combining-busstop-and-mpsz",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#geospatial-data-wrangling---combining-busstop-and-mpsz",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Science",
    "section": "5 Geospatial Data Wrangling - Combining Busstop and mpsz",
    "text": "5 Geospatial Data Wrangling - Combining Busstop and mpsz\nThe planning subzone code (i.e., “SUBZONE_C”) of mpsz sf data frame was added to the busstop sf data frame using st_intersection() and st_drop_geometry() (both under sf package), and select() (under dplyr package).\nNote:\n\nst_intersection() is used to perform point and polygon overlay and the output is a point sf object.\nselect() is then use to retain only “BUS_STOP_N” and “SUBZONE_C” in the busstop_mpsz sf data frame.\nFive bus stops are excluded in the resultant data frame because they are outside of Singapore boundary.\n\n\nbusstop_mpsz = st_intersection(busstop, mpsz) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\nThe output is then saved in rds format.\n\nwrite_rds(busstop_mpsz, \"data/rds/busstop_mpsz.csv\")\n\nMoving on, the planning subzone code from busstop_mpsz data frame is appended to odbus7_9 data frame. The combined data frame is origin_data.\n\norigin_data = left_join(origin7_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C) %&gt;%\n  group_by(ORIGIN_SZ) %&gt;%\n  summarise(TOT_TRIPS = sum(TRIPS))\n\nA check for duplicate records is done, which found 26, and only unique records are retained.\n\nduplicate = origin_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nduplicate\n\n# A tibble: 0 × 2\n# ℹ 2 variables: ORIGIN_SZ &lt;chr&gt;, TOT_TRIPS &lt;dbl&gt;\n\n\n\norigin_data = unique(origin_data)\n\n\nduplicate = origin_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nduplicate\n\n# A tibble: 0 × 2\n# ℹ 2 variables: ORIGIN_SZ &lt;chr&gt;, TOT_TRIPS &lt;dbl&gt;\n\n\nThe origin_data data frame is then updated with the planning subzone codes.\n\nmpsz_origtrip = left_join(mpsz, \n                           origin_data,\n                           by = c(\"SUBZONE_C\" = \"ORIGIN_SZ\"))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#visualising-the-geospatial-data-using-choropleth",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#visualising-the-geospatial-data-using-choropleth",
    "title": "In-class Exercise 1: My First Date with Geospatial Data Science",
    "section": "6 Visualising the Geospatial Data Using Choropleth",
    "text": "6 Visualising the Geospatial Data Using Choropleth\nA choropleth map is then used to show the distribution of passenger trips at planning subzone level.\n\ntm_shape(mpsz_origtrip)+\n  tm_fill(\"TOT_TRIPS\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Passenger trips\") +\n  tm_layout(main.title = \"Passenger trips generated at planning subzone level\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Subzone boundary from URA\\n and Passenger trips data from LTA\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n~~~ End of In-class Exercise 1 ~~~"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/data/geospatial/MPSZ-2019/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex1/data/geospatial/MPSZ-2019/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "Spatial interaction represent the flow of people, material, or information between locations in geographical space.\nEach spatial interaction, as an analogy for a set of movements, is composed of a discrete origin-destination pair. Each pair can be represented as a cell in a matrix where rows are related to the locations (centroids) of origin, while columns are related to locations (centroids) of destination. Such a matrix is commonly known as an origin-destination matrix, or a spatial interaction matrix.\nIn this page, I show how I had completed the Hands-on Exercise 3 on building an Origin-Destination (OD) matrix by using the Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall.\nThe objectives are:\n\nImport and extract OD data for a selected time interval;\nImport and save geospatial data (i.e. Bus Stop Location and Master Plan Subzone Boundary) into sf tibble data frame objects;\nPopulate planning subzone code into bus stops sf tibble data frame;\nConstruct desire lines geospatial data from the OD data; and\nVisualise passenger volume by origin and destination bus stops by using the desire lines data.\n\n\n\n\nThe R packages used in this hands-on exercise are:\n\nsf for importing, managing, and processing geospatial data;\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data;\ntmap for thematic mapping;\nDT a wrapper of the JavaScript Library ‘DataTables’ for creating interactive and dynamic data tables;\nstplanr for working with spatial data related to transportation and urban planning;\nperformance for the assessment of regression models performance; and\nggpubr for creating customised and annotated ggplot2 plots for better visualisation.\n\n\npacman::p_load(tmap, sf, DT, stplanr,\n               performance,\n               ggpubr, tidyverse)\n\n\n\n\n\n\nFirstly, we will import the Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall by using read_csv() of readr package.\n\nodbus = read_csv(\"data/aspatial/origin_destination_bus_202310.csv\")\n\nglimpse(odbus)\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"2028…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"2014…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\nThe values in “ORIGIN_PT_CODE” and “DESTINATON_PT_CODE” are in character data type. Hence, they are converted into factor data type.\n\nodbus$ORIGIN_PT_CODE = as.factor(odbus$ORIGIN_PT_CODE)\n\nodbus$DESTINATION_PT_CODE = as.factor(odbus$DESTINATION_PT_CODE) \n\n\n\n\nThe commuting flows on weekdays between 6am and 9am are extracted.\n\nodbus6_9 = odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE,\n           DESTINATION_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\ndatatable(odbus6_9)\n\n\n\n\n\n\nThe output is saved in rds format. The rds file is then imported into the R environment.\n\nwrite_rds(odbus6_9, \"data/rds/odbus6_9.rds\")\n\nodbus6_9 = read_rds(\"data/rds/odbus6_9.rds\")\n\n\n\n\n\nThe two geospatial data sets used in this hands-on exercise are:\n\nBusStop: This data provides the locations of bus stops as at July 2023.\nMPSZ-2019: This data provides the sub-zone boundary of URA Master Plan 2019.\n\nBoth data sets are in the ESRI shapefile format.\nThey are imported and transformed using the st_read() and st_transform() functions in the sf package. The outputs are the busstop and mpsz sf data frames.\n\nbusstop = st_read(dsn = \"data/geospatial\",\n                   layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `C:\\jmphosis\\ISSS624\\Hands-on_Ex\\Hands-on_Ex3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\nmpsz = st_read(dsn = \"data/geospatial\",\n                   layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\jmphosis\\ISSS624\\Hands-on_Ex\\Hands-on_Ex3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\nmpsz\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26...\n\n\nThe mpsz sf tibble data frame is then written into an rds file for future use.\n\nmpsz = write_rds(mpsz, \"data/rds/mpsz.rds\")\n\n\n\n\nThe planning subzone codes (i.e., “SUBZONE_C”) of the mpsz sf data frame are populated into the busstop sf data frame using st_intersection() function in the sf package (for point and polygon overlay, with point sf object as output). The select() function in the dplyr package is then used to retain only the “BUS_STOP_N” and “SUBZON_C” columns in the combined sf data frame. Five bus stops are excluded in the combined sf data frame because they are outside the Singapore boundary.\n\nStudent Note:\n\nThe output of the st_intersection() function contains the geometry spatial objects that intersect between busstop and mpsz. Since one contains points, and the other contains polygons, the output will contain points (as the points are the common overlapping spatial objects).\nThe st_drop_geometry() function is used to remove the geometry column from the combined sf data frame. The output is a regular data frame with only information of attributes.\n\n\n\nbusstop_mpsz = st_intersection(busstop, mpsz) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\ndatatable(busstop_mpsz)\n\n\n\n\n\n\nAgain, the output is saved in rds format.\n\nwrite_rds(busstop_mpsz, \"data/rds/busstop_mpsz.rds\")\n\nNext, the planning subzone codes from the busstop_mpsz are appended to the odbus6_9 data frame’s origin bus stops.\n\nod_data = left_join(odbus6_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C,\n         DESTIN_BS = DESTINATION_PT_CODE)\n\nA check for duplicates is then conducted. Since 1,186 records are found to be duplicates, they are removed and a confirmatory check is conducted.\n\nduplicate1 = od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nduplicate1\n\n# A tibble: 1,186 × 4\n   ORIGIN_BS DESTIN_BS TRIPS ORIGIN_SZ\n   &lt;chr&gt;     &lt;fct&gt;     &lt;dbl&gt; &lt;chr&gt;    \n 1 11009     01341         1 QTSZ01   \n 2 11009     01341         1 QTSZ01   \n 3 11009     01411         4 QTSZ01   \n 4 11009     01411         4 QTSZ01   \n 5 11009     01421        17 QTSZ01   \n 6 11009     01421        17 QTSZ01   \n 7 11009     01511        19 QTSZ01   \n 8 11009     01511        19 QTSZ01   \n 9 11009     01521         2 QTSZ01   \n10 11009     01521         2 QTSZ01   \n# ℹ 1,176 more rows\n\n\n\nod_data = unique(od_data)\n\nduplicate2 = od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nduplicate2\n\n# A tibble: 0 × 4\n# ℹ 4 variables: ORIGIN_BS &lt;chr&gt;, DESTIN_BS &lt;fct&gt;, TRIPS &lt;dbl&gt;, ORIGIN_SZ &lt;chr&gt;\n\n\nFinally, the planning subzone codes from the busstop_mpsz are appended to the odbus6_9 data frame’s destination bus stops.\n\nod_data = left_join(od_data , busstop_mpsz,\n            by = c(\"DESTIN_BS\" = \"BUS_STOP_N\")) \n\nAnother check for duplicates is then conducted. Since 1,350 records are found to be duplicates, they are removed and a confirmatory check is conducted.\n\nduplicate3 = od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nduplicate3\n\n# A tibble: 1,350 × 5\n   ORIGIN_BS DESTIN_BS TRIPS ORIGIN_SZ SUBZONE_C\n   &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;    \n 1 01013     51071         2 RCSZ10    CCSZ01   \n 2 01013     51071         2 RCSZ10    CCSZ01   \n 3 01112     51071        66 RCSZ10    CCSZ01   \n 4 01112     51071        66 RCSZ10    CCSZ01   \n 5 01112     53041         4 RCSZ10    BSSZ01   \n 6 01112     53041         4 RCSZ10    BSSZ01   \n 7 01121     51071         8 RCSZ04    CCSZ01   \n 8 01121     51071         8 RCSZ04    CCSZ01   \n 9 01121     82221         1 RCSZ04    GLSZ05   \n10 01121     82221         1 RCSZ04    GLSZ05   \n# ℹ 1,340 more rows\n\n\n\nod_data = unique(od_data)\n\nduplicate4 = od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nduplicate4\n\n# A tibble: 0 × 5\n# ℹ 5 variables: ORIGIN_BS &lt;chr&gt;, DESTIN_BS &lt;chr&gt;, TRIPS &lt;dbl&gt;,\n#   ORIGIN_SZ &lt;chr&gt;, SUBZONE_C &lt;chr&gt;\n\n\nThe data frame is then tidied up, saved in rds file format, and imported into the R environment.\n\nod_data = od_data %&gt;%\n  rename(DESTIN_SZ = SUBZONE_C) %&gt;%\n  drop_na() %&gt;%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %&gt;%\n  summarise(MORNING_PEAK = sum(TRIPS))\n\n\nwrite_rds(od_data, \"data/rds/od_data.rds\")\n\nod_data = read_rds(\"data/rds/od_data.rds\")\n\n\n\n\n\n\nThe intra-zonal flows are removed since they will not be plotted.\n\nod_data1 = od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]\n\n\n\n\nThe od2line() function in the stplanr package is used to create the desire lines.\n\nStudent Note:\n\nThe od2line() function is specifically used to convert OD flow data into lines, typically referred to as desire lines. Desire lines represent the flow of movement between different zones or locations.\nThe “flow” argument represents the OD flow data. It could be a data frame or a matrix containing information about the number of trips (flow) between pairs of zones or locations.\nThe “zone” argument represents the spatial information of the zones. It is usually a spatial dataset (e.g., points, polygons) that defines the zones involved in the OD flow.\nThe “zone_code” argument specifies the column in the zone data set that contains the zone or location codes.\nThe output is a sf data frames, representing the desire lines - stored as linestrings under geometry.\n\n\n\nflowLine = od2line(flow = od_data1, \n                    zones = mpsz,\n                    zone_code = \"SUBZONE_C\")\n\n\n\n\nThe desire lines are visualised using functions in the tmap package.\n\nThe “lwd” argument means that the values in the “MORNING_PEAK” column are used to determine the line width.\nThe “scale” argument serve as thresholds that define the ranges of quantiles (six in total, corresponding to “n” argument). The first and last values mean:\n\n0.1: Lines with values up to 0.1 (10% quantile).\n10: Lines with values between 7 and 10 (90-100% quantile).\n\n\n\ntm_shape(mpsz) +\n  tm_polygons() +\nflowLine %&gt;%  \ntm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3)\n\n\n\n\nWhen the flow data are very messy and highly skewed like the one shown above, it is wiser to focus on selected flows, for example flow greater than or equal to 5,000 as shown below.\n\ntm_shape(mpsz) +\n  tm_polygons() +\nflowLine %&gt;%  \n  filter(MORNING_PEAK &gt;= 5000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3)\n\n\n\n\n\nStudent Note: The desire lines above show a rather unexpected observation for the morning peak period for weekdays - the most movement happens between the east (Changi Airport and Tampines) and the north (Woodlands Checkpoint) rather than heartlands to central Singapore (CBD). This indicates that there are commuters who enter Singapore through the Woodlands Checkpoint and head to Changi Airport for a flight out, or the reverse, commuters land in Changi Airport and head to the Woodlands Checkpoint to enter Malaysia.\n\n~~~ End of Hands-on Exercise 3 ~~~"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#overview",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "Spatial interaction represent the flow of people, material, or information between locations in geographical space.\nEach spatial interaction, as an analogy for a set of movements, is composed of a discrete origin-destination pair. Each pair can be represented as a cell in a matrix where rows are related to the locations (centroids) of origin, while columns are related to locations (centroids) of destination. Such a matrix is commonly known as an origin-destination matrix, or a spatial interaction matrix.\nIn this page, I show how I had completed the Hands-on Exercise 3 on building an Origin-Destination (OD) matrix by using the Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall.\nThe objectives are:\n\nImport and extract OD data for a selected time interval;\nImport and save geospatial data (i.e. Bus Stop Location and Master Plan Subzone Boundary) into sf tibble data frame objects;\nPopulate planning subzone code into bus stops sf tibble data frame;\nConstruct desire lines geospatial data from the OD data; and\nVisualise passenger volume by origin and destination bus stops by using the desire lines data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#getting-started",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "The R packages used in this hands-on exercise are:\n\nsf for importing, managing, and processing geospatial data;\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data;\ntmap for thematic mapping;\nDT a wrapper of the JavaScript Library ‘DataTables’ for creating interactive and dynamic data tables;\nstplanr for working with spatial data related to transportation and urban planning;\nperformance for the assessment of regression models performance; and\nggpubr for creating customised and annotated ggplot2 plots for better visualisation.\n\n\npacman::p_load(tmap, sf, DT, stplanr,\n               performance,\n               ggpubr, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#preparing-the-flow-data",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#preparing-the-flow-data",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "Firstly, we will import the Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall by using read_csv() of readr package.\n\nodbus = read_csv(\"data/aspatial/origin_destination_bus_202310.csv\")\n\nglimpse(odbus)\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"2028…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"2014…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\nThe values in “ORIGIN_PT_CODE” and “DESTINATON_PT_CODE” are in character data type. Hence, they are converted into factor data type.\n\nodbus$ORIGIN_PT_CODE = as.factor(odbus$ORIGIN_PT_CODE)\n\nodbus$DESTINATION_PT_CODE = as.factor(odbus$DESTINATION_PT_CODE) \n\n\n\n\nThe commuting flows on weekdays between 6am and 9am are extracted.\n\nodbus6_9 = odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE,\n           DESTINATION_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\ndatatable(odbus6_9)\n\n\n\n\n\n\nThe output is saved in rds format. The rds file is then imported into the R environment.\n\nwrite_rds(odbus6_9, \"data/rds/odbus6_9.rds\")\n\nodbus6_9 = read_rds(\"data/rds/odbus6_9.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#importing-the-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#importing-the-geospatial-data",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "The two geospatial data sets used in this hands-on exercise are:\n\nBusStop: This data provides the locations of bus stops as at July 2023.\nMPSZ-2019: This data provides the sub-zone boundary of URA Master Plan 2019.\n\nBoth data sets are in the ESRI shapefile format.\nThey are imported and transformed using the st_read() and st_transform() functions in the sf package. The outputs are the busstop and mpsz sf data frames.\n\nbusstop = st_read(dsn = \"data/geospatial\",\n                   layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `C:\\jmphosis\\ISSS624\\Hands-on_Ex\\Hands-on_Ex3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\nmpsz = st_read(dsn = \"data/geospatial\",\n                   layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\jmphosis\\ISSS624\\Hands-on_Ex\\Hands-on_Ex3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\nmpsz\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26...\n\n\nThe mpsz sf tibble data frame is then written into an rds file for future use.\n\nmpsz = write_rds(mpsz, \"data/rds/mpsz.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#data-wrangling---combining-aspatial-and-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#data-wrangling---combining-aspatial-and-geospatial-data",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "The planning subzone codes (i.e., “SUBZONE_C”) of the mpsz sf data frame are populated into the busstop sf data frame using st_intersection() function in the sf package (for point and polygon overlay, with point sf object as output). The select() function in the dplyr package is then used to retain only the “BUS_STOP_N” and “SUBZON_C” columns in the combined sf data frame. Five bus stops are excluded in the combined sf data frame because they are outside the Singapore boundary.\n\nStudent Note:\n\nThe output of the st_intersection() function contains the geometry spatial objects that intersect between busstop and mpsz. Since one contains points, and the other contains polygons, the output will contain points (as the points are the common overlapping spatial objects).\nThe st_drop_geometry() function is used to remove the geometry column from the combined sf data frame. The output is a regular data frame with only information of attributes.\n\n\n\nbusstop_mpsz = st_intersection(busstop, mpsz) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\ndatatable(busstop_mpsz)\n\n\n\n\n\n\nAgain, the output is saved in rds format.\n\nwrite_rds(busstop_mpsz, \"data/rds/busstop_mpsz.rds\")\n\nNext, the planning subzone codes from the busstop_mpsz are appended to the odbus6_9 data frame’s origin bus stops.\n\nod_data = left_join(odbus6_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C,\n         DESTIN_BS = DESTINATION_PT_CODE)\n\nA check for duplicates is then conducted. Since 1,186 records are found to be duplicates, they are removed and a confirmatory check is conducted.\n\nduplicate1 = od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nduplicate1\n\n# A tibble: 1,186 × 4\n   ORIGIN_BS DESTIN_BS TRIPS ORIGIN_SZ\n   &lt;chr&gt;     &lt;fct&gt;     &lt;dbl&gt; &lt;chr&gt;    \n 1 11009     01341         1 QTSZ01   \n 2 11009     01341         1 QTSZ01   \n 3 11009     01411         4 QTSZ01   \n 4 11009     01411         4 QTSZ01   \n 5 11009     01421        17 QTSZ01   \n 6 11009     01421        17 QTSZ01   \n 7 11009     01511        19 QTSZ01   \n 8 11009     01511        19 QTSZ01   \n 9 11009     01521         2 QTSZ01   \n10 11009     01521         2 QTSZ01   \n# ℹ 1,176 more rows\n\n\n\nod_data = unique(od_data)\n\nduplicate2 = od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nduplicate2\n\n# A tibble: 0 × 4\n# ℹ 4 variables: ORIGIN_BS &lt;chr&gt;, DESTIN_BS &lt;fct&gt;, TRIPS &lt;dbl&gt;, ORIGIN_SZ &lt;chr&gt;\n\n\nFinally, the planning subzone codes from the busstop_mpsz are appended to the odbus6_9 data frame’s destination bus stops.\n\nod_data = left_join(od_data , busstop_mpsz,\n            by = c(\"DESTIN_BS\" = \"BUS_STOP_N\")) \n\nAnother check for duplicates is then conducted. Since 1,350 records are found to be duplicates, they are removed and a confirmatory check is conducted.\n\nduplicate3 = od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nduplicate3\n\n# A tibble: 1,350 × 5\n   ORIGIN_BS DESTIN_BS TRIPS ORIGIN_SZ SUBZONE_C\n   &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;    \n 1 01013     51071         2 RCSZ10    CCSZ01   \n 2 01013     51071         2 RCSZ10    CCSZ01   \n 3 01112     51071        66 RCSZ10    CCSZ01   \n 4 01112     51071        66 RCSZ10    CCSZ01   \n 5 01112     53041         4 RCSZ10    BSSZ01   \n 6 01112     53041         4 RCSZ10    BSSZ01   \n 7 01121     51071         8 RCSZ04    CCSZ01   \n 8 01121     51071         8 RCSZ04    CCSZ01   \n 9 01121     82221         1 RCSZ04    GLSZ05   \n10 01121     82221         1 RCSZ04    GLSZ05   \n# ℹ 1,340 more rows\n\n\n\nod_data = unique(od_data)\n\nduplicate4 = od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nduplicate4\n\n# A tibble: 0 × 5\n# ℹ 5 variables: ORIGIN_BS &lt;chr&gt;, DESTIN_BS &lt;chr&gt;, TRIPS &lt;dbl&gt;,\n#   ORIGIN_SZ &lt;chr&gt;, SUBZONE_C &lt;chr&gt;\n\n\nThe data frame is then tidied up, saved in rds file format, and imported into the R environment.\n\nod_data = od_data %&gt;%\n  rename(DESTIN_SZ = SUBZONE_C) %&gt;%\n  drop_na() %&gt;%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %&gt;%\n  summarise(MORNING_PEAK = sum(TRIPS))\n\n\nwrite_rds(od_data, \"data/rds/od_data.rds\")\n\nod_data = read_rds(\"data/rds/od_data.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#visualising-spatial-interaction",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3.html#visualising-spatial-interaction",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "The intra-zonal flows are removed since they will not be plotted.\n\nod_data1 = od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]\n\n\n\n\nThe od2line() function in the stplanr package is used to create the desire lines.\n\nStudent Note:\n\nThe od2line() function is specifically used to convert OD flow data into lines, typically referred to as desire lines. Desire lines represent the flow of movement between different zones or locations.\nThe “flow” argument represents the OD flow data. It could be a data frame or a matrix containing information about the number of trips (flow) between pairs of zones or locations.\nThe “zone” argument represents the spatial information of the zones. It is usually a spatial dataset (e.g., points, polygons) that defines the zones involved in the OD flow.\nThe “zone_code” argument specifies the column in the zone data set that contains the zone or location codes.\nThe output is a sf data frames, representing the desire lines - stored as linestrings under geometry.\n\n\n\nflowLine = od2line(flow = od_data1, \n                    zones = mpsz,\n                    zone_code = \"SUBZONE_C\")\n\n\n\n\nThe desire lines are visualised using functions in the tmap package.\n\nThe “lwd” argument means that the values in the “MORNING_PEAK” column are used to determine the line width.\nThe “scale” argument serve as thresholds that define the ranges of quantiles (six in total, corresponding to “n” argument). The first and last values mean:\n\n0.1: Lines with values up to 0.1 (10% quantile).\n10: Lines with values between 7 and 10 (90-100% quantile).\n\n\n\ntm_shape(mpsz) +\n  tm_polygons() +\nflowLine %&gt;%  \ntm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3)\n\n\n\n\nWhen the flow data are very messy and highly skewed like the one shown above, it is wiser to focus on selected flows, for example flow greater than or equal to 5,000 as shown below.\n\ntm_shape(mpsz) +\n  tm_polygons() +\nflowLine %&gt;%  \n  filter(MORNING_PEAK &gt;= 5000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3)\n\n\n\n\n\nStudent Note: The desire lines above show a rather unexpected observation for the morning peak period for weekdays - the most movement happens between the east (Changi Airport and Tampines) and the north (Woodlands Checkpoint) rather than heartlands to central Singapore (CBD). This indicates that there are commuters who enter Singapore through the Woodlands Checkpoint and head to Changi Airport for a flight out, or the reverse, commuters land in Changi Airport and head to the Woodlands Checkpoint to enter Malaysia.\n\n~~~ End of Hands-on Exercise 3 ~~~"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/data/geospatial/MPSZ-2019/MPSZ-2019.html",
    "href": "Hands-on_Ex/Hands-on_Ex3/data/geospatial/MPSZ-2019/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2A.html",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2A.html",
    "title": "Hands-on Exercise 2A",
    "section": "",
    "text": "In this page, I show how I had completed the Hands-on Exercise 2A, on computing spatial weights.\nThe objectives are:\n\nImport geospatial data using appropriate function(s) of sf package;\nImport csv file using appropriate function of readr package;\nPerform relational join using appropriate join function of dplyr package;\nCompute spatial weights using appropriate functions of spdep package; and\nCalculate spatially lagged variables using appropriate functions of spdep package.\n\n\n\n\nThe R packages used in this hands-on exercises are:\n\ntmap for thematic mapping;\nsf for importing, managing, and processing geospatial data;\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data;\nknitr for embedding R code in different document formats (e.g., HTML) to facilitate dynamic report generation; and\nspdep for analysing spatial dependence and spatial relationships in data.\n\nThey are loaded into the R environment using the following code:\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n\n\nStudent Note: This allows for loading of multiple packages in one line of code.\n\n\n\n\nThe following data sets are used in this hands-on exercise:\n\nHunan’s County Boundary Layer. This is a geospatial data set in ESRI shapefile format.\nHunan’s Local Development Indicators 2012. This csv file contains data on selected Hunan’s local development indicators in 2012.\n\nThe data sets are placed under two sub-folders:\n\ngeospatial (County Boundary Layer), and\naspatial (Local Development Indicators 2012).\n\nThese two sub-folders are within the data folder of my Hands-on_Ex2 folder.\n\n\nThe st_read() (under sf package) is used to import the geospatial data set: hunan, a polygon feature layer in ESRI shapefile format.\n\nStudent Note: The geospatial objects are polygon features. There are a total of 88 features and 8 fields in hunan simple feature data frame. hunan is in wgs84 coordinate system.\n\n\nhunan = st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\jmphosis\\ISSS624\\Hands-on_Ex\\Hands-on_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\nThe read_csv() (under readr package) is used to import the aspatial data set: hunan_2012, a csv file.\n\nStudent Note: The hunan_2012 tibble data frame contains 88 rows and 29 columns. There are two columns with character data - County and City.\n\n\nhunan2012 = read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\nThe attribute table of the spatial polygons data frame, hunan, is updated using the attribute fields of the tibble data frame, hunan2012 using left_join() (under dplyr package).\n\nStudent Note: Without explicitly stating the “by” argument for left_join(), the two tables are joined by the ‘County’ columns.\n\n\nhunan = left_join(hunan,hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\nhunan\n\nSimple feature collection with 88 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\n\n\n\n\n\nA basemap and a choropleth map are prepared usign qtm() (under tmap package) to visualise the 2012 Gross Domestic Product Per Capita (GDPPC).\n\nbasemap = tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc = qtm(hunan, \"GDPPC\")\n\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nThe poly2nb() (under spdep package) is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries.\n\n\nThe “queen” argument in the function is set to either TRUE (default) or FALSE. The TRUE option will return a list of first order neighbours using the Queen’s contiguity criteria.\n\nStudent Note: According to Queen’s criteria, two regions are considered neighbours if they share any part of their boundary (even if it is a single point). This results in a more inclusive definition of neighbour relationships.\n\n\nStudent Note: The summary report below shows that there are 88 area units in hunan. The most connected area unit (85) has 11 neighbours. The least connected area units (30 and 65) have only one neighbour each.\n\n\nwm_q = poly2nb(hunan, queen = TRUE)\n\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nWe can examine the details of a specific polygon and its neigbhours in the following manner:\n\nNeighbours for a specific polygon. For example, for area unit 1, its neighbours are 2, 3, 4, 57 and 85.\n\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\n\nCounty names. For example, area unit 1 is Anxiang, and it is surrounded by Hanshou, Jinshi, Li, Nan, and Taoyuan.\n\n\nStudent Note: Both “County” and “NAME_3” can be used to get the county names.\n\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\nhunan$County[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\n\nGDP Per Capita.\n\n\nnb1 = wm_q[[1]]\nhunan$GDPPC[nb1]\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe complete weight matrix, wm_q, can be displayed using str() (under utils package).\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n\nThe “queen” argument in the function is set to either TRUE (default) or FALSE. The FALSE option will return a list of first order neighbours using the Rook’s continguity criteria instead.\n\nStudent Note: According to Rook’s criteria, two regions are considered neighbours if they share an entire edge (but not corners). This results in a stricter definition neighbour relationships.\n\n\nStudent Note: The summary report below shows that there are 88 area units in hunan. The most connected area unit (85) has 10 neighbours. The least connected area units (30 and 65) have only one neighbour each. This is the same outcome as setting “queen = TRUE”.\n\n\nwm_r = poly2nb(hunan, queen = FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe complete weight matrix, wm_r, can be displayed using str() (under utils package).\n\nStudent Note: Due to the different contiguity criteria used, there are some differences in the outcomes. For example, for area unit 1, it has only four neighbours under the Rook’s criteria (3, 4, 57 and 85), whereas it has five neighbours under the Queen’s criteria (2, 3, 4, 57 and 85). This is expected given that the Rook’s criteria is stricter.\n\n\nstr(wm_r)\n\nList of 88\n $ : int [1:4] 3 4 57 85\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:7] 16 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:4] 10 17 22 83\n $ : int [1:6] 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:5] 1 2 58 64 76\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:4] 10 11 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:10] 1 2 3 5 6 32 56 69 75 78\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = FALSE)\n - attr(*, \"type\")= chr \"rook\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n\nA connectivity graph takes a point and displays a line to each neighboring point. The typical method used for polygons is to find the polygon centroids. These can be calculated using the sf package.\nThe mapping function, map_dbl() (under the purrr package) is utilised to apply a function, st_centroid() (under sf package), on each element of the geometry column, us.bound, returning a vector of a same length.\nThe longitude is then extracted by looking for the first value of each centroid, while the latitude is extracted by looking for the second value of each centroid. The cbind() is then used to put the two values together.\n\nlongitude = map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nlatitude = map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\ncoords = cbind(longitude, latitude)\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\nThe neighbours maps using the Queen’s criteria and Rook’s criteria respectively are then plotted below.\n\nStudent Note: The par() (under graphics package) is used to plot the two maps side by side. The “main” argument is used to add titles for the two maps.\n\n\npar(mfrow = c(1, 2))\n\nplot(hunan$geometry, border=\"lightgrey\", main = \"Queen's Continguity Criteria\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\nplot(hunan$geometry, border=\"lightgrey\", main = \"Rook's Continguity Criteria\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"blue\")\n\n\n\n\n\n\n\n\nThe dnearneigh() (under spdep package) is used to calculate distance-based weight matrices for the study area.\nThe function identifies neighbours of region points by Euclidean distance with a distance band with lower “d1” and upper “d2” bounds controlled by the bounds argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and “longlat” set as TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\n\nThe upper limit for the distance band is determined by using the following steps and functions under the spdep package:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours (knn) of each other by using knearneigh().\n\nStudent Note: In the matrix, each row corresponds to a point, and the columns contain the indices of its knn.\n\nConvert the knn object into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists(). This function returns in the units of the coordinates if the coordinates are projected, and in km otherwise.\nRemove the list structure of the returned object by using unlist() (under base package).\n\nThe summary report below shows that the largest first nearest neighbour distance is 61.79 km (i.e., max value). Thus, this is used as the upper threshold as it ensures that all units will have at least one neighbour.\n\nk1 = knn2nb(knearneigh(coords))\n\nk1dists = unlist(nbdists(k1, coords, longlat = TRUE))\n\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\n\n\nThe dnearneigh() (under spdep package) is used to compute the distance weight matrix.\n\nStudent Note: knearneigh() computes knn, while dnearneigh() computes distance-based neighbours.\n\n\nQuestion: What is the meaning of “Average number of links: 3.681818” shown above?\nAnswer: On average, each region is connected to approximately 3.68 neighbours.\n\n\nwm_d62 = dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nThe complete weight matrix, wm_d62, can be displayed using str() (under utils package).\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix, wm_d62, is to combine table() (under base package) and card() (under spdep package).\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\nThe n.comp.nb() (under spdep package) is used to calculate the number of connected components in wm_d62, which is then accessed using “nc”. Using “comp.id”, the connected component(s) and their size(s) (i.e., number of spatial units belonging to each) are extracted.\n\nStudent Note: Since n_comp$nc = 1, it means that there is only one connected component in wm_d62. Having only one connected component suggests that the entire study area is spatially connected, and there are no distinct subgroups that are not linked to each other.\n\n\nn_comp = n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\nThe distance weight matrix is then plotted. The red lines show the links of the first nearest neighbours, while the black lines show the links of neighbours within cut-off distance of 62 km. Alternatively, they can be plotted side by side.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08, main=\"1st Nearest Neighbours\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main=\"Distance Link (Cut-off = 62km)\")\n\n\n\n\n\n\n\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have less neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using knn, either accepting asymmetric neighbours or imposing symmetry as shown below.\n\nStudent Note: Fixing the k argument’s value in knearneigh() means that the number of neighbours for each region is exactly 6.\n\n\nknn6 = knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nThe distance weight matrix is then plotted.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"purple\")\n\n\n\n\n\n\n\n\nThe Inversed Distance Weighting (IDW) method is used to derive a different type of spatial weight matrix.\n\nStudent Note: IDW assigns higher weights to neighbours that are closer and lower weights to neighbours that are further away.\n\nThe nbdists() (under spdep package) is used to compute the distances between areas.\n\ndist = nbdists(wm_q, coords, longlat = TRUE)\nids = lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\n\nWeights are assigned to each neighbouring polygon. The nb21listw() (under spdep package) is used to convert a neighborhood object, wm_q, to a listw object, rswm_q (style=“W”) or rswm_ids (style=“B”). This allows row-standardised distance weight matrices to be created, whereby each row sums to 1.\nThe “style” argument influences the specific characteristics of the weights matrix.\nThe following example shows “style=”W””, each neighboring polygon is assigned equal weight. This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summarise the neighbors’ values, its downside is that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.\n\nStudent Note:\n\n“listw” stands for list of weights.\nThe “style” argument set to “W” specifies a binary spatial weight matrix, where the presence of a spatial relationship is indicated by 1, and absence by 0. All neighbouring units are considered equal in terms of their impact on the target unit, reflecting a uniform spatial relationship.\nThe “zero.policy” argument returns lists of non-neighbours when set to TRUE.\n\n\n\nrswm_q = nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe weights of the first polygon’s eight neighbours are extracted below. It shows that each neighbour is assigned an equal weight of 0.2 of the total weight. This means that when computing the average neighbouring income values, each neighbour’s income will be multiplied by 0.2 before being tallied.\n\nStudent Note: In this example, each neighbour has an equal weight, indicating a form of uniform spatial relationship.\n\n\nrswm_q$weights[1]\n\n[[1]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n\nOn the other hand, for “style=”B””, the spatial lag of a variable for a particular unit is the sum of that variable over all neighbouring units, with each neighbour contributing a binary indicator (1 or 0).\n\nStudent Note:\n\n“glist=ids” means the list of inverse distances is used for the general list of weights argument.\nThe “style” argument set to “B” specifies a binary spatial lag matrix, where the presence of a spatial relationship is indicated by 1, and absence by 0. At the same time, the direction of the connection is considered for the calculations.\n\n\n\nrswm_ids = nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\nThe weights of the first polygon’s five neighbours are extracted below. It shows that each neighbour is assigned varying weights. This means that when computing the average neighbouring income values, each neighbour’s income will be multiplied by their corresponding weight values before being tallied.\n\nStudent Note: In this example, each neighbour has an equal weight, indicating a form of uniform spatial relationship.\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nStudent Note: The summary below shows the range of weights using “style=”B”” and IDW. The summary statistics indicate that the weights are not uniform.\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338 \n\n\n\n\n\n\nFour different spatial lagged variables are created to compute the average neighbour GDP per capita for each polygon.\n\nSpatial lag with row-standardized weights;\nSpatial lag as a sum of neighbouring values;\nSpatial window average; and\nSpatial window sum.\n\n\n\n\nStudent Note: Spatial lag with row-standardized weights reflects average value of the variable in neighbouring units, with closer units having a higher influence. It is calculated using the weighted average of the values of a variable in neighbouring units, where the weights are row standardised.\n\nComparing the outcome below with the neighbouring GDP per capita values found in section 8.5.1 above, it is observed that each element GDPPC.lag is the average GDP per capita value of the neighbouring polygons. For example, for the first polygon, the average of 20981, 34592, 24473, 21311, and 22879 is indeed 24847.20.\n\nGDPPC.lag = lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nThe spatially lag GDP per capita values can be added to the hunan sf data frame.\n\nlag.list = list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\n\nlag.res = as.data.frame(lag.list)\n\ncolnames(lag.res) = c(\"NAME_3\", \"lag GDPPC\")\n\nhunan = left_join(hunan,lag.res)\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nThe plots for the GDPPC and spatial lag GDPPC can then be plotted side by side.\n\ngdppc = qtm(hunan, \"GDPPC\")\nlag_gdppc = qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nStudent Note: Spatial lag as a sum of neighbouring values represents the total values of the variable in the surrounding area. This is calculated by summing the values of a variable in neighbouring units, where each neighbouring units contributes equally, regardless of distance.\n\nA value of 1 is assigned to each neighbour using lapply() (under base package).\n\nb_weights = lapply(wm_q, function(x) 0*x + 1)\nb_weights2 = nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nThe lag variable for using the weights and GPD per capita is then computed using lag.listw() (under spdep package).\n\nlag_sum = list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\n\nlag.res = as.data.frame(lag_sum)\n\ncolnames(lag.res) = c(\"NAME_3\", \"lag_sum GDPPC\")\n\nThe following shows each county and the sum of the GDPPC of its neighbours. For example, for the first polygon, the total of 20981, 34592, 24473, 21311, and 22879 is indeed 124236.\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nSimilarly, the spatially lag GDP per capita values can be added to the hunan sf data frame.\n\nhunan = left_join(hunan, lag.res)\n\nhead(hunan)\n\nSimple feature collection with 6 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC lag_sum GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20        124236\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80        113624\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25         96573\n4 Changde 21102      Li      County      Li 24473  27737.50        110950\n5 Changde 21103   Linli      County   Linli 25554  27270.25        109081\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80        106244\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nThe plots for the GDPPC and spatial lag sum GDPPC can then be plotted side by side.\n\ngdppc = qtm(hunan, \"GDPPC\")\nlag_sum_gdppc = qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nThe spatial window average uses row-standardised weights and includes the diagonal element.\n\nStudent Note: Spatial window average provides a localised measure of central tendency by calculating the average value of a variable within a specified spatial window or neighbourhood. Unlike row-standardised spatial lag, this approach may consider a fixed-size spatial window, and all units within that window contribute equally to the average.\n\nTo add the diagonal element to the neighbour list, we need to use include.self() (under spdep package).\n\nwm_qs = include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nFor example, polygon 1 now has six instead of five neighbours.\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nThe weights are then obtained and assigned using nb2listw() (under spdep package).\n\nwm_qs = nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nThe lag variable is then created from the weights and GDPPC variable.\n\nlag_w_avg_gpdpc = lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nThe lag variable listw object is then converted to a data frame and appended to hunan sf data frame using left_join() (under dplyr package).\n\nlag.list.wm_qs = list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res = as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) = c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nhunan = left_join(hunan, lag_wm_qs.res)\nhead(hunan)\n\nSimple feature collection with 6 features and 9 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC lag_sum GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20        124236\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80        113624\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25         96573\n4 Changde 21102      Li      County      Li 24473  27737.50        110950\n5 Changde 21103   Linli      County   Linli 25554  27270.25        109081\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80        106244\n  lag_window_avg GDPPC                       geometry\n1             24650.50 POLYGON ((112.0625 29.75523...\n2             22434.17 POLYGON ((112.2288 29.11684...\n3             26233.00 POLYGON ((111.8927 29.6013,...\n4             27084.60 POLYGON ((111.3731 29.94649...\n5             26927.00 POLYGON ((111.6324 29.76288...\n6             22230.17 POLYGON ((110.8825 30.11675...\n\n\nTo compare the values of lag GDPPC and spatial window average, kable() (under knitr package) is used to prepare a table.\n\nhunan %&gt;%\n  select(\"County\", \"lag GDPPC\", \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nThe plots for the spatial lag GDPPC and spatial window average GDPPC can then be plotted side by side.\n\nw_avg_gdppc = qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nThe spatial window sum is the counterpart of spatial window average, but without using row-standardised weights.\n\nStudent Note: Spatial window sum reflects the total accumulated value of the variable in the surrounding area, without normalisation by the number of neighbouring units. It is calculated by summing the values of a variable within a specified spatial window.\n\nTo add the diagonal element to the neighbour list, we need to use include.self() (under spdep package).\n\nwm_qs = include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nA value of 1 is assigned to each neighbour (including diagonal) using lapply() (under base package).\n\nb_weights = lapply(wm_qs, function(x) 0*x + 1)\n\nb_weights2 = nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\n\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nThe lag variable for using the weights and GPD per capita is then computed using lag.listw() (under spdep package).\n\nw_sum_gdppc = list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nThe lag variable listw object is then converted to a data frame and appended to hunan sf data frame using left_join() (under dplyr package).\n\nw_sum_gdppc.res = as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) = c(\"NAME_3\", \"w_sum GDPPC\")\nhunan = left_join(hunan, w_sum_gdppc.res)\nhead(hunan)\n\nSimple feature collection with 6 features and 10 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC lag_sum GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20        124236\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80        113624\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25         96573\n4 Changde 21102      Li      County      Li 24473  27737.50        110950\n5 Changde 21103   Linli      County   Linli 25554  27270.25        109081\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80        106244\n  lag_window_avg GDPPC w_sum GDPPC                       geometry\n1             24650.50      147903 POLYGON ((112.0625 29.75523...\n2             22434.17      134605 POLYGON ((112.2288 29.11684...\n3             26233.00      131165 POLYGON ((111.8927 29.6013,...\n4             27084.60      135423 POLYGON ((111.3731 29.94649...\n5             26927.00      134635 POLYGON ((111.6324 29.76288...\n6             22230.17      133381 POLYGON ((110.8825 30.11675...\n\n\nTo compare the values of lag GDPPC and spatial window average, kable() (under knitr package) is used to prepare a table.\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nThe plots for the spatial window average GDPPC and the spatial window sum GDPPC can then be plotted side by side.\n\nw_sum_gdppc = qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n~~~ End of Hands-on Exercise 2A ~~~"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2A.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2A.html#overview",
    "title": "Hands-on Exercise 2A",
    "section": "",
    "text": "In this page, I show how I had completed the Hands-on Exercise 2A, on computing spatial weights.\nThe objectives are:\n\nImport geospatial data using appropriate function(s) of sf package;\nImport csv file using appropriate function of readr package;\nPerform relational join using appropriate join function of dplyr package;\nCompute spatial weights using appropriate functions of spdep package; and\nCalculate spatially lagged variables using appropriate functions of spdep package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2A.html#getting-started-study-area-and-data",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2A.html#getting-started-study-area-and-data",
    "title": "Hands-on Exercise 2A",
    "section": "",
    "text": "The R packages used in this hands-on exercises are:\n\ntmap for thematic mapping;\nsf for importing, managing, and processing geospatial data;\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data;\nknitr for embedding R code in different document formats (e.g., HTML) to facilitate dynamic report generation; and\nspdep for analysing spatial dependence and spatial relationships in data.\n\nThey are loaded into the R environment using the following code:\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n\n\nStudent Note: This allows for loading of multiple packages in one line of code."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2A.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2A.html#importing-data",
    "title": "Hands-on Exercise 2A",
    "section": "",
    "text": "The following data sets are used in this hands-on exercise:\n\nHunan’s County Boundary Layer. This is a geospatial data set in ESRI shapefile format.\nHunan’s Local Development Indicators 2012. This csv file contains data on selected Hunan’s local development indicators in 2012.\n\nThe data sets are placed under two sub-folders:\n\ngeospatial (County Boundary Layer), and\naspatial (Local Development Indicators 2012).\n\nThese two sub-folders are within the data folder of my Hands-on_Ex2 folder.\n\n\nThe st_read() (under sf package) is used to import the geospatial data set: hunan, a polygon feature layer in ESRI shapefile format.\n\nStudent Note: The geospatial objects are polygon features. There are a total of 88 features and 8 fields in hunan simple feature data frame. hunan is in wgs84 coordinate system.\n\n\nhunan = st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\jmphosis\\ISSS624\\Hands-on_Ex\\Hands-on_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\nThe read_csv() (under readr package) is used to import the aspatial data set: hunan_2012, a csv file.\n\nStudent Note: The hunan_2012 tibble data frame contains 88 rows and 29 columns. There are two columns with character data - County and City.\n\n\nhunan2012 = read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\nThe attribute table of the spatial polygons data frame, hunan, is updated using the attribute fields of the tibble data frame, hunan2012 using left_join() (under dplyr package).\n\nStudent Note: Without explicitly stating the “by” argument for left_join(), the two tables are joined by the ‘County’ columns.\n\n\nhunan = left_join(hunan,hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\nhunan\n\nSimple feature collection with 88 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2A.html#visualising-regional-development-indicator",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2A.html#visualising-regional-development-indicator",
    "title": "Hands-on Exercise 2A",
    "section": "",
    "text": "A basemap and a choropleth map are prepared usign qtm() (under tmap package) to visualise the 2012 Gross Domestic Product Per Capita (GDPPC).\n\nbasemap = tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc = qtm(hunan, \"GDPPC\")\n\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2A.html#computing-contiguity-spatial-weight",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2A.html#computing-contiguity-spatial-weight",
    "title": "Hands-on Exercise 2A",
    "section": "",
    "text": "The poly2nb() (under spdep package) is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries.\n\n\nThe “queen” argument in the function is set to either TRUE (default) or FALSE. The TRUE option will return a list of first order neighbours using the Queen’s contiguity criteria.\n\nStudent Note: According to Queen’s criteria, two regions are considered neighbours if they share any part of their boundary (even if it is a single point). This results in a more inclusive definition of neighbour relationships.\n\n\nStudent Note: The summary report below shows that there are 88 area units in hunan. The most connected area unit (85) has 11 neighbours. The least connected area units (30 and 65) have only one neighbour each.\n\n\nwm_q = poly2nb(hunan, queen = TRUE)\n\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nWe can examine the details of a specific polygon and its neigbhours in the following manner:\n\nNeighbours for a specific polygon. For example, for area unit 1, its neighbours are 2, 3, 4, 57 and 85.\n\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\n\nCounty names. For example, area unit 1 is Anxiang, and it is surrounded by Hanshou, Jinshi, Li, Nan, and Taoyuan.\n\n\nStudent Note: Both “County” and “NAME_3” can be used to get the county names.\n\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\nhunan$County[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\n\nGDP Per Capita.\n\n\nnb1 = wm_q[[1]]\nhunan$GDPPC[nb1]\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe complete weight matrix, wm_q, can be displayed using str() (under utils package).\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n\nThe “queen” argument in the function is set to either TRUE (default) or FALSE. The FALSE option will return a list of first order neighbours using the Rook’s continguity criteria instead.\n\nStudent Note: According to Rook’s criteria, two regions are considered neighbours if they share an entire edge (but not corners). This results in a stricter definition neighbour relationships.\n\n\nStudent Note: The summary report below shows that there are 88 area units in hunan. The most connected area unit (85) has 10 neighbours. The least connected area units (30 and 65) have only one neighbour each. This is the same outcome as setting “queen = TRUE”.\n\n\nwm_r = poly2nb(hunan, queen = FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe complete weight matrix, wm_r, can be displayed using str() (under utils package).\n\nStudent Note: Due to the different contiguity criteria used, there are some differences in the outcomes. For example, for area unit 1, it has only four neighbours under the Rook’s criteria (3, 4, 57 and 85), whereas it has five neighbours under the Queen’s criteria (2, 3, 4, 57 and 85). This is expected given that the Rook’s criteria is stricter.\n\n\nstr(wm_r)\n\nList of 88\n $ : int [1:4] 3 4 57 85\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:7] 16 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:4] 10 17 22 83\n $ : int [1:6] 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:5] 1 2 58 64 76\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:4] 10 11 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:10] 1 2 3 5 6 32 56 69 75 78\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = FALSE)\n - attr(*, \"type\")= chr \"rook\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n\nA connectivity graph takes a point and displays a line to each neighboring point. The typical method used for polygons is to find the polygon centroids. These can be calculated using the sf package.\nThe mapping function, map_dbl() (under the purrr package) is utilised to apply a function, st_centroid() (under sf package), on each element of the geometry column, us.bound, returning a vector of a same length.\nThe longitude is then extracted by looking for the first value of each centroid, while the latitude is extracted by looking for the second value of each centroid. The cbind() is then used to put the two values together.\n\nlongitude = map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nlatitude = map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\ncoords = cbind(longitude, latitude)\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\nThe neighbours maps using the Queen’s criteria and Rook’s criteria respectively are then plotted below.\n\nStudent Note: The par() (under graphics package) is used to plot the two maps side by side. The “main” argument is used to add titles for the two maps.\n\n\npar(mfrow = c(1, 2))\n\nplot(hunan$geometry, border=\"lightgrey\", main = \"Queen's Continguity Criteria\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\nplot(hunan$geometry, border=\"lightgrey\", main = \"Rook's Continguity Criteria\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"blue\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2A.html#computing-distance-based-neighbours",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2A.html#computing-distance-based-neighbours",
    "title": "Hands-on Exercise 2A",
    "section": "",
    "text": "The dnearneigh() (under spdep package) is used to calculate distance-based weight matrices for the study area.\nThe function identifies neighbours of region points by Euclidean distance with a distance band with lower “d1” and upper “d2” bounds controlled by the bounds argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and “longlat” set as TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\n\nThe upper limit for the distance band is determined by using the following steps and functions under the spdep package:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours (knn) of each other by using knearneigh().\n\nStudent Note: In the matrix, each row corresponds to a point, and the columns contain the indices of its knn.\n\nConvert the knn object into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists(). This function returns in the units of the coordinates if the coordinates are projected, and in km otherwise.\nRemove the list structure of the returned object by using unlist() (under base package).\n\nThe summary report below shows that the largest first nearest neighbour distance is 61.79 km (i.e., max value). Thus, this is used as the upper threshold as it ensures that all units will have at least one neighbour.\n\nk1 = knn2nb(knearneigh(coords))\n\nk1dists = unlist(nbdists(k1, coords, longlat = TRUE))\n\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\n\n\nThe dnearneigh() (under spdep package) is used to compute the distance weight matrix.\n\nStudent Note: knearneigh() computes knn, while dnearneigh() computes distance-based neighbours.\n\n\nQuestion: What is the meaning of “Average number of links: 3.681818” shown above?\nAnswer: On average, each region is connected to approximately 3.68 neighbours.\n\n\nwm_d62 = dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nThe complete weight matrix, wm_d62, can be displayed using str() (under utils package).\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix, wm_d62, is to combine table() (under base package) and card() (under spdep package).\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\nThe n.comp.nb() (under spdep package) is used to calculate the number of connected components in wm_d62, which is then accessed using “nc”. Using “comp.id”, the connected component(s) and their size(s) (i.e., number of spatial units belonging to each) are extracted.\n\nStudent Note: Since n_comp$nc = 1, it means that there is only one connected component in wm_d62. Having only one connected component suggests that the entire study area is spatially connected, and there are no distinct subgroups that are not linked to each other.\n\n\nn_comp = n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\nThe distance weight matrix is then plotted. The red lines show the links of the first nearest neighbours, while the black lines show the links of neighbours within cut-off distance of 62 km. Alternatively, they can be plotted side by side.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08, main=\"1st Nearest Neighbours\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main=\"Distance Link (Cut-off = 62km)\")\n\n\n\n\n\n\n\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have less neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using knn, either accepting asymmetric neighbours or imposing symmetry as shown below.\n\nStudent Note: Fixing the k argument’s value in knearneigh() means that the number of neighbours for each region is exactly 6.\n\n\nknn6 = knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nThe distance weight matrix is then plotted.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"purple\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2A.html#weights-based-on-inverse-distance-weighting-idw",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2A.html#weights-based-on-inverse-distance-weighting-idw",
    "title": "Hands-on Exercise 2A",
    "section": "",
    "text": "The Inversed Distance Weighting (IDW) method is used to derive a different type of spatial weight matrix.\n\nStudent Note: IDW assigns higher weights to neighbours that are closer and lower weights to neighbours that are further away.\n\nThe nbdists() (under spdep package) is used to compute the distances between areas.\n\ndist = nbdists(wm_q, coords, longlat = TRUE)\nids = lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\n\nWeights are assigned to each neighbouring polygon. The nb21listw() (under spdep package) is used to convert a neighborhood object, wm_q, to a listw object, rswm_q (style=“W”) or rswm_ids (style=“B”). This allows row-standardised distance weight matrices to be created, whereby each row sums to 1.\nThe “style” argument influences the specific characteristics of the weights matrix.\nThe following example shows “style=”W””, each neighboring polygon is assigned equal weight. This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summarise the neighbors’ values, its downside is that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.\n\nStudent Note:\n\n“listw” stands for list of weights.\nThe “style” argument set to “W” specifies a binary spatial weight matrix, where the presence of a spatial relationship is indicated by 1, and absence by 0. All neighbouring units are considered equal in terms of their impact on the target unit, reflecting a uniform spatial relationship.\nThe “zero.policy” argument returns lists of non-neighbours when set to TRUE.\n\n\n\nrswm_q = nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe weights of the first polygon’s eight neighbours are extracted below. It shows that each neighbour is assigned an equal weight of 0.2 of the total weight. This means that when computing the average neighbouring income values, each neighbour’s income will be multiplied by 0.2 before being tallied.\n\nStudent Note: In this example, each neighbour has an equal weight, indicating a form of uniform spatial relationship.\n\n\nrswm_q$weights[1]\n\n[[1]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n\nOn the other hand, for “style=”B””, the spatial lag of a variable for a particular unit is the sum of that variable over all neighbouring units, with each neighbour contributing a binary indicator (1 or 0).\n\nStudent Note:\n\n“glist=ids” means the list of inverse distances is used for the general list of weights argument.\nThe “style” argument set to “B” specifies a binary spatial lag matrix, where the presence of a spatial relationship is indicated by 1, and absence by 0. At the same time, the direction of the connection is considered for the calculations.\n\n\n\nrswm_ids = nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\nThe weights of the first polygon’s five neighbours are extracted below. It shows that each neighbour is assigned varying weights. This means that when computing the average neighbouring income values, each neighbour’s income will be multiplied by their corresponding weight values before being tallied.\n\nStudent Note: In this example, each neighbour has an equal weight, indicating a form of uniform spatial relationship.\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nStudent Note: The summary below shows the range of weights using “style=”B”” and IDW. The summary statistics indicate that the weights are not uniform.\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2A.html#application-of-spatial-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2A.html#application-of-spatial-weight-matrix",
    "title": "Hands-on Exercise 2A",
    "section": "",
    "text": "Four different spatial lagged variables are created to compute the average neighbour GDP per capita for each polygon.\n\nSpatial lag with row-standardized weights;\nSpatial lag as a sum of neighbouring values;\nSpatial window average; and\nSpatial window sum.\n\n\n\n\nStudent Note: Spatial lag with row-standardized weights reflects average value of the variable in neighbouring units, with closer units having a higher influence. It is calculated using the weighted average of the values of a variable in neighbouring units, where the weights are row standardised.\n\nComparing the outcome below with the neighbouring GDP per capita values found in section 8.5.1 above, it is observed that each element GDPPC.lag is the average GDP per capita value of the neighbouring polygons. For example, for the first polygon, the average of 20981, 34592, 24473, 21311, and 22879 is indeed 24847.20.\n\nGDPPC.lag = lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nThe spatially lag GDP per capita values can be added to the hunan sf data frame.\n\nlag.list = list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\n\nlag.res = as.data.frame(lag.list)\n\ncolnames(lag.res) = c(\"NAME_3\", \"lag GDPPC\")\n\nhunan = left_join(hunan,lag.res)\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nThe plots for the GDPPC and spatial lag GDPPC can then be plotted side by side.\n\ngdppc = qtm(hunan, \"GDPPC\")\nlag_gdppc = qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nStudent Note: Spatial lag as a sum of neighbouring values represents the total values of the variable in the surrounding area. This is calculated by summing the values of a variable in neighbouring units, where each neighbouring units contributes equally, regardless of distance.\n\nA value of 1 is assigned to each neighbour using lapply() (under base package).\n\nb_weights = lapply(wm_q, function(x) 0*x + 1)\nb_weights2 = nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nThe lag variable for using the weights and GPD per capita is then computed using lag.listw() (under spdep package).\n\nlag_sum = list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\n\nlag.res = as.data.frame(lag_sum)\n\ncolnames(lag.res) = c(\"NAME_3\", \"lag_sum GDPPC\")\n\nThe following shows each county and the sum of the GDPPC of its neighbours. For example, for the first polygon, the total of 20981, 34592, 24473, 21311, and 22879 is indeed 124236.\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nSimilarly, the spatially lag GDP per capita values can be added to the hunan sf data frame.\n\nhunan = left_join(hunan, lag.res)\n\nhead(hunan)\n\nSimple feature collection with 6 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC lag_sum GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20        124236\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80        113624\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25         96573\n4 Changde 21102      Li      County      Li 24473  27737.50        110950\n5 Changde 21103   Linli      County   Linli 25554  27270.25        109081\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80        106244\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nThe plots for the GDPPC and spatial lag sum GDPPC can then be plotted side by side.\n\ngdppc = qtm(hunan, \"GDPPC\")\nlag_sum_gdppc = qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nThe spatial window average uses row-standardised weights and includes the diagonal element.\n\nStudent Note: Spatial window average provides a localised measure of central tendency by calculating the average value of a variable within a specified spatial window or neighbourhood. Unlike row-standardised spatial lag, this approach may consider a fixed-size spatial window, and all units within that window contribute equally to the average.\n\nTo add the diagonal element to the neighbour list, we need to use include.self() (under spdep package).\n\nwm_qs = include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nFor example, polygon 1 now has six instead of five neighbours.\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nThe weights are then obtained and assigned using nb2listw() (under spdep package).\n\nwm_qs = nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nThe lag variable is then created from the weights and GDPPC variable.\n\nlag_w_avg_gpdpc = lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nThe lag variable listw object is then converted to a data frame and appended to hunan sf data frame using left_join() (under dplyr package).\n\nlag.list.wm_qs = list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res = as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) = c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nhunan = left_join(hunan, lag_wm_qs.res)\nhead(hunan)\n\nSimple feature collection with 6 features and 9 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC lag_sum GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20        124236\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80        113624\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25         96573\n4 Changde 21102      Li      County      Li 24473  27737.50        110950\n5 Changde 21103   Linli      County   Linli 25554  27270.25        109081\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80        106244\n  lag_window_avg GDPPC                       geometry\n1             24650.50 POLYGON ((112.0625 29.75523...\n2             22434.17 POLYGON ((112.2288 29.11684...\n3             26233.00 POLYGON ((111.8927 29.6013,...\n4             27084.60 POLYGON ((111.3731 29.94649...\n5             26927.00 POLYGON ((111.6324 29.76288...\n6             22230.17 POLYGON ((110.8825 30.11675...\n\n\nTo compare the values of lag GDPPC and spatial window average, kable() (under knitr package) is used to prepare a table.\n\nhunan %&gt;%\n  select(\"County\", \"lag GDPPC\", \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nThe plots for the spatial lag GDPPC and spatial window average GDPPC can then be plotted side by side.\n\nw_avg_gdppc = qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nThe spatial window sum is the counterpart of spatial window average, but without using row-standardised weights.\n\nStudent Note: Spatial window sum reflects the total accumulated value of the variable in the surrounding area, without normalisation by the number of neighbouring units. It is calculated by summing the values of a variable within a specified spatial window.\n\nTo add the diagonal element to the neighbour list, we need to use include.self() (under spdep package).\n\nwm_qs = include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nA value of 1 is assigned to each neighbour (including diagonal) using lapply() (under base package).\n\nb_weights = lapply(wm_qs, function(x) 0*x + 1)\n\nb_weights2 = nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\n\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nThe lag variable for using the weights and GPD per capita is then computed using lag.listw() (under spdep package).\n\nw_sum_gdppc = list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nThe lag variable listw object is then converted to a data frame and appended to hunan sf data frame using left_join() (under dplyr package).\n\nw_sum_gdppc.res = as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) = c(\"NAME_3\", \"w_sum GDPPC\")\nhunan = left_join(hunan, w_sum_gdppc.res)\nhead(hunan)\n\nSimple feature collection with 6 features and 10 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC lag_sum GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20        124236\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80        113624\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25         96573\n4 Changde 21102      Li      County      Li 24473  27737.50        110950\n5 Changde 21103   Linli      County   Linli 25554  27270.25        109081\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80        106244\n  lag_window_avg GDPPC w_sum GDPPC                       geometry\n1             24650.50      147903 POLYGON ((112.0625 29.75523...\n2             22434.17      134605 POLYGON ((112.2288 29.11684...\n3             26233.00      131165 POLYGON ((111.8927 29.6013,...\n4             27084.60      135423 POLYGON ((111.3731 29.94649...\n5             26927.00      134635 POLYGON ((111.6324 29.76288...\n6             22230.17      133381 POLYGON ((110.8825 30.11675...\n\n\nTo compare the values of lag GDPPC and spatial window average, kable() (under knitr package) is used to prepare a table.\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nThe plots for the spatial window average GDPPC and the spatial window sum GDPPC can then be plotted side by side.\n\nw_sum_gdppc = qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n~~~ End of Hands-on Exercise 2A ~~~"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1A/Hands-on_Ex1A.html",
    "href": "Hands-on_Ex/Hands-on_Ex1A/Hands-on_Ex1A.html",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "In this page, I show how I had completed the Hands-on Exercise 1A. It includes the codes used, the graphs obtained as well as the insights gathered.\n\n\n\nThe following data sets were used in this hands-on exercise:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb\n\nThe data sets were placed under two sub-folders:\n\ngeospatial (Master Plan Subzone Boundary, Pre-Schools Location, and Cycling Path), and\naspatial (Airbnb Listing).\n\nThese two sub-folders are within the data folder of my Hands-on_Ex1A folder.\n\n\n\nThe two R packages used in this hands-on exercise are:\n\nsf for importing, managing, and processing geospatial data; and\ntidyverse for performing data science tasks such as importing, wrangling, and visualising data.\n\nThey are loaded into the R environment using the following code:\n\npacman::p_load(sf, tidyverse)\n\nStudent Note: This allows for loading of multiple packages in one line of code.\n\n\n\nThe st_read() (under sf package) is used to import the three geospatial data sets:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format;\nCyclingPath, a line feature layer in ESRI shapefile format; and\nPreSchool, a point feature layer in kml file format.\n\n\n\nThe MP14_SUBZONE_WEB_PL data set was imported into R as a polygon feature data frame using st_read().\n\nmpsz = st_read(dsn = \"data/geospatial\", \n               layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\jmphosis\\ISSS624\\Hands-on_Ex\\Hands-on_Ex1A\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nStudent Note: The geospatial objects are multipolygon features. There are a total of 323 features and 15 fields in mpsz simple feature data frame. mpsz is in svy21 projected coordinate system. The bounding box provides the x extend and y extend of the data.\n\n\n\nThe CyclingPath data set was imported into R as a line feature data frame using st_read().\n\ncyclingpath = st_read(dsn = \"data/geospatial\", \n                      layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\jmphosis\\ISSS624\\Hands-on_Ex\\Hands-on_Ex1A\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2558 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nStudent Note: The geospatial objects are multistring features. There are a total of 2,558 features and 2 fields in cyclingpath linestring feature data frame. cyclingpath is in svy21 projected coordinate system.\n\n\n\nThe PreSchool data set was imported into R as a point feature data frame using st_read(). As it is in the kml format, the file extension is included.\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\jmphosis\\ISSS624\\Hands-on_Ex\\Hands-on_Ex1A\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nStudent Note: The geospatial objects are point features. There are a total of 2,290 features and 2 fields in preschool point feature data frame. preschool is in wgs84 coordinate system.\n\n\n\n\nThe following ways to retrieve information related to the content of a simple feature data frame were applied on the three data frames: mpsz, cyclingpath, and preschool:\n\nst_geometry() (under sf package) retrieves the geometries from an object.\nglimpse() (under dplyr package) retrieves information about the associated attributes in the data frame.\nhead() (under Base R) reveals complete information of a feature object.\n\n\n\nThe three functions were applied to mpsz:\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nStudent Note: The above shows that mpsz is a multipolygon feature object and in the svy21 projected coordinates systems.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nStudent Note: The above shows the data type of each field and some examples of the values.\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nStudent Note: The above shows the first 5 records in mpsz.\n\n\n\nThe three functions were applied to cyclingpath:\n\nst_geometry(cyclingpath)\n\nGeometry set for 2558 features \nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nStudent Note: The above shows that cyclingpath is a multilinestring feature object and in the svy21 projected coordinates systems.\n\nglimpse(cyclingpath)\n\nRows: 2,558\nColumns: 3\n$ PLANNING_A &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ PLANNING_1 &lt;chr&gt; \"BEDOK\", \"BEDOK\", \"BEDOK\", \"TAMPINES\", \"TAMPINES\", \"TAMPINE…\n$ geometry   &lt;MULTILINESTRING [m]&gt; MULTILINESTRING ((39782.85 ..., MULTILINEST…\n\n\nStudent Note: The above shows the data type of each field and some examples of the values. The PLANNING_A column appears to only have ‘NA’ values.\n\nhead(cyclingpath, n=5)\n\nSimple feature collection with 5 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 39598.41 ymin: 34811.14 xmax: 40031.89 ymax: 37075.99\nProjected CRS: SVY21\n  PLANNING_A PLANNING_1                       geometry\n1       &lt;NA&gt;      BEDOK MULTILINESTRING ((39782.85 ...\n2       &lt;NA&gt;      BEDOK MULTILINESTRING ((39931.51 ...\n3       &lt;NA&gt;      BEDOK MULTILINESTRING ((40031.89 ...\n4       &lt;NA&gt;   TAMPINES MULTILINESTRING ((39958.38 ...\n5       &lt;NA&gt;   TAMPINES MULTILINESTRING ((39652.87 ...\n\n\nStudent Note: The above shows the first 5 records in cyclingpath.\n\n\n\nThe three functions were applied to preschool:\n\nst_geometry(preschool)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nStudent Note: The above shows that preschool is a point feature object and in the wgs84 coordinates systems.\n\nglimpse(preschool)\n\nRows: 2,290\nColumns: 3\n$ Name        &lt;chr&gt; \"kml_1\", \"kml_2\", \"kml_3\", \"kml_4\", \"kml_5\", \"kml_6\", \"kml…\n$ Description &lt;chr&gt; \"&lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Att…\n$ geometry    &lt;POINT [°]&gt; POINT Z (103.8072 1.299333 0), POINT Z (103.826 1.31…\n\n\nStudent Note: The above shows the data type of each field and some examples of the values.\n\nhead(preschool, n=5)\n\nSimple feature collection with 5 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.8048 ymin: 1.299333 xmax: 103.8409 ymax: 1.435024\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n   Name\n1 kml_1\n2 kml_2\n3 kml_3\n4 kml_4\n5 kml_5\n                                                                                                                                                                                                                                                                                                                                                                                                Description\n1           &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDREN'S COVE PRESCHOOL PTE.LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT9390&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;498CC9FE48CC94D4&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n2                    &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDREN'S COVE PTE. LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT8675&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;22877550804213FD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n3       &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDREN'S VINEYARD PRESCHOOL PTE. LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT9308&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;B2FE90E44AD494E3&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n4 &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDTIME CARE & DEVELOPMENT CENTRE PTE.LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT9122&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;1384CDC0D14B76A1&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n5                               &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILTERN HOUSE&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT2070&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;FB24EAA6E73B2723&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n                       geometry\n1 POINT Z (103.8072 1.299333 0)\n2  POINT Z (103.826 1.312839 0)\n3 POINT Z (103.8409 1.348843 0)\n4 POINT Z (103.8048 1.435024 0)\n5   POINT Z (103.839 1.33315 0)\n\n\nStudent Note: The above shows the first 5 records in preschool.\n\n\n\n\nThe plot() (under R graphics) was used to visualise the geospatial features of the three data frames: mpsz, cyclingpath, and preschool.\n\n\n\nplot(mpsz)\n\n\n\n\n\nplot(st_geometry(mpsz))\n\n\n\n\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\nplot(st_geometry(cyclingpath))\n\n\n\n\n\nplot(cyclingpath[\"PLANNING_1\"])\n\n\n\n\n\n\n\n\nplot(preschool)\n\n\n\n\n\nplot(st_geometry(preschool))\n\n\n\n\n\n\n\n\nIt is essential for two geospatial data objects to be projected using similar coordinate systems. In the hands-on exercise, we projected a simple feature data frame from one coordinate system to another through projection transformation.\n\n\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nThe above shows that the mpsz data frame has the wrong EPSG code (9001). Hence, the st_set_crs() (under sf package) is used to assign the correct EPSG code (3414).\n\nmpsz3414 = st_set_crs(mpsz, 3414)\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\nIn geospatial analytics, data in the geographic coordinate system are often transformed to the projected coordinate system. This allows analysis based on measurements such as distance and area.\nThe st_transform() (under sf package) is required when the coordinate system needs to be transformed (and not just a matter of changing the EPSG code).\n\npreschool3414 = st_transform(preschool, \n                             crs = 3414)\n\nst_geometry(preschool3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\n\n\n\n\nAspatial data are not geospatial data but have data fields that capture the x- and y-coordinates of the data points.\nThe Airbnb listing aspatial data is imported into the R environment as a tibble data frame, and converted to a simple feature data frame.\nThe csv file is imported using read_csv() (under readr package) as a tibble data frame. Then, a quick check is conducted on the imported data.\n\nlistings = read_csv(\"data/aspatial/listings.csv\")\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,483 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Villa in…  367042 Belinda   East Region         Tampines          1.35\n 2  71896 Home in …  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Home in …  367042 Belinda   East Region         Tampines          1.35\n 4 275343 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Home in …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 Rental u… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 369141 Place to… 1521514 Elizabeth Central Region      Newton            1.31\n# ℹ 3,473 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\nStudent Note: The listing tibble data frame contains 3,483 rows and 18 columns.\nThe longitude and latitude columns are used to convert the tibble data frame into a simple feature data frame using st_as_sf() (under sf package). Then, the contents of the newly created simple feature data frame, listings_sf, is examined using glimpse() (under dplyr package). The longitude and latitude columns have been replaced by a new column, geometry.\n\nlistings_sf = st_as_sf(listings,\n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\nglimpse(listings_sf)\n\nRows: 3,483\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Villa in Singapore · ★4.44 · 2 bedroom…\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; 150, 80, 80, 55, 69, 220, 85, 75, 45, 7…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 92, 60, 60, 92,…\n$ number_of_reviews              &lt;dbl&gt; 20, 24, 47, 22, 17, 12, 133, 18, 6, 81,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.14, 0.16, 0.31, 0.17, 0.12, 0.09, 0.9…\n$ calculated_host_listings_count &lt;dbl&gt; 5, 5, 5, 52, 52, 5, 7, 52, 52, 7, 7, 1,…\n$ availability_365               &lt;dbl&gt; 89, 89, 89, 275, 274, 89, 365, 365, 365…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 3, 0, 0, 1, 3, 0, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…\n\n\n\n\n\nThe sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions. The following are utilised in this hands-on exercise:\n\nst_buffer() creates a buffer around spatial geometries.\nst_area() calculates the area of spatial geometries.\nst_intersects() returns a logical vector indicating which geometries in a set intersect with a reference geometry.\n\n\n\nScenario: The authority is planning to upgrade the existing cycling paths. They need to acquire 5 metres of reserved land on both sides of the paths. Hence, need to find the extent of the land to be acquired and their total area.\nSolution:\n\nbuffer_cycling = st_buffer(cyclingpath,\n                            dist=5, nQuadSegs = 30)\n\nbuffer_cycling$AREA = st_area(buffer_cycling)\n\nsum(buffer_cycling$AREA)\n\n1774367 [m^2]\n\n\n\n\n\nScenario: A pre-school service group wants to find out the numbers of pre-schools in each Planning Subzone.\nSolution: The st_intersects identify pre-schools in preschool3414 that are in each planning subzone of mpsz3414. The length() (under Base R) is used to count the number of pre-schools in each planning subzone. The top_n() (under dplyr) is used to obtain details of the planning subzone with the most number of preschools.\nAnswer: The new PreSch Count column shows the number of preschools in each planning subzone. The Tampines East subzone in Tampines planning area has the most number of preschools, a total of 72.\n\nmpsz3414$`PreSch Count` = lengths(st_intersects(mpsz3414, preschool3414))\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nScenario: Find the density of pre-school by planning subzone.\nSolution: The st_area() is used to derive the area of each planning subzone. Then, the mutate() (under dplyr) is used to compute the density.\nAnswer: The new PreSch Density column shows the number of preschools per square-kilometres in each planning subzone. The Cecil subzone in the Downtown Core planning area has the highest density of preschools, 35.6019 per square-kilometres.\n\nmpsz3414$Area = mpsz3414 %&gt;% st_area()\n\nmpsz3414 = mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\nsummary(mpsz3414$`PreSch Density`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   5.154   6.449  10.908  35.602 \n\ntop_n(mpsz3414, 1, `PreSch Density`)\n\nSimple feature collection with 1 feature and 18 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 29501.64 ymin: 28623.75 xmax: 29976.93 ymax: 29362.03\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO SUBZONE_N SUBZONE_C CA_IND    PLN_AREA_N PLN_AREA_C\n1       27          8     CECIL    DTSZ08      Y DOWNTOWN CORE         DT\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D  X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR 65AA82AF6F4D925D 2014-12-05 29730.2 29011.33\n  SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1   2116.095   196619.9 MULTIPOLYGON (((29808.18 28...            7\n            Area   PreSch Density\n1 196619.9 [m^2] 35.60169 [1/m^2]\n\n\n\n\n\nScenario: Find out the number of Airbnb listings in each Planning Subzone.\nSolution: The st_intersects identify Airbnb listings in listings_sf that are in each planning subzone of mpsz3414. The length() (under Base R) is used to count the number of listings in each planning subzone. The top_n() (under dplyr) is used to obtain details of the planning subzone with the most number of listings.\nAnswer: The new Airbnb Count column shows the number of preschools in each planning subzone. The Lavender subzone in Kallang planning area has the most number of listings, a total of 243.\n\nmpsz3414$`Airbnb Count` = lengths(st_intersects(mpsz3414, listings_sf))  \n\nsummary(mpsz3414$`Airbnb Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    2.00   10.78    9.00  243.00 \n\ntop_n(mpsz3414, 1, `Airbnb Count`) \n\nSimple feature collection with 1 feature and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 30342.65 ymin: 32035.6 xmax: 31453.96 ymax: 33233.11\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      126          6  LAVENDER    KLSZ06      N    KALLANG         KL\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR A7A07F328A38B6EF 2014-12-05 30874.41 32569.53\n  SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1    3609.15   757907.6 MULTIPOLYGON (((31389.56 32...            6\n            Area   PreSch Density Airbnb Count\n1 757907.6 [m^2] 7.916532 [1/m^2]          243\n\n\nScenario: Find the density of Airbnb listings by planning subzone.\nSolution: The st_area() is used to derive the area of each planning subzone. Then, the mutate() (under dplyr) is used to compute the density.\nAnswer: The new Airbnb Density column shows the number of listings per square-kilometres in each planning subzone. The People’s Park subzone in the Outram planning area has the highest density of listings, 504.6143 per square-kilometres.\nStudent Note: A filter was added before calculating the Airbnb density in different subzones to avoid getting an error from dividing zero values (subzones with no listing).&lt;\n\nmpsz3414$Area = mpsz3414 %&gt;% st_area()  \n\nmpsz3414 = mpsz3414 %&gt;%\n  filter(`Airbnb Count` != 0) %&gt;%\n  mutate(`Airbnb Density` = `Airbnb Count`/Area * 1000000)  \n\nsummary(mpsz3414$`Airbnb Density`)  \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.043   1.676   4.488  33.087  22.258 504.614 \n\ntop_n(mpsz3414, 1, `Airbnb Density`)\n\nSimple feature collection with 1 feature and 20 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28532.73 ymin: 29140.08 xmax: 29116.96 ymax: 29688.52\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1       34          2 PEOPLE'S PARK    OTSZ02      Y     OUTRAM         OT\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR B4120D23006C932A 2014-12-05 28831.78 29419.65\n  SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1   1822.193   93140.44 MULTIPOLYGON (((29099.02 29...            0\n            Area PreSch Density Airbnb Count   Airbnb Density\n1 93140.44 [m^2]      0 [1/m^2]           47 504.6143 [1/m^2]\n\n\n\n\n\n\nThe ggplot2 functions can be used to create useful statistical graphs for exploratory data analysis.\n\n\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`))) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school evenly distributed in Singapore?\",\n       subtitle= \"There are many planning subzones with a single pre-school, on the other hand, \\nthere are two planning subzones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\nStudent Note: Based on both histograms, the density of pre-schools is right-skewed, with outliers at values above 20.\n\n\n\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n       x = \"Pre-school density (per km sq)\",\n       y = \"Pre-school count\")\n\n\n\n\nStudent Note: There appears to be a positive correlation between pre-school count and pre-school density.\n\n\n\n\nhist(mpsz3414$`Airbnb Density`)\n\n\n\n\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`Airbnb Density`))) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light green\") +\n  labs(title = \"Are Airbnb listings evenly distributed in Singapore?\",\n       subtitle= \"There are many planning subzones with less than 50 listings, on the other hand, \\nthere are some planning subzones with more than a hundred listings\",\n      x = \"Airbnb density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\nStudent Note: Based on both histograms, the density of Airbnb listings is right-skewed, with outliers at values above 200.\n\n\n\n\nggplot(data=mpsz3414, \n       aes(y = `Airbnb Count`, \n           x= as.numeric(`Airbnb Density`)))+\n  geom_point(color=\"black\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n       x = \"Airbnb density (per km sq)\",\n       y = \"Airbnb count\")\n\n\n\n\nStudent Note: There appears to be a positive correlation between pre-school count and pre-school density.\n~~~ End of Hands-on Exercise 1A ~~~"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1A/Hands-on_Ex1A.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex1A/Hands-on_Ex1A.html#overview",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "In this page, I show how I had completed the Hands-on Exercise 1A. It includes the codes used, the graphs obtained as well as the insights gathered."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1A/Hands-on_Ex1A.html#data-acquisition",
    "href": "Hands-on_Ex/Hands-on_Ex1A/Hands-on_Ex1A.html#data-acquisition",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "The following data sets were used in this hands-on exercise:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb\n\nThe data sets were placed under two sub-folders:\n\ngeospatial (Master Plan Subzone Boundary, Pre-Schools Location, and Cycling Path), and\naspatial (Airbnb Listing).\n\nThese two sub-folders are within the data folder of my Hands-on_Ex1A folder."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1A/Hands-on_Ex1A.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex1A/Hands-on_Ex1A.html#getting-started",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "The two R packages used in this hands-on exercise are:\n\nsf for importing, managing, and processing geospatial data; and\ntidyverse for performing data science tasks such as importing, wrangling, and visualising data.\n\nThey are loaded into the R environment using the following code:\n\npacman::p_load(sf, tidyverse)\n\nStudent Note: This allows for loading of multiple packages in one line of code."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1A/Hands-on_Ex1A.html#importing-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex1A/Hands-on_Ex1A.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "The st_read() (under sf package) is used to import the three geospatial data sets:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format;\nCyclingPath, a line feature layer in ESRI shapefile format; and\nPreSchool, a point feature layer in kml file format.\n\n\n\nThe MP14_SUBZONE_WEB_PL data set was imported into R as a polygon feature data frame using st_read().\n\nmpsz = st_read(dsn = \"data/geospatial\", \n               layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\jmphosis\\ISSS624\\Hands-on_Ex\\Hands-on_Ex1A\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nStudent Note: The geospatial objects are multipolygon features. There are a total of 323 features and 15 fields in mpsz simple feature data frame. mpsz is in svy21 projected coordinate system. The bounding box provides the x extend and y extend of the data.\n\n\n\nThe CyclingPath data set was imported into R as a line feature data frame using st_read().\n\ncyclingpath = st_read(dsn = \"data/geospatial\", \n                      layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\jmphosis\\ISSS624\\Hands-on_Ex\\Hands-on_Ex1A\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2558 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nStudent Note: The geospatial objects are multistring features. There are a total of 2,558 features and 2 fields in cyclingpath linestring feature data frame. cyclingpath is in svy21 projected coordinate system.\n\n\n\nThe PreSchool data set was imported into R as a point feature data frame using st_read(). As it is in the kml format, the file extension is included.\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\jmphosis\\ISSS624\\Hands-on_Ex\\Hands-on_Ex1A\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nStudent Note: The geospatial objects are point features. There are a total of 2,290 features and 2 fields in preschool point feature data frame. preschool is in wgs84 coordinate system."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1A/Hands-on_Ex1A.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex1A/Hands-on_Ex1A.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "The following ways to retrieve information related to the content of a simple feature data frame were applied on the three data frames: mpsz, cyclingpath, and preschool:\n\nst_geometry() (under sf package) retrieves the geometries from an object.\nglimpse() (under dplyr package) retrieves information about the associated attributes in the data frame.\nhead() (under Base R) reveals complete information of a feature object.\n\n\n\nThe three functions were applied to mpsz:\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nStudent Note: The above shows that mpsz is a multipolygon feature object and in the svy21 projected coordinates systems.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nStudent Note: The above shows the data type of each field and some examples of the values.\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nStudent Note: The above shows the first 5 records in mpsz.\n\n\n\nThe three functions were applied to cyclingpath:\n\nst_geometry(cyclingpath)\n\nGeometry set for 2558 features \nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nStudent Note: The above shows that cyclingpath is a multilinestring feature object and in the svy21 projected coordinates systems.\n\nglimpse(cyclingpath)\n\nRows: 2,558\nColumns: 3\n$ PLANNING_A &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ PLANNING_1 &lt;chr&gt; \"BEDOK\", \"BEDOK\", \"BEDOK\", \"TAMPINES\", \"TAMPINES\", \"TAMPINE…\n$ geometry   &lt;MULTILINESTRING [m]&gt; MULTILINESTRING ((39782.85 ..., MULTILINEST…\n\n\nStudent Note: The above shows the data type of each field and some examples of the values. The PLANNING_A column appears to only have ‘NA’ values.\n\nhead(cyclingpath, n=5)\n\nSimple feature collection with 5 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 39598.41 ymin: 34811.14 xmax: 40031.89 ymax: 37075.99\nProjected CRS: SVY21\n  PLANNING_A PLANNING_1                       geometry\n1       &lt;NA&gt;      BEDOK MULTILINESTRING ((39782.85 ...\n2       &lt;NA&gt;      BEDOK MULTILINESTRING ((39931.51 ...\n3       &lt;NA&gt;      BEDOK MULTILINESTRING ((40031.89 ...\n4       &lt;NA&gt;   TAMPINES MULTILINESTRING ((39958.38 ...\n5       &lt;NA&gt;   TAMPINES MULTILINESTRING ((39652.87 ...\n\n\nStudent Note: The above shows the first 5 records in cyclingpath.\n\n\n\nThe three functions were applied to preschool:\n\nst_geometry(preschool)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nStudent Note: The above shows that preschool is a point feature object and in the wgs84 coordinates systems.\n\nglimpse(preschool)\n\nRows: 2,290\nColumns: 3\n$ Name        &lt;chr&gt; \"kml_1\", \"kml_2\", \"kml_3\", \"kml_4\", \"kml_5\", \"kml_6\", \"kml…\n$ Description &lt;chr&gt; \"&lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Att…\n$ geometry    &lt;POINT [°]&gt; POINT Z (103.8072 1.299333 0), POINT Z (103.826 1.31…\n\n\nStudent Note: The above shows the data type of each field and some examples of the values.\n\nhead(preschool, n=5)\n\nSimple feature collection with 5 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.8048 ymin: 1.299333 xmax: 103.8409 ymax: 1.435024\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n   Name\n1 kml_1\n2 kml_2\n3 kml_3\n4 kml_4\n5 kml_5\n                                                                                                                                                                                                                                                                                                                                                                                                Description\n1           &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDREN'S COVE PRESCHOOL PTE.LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT9390&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;498CC9FE48CC94D4&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n2                    &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDREN'S COVE PTE. LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT8675&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;22877550804213FD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n3       &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDREN'S VINEYARD PRESCHOOL PTE. LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT9308&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;B2FE90E44AD494E3&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n4 &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDTIME CARE & DEVELOPMENT CENTRE PTE.LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT9122&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;1384CDC0D14B76A1&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n5                               &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILTERN HOUSE&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT2070&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;FB24EAA6E73B2723&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n                       geometry\n1 POINT Z (103.8072 1.299333 0)\n2  POINT Z (103.826 1.312839 0)\n3 POINT Z (103.8409 1.348843 0)\n4 POINT Z (103.8048 1.435024 0)\n5   POINT Z (103.839 1.33315 0)\n\n\nStudent Note: The above shows the first 5 records in preschool."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1A/Hands-on_Ex1A.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex1A/Hands-on_Ex1A.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "The plot() (under R graphics) was used to visualise the geospatial features of the three data frames: mpsz, cyclingpath, and preschool.\n\n\n\nplot(mpsz)\n\n\n\n\n\nplot(st_geometry(mpsz))\n\n\n\n\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\nplot(st_geometry(cyclingpath))\n\n\n\n\n\nplot(cyclingpath[\"PLANNING_1\"])\n\n\n\n\n\n\n\n\nplot(preschool)\n\n\n\n\n\nplot(st_geometry(preschool))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1A/Hands-on_Ex1A.html#working-with-projection",
    "href": "Hands-on_Ex/Hands-on_Ex1A/Hands-on_Ex1A.html#working-with-projection",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "It is essential for two geospatial data objects to be projected using similar coordinate systems. In the hands-on exercise, we projected a simple feature data frame from one coordinate system to another through projection transformation.\n\n\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nThe above shows that the mpsz data frame has the wrong EPSG code (9001). Hence, the st_set_crs() (under sf package) is used to assign the correct EPSG code (3414).\n\nmpsz3414 = st_set_crs(mpsz, 3414)\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\nIn geospatial analytics, data in the geographic coordinate system are often transformed to the projected coordinate system. This allows analysis based on measurements such as distance and area.\nThe st_transform() (under sf package) is required when the coordinate system needs to be transformed (and not just a matter of changing the EPSG code).\n\npreschool3414 = st_transform(preschool, \n                             crs = 3414)\n\nst_geometry(preschool3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1A/Hands-on_Ex1A.html#importing-and-converting-an-aspatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex1A/Hands-on_Ex1A.html#importing-and-converting-an-aspatial-data",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "Aspatial data are not geospatial data but have data fields that capture the x- and y-coordinates of the data points.\nThe Airbnb listing aspatial data is imported into the R environment as a tibble data frame, and converted to a simple feature data frame.\nThe csv file is imported using read_csv() (under readr package) as a tibble data frame. Then, a quick check is conducted on the imported data.\n\nlistings = read_csv(\"data/aspatial/listings.csv\")\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,483 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Villa in…  367042 Belinda   East Region         Tampines          1.35\n 2  71896 Home in …  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Home in …  367042 Belinda   East Region         Tampines          1.35\n 4 275343 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Home in …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 Rental u… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 369141 Place to… 1521514 Elizabeth Central Region      Newton            1.31\n# ℹ 3,473 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\nStudent Note: The listing tibble data frame contains 3,483 rows and 18 columns.\nThe longitude and latitude columns are used to convert the tibble data frame into a simple feature data frame using st_as_sf() (under sf package). Then, the contents of the newly created simple feature data frame, listings_sf, is examined using glimpse() (under dplyr package). The longitude and latitude columns have been replaced by a new column, geometry.\n\nlistings_sf = st_as_sf(listings,\n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\nglimpse(listings_sf)\n\nRows: 3,483\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Villa in Singapore · ★4.44 · 2 bedroom…\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; 150, 80, 80, 55, 69, 220, 85, 75, 45, 7…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 92, 60, 60, 92,…\n$ number_of_reviews              &lt;dbl&gt; 20, 24, 47, 22, 17, 12, 133, 18, 6, 81,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.14, 0.16, 0.31, 0.17, 0.12, 0.09, 0.9…\n$ calculated_host_listings_count &lt;dbl&gt; 5, 5, 5, 52, 52, 5, 7, 52, 52, 7, 7, 1,…\n$ availability_365               &lt;dbl&gt; 89, 89, 89, 275, 274, 89, 365, 365, 365…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 3, 0, 0, 1, 3, 0, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1A/Hands-on_Ex1A.html#geoprocessing-with-sf-package",
    "href": "Hands-on_Ex/Hands-on_Ex1A/Hands-on_Ex1A.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "The sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions. The following are utilised in this hands-on exercise:\n\nst_buffer() creates a buffer around spatial geometries.\nst_area() calculates the area of spatial geometries.\nst_intersects() returns a logical vector indicating which geometries in a set intersect with a reference geometry.\n\n\n\nScenario: The authority is planning to upgrade the existing cycling paths. They need to acquire 5 metres of reserved land on both sides of the paths. Hence, need to find the extent of the land to be acquired and their total area.\nSolution:\n\nbuffer_cycling = st_buffer(cyclingpath,\n                            dist=5, nQuadSegs = 30)\n\nbuffer_cycling$AREA = st_area(buffer_cycling)\n\nsum(buffer_cycling$AREA)\n\n1774367 [m^2]\n\n\n\n\n\nScenario: A pre-school service group wants to find out the numbers of pre-schools in each Planning Subzone.\nSolution: The st_intersects identify pre-schools in preschool3414 that are in each planning subzone of mpsz3414. The length() (under Base R) is used to count the number of pre-schools in each planning subzone. The top_n() (under dplyr) is used to obtain details of the planning subzone with the most number of preschools.\nAnswer: The new PreSch Count column shows the number of preschools in each planning subzone. The Tampines East subzone in Tampines planning area has the most number of preschools, a total of 72.\n\nmpsz3414$`PreSch Count` = lengths(st_intersects(mpsz3414, preschool3414))\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\nScenario: Find the density of pre-school by planning subzone.\nSolution: The st_area() is used to derive the area of each planning subzone. Then, the mutate() (under dplyr) is used to compute the density.\nAnswer: The new PreSch Density column shows the number of preschools per square-kilometres in each planning subzone. The Cecil subzone in the Downtown Core planning area has the highest density of preschools, 35.6019 per square-kilometres.\n\nmpsz3414$Area = mpsz3414 %&gt;% st_area()\n\nmpsz3414 = mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\nsummary(mpsz3414$`PreSch Density`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   5.154   6.449  10.908  35.602 \n\ntop_n(mpsz3414, 1, `PreSch Density`)\n\nSimple feature collection with 1 feature and 18 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 29501.64 ymin: 28623.75 xmax: 29976.93 ymax: 29362.03\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO SUBZONE_N SUBZONE_C CA_IND    PLN_AREA_N PLN_AREA_C\n1       27          8     CECIL    DTSZ08      Y DOWNTOWN CORE         DT\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D  X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR 65AA82AF6F4D925D 2014-12-05 29730.2 29011.33\n  SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1   2116.095   196619.9 MULTIPOLYGON (((29808.18 28...            7\n            Area   PreSch Density\n1 196619.9 [m^2] 35.60169 [1/m^2]\n\n\n\n\n\nScenario: Find out the number of Airbnb listings in each Planning Subzone.\nSolution: The st_intersects identify Airbnb listings in listings_sf that are in each planning subzone of mpsz3414. The length() (under Base R) is used to count the number of listings in each planning subzone. The top_n() (under dplyr) is used to obtain details of the planning subzone with the most number of listings.\nAnswer: The new Airbnb Count column shows the number of preschools in each planning subzone. The Lavender subzone in Kallang planning area has the most number of listings, a total of 243.\n\nmpsz3414$`Airbnb Count` = lengths(st_intersects(mpsz3414, listings_sf))  \n\nsummary(mpsz3414$`Airbnb Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    2.00   10.78    9.00  243.00 \n\ntop_n(mpsz3414, 1, `Airbnb Count`) \n\nSimple feature collection with 1 feature and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 30342.65 ymin: 32035.6 xmax: 31453.96 ymax: 33233.11\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      126          6  LAVENDER    KLSZ06      N    KALLANG         KL\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR A7A07F328A38B6EF 2014-12-05 30874.41 32569.53\n  SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1    3609.15   757907.6 MULTIPOLYGON (((31389.56 32...            6\n            Area   PreSch Density Airbnb Count\n1 757907.6 [m^2] 7.916532 [1/m^2]          243\n\n\nScenario: Find the density of Airbnb listings by planning subzone.\nSolution: The st_area() is used to derive the area of each planning subzone. Then, the mutate() (under dplyr) is used to compute the density.\nAnswer: The new Airbnb Density column shows the number of listings per square-kilometres in each planning subzone. The People’s Park subzone in the Outram planning area has the highest density of listings, 504.6143 per square-kilometres.\nStudent Note: A filter was added before calculating the Airbnb density in different subzones to avoid getting an error from dividing zero values (subzones with no listing).&lt;\n\nmpsz3414$Area = mpsz3414 %&gt;% st_area()  \n\nmpsz3414 = mpsz3414 %&gt;%\n  filter(`Airbnb Count` != 0) %&gt;%\n  mutate(`Airbnb Density` = `Airbnb Count`/Area * 1000000)  \n\nsummary(mpsz3414$`Airbnb Density`)  \n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.043   1.676   4.488  33.087  22.258 504.614 \n\ntop_n(mpsz3414, 1, `Airbnb Density`)\n\nSimple feature collection with 1 feature and 20 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28532.73 ymin: 29140.08 xmax: 29116.96 ymax: 29688.52\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1       34          2 PEOPLE'S PARK    OTSZ02      Y     OUTRAM         OT\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR B4120D23006C932A 2014-12-05 28831.78 29419.65\n  SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1   1822.193   93140.44 MULTIPOLYGON (((29099.02 29...            0\n            Area PreSch Density Airbnb Count   Airbnb Density\n1 93140.44 [m^2]      0 [1/m^2]           47 504.6143 [1/m^2]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1A/Hands-on_Ex1A.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex/Hands-on_Ex1A/Hands-on_Ex1A.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 1A",
    "section": "",
    "text": "The ggplot2 functions can be used to create useful statistical graphs for exploratory data analysis.\n\n\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`))) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school evenly distributed in Singapore?\",\n       subtitle= \"There are many planning subzones with a single pre-school, on the other hand, \\nthere are two planning subzones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\nStudent Note: Based on both histograms, the density of pre-schools is right-skewed, with outliers at values above 20.\n\n\n\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n       x = \"Pre-school density (per km sq)\",\n       y = \"Pre-school count\")\n\n\n\n\nStudent Note: There appears to be a positive correlation between pre-school count and pre-school density.\n\n\n\n\nhist(mpsz3414$`Airbnb Density`)\n\n\n\n\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`Airbnb Density`))) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light green\") +\n  labs(title = \"Are Airbnb listings evenly distributed in Singapore?\",\n       subtitle= \"There are many planning subzones with less than 50 listings, on the other hand, \\nthere are some planning subzones with more than a hundred listings\",\n      x = \"Airbnb density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\nStudent Note: Based on both histograms, the density of Airbnb listings is right-skewed, with outliers at values above 200.\n\n\n\n\nggplot(data=mpsz3414, \n       aes(y = `Airbnb Count`, \n           x= as.numeric(`Airbnb Density`)))+\n  geom_point(color=\"black\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n       x = \"Airbnb density (per km sq)\",\n       y = \"Airbnb count\")\n\n\n\n\nStudent Note: There appears to be a positive correlation between pre-school count and pre-school density.\n~~~ End of Hands-on Exercise 1A ~~~"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1B/Hands-on_Ex1B.html",
    "href": "Hands-on_Ex/Hands-on_Ex1B/Hands-on_Ex1B.html",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "In this page, I show how I had completed the Hands-on Exercise 1B, on plotting choropleth maps using the tmap package. It includes the codes used, the graphs obtained as well as the insights gathered.\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors.\n\n\n\nThe R packages used in this hands-on exercise are:\n\ntmap for thematic mapping;\nsf for importing, managing, and processing geospatial data; and\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data.\n\nThey are loaded into the R environment using the following code:\n\npacman::p_load(sf, tmap, tidyverse)\n\nStudent Note: This allows for loading of multiple packages in one line of code.\n\n\n\nThe following data sets are used in this hands-on exercise:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 from the Department of Statistics Singapore\n\nThe data sets are placed under two sub-folders:\n\ngeospatial (Master Plan Subzone Boundary), and\naspatial (Residents).\n\nThese two sub-folders are within the data folder of my Hands-on_Ex1B folder.\n\n\nThe st_read() (under sf package) is used to import the geospatial data set: MP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format.\n\nmpsz = st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\jmphosis\\ISSS624\\Hands-on_Ex\\Hands-on_Ex1B\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nStudent Note: The geospatial objects are multipolygon features. There are a total of 323 features and 15 fields in mpsz simple feature data frame. mpsz is in svy21 projected coordinate system. The bounding box provides the x extend and y extend of the data.\n\n\n\nThe read_csv() (under readr package) is used to import the aspatial data set: respopagsex2000to2018, a csv file with PA and SZ fields that can be used as unique identifiers to geocode to the MP14_SUBZONE_WEB_PL shapefile.\n\npopdata = read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\n\nA data table was prepared to include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0-4 to age group 20-24;\nECONOMY ACTIVE: age group 25-29 to age group 60-64;\nAGED: age group 65 and above;\nTOTAL: all age groups; and\nDEPENDENCY: the ratio between young + aged over economy active group.\n\nThe functions used were:\n\npivot_wider() (under tidyr package); and\nmutate(), filter(), group_by() and select() (under dplyr package).\n\n\npopdata2020 = popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\n           rowSums(.[13:15]))%&gt;%\n  mutate(`AGED`=rowSums(.[16:21])) %&gt;%\n  mutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n         /`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n         `ECONOMY ACTIVE`, `AGED`, \n         `TOTAL`, `DEPENDENCY`)\n\npopdata2020 = popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n            .funs = funs(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nThe geographical data and attribute table were then joined using left_join() (under dplyr package).\n\nmpsz_pop2020 = left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nwrite_rds(mpsz_pop2020, \"data/mpszpop2020.rds\")\n\n\n\n\n\n\n\nA cartographic standard choropleth map was drawn.\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\nThe tmap package is used to draw a high quality cartographic choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nThe step by step illustration of the basic building blocks of tmap are shown below:\nUsing tm_shape() and tm_polygons():\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\nAdding DEPENDENCY as target variable:\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\nUsing tm_fill() only:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\nUsing tm_fill() and tm_borders():\nStudent Note: The combined use of tm_fill() and tm_borders() is the equivalent of using tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\nUsing the style argument of tm_fill() or tm_polygons():\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nUsing different styles:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"pretty\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"bclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"log10_pretty\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"pretty\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"dpih\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"headtails\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nUsing different number of bins:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nUsing custom breaks:\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nUsing ColourBrewer palette:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nIncluding map legend:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\nChanging map style:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\nFacet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\nMaps of distribution of young and aged populations using tm_fill() and tmap_arrange()\nStudent Note: The Northeast region more of the young, and less of the aged. This reflects the demographies of new towns like Punggol and Sengkang.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\nyoungmap = tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap = tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\nMaps of distribution of aged populations and dependency ratios\nStudent Note: Even though the distribution of the aged varies across different subzones, the dependency levels are generally the same. The exception is Loyang West which has a very high dependency ratio.\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n              style = c(\"equal\", \"quantile\"), \n              palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n~~~ End of Hands-on Exercise 1B ~~~"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1B/Hands-on_Ex1B.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex1B/Hands-on_Ex1B.html#overview",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "In this page, I show how I had completed the Hands-on Exercise 1B, on plotting choropleth maps using the tmap package. It includes the codes used, the graphs obtained as well as the insights gathered.\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1B/Hands-on_Ex1B.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex1B/Hands-on_Ex1B.html#getting-started",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "The R packages used in this hands-on exercise are:\n\ntmap for thematic mapping;\nsf for importing, managing, and processing geospatial data; and\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data.\n\nThey are loaded into the R environment using the following code:\n\npacman::p_load(sf, tmap, tidyverse)\n\nStudent Note: This allows for loading of multiple packages in one line of code."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1B/Hands-on_Ex1B.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex1B/Hands-on_Ex1B.html#importing-data",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "The following data sets are used in this hands-on exercise:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 from the Department of Statistics Singapore\n\nThe data sets are placed under two sub-folders:\n\ngeospatial (Master Plan Subzone Boundary), and\naspatial (Residents).\n\nThese two sub-folders are within the data folder of my Hands-on_Ex1B folder.\n\n\nThe st_read() (under sf package) is used to import the geospatial data set: MP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format.\n\nmpsz = st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\jmphosis\\ISSS624\\Hands-on_Ex\\Hands-on_Ex1B\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nStudent Note: The geospatial objects are multipolygon features. There are a total of 323 features and 15 fields in mpsz simple feature data frame. mpsz is in svy21 projected coordinate system. The bounding box provides the x extend and y extend of the data.\n\n\n\nThe read_csv() (under readr package) is used to import the aspatial data set: respopagsex2000to2018, a csv file with PA and SZ fields that can be used as unique identifiers to geocode to the MP14_SUBZONE_WEB_PL shapefile.\n\npopdata = read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\n\nA data table was prepared to include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0-4 to age group 20-24;\nECONOMY ACTIVE: age group 25-29 to age group 60-64;\nAGED: age group 65 and above;\nTOTAL: all age groups; and\nDEPENDENCY: the ratio between young + aged over economy active group.\n\nThe functions used were:\n\npivot_wider() (under tidyr package); and\nmutate(), filter(), group_by() and select() (under dplyr package).\n\n\npopdata2020 = popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\n           rowSums(.[13:15]))%&gt;%\n  mutate(`AGED`=rowSums(.[16:21])) %&gt;%\n  mutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n         /`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n         `ECONOMY ACTIVE`, `AGED`, \n         `TOTAL`, `DEPENDENCY`)\n\npopdata2020 = popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n            .funs = funs(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nThe geographical data and attribute table were then joined using left_join() (under dplyr package).\n\nmpsz_pop2020 = left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nwrite_rds(mpsz_pop2020, \"data/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1B/Hands-on_Ex1B.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex1B/Hands-on_Ex1B.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise 1B",
    "section": "",
    "text": "A cartographic standard choropleth map was drawn.\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\nThe tmap package is used to draw a high quality cartographic choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nThe step by step illustration of the basic building blocks of tmap are shown below:\nUsing tm_shape() and tm_polygons():\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\nAdding DEPENDENCY as target variable:\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\nUsing tm_fill() only:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\nUsing tm_fill() and tm_borders():\nStudent Note: The combined use of tm_fill() and tm_borders() is the equivalent of using tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\nUsing the style argument of tm_fill() or tm_polygons():\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nUsing different styles:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"pretty\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"bclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"log10_pretty\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"pretty\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"dpih\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"headtails\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nUsing different number of bins:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nUsing custom breaks:\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nUsing ColourBrewer palette:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nIncluding map legend:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\nChanging map style:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\nFacet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\nMaps of distribution of young and aged populations using tm_fill() and tmap_arrange()\nStudent Note: The Northeast region more of the young, and less of the aged. This reflects the demographies of new towns like Punggol and Sengkang.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\nyoungmap = tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap = tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\nMaps of distribution of aged populations and dependency ratios\nStudent Note: Even though the distribution of the aged varies across different subzones, the dependency levels are generally the same. The exception is Loyang West which has a very high dependency ratio.\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n              style = c(\"equal\", \"quantile\"), \n              palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n~~~ End of Hands-on Exercise 1B ~~~"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2B.html",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2B.html",
    "title": "Hands-on Exercise 2B",
    "section": "",
    "text": "Note: This Hands-on Exercise 2B combines both 9 Global Measures of Spatial Autocorrelation and 10 Local Measures of Spatial Autocorrelation on r4gdsa.netlify.app since there are some overlaps in Sections 9.1 to 9.5.\n\n\nIn this page, I show how I had completed the Hands-on Exercise 2B, on computing Global and Local Measures of Spatial Autocorrelation (GLSA) using the spdep package.\nThe objectives are:\n\nImport geospatial data using appropriate function(s) of sf package;\nImport csv file using appropriate function of readr package;\nPerform relational join using appropriate join function of dplyr package;\nCompute Global Spatial Autocorrelation (GSA) statistics using appropriate functions of spdep package, including:\n\nPlot Moran scatterplot,\nCompute and plot spatial correlogram.\n\nCompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers using appropriate functions spdep package;\nCompute Getis-Ord’s Gi statistics for detecting hot spot or/and cold spot area using appropriate functions of spdep package; and\nVisualise the analysis output using tmap package.\n\n\n\n\n\n\nIn spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province.\nHence, the appropriate spatial statistical methods are applied to study:\n\nIs development evenly distributed geographically?\nIf no, is there sign of spatial clustering? If yes, where are these clusters?\n\nFor this hands-on exercise, the GDP per capita (as a development indicator) of Hunan province in China is studied.\n\n\n\nThe following data sets are used in this hands-on exercise:\n\nHunan’s County Boundary Layer. This is a geospatial data set in ESRI shapefile format.\nHunan’s Local Development Indicators 2012. This csv file contains data on selected Hunan’s local development indicators in 2012.\n\nThe data sets are placed under two sub-folders:\n\ngeospatial (County Boundary Layer), and\naspatial (Local Development Indicators 2012).\n\nThese two sub-folders are within the data folder of my Hands-on_Ex2 folder.\n\n\n\nThe R packages used in this hands-on exercises are:\n\ntmap for thematic mapping;\nsf for importing, managing, and processing geospatial data;\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data; and\nspdep for analysing spatial dependence and spatial relationships in data.\n\nThey are loaded into the R environment using the following code:\n\npacman::p_load(sf, spdep, tmap, tidyverse)\n\nStudent Note: This allows for loading of multiple packages in one line of code.\n\n\n\n\n\n\nThe st_read() (under sf package) is used to import the geospatial data set: hunan, a polygon feature layer in ESRI shapefile format.\nStudent Note: The geospatial objects are polygon features. There are a total of 88 features and 7 fields in hunan simple feature data frame. hunan is in wgs84 coordinate system.\n\nhunan = st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\jmphosis\\ISSS624\\Hands-on_Ex\\Hands-on_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\nThe read_csv() (under readr package) is used to import the aspatial data set: hunan_2012, a csv file.\nStudent Note: The hunan_2012 tibble data frame contains 88 rows and 29 columns. There are two columns with character data - County and City.\n\nhunan2012 = read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\nThe attribute table of the spatial polygons data frame, hunan, is updated using the attribute fields of the tibble data frame, hunan2012 using left_join() (under dplyr package).\nStudent Note: Without explicitly stating the “by” argument for left_join(), the two tables are joined by the ‘County’ columns.\n\nhunan = left_join(hunan,hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\nhunan\n\nSimple feature collection with 88 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\n\n\n\n\nA basemap and a choropleth map are prepared usign qtm() (under tmap package) to visualise the 2012 Gross Domestic Product Per Capita (GDPPC).\nStudent Note: The two different styles used are “equal” and “quantile”. The equal style shows that high GDPPC (in absolute terms) is concentrated in a few counties in the northeast region. The quantile style shows that the top 50% of counties in terms of GDPPC are mainly on the east side of Hunan.\n\nequal = tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile = tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n\n\n\n\n\n\n\n\nThe Global Spatial Autocorrelation (GSA) statistics are computed for the study area. Also, Spatial Complete Randomness (SCR) test for GSA is performed.\n\nStudent Note: The SCR test for GSR checks if the spatial distribution of GDPPC is entirely random and lacks any systematic spatial pattern. In other words, it assesses whether the observed spatial pattern of the GDPPC deviates significantly from what would be expected under spatial randomness.\n\n\n\nFirstly, the spatial weights of the study area would need to be computed to define the neighbourhood relationships between the geographical units (i.e., county) in the study area.\nThe poly2nb() (under spdep package) is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries.\nThe “queen” argument in the function is set to either TRUE (default) or FALSE. The TRUE option will return a list of first order neighbours using the Queen’s continguity criteria.\n\nStudent Note: According to Queen’s criteria, two regions are considered neighbours if they share any part of their boundary (even if it is a single point). This results in a more inclusive definition of neighbour relationships.\n\n\nStudent Note: The summary report below shows that there are 88 area units in hunan. The most connected area unit (85) has 11 neighbours. The least connected area units (30 and 65) have only one neighbour each.\n\n\nwm_q = poly2nb(hunan, queen = TRUE)\n\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\n\n\nWeights are assigned to each neighbouring polygon. The nb21listw() (under spdep package) is used to convert a neighborhood object, wm_q, to a listw object, rswm_q (style=“W”). This allows row-standardised distance weight matrices to be created, whereby each row sums to 1. The “style” argument influences the specific characteristics of the weights matrix.\nFor this hands-on exercise, the “style=”W”” is used, each neighboring polygon is assigned equal weight. This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summarise the neighbors’ values, its downside is that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.\n\nStudent Note:\n\nThe “style” argument set to “W” specifies a binary spatial weight matrix, where the presence of a spatial relationship is indicated by 1, and absence by 0. All neighbouring units are considered equal in terms of their impact on the target unit, reflecting a uniform spatial relation\n\nB is the basic binary coding.\nC is globally standardised (sums over all links to n).\nU is equal to C divided by the number of neighbours (sums over all links to unity).\nS is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999 (sums over all links to n).\n\nThe “zero.policy” argument returns lists of non-neighbours when set to TRUE. It means that weight vectors of zero length are inserted for regions without neighbour in the neighbours list. This in turn generates lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length equal to the number of neighbours. The spatially lagged value of x for the zero-neighbour region will then be zero.\n\nThis ensures that even regions without neighbors are included in the spatial weights matrix, and their spatial lag values are explicitly set to zero. This can be useful in certain analytical contexts where the treatment of regions without neighbours is important for the analysis.\n\n\n\n\nrswm_q = nb2listw(wm_q,\n                  style=\"W\",\n                  zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\n\nMoran’s I statistics testing is performed using moran.test() (under spdep package) to study the GSA.\n\nQuestion: What statistical conclusion can be drawn from the output below?\nAnswer:\n\nThe Moran’s I statistic of 0.300749970 suggests a positive spatial autocorrelation in the GDPPC variable.\nThe p-value of 1.095e-06 is very small, indicating a strong evidence to reject the null hypothesis of spatial randomness and support the alternative hypothesis.\nThe alternative hypothesis is that there is a significant positive autocorrelation in the GDPPC, i.e., neighbouring regions tend to have similar GDPPC values (cluster together).\n\n\n\nmoran.test(hunan$GDPPC, \n           listw = rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n\nA permutation test (999 simulations using Monte Carlo) for Moran’s I statistic is performed using moran.mc() (under spdep package).\n\nStudent Note:\n\nThe set.seed() is used to ensure reproducibility.\nThe “na.action = na.omit” argument specifies the action to be taken if there are missing values. In this case, any observations with missing values are omitted from the analysis.\nThe “+ 1” is typically added to the number of simulations because the observed value is also included in the distribution of simulated values.\n\n\n\nQuestion: What statistical conclusion can be drawn from the output below?\nAnswer:\n\nThe Moran’s I statistic of 0.30075 suggests a positive spatial autocorrelation in the GDPPC variable.\nThe p-value of 0.001 is less than the commonly used significance level of 0.05, indicating a strong evidence to reject the null hypothesis of spatial randomness and support the alternative hypothesis.\nThe alternative hypothesis is that there is a significant positive autocorrelation in the GDPPC, i.e., neighbouring regions tend to have similar GDPPC values (cluster together).\nThe rank of 1,000 of the observed Moran’s I statistic compared to the simulated values means that the observed spatial pattern is unlikely to have occurred by random chance.\n\n\n\nset.seed(1234)\nbperm_moran = moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm_moran\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nThe simulated Moran’s I test statistics can be observed in further detail by plotting the distribution of the statistical values as a histogram. The hist() and abline() (under graphics package) are used.\n\nStudent Note: The distribution of simulated values show that more than half are negative values (i.e., negative correlation). It also shows that the observed Moran’s I statistic of 0.30075 would be considered an outlier, and unlikely to have occurred by chance.\n\n\nmean(bperm_moran$res[1:999])\n\n[1] -0.01504572\n\nvar(bperm_moran$res[1:999])\n\n[1] 0.004371574\n\nsummary(bperm_moran$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm_moran$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\nAlternatively, the graphs may be plotted using ggplot(), geom_histogram(), and geom_vline() (under ggplot2 package).\n\ndf = data.frame(Moran_I = bperm_moran$res[1:999])\n\nggplot(df, aes(x = Moran_I)) +\n  geom_histogram(binwidth = 0.02, fill = \"light blue\", color = \"black\", alpha = 0.7) +\n  labs(title = \"Histogram of Simulated Moran's I\",\n       x = \"Simulated Moran's I\",\n       y = \"Frequency\") +\n  theme_minimal() +\n  theme(panel.grid = element_blank()) +\n  geom_vline(xintercept = 0, color = \"red\", linetype = \"dashed\")\n\n\n\n\n\n\n\n\nGeary’s c statistics testing is performed using geary.test() (under spdep package) to study the GSA.\n\nQuestion: What statistical conclusion can be drawn from the output below?\nAnswer:\n\nThe Geary’s c statistic of 0.6907223 suggests a positive spatial autocorrelation in the GDPPC variable, i.e., neighbouring regions tend to have similar GDPPC values.\nThe p-value of 0.0001526 is less than the commonly used significance level of 0.05, indicating a strong evidence to reject the null hypothesis of spatial randomness and support the alternative hypothesis.\nThe alternative hypothesis is that there is a significant positive autocorrelation in the GDPPC, i.e., neighbouring regions tend to have similar GDPPC values (cluster together).\n\n\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\nA permutation test (999 simulations using Monte Carlo) for Geary’s c statistic is performed using geary.mc() (under spdep package).\n\nStudent Note:\n\nThe set.seed() is used to ensure reproducibility.\nThe “+ 1” is typically added to the number of simulations because the observed value is also included in the distribution of simulated values.\n\n\n\nQuestion: What statistical conclusion can be drawn from the output below?\nAnswer:\n\nThe Geary’s c statistic of 0.69072 suggests a positive spatial autocorrelation in the GDPPC variable.\nThe p-value of 0.001 is less than the commonly used significance level of 0.05, indicating a strong evidence to reject the null hypothesis of spatial randomness and support the alternative hypothesis.\nThe alternative hypothesis is that there is a significant positive autocorrelation in the GDPPC, i.e., neighbouring regions tend to have similar GDPPC values (cluster together).\nThe rank of 1 of the observed Geary’s c statistic compared to the simulated values means that the observed spatial pattern is unlikely to have occurred by random chance.\n\n\n\nset.seed(1234)\nbperm_geary=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm_geary\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nThe simulated Geary’s c test statistics can be observed in further detail by plotting the distribution of the statistical values as a histogram. The hist() and abline() (under graphics package) are used.\n\nStudent Note: The distribution of simulated values show that more than half are abpve 1.0 (i.e., negative correlation). It also shows that the observed Geary’s c statistic of 69072 would be considered an outlier, and unlikely to have occurred by chance.\n\n\nmean(bperm_geary$res[1:999])\n\n[1] 1.004402\n\nvar(bperm_geary$res[1:999])\n\n[1] 0.007436493\n\nsummary(bperm_geary$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm_geary$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\")\n\n\n\n\nAlternatively, the graphs may be plotted using ggplot(), geom_histogram(), and geom_vline() (under ggplot2 package).\n\ndf = data.frame(Geary_C = bperm_geary$res[1:999])  \n\nggplot(df, aes(x = Geary_C)) + \n  geom_histogram(binwidth = 0.02, fill = \"light blue\", color = \"black\", alpha = 0.7) +\n  labs(title = \"Histogram of Simulated Geary's c\",\n       x = \"Simulated Geary's c\",\n       y = \"Frequency\") +\n  theme_minimal() +\n  theme(panel.grid = element_blank()) +\n  geom_vline(xintercept = 1.0, color = \"red\", linetype = \"dashed\")\n\n\n\n\n\n\n\n\n\nSpatial correlograms are great to examine patterns of spatial autocorrelation in the data or model residuals. They show how correlated pairs of spatial observations are when the distance (lag) between them is increased. They are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.\nAlthough correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n\nThe sp.correlogram() (under spdep package) is used to compute a 6-lag spatial correlogram of the GDPPC variable. The GSA used is Moran’s I. The output is plotted using plot() (under graphics package).\n\nStudent Note: The “method=”I”” argument specifies that Moran’s I should be used as the measure of spatial autocorrelation.\n\n\nQuestion: What statistical observation can be drawn from the plot below?\nAnswer:\n\nMoran’s I estimates are positive at shorter distance lags (distance lags 1-4). The positive values suggest that neighbouring regions tend to have similar GDPPC values (cluster together).\nMoran’s I estimates are negative at longer distance lags (distance lags 5-6). The negative values suggest that regions further away have dissimilar GDPPC values.\nThe p-values are generally very small (except for distance lag 4), indicating statistical significance, and high level of confidence to reject the null hypothesis of spatial randomness.\nOverall, statistical significance observed for positive correlation at distance lags of 1-3, and negative correlation at distance lags of 5-6.\n\n\n\nMI_corr = sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important to examine the full analysis report by printing out the analysis results.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n\nThe sp.correlogram() (under spdep package) is used to compute a 6-lag spatial correlogram of the GDPPC variable. The GSA used is Geary’s c. The output is plotted using plot() (under graphics package).\n\nStudent Note: The “method=”C”” argument specifies that Geary’s c should be used as the measure of spatial autocorrelation.\n\n\nQuestion: What statistical observation can be drawn from the plot below?\nAnswer:\n\nGeary’s c estimates are below 1.0 at shorter distance lags (distance lags 1-3). These values suggest that neighbouring regions tend to have similar GDPPC values (cluster together).\nGeary’s c estimates are above 1.0 at longer distance lags (distance lags 4-6). These values suggest that regions further away have dissimilar GDPPC values.\nThe p-values are small for distance lags 1, 2, and 5), indicating statistical significance, and high level of confidence to reject the null hypothesis of spatial randomness.\nOverall, statistical significance observed for positive correlation at distance lags of 1-2, and negative correlation at distance lag of 5.\n\n\n\nGC_corr = sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important to examine the full analysis report by printing out the analysis results.\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nNote: The following sections follows 10 Local Measures of Spatial Autocorrelation (from Sections 10.6 onwards) on r4gdsa.netlify.app\n\n\n\n\nLocal Indicators of Spatial Association (LISA) are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable.\nThe appropriate LISA, including local Moran’s I, are applied to detect cluster and/or outlier from the 2012 GDP per capita of the Hunan province in China.\n\n\nThe localmoran() (under spdep package) is used to compute the local Moran’s I. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\n\nIi: the local Moran’s I statistic.\nE.Ii: the expectation of local Moran’s I statistic under the randomisation hypothesis.\nVar.Ii: the variance of local Moran’s I statistic under the randomisation hypothesis.\nZ.Ii: the standard deviate of local Moran’s I statistic.\nPr(): the p-value of local Moran’s I statistic.\n\n\nStudent Note:\n\nPositive local Moran’s I values indicate a location surrounded by similar values (High-High or Low-Low).\nNegative values indicate a location surrounded by dissimilar values (High-Low or Low-High).\nValues near zero suggest no significant local spatial autocorrelation.\n\n\nThe local Moran’s I of the GDPPC at the county level is computed.\n\nfips = order(hunan$County)\nlocalMI = localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nThe contents of the local Moran’s I statistic matrix is derived using printCoefmat() (under stats package).\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\nThe local Moran’s I dataframe (i.e. localMI) is then appended onto hunan SpatialPolygonDataFrame. The output SpatialPolygonDataFrame is called hunan.localMI.\n\nhunan.localMI = cbind(hunan,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n\nUsing choropleth mapping functions of tmap package, the local Moran’s I values are plotted.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nThe choropleth shows evidence of both positive and negative Ii values. However, it is useful to consider the p-values for each of these values to see their statistical significance. A choropleth map of Moran’s I p-values using functions of tmap package is plotted below.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nPutting the two plots side by side:\n\nlocalMI.map = tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map = tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nThe LISA Cluster Map shows the significant locations that are colour coded by the type of spatial autocorrelation.\nBefore generating the LISA cluster map, the Moran scatterplot is plotted.\n\n\nThe moran.plot() (under spdep package) is used to plot the Moran scatterplot, which is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. These are the high-high locations.\n\nnci = moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\n\n\n\nThe scale() (from base package) is used to center and scale the variable. Centering is done by subtracting the mean (omitting NAs) of the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\nThe as.vector() (under base package) is added to make sure that the data type derived is a vector that maps neatly into the dataframe.\n\nhunan$Z.GDPPC = scale(hunan$GDPPC) %&gt;% \n  as.vector\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667\n2 Changde 21100 Hanshou      County Hanshou 20981\n3 Changde 21101  Jinshi County City  Jinshi 34592\n4 Changde 21102      Li      County      Li 24473\n5 Changde 21103   Linli      County   Linli 25554\n6 Changde 21104  Shimen      County  Shimen 27137\n                        geometry      Z.GDPPC\n1 POLYGON ((112.0625 29.75523... -0.049205949\n2 POLYGON ((112.2288 29.11684... -0.228341158\n3 POLYGON ((111.8927 29.6013,...  0.679406172\n4 POLYGON ((111.3731 29.94649...  0.004547952\n5 POLYGON ((111.6324 29.76288...  0.076642204\n6 POLYGON ((110.8825 30.11675...  0.182215933\n\n\nThe Moran scatterplot is then plotted again.\n\nnci2 = moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n\nTo plot a LISA cluster map, the following steps are taken:\n\nThe spatially lagged variable of interest (GDPPC) is derived and centered around its mean.\nThe local Moran’s I is centered around the mean.\nThe statistical significance level for the local Moran’s I is set at 0.05.\nThe four quadrants are then defined.\nNon-significant Moran’s I are then placed in the category 0.\n\n\nquadrant = vector(mode=\"numeric\",length=nrow(localMI))\n\nhunan$lag_GDPPC = lag.listw(rswm_q, hunan$GDPPC)\n\nDV = hunan$lag_GDPPC - mean(hunan$lag_GDPPC)    \n\nLM_I = localMI[,1]\n\nsignif = 0.05       \n\nquadrant[DV &lt;0 & LM_I&gt;0] = 1\nquadrant[DV &gt;0 & LM_I&lt;0] = 2\nquadrant[DV &lt;0 & LM_I&lt;0] = 3  \nquadrant[DV &gt;0 & LM_I&gt;0] = 4    \nquadrant[localMI[,5]&gt;signif] = 0\n\nThe LISA map is then plotted.\n\nhunan.localMI$quadrant = quadrant\ncolors = c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters = c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nFor effective interpretation, both the local Moran’s I values map and its corresponding p-values map are plotted side by side.\n\nQuestion: What statistical observations can be drawn from the LISA map below?\nAnswer:\n\nMost of the Moran’s I values are insignificant.\nThere are two low-low GDPPC counties in the central-west region. Based on the local Moran’s I p-values, they are statistically significant.\nThere are some high-high GDPPC counties in the northeast region. Based on the local Moran’s I p-values, they are statistically significant.\nThere are also two counties with low-high GDPPC in the northeast region. These two countries have low GDPPC even though they are surrounded by counties with high GDPPC. Based on the local Moran’s I p-values, they are statistically significant.\n\n\n\ngdppc = qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant = quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters = c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap = tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)\n\n\n\n\n\n\n\n\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\n\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix;\nComputing Gi statistics; and\nMapping Gi statistics.\n\n\n\n\nA new set of neighbours has to be defined. For Getis-Ord, neighbours are defined based on distance (as opposed to shared borders under spatial autocorrelation).\nThere are two types of distance-based proximity matrix:\n\nFixed distance weight matrix; and\nAdaptive distance weight matrix.\n\n\n\nBefore making a connectivity graph, points are required to associate with each polygon\nThe mapping function, map_dbl() (under the purrr package) is utilised to apply a function, st_centroid() (under sf package), on each element of the geometry column, us.bound, returning a vector of a same length.\nThe longitude is then extracted by looking for the first value of each centroid, while the latitude is extracted by looking for the second value of each centroid. The cbind() is then used to put the two values together.\n\nlongitude = map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nlatitude = map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\ncoords = cbind(longitude, latitude)\n\n\n\n\nThe upper limit for the distance band is determined by using the following steps and functions under the spdep package:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours (knn) of each other by using knearneigh().\n\nStudent Note: In the matrix, each row corresponds to a point, and the columns contain the indices of its knn.\n\nConvert the knn object into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists(). This function returns in the units of the coordinates if the coordinates are projected, and in km otherwise.\nRemove the list structure of the returned object by using unlist() (under base package).\n\nThe summary report below shows that the largest first nearest neighbour distance is 61.79 km (i.e., max value). Thus, this is used as the upper threshold as it ensures that all units will have at least one neighbour.\n\nk1 = knn2nb(knearneigh(coords))  \nk1dists = unlist(nbdists(k1, coords, longlat = TRUE))  \nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\n\n\nThe dnearneigh() (under spdep package) is used to compute the distance weight matrix.\n\nStudent Note: knearneigh() computes knn, while dnearneigh() computes distance-based neighbours.\n\n\nwm_d62 = dnearneigh(coords, 0, 62, longlat = TRUE) \nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nThe nb2listw() (under spdep package) is then used to convert the nb object into spatial weights object, wm62_lw.\n\nwm62_lw = nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\n\n\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown below.\n\nknn = knn2nb(knearneigh(coords, k=8)) \nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nAgain, the nb2listw() (under spdep package) is used to convert the nb object into spatial weights object, knn_lw.\n\nknn_lw = nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014\n\n\n\n\n\n\n\n\nThe output of localG() (under spdep package) is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nThe Gi values for GDPPC 2012 is computed using fixed distance weights, wm62_lw.\n\nfips = order(hunan$County)\ngi.fixed = localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe Gi values are then joined to their corresponding hunan sf dataframe. The output vector, gi.fixed, is converted into into an r matrix object using as.matrix() (under base package). Then, cbind() (under base package) is used to join hunan sf dataframe and gi.fixed matrix to produce a new SpatialPolygonDataFrame, hunan.gi_fixed. Lastly, the field name of gi value is renamed to gstat_fixed using rename() (under dplyr package).\n\nhunan.gi_fixed = cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nThe Gi values derived using fixed distance weight matrix are then plotted side by side with the GDPPC values in hunan using the tmap package.\n\nQuestion: What statistical observation can be drawn from the Gi map below?\nAnswer: The positive Gi values for the northeast region indicate High-High clustering, while the negative Gi values for the northwest and central-west regions indicate Low-Low clustering.\n\n\ngdppc = qtm(hunan, \"GDPPC\")\n\nGimap_fixed = tm_shape(hunan.gi_fixed) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap_fixed, asp=1, ncol=2)\n\n\n\n\n\nStudent Note:\n\nGi values indicate the local intensity of spatial clustering for each county for GDPPC.\n\nPositive Gi values mean High-High clustering.\nNegative Gi mean Low-Low clustering.\nValues around zero indicate no significant spatial clustering.\n\nZ-scores represent how many standard deviations an observed Gi value is from the mean Gi value.\n\nPositive Z-scores indicate that the observed Gi is higher than the average, suggesting significant clustering.\nNegative Z-scores indicate that the observed Gi is lower than the average, suggesting significant dispersion.\n\nSignificance (Pr(z != E(Gi))) represent the p-values associated with each Gi value, which indicate the statistical significance of the local clustering. Small p-values (typically below 0.05) suggest that the observed clustering or dispersion is unlikely to have occurred by random chance.\nCluster Identification (attr(,“cluster”)) categorises each observation as either “Low” or “High” based on the local spatial autocorrelation pattern.\n\n“Low” indicates observations that are part of a Low-Low or High-High cluster.\n“High” indicates observations that are part of a High-Low or Low-High cluster.\n\nAttribute Information (attr(,“gstari”)) is set to FALSE, indicating that the analysis was not run under a global model.\n\nIf set to TRUE, it would mean that the observation contributes to the global spatial autocorrelation.\n\n\n\n\n\n\nThe Gi values for GDPPC 2012 is computed using adaptive distance weights, knn_lw.\nThe Gi values are then joined to their corresponding hunan sf dataframe. The output vector, gi.adaptive, is converted into into an r matrix object using as.matrix() (under base package). Then, cbind() (under base package) is used to join hunan sf dataframe and gi.adaptive matrix to produce a new SpatialPolygonDataFrame, hunan.gi_adaptive. Lastly, the field name of gi value is renamed to gstat_fixed using rename() (under dplyr package).\n\nfips = order(hunan$County)\ngi.adaptive = localG(hunan$GDPPC, knn_lw)\n\nhunan.gi_adaptive = cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\nThe Gi values derived using adaptive distance weight matrix are then plotted side by side with the GDPPC values in hunan using the tmap package.\n\nQuestion: What statistical observation can be drawn from the Gi map below?\nAnswer: The Gi values show a more graduated change from the northeast region to the central-west region, from positive to negative values. However, similar to fixed distance weights, the adaptive distance weights output also indicates High-High clustering in the northeast, and Low-Low clustering in the central-west.\n\n\ngdppc = qtm(hunan, \"GDPPC\")\n\nGimap_adaptive = tm_shape(hunan.gi_adaptive) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap_adaptive, \n             asp=1, \n             ncol=2)\n\n\n\n\n\nStudent Note: On choosing between fixed distance weights and adaptive distance weights for GDPPC across counties in Hunan province, the latter may be more appropriate given that GDPPC appears to be more concentrated in the northeast region, which includes the provincial capital, Changsha, and the surrounding counties. Also, it is unlikely that the spatial processes influencing GDPPC are uniform across the entire study area since local development is affected by more than just distance from the provincial capital. Factors such as physical landscape (mountains, rivers), transport networks as well as socioeconomic policies (e.g., education, tourism) are not evenly developed throughout a province. Hence, an adaptive distance weights approach reflects the varying influence of different factors across space, and allows the analysis to capture the nuanced geospatial processes affecting GDPPC.\n\n~~~ End of Hands-on Exercise 2B ~~~"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2B.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2B.html#overview",
    "title": "Hands-on Exercise 2B",
    "section": "",
    "text": "In this page, I show how I had completed the Hands-on Exercise 2B, on computing Global and Local Measures of Spatial Autocorrelation (GLSA) using the spdep package.\nThe objectives are:\n\nImport geospatial data using appropriate function(s) of sf package;\nImport csv file using appropriate function of readr package;\nPerform relational join using appropriate join function of dplyr package;\nCompute Global Spatial Autocorrelation (GSA) statistics using appropriate functions of spdep package, including:\n\nPlot Moran scatterplot,\nCompute and plot spatial correlogram.\n\nCompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers using appropriate functions spdep package;\nCompute Getis-Ord’s Gi statistics for detecting hot spot or/and cold spot area using appropriate functions of spdep package; and\nVisualise the analysis output using tmap package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2B.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2B.html#getting-started",
    "title": "Hands-on Exercise 2B",
    "section": "",
    "text": "In spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province.\nHence, the appropriate spatial statistical methods are applied to study:\n\nIs development evenly distributed geographically?\nIf no, is there sign of spatial clustering? If yes, where are these clusters?\n\nFor this hands-on exercise, the GDP per capita (as a development indicator) of Hunan province in China is studied.\n\n\n\nThe following data sets are used in this hands-on exercise:\n\nHunan’s County Boundary Layer. This is a geospatial data set in ESRI shapefile format.\nHunan’s Local Development Indicators 2012. This csv file contains data on selected Hunan’s local development indicators in 2012.\n\nThe data sets are placed under two sub-folders:\n\ngeospatial (County Boundary Layer), and\naspatial (Local Development Indicators 2012).\n\nThese two sub-folders are within the data folder of my Hands-on_Ex2 folder.\n\n\n\nThe R packages used in this hands-on exercises are:\n\ntmap for thematic mapping;\nsf for importing, managing, and processing geospatial data;\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data; and\nspdep for analysing spatial dependence and spatial relationships in data.\n\nThey are loaded into the R environment using the following code:\n\npacman::p_load(sf, spdep, tmap, tidyverse)\n\nStudent Note: This allows for loading of multiple packages in one line of code."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2B.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2B.html#importing-data",
    "title": "Hands-on Exercise 2B",
    "section": "",
    "text": "The st_read() (under sf package) is used to import the geospatial data set: hunan, a polygon feature layer in ESRI shapefile format.\nStudent Note: The geospatial objects are polygon features. There are a total of 88 features and 7 fields in hunan simple feature data frame. hunan is in wgs84 coordinate system.\n\nhunan = st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\jmphosis\\ISSS624\\Hands-on_Ex\\Hands-on_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\nThe read_csv() (under readr package) is used to import the aspatial data set: hunan_2012, a csv file.\nStudent Note: The hunan_2012 tibble data frame contains 88 rows and 29 columns. There are two columns with character data - County and City.\n\nhunan2012 = read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\nThe attribute table of the spatial polygons data frame, hunan, is updated using the attribute fields of the tibble data frame, hunan2012 using left_join() (under dplyr package).\nStudent Note: Without explicitly stating the “by” argument for left_join(), the two tables are joined by the ‘County’ columns.\n\nhunan = left_join(hunan,hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\nhunan\n\nSimple feature collection with 88 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\n\n\n\n\nA basemap and a choropleth map are prepared usign qtm() (under tmap package) to visualise the 2012 Gross Domestic Product Per Capita (GDPPC).\nStudent Note: The two different styles used are “equal” and “quantile”. The equal style shows that high GDPPC (in absolute terms) is concentrated in a few counties in the northeast region. The quantile style shows that the top 50% of counties in terms of GDPPC are mainly on the east side of Hunan.\n\nequal = tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile = tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2B.html#global-spatial-autocorrelation",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2B.html#global-spatial-autocorrelation",
    "title": "Hands-on Exercise 2B",
    "section": "",
    "text": "The Global Spatial Autocorrelation (GSA) statistics are computed for the study area. Also, Spatial Complete Randomness (SCR) test for GSA is performed.\n\nStudent Note: The SCR test for GSR checks if the spatial distribution of GDPPC is entirely random and lacks any systematic spatial pattern. In other words, it assesses whether the observed spatial pattern of the GDPPC deviates significantly from what would be expected under spatial randomness.\n\n\n\nFirstly, the spatial weights of the study area would need to be computed to define the neighbourhood relationships between the geographical units (i.e., county) in the study area.\nThe poly2nb() (under spdep package) is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries.\nThe “queen” argument in the function is set to either TRUE (default) or FALSE. The TRUE option will return a list of first order neighbours using the Queen’s continguity criteria.\n\nStudent Note: According to Queen’s criteria, two regions are considered neighbours if they share any part of their boundary (even if it is a single point). This results in a more inclusive definition of neighbour relationships.\n\n\nStudent Note: The summary report below shows that there are 88 area units in hunan. The most connected area unit (85) has 11 neighbours. The least connected area units (30 and 65) have only one neighbour each.\n\n\nwm_q = poly2nb(hunan, queen = TRUE)\n\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\n\n\nWeights are assigned to each neighbouring polygon. The nb21listw() (under spdep package) is used to convert a neighborhood object, wm_q, to a listw object, rswm_q (style=“W”). This allows row-standardised distance weight matrices to be created, whereby each row sums to 1. The “style” argument influences the specific characteristics of the weights matrix.\nFor this hands-on exercise, the “style=”W”” is used, each neighboring polygon is assigned equal weight. This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summarise the neighbors’ values, its downside is that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.\n\nStudent Note:\n\nThe “style” argument set to “W” specifies a binary spatial weight matrix, where the presence of a spatial relationship is indicated by 1, and absence by 0. All neighbouring units are considered equal in terms of their impact on the target unit, reflecting a uniform spatial relation\n\nB is the basic binary coding.\nC is globally standardised (sums over all links to n).\nU is equal to C divided by the number of neighbours (sums over all links to unity).\nS is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999 (sums over all links to n).\n\nThe “zero.policy” argument returns lists of non-neighbours when set to TRUE. It means that weight vectors of zero length are inserted for regions without neighbour in the neighbours list. This in turn generates lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length equal to the number of neighbours. The spatially lagged value of x for the zero-neighbour region will then be zero.\n\nThis ensures that even regions without neighbors are included in the spatial weights matrix, and their spatial lag values are explicitly set to zero. This can be useful in certain analytical contexts where the treatment of regions without neighbours is important for the analysis.\n\n\n\n\nrswm_q = nb2listw(wm_q,\n                  style=\"W\",\n                  zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\n\nMoran’s I statistics testing is performed using moran.test() (under spdep package) to study the GSA.\n\nQuestion: What statistical conclusion can be drawn from the output below?\nAnswer:\n\nThe Moran’s I statistic of 0.300749970 suggests a positive spatial autocorrelation in the GDPPC variable.\nThe p-value of 1.095e-06 is very small, indicating a strong evidence to reject the null hypothesis of spatial randomness and support the alternative hypothesis.\nThe alternative hypothesis is that there is a significant positive autocorrelation in the GDPPC, i.e., neighbouring regions tend to have similar GDPPC values (cluster together).\n\n\n\nmoran.test(hunan$GDPPC, \n           listw = rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n\nA permutation test (999 simulations using Monte Carlo) for Moran’s I statistic is performed using moran.mc() (under spdep package).\n\nStudent Note:\n\nThe set.seed() is used to ensure reproducibility.\nThe “na.action = na.omit” argument specifies the action to be taken if there are missing values. In this case, any observations with missing values are omitted from the analysis.\nThe “+ 1” is typically added to the number of simulations because the observed value is also included in the distribution of simulated values.\n\n\n\nQuestion: What statistical conclusion can be drawn from the output below?\nAnswer:\n\nThe Moran’s I statistic of 0.30075 suggests a positive spatial autocorrelation in the GDPPC variable.\nThe p-value of 0.001 is less than the commonly used significance level of 0.05, indicating a strong evidence to reject the null hypothesis of spatial randomness and support the alternative hypothesis.\nThe alternative hypothesis is that there is a significant positive autocorrelation in the GDPPC, i.e., neighbouring regions tend to have similar GDPPC values (cluster together).\nThe rank of 1,000 of the observed Moran’s I statistic compared to the simulated values means that the observed spatial pattern is unlikely to have occurred by random chance.\n\n\n\nset.seed(1234)\nbperm_moran = moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm_moran\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nThe simulated Moran’s I test statistics can be observed in further detail by plotting the distribution of the statistical values as a histogram. The hist() and abline() (under graphics package) are used.\n\nStudent Note: The distribution of simulated values show that more than half are negative values (i.e., negative correlation). It also shows that the observed Moran’s I statistic of 0.30075 would be considered an outlier, and unlikely to have occurred by chance.\n\n\nmean(bperm_moran$res[1:999])\n\n[1] -0.01504572\n\nvar(bperm_moran$res[1:999])\n\n[1] 0.004371574\n\nsummary(bperm_moran$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm_moran$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\nAlternatively, the graphs may be plotted using ggplot(), geom_histogram(), and geom_vline() (under ggplot2 package).\n\ndf = data.frame(Moran_I = bperm_moran$res[1:999])\n\nggplot(df, aes(x = Moran_I)) +\n  geom_histogram(binwidth = 0.02, fill = \"light blue\", color = \"black\", alpha = 0.7) +\n  labs(title = \"Histogram of Simulated Moran's I\",\n       x = \"Simulated Moran's I\",\n       y = \"Frequency\") +\n  theme_minimal() +\n  theme(panel.grid = element_blank()) +\n  geom_vline(xintercept = 0, color = \"red\", linetype = \"dashed\")\n\n\n\n\n\n\n\n\nGeary’s c statistics testing is performed using geary.test() (under spdep package) to study the GSA.\n\nQuestion: What statistical conclusion can be drawn from the output below?\nAnswer:\n\nThe Geary’s c statistic of 0.6907223 suggests a positive spatial autocorrelation in the GDPPC variable, i.e., neighbouring regions tend to have similar GDPPC values.\nThe p-value of 0.0001526 is less than the commonly used significance level of 0.05, indicating a strong evidence to reject the null hypothesis of spatial randomness and support the alternative hypothesis.\nThe alternative hypothesis is that there is a significant positive autocorrelation in the GDPPC, i.e., neighbouring regions tend to have similar GDPPC values (cluster together).\n\n\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\nA permutation test (999 simulations using Monte Carlo) for Geary’s c statistic is performed using geary.mc() (under spdep package).\n\nStudent Note:\n\nThe set.seed() is used to ensure reproducibility.\nThe “+ 1” is typically added to the number of simulations because the observed value is also included in the distribution of simulated values.\n\n\n\nQuestion: What statistical conclusion can be drawn from the output below?\nAnswer:\n\nThe Geary’s c statistic of 0.69072 suggests a positive spatial autocorrelation in the GDPPC variable.\nThe p-value of 0.001 is less than the commonly used significance level of 0.05, indicating a strong evidence to reject the null hypothesis of spatial randomness and support the alternative hypothesis.\nThe alternative hypothesis is that there is a significant positive autocorrelation in the GDPPC, i.e., neighbouring regions tend to have similar GDPPC values (cluster together).\nThe rank of 1 of the observed Geary’s c statistic compared to the simulated values means that the observed spatial pattern is unlikely to have occurred by random chance.\n\n\n\nset.seed(1234)\nbperm_geary=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm_geary\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nThe simulated Geary’s c test statistics can be observed in further detail by plotting the distribution of the statistical values as a histogram. The hist() and abline() (under graphics package) are used.\n\nStudent Note: The distribution of simulated values show that more than half are abpve 1.0 (i.e., negative correlation). It also shows that the observed Geary’s c statistic of 69072 would be considered an outlier, and unlikely to have occurred by chance.\n\n\nmean(bperm_geary$res[1:999])\n\n[1] 1.004402\n\nvar(bperm_geary$res[1:999])\n\n[1] 0.007436493\n\nsummary(bperm_geary$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm_geary$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\")\n\n\n\n\nAlternatively, the graphs may be plotted using ggplot(), geom_histogram(), and geom_vline() (under ggplot2 package).\n\ndf = data.frame(Geary_C = bperm_geary$res[1:999])  \n\nggplot(df, aes(x = Geary_C)) + \n  geom_histogram(binwidth = 0.02, fill = \"light blue\", color = \"black\", alpha = 0.7) +\n  labs(title = \"Histogram of Simulated Geary's c\",\n       x = \"Simulated Geary's c\",\n       y = \"Frequency\") +\n  theme_minimal() +\n  theme(panel.grid = element_blank()) +\n  geom_vline(xintercept = 1.0, color = \"red\", linetype = \"dashed\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2B.html#spatial-correlogram",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2B.html#spatial-correlogram",
    "title": "Hands-on Exercise 2B",
    "section": "",
    "text": "Spatial correlograms are great to examine patterns of spatial autocorrelation in the data or model residuals. They show how correlated pairs of spatial observations are when the distance (lag) between them is increased. They are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.\nAlthough correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n\nThe sp.correlogram() (under spdep package) is used to compute a 6-lag spatial correlogram of the GDPPC variable. The GSA used is Moran’s I. The output is plotted using plot() (under graphics package).\n\nStudent Note: The “method=”I”” argument specifies that Moran’s I should be used as the measure of spatial autocorrelation.\n\n\nQuestion: What statistical observation can be drawn from the plot below?\nAnswer:\n\nMoran’s I estimates are positive at shorter distance lags (distance lags 1-4). The positive values suggest that neighbouring regions tend to have similar GDPPC values (cluster together).\nMoran’s I estimates are negative at longer distance lags (distance lags 5-6). The negative values suggest that regions further away have dissimilar GDPPC values.\nThe p-values are generally very small (except for distance lag 4), indicating statistical significance, and high level of confidence to reject the null hypothesis of spatial randomness.\nOverall, statistical significance observed for positive correlation at distance lags of 1-3, and negative correlation at distance lags of 5-6.\n\n\n\nMI_corr = sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important to examine the full analysis report by printing out the analysis results.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n\nThe sp.correlogram() (under spdep package) is used to compute a 6-lag spatial correlogram of the GDPPC variable. The GSA used is Geary’s c. The output is plotted using plot() (under graphics package).\n\nStudent Note: The “method=”C”” argument specifies that Geary’s c should be used as the measure of spatial autocorrelation.\n\n\nQuestion: What statistical observation can be drawn from the plot below?\nAnswer:\n\nGeary’s c estimates are below 1.0 at shorter distance lags (distance lags 1-3). These values suggest that neighbouring regions tend to have similar GDPPC values (cluster together).\nGeary’s c estimates are above 1.0 at longer distance lags (distance lags 4-6). These values suggest that regions further away have dissimilar GDPPC values.\nThe p-values are small for distance lags 1, 2, and 5), indicating statistical significance, and high level of confidence to reject the null hypothesis of spatial randomness.\nOverall, statistical significance observed for positive correlation at distance lags of 1-2, and negative correlation at distance lag of 5.\n\n\n\nGC_corr = sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important to examine the full analysis report by printing out the analysis results.\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nNote: The following sections follows 10 Local Measures of Spatial Autocorrelation (from Sections 10.6 onwards) on r4gdsa.netlify.app"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2B.html#cluster-and-outlier-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2B.html#cluster-and-outlier-analysis",
    "title": "Hands-on Exercise 2B",
    "section": "",
    "text": "Local Indicators of Spatial Association (LISA) are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable.\nThe appropriate LISA, including local Moran’s I, are applied to detect cluster and/or outlier from the 2012 GDP per capita of the Hunan province in China.\n\n\nThe localmoran() (under spdep package) is used to compute the local Moran’s I. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\n\nIi: the local Moran’s I statistic.\nE.Ii: the expectation of local Moran’s I statistic under the randomisation hypothesis.\nVar.Ii: the variance of local Moran’s I statistic under the randomisation hypothesis.\nZ.Ii: the standard deviate of local Moran’s I statistic.\nPr(): the p-value of local Moran’s I statistic.\n\n\nStudent Note:\n\nPositive local Moran’s I values indicate a location surrounded by similar values (High-High or Low-Low).\nNegative values indicate a location surrounded by dissimilar values (High-Low or Low-High).\nValues near zero suggest no significant local spatial autocorrelation.\n\n\nThe local Moran’s I of the GDPPC at the county level is computed.\n\nfips = order(hunan$County)\nlocalMI = localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nThe contents of the local Moran’s I statistic matrix is derived using printCoefmat() (under stats package).\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\nThe local Moran’s I dataframe (i.e. localMI) is then appended onto hunan SpatialPolygonDataFrame. The output SpatialPolygonDataFrame is called hunan.localMI.\n\nhunan.localMI = cbind(hunan,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n\nUsing choropleth mapping functions of tmap package, the local Moran’s I values are plotted.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nThe choropleth shows evidence of both positive and negative Ii values. However, it is useful to consider the p-values for each of these values to see their statistical significance. A choropleth map of Moran’s I p-values using functions of tmap package is plotted below.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nPutting the two plots side by side:\n\nlocalMI.map = tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map = tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2B.html#creating-a-local-indicators-of-spatial-association-lisa-cluster-map",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2B.html#creating-a-local-indicators-of-spatial-association-lisa-cluster-map",
    "title": "Hands-on Exercise 2B",
    "section": "",
    "text": "The LISA Cluster Map shows the significant locations that are colour coded by the type of spatial autocorrelation.\nBefore generating the LISA cluster map, the Moran scatterplot is plotted.\n\n\nThe moran.plot() (under spdep package) is used to plot the Moran scatterplot, which is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. These are the high-high locations.\n\nnci = moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\n\n\n\nThe scale() (from base package) is used to center and scale the variable. Centering is done by subtracting the mean (omitting NAs) of the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\nThe as.vector() (under base package) is added to make sure that the data type derived is a vector that maps neatly into the dataframe.\n\nhunan$Z.GDPPC = scale(hunan$GDPPC) %&gt;% \n  as.vector\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667\n2 Changde 21100 Hanshou      County Hanshou 20981\n3 Changde 21101  Jinshi County City  Jinshi 34592\n4 Changde 21102      Li      County      Li 24473\n5 Changde 21103   Linli      County   Linli 25554\n6 Changde 21104  Shimen      County  Shimen 27137\n                        geometry      Z.GDPPC\n1 POLYGON ((112.0625 29.75523... -0.049205949\n2 POLYGON ((112.2288 29.11684... -0.228341158\n3 POLYGON ((111.8927 29.6013,...  0.679406172\n4 POLYGON ((111.3731 29.94649...  0.004547952\n5 POLYGON ((111.6324 29.76288...  0.076642204\n6 POLYGON ((110.8825 30.11675...  0.182215933\n\n\nThe Moran scatterplot is then plotted again.\n\nnci2 = moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n\nTo plot a LISA cluster map, the following steps are taken:\n\nThe spatially lagged variable of interest (GDPPC) is derived and centered around its mean.\nThe local Moran’s I is centered around the mean.\nThe statistical significance level for the local Moran’s I is set at 0.05.\nThe four quadrants are then defined.\nNon-significant Moran’s I are then placed in the category 0.\n\n\nquadrant = vector(mode=\"numeric\",length=nrow(localMI))\n\nhunan$lag_GDPPC = lag.listw(rswm_q, hunan$GDPPC)\n\nDV = hunan$lag_GDPPC - mean(hunan$lag_GDPPC)    \n\nLM_I = localMI[,1]\n\nsignif = 0.05       \n\nquadrant[DV &lt;0 & LM_I&gt;0] = 1\nquadrant[DV &gt;0 & LM_I&lt;0] = 2\nquadrant[DV &lt;0 & LM_I&lt;0] = 3  \nquadrant[DV &gt;0 & LM_I&gt;0] = 4    \nquadrant[localMI[,5]&gt;signif] = 0\n\nThe LISA map is then plotted.\n\nhunan.localMI$quadrant = quadrant\ncolors = c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters = c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nFor effective interpretation, both the local Moran’s I values map and its corresponding p-values map are plotted side by side.\n\nQuestion: What statistical observations can be drawn from the LISA map below?\nAnswer:\n\nMost of the Moran’s I values are insignificant.\nThere are two low-low GDPPC counties in the central-west region. Based on the local Moran’s I p-values, they are statistically significant.\nThere are some high-high GDPPC counties in the northeast region. Based on the local Moran’s I p-values, they are statistically significant.\nThere are also two counties with low-high GDPPC in the northeast region. These two countries have low GDPPC even though they are surrounded by counties with high GDPPC. Based on the local Moran’s I p-values, they are statistically significant.\n\n\n\ngdppc = qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant = quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters = c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap = tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2B.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2B.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on Exercise 2B",
    "section": "",
    "text": "Beside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\n\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix;\nComputing Gi statistics; and\nMapping Gi statistics.\n\n\n\n\nA new set of neighbours has to be defined. For Getis-Ord, neighbours are defined based on distance (as opposed to shared borders under spatial autocorrelation).\nThere are two types of distance-based proximity matrix:\n\nFixed distance weight matrix; and\nAdaptive distance weight matrix.\n\n\n\nBefore making a connectivity graph, points are required to associate with each polygon\nThe mapping function, map_dbl() (under the purrr package) is utilised to apply a function, st_centroid() (under sf package), on each element of the geometry column, us.bound, returning a vector of a same length.\nThe longitude is then extracted by looking for the first value of each centroid, while the latitude is extracted by looking for the second value of each centroid. The cbind() is then used to put the two values together.\n\nlongitude = map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nlatitude = map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\ncoords = cbind(longitude, latitude)\n\n\n\n\nThe upper limit for the distance band is determined by using the following steps and functions under the spdep package:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours (knn) of each other by using knearneigh().\n\nStudent Note: In the matrix, each row corresponds to a point, and the columns contain the indices of its knn.\n\nConvert the knn object into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists(). This function returns in the units of the coordinates if the coordinates are projected, and in km otherwise.\nRemove the list structure of the returned object by using unlist() (under base package).\n\nThe summary report below shows that the largest first nearest neighbour distance is 61.79 km (i.e., max value). Thus, this is used as the upper threshold as it ensures that all units will have at least one neighbour.\n\nk1 = knn2nb(knearneigh(coords))  \nk1dists = unlist(nbdists(k1, coords, longlat = TRUE))  \nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\n\n\nThe dnearneigh() (under spdep package) is used to compute the distance weight matrix.\n\nStudent Note: knearneigh() computes knn, while dnearneigh() computes distance-based neighbours.\n\n\nwm_d62 = dnearneigh(coords, 0, 62, longlat = TRUE) \nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nThe nb2listw() (under spdep package) is then used to convert the nb object into spatial weights object, wm62_lw.\n\nwm62_lw = nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\n\n\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown below.\n\nknn = knn2nb(knearneigh(coords, k=8)) \nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nAgain, the nb2listw() (under spdep package) is used to convert the nb object into spatial weights object, knn_lw.\n\nknn_lw = nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2B.html#computing-gi-statistics",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2B.html#computing-gi-statistics",
    "title": "Hands-on Exercise 2B",
    "section": "",
    "text": "The output of localG() (under spdep package) is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nThe Gi values for GDPPC 2012 is computed using fixed distance weights, wm62_lw.\n\nfips = order(hunan$County)\ngi.fixed = localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe Gi values are then joined to their corresponding hunan sf dataframe. The output vector, gi.fixed, is converted into into an r matrix object using as.matrix() (under base package). Then, cbind() (under base package) is used to join hunan sf dataframe and gi.fixed matrix to produce a new SpatialPolygonDataFrame, hunan.gi_fixed. Lastly, the field name of gi value is renamed to gstat_fixed using rename() (under dplyr package).\n\nhunan.gi_fixed = cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nThe Gi values derived using fixed distance weight matrix are then plotted side by side with the GDPPC values in hunan using the tmap package.\n\nQuestion: What statistical observation can be drawn from the Gi map below?\nAnswer: The positive Gi values for the northeast region indicate High-High clustering, while the negative Gi values for the northwest and central-west regions indicate Low-Low clustering.\n\n\ngdppc = qtm(hunan, \"GDPPC\")\n\nGimap_fixed = tm_shape(hunan.gi_fixed) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap_fixed, asp=1, ncol=2)\n\n\n\n\n\nStudent Note:\n\nGi values indicate the local intensity of spatial clustering for each county for GDPPC.\n\nPositive Gi values mean High-High clustering.\nNegative Gi mean Low-Low clustering.\nValues around zero indicate no significant spatial clustering.\n\nZ-scores represent how many standard deviations an observed Gi value is from the mean Gi value.\n\nPositive Z-scores indicate that the observed Gi is higher than the average, suggesting significant clustering.\nNegative Z-scores indicate that the observed Gi is lower than the average, suggesting significant dispersion.\n\nSignificance (Pr(z != E(Gi))) represent the p-values associated with each Gi value, which indicate the statistical significance of the local clustering. Small p-values (typically below 0.05) suggest that the observed clustering or dispersion is unlikely to have occurred by random chance.\nCluster Identification (attr(,“cluster”)) categorises each observation as either “Low” or “High” based on the local spatial autocorrelation pattern.\n\n“Low” indicates observations that are part of a Low-Low or High-High cluster.\n“High” indicates observations that are part of a High-Low or Low-High cluster.\n\nAttribute Information (attr(,“gstari”)) is set to FALSE, indicating that the analysis was not run under a global model.\n\nIf set to TRUE, it would mean that the observation contributes to the global spatial autocorrelation.\n\n\n\n\n\n\nThe Gi values for GDPPC 2012 is computed using adaptive distance weights, knn_lw.\nThe Gi values are then joined to their corresponding hunan sf dataframe. The output vector, gi.adaptive, is converted into into an r matrix object using as.matrix() (under base package). Then, cbind() (under base package) is used to join hunan sf dataframe and gi.adaptive matrix to produce a new SpatialPolygonDataFrame, hunan.gi_adaptive. Lastly, the field name of gi value is renamed to gstat_fixed using rename() (under dplyr package).\n\nfips = order(hunan$County)\ngi.adaptive = localG(hunan$GDPPC, knn_lw)\n\nhunan.gi_adaptive = cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\nThe Gi values derived using adaptive distance weight matrix are then plotted side by side with the GDPPC values in hunan using the tmap package.\n\nQuestion: What statistical observation can be drawn from the Gi map below?\nAnswer: The Gi values show a more graduated change from the northeast region to the central-west region, from positive to negative values. However, similar to fixed distance weights, the adaptive distance weights output also indicates High-High clustering in the northeast, and Low-Low clustering in the central-west.\n\n\ngdppc = qtm(hunan, \"GDPPC\")\n\nGimap_adaptive = tm_shape(hunan.gi_adaptive) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap_adaptive, \n             asp=1, \n             ncol=2)\n\n\n\n\n\nStudent Note: On choosing between fixed distance weights and adaptive distance weights for GDPPC across counties in Hunan province, the latter may be more appropriate given that GDPPC appears to be more concentrated in the northeast region, which includes the provincial capital, Changsha, and the surrounding counties. Also, it is unlikely that the spatial processes influencing GDPPC are uniform across the entire study area since local development is affected by more than just distance from the provincial capital. Factors such as physical landscape (mountains, rivers), transport networks as well as socioeconomic policies (e.g., education, tourism) are not evenly developed throughout a province. Hence, an adaptive distance weights approach reflects the varying influence of different factors across space, and allows the analysis to capture the nuanced geospatial processes affecting GDPPC.\n\n~~~ End of Hands-on Exercise 2B ~~~"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/data/geospatial/MPSZ-2019.html",
    "href": "Hands-on_Ex/Hands-on_Ex3/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "Geographically Weighted Regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate, demographic factors, physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable).\nIn this hands-on exercise, hedonic pricing models are built using GWR methods. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural or locational factors.\n\n\n\nThe two data sets used in this hand-on exercise are:\n\nURA Master Plan Subzone Boundary in shapefile format (i.e. MP14_SUBZONE_WEB_PL); and\n2015 Condo Resale Data in csv format (i.e. condo_resale_2015.csv).\n\n\n\n\nThe packages used in this hands-on exercise are:\n\nsf for spatial data handling;\ntidyverse for attribute data handling;\ntmap for choropleth mapping;\nggpubr for creating customised and annotated ggplot2 plots for better visualisation;\ncorrplot for multivariate data visualisation and analysis;\nspdep for analysing spatial dependence and spatial relationships in data;\nGWmodel for calibrating geographical weighted family of models;\nolsrr for building ordinary least squares (OLS) regression models and performing diagnostic tests; and\ngtsummary for creating publication-ready analytical and summary tables;\n\nThe packages are loaded into the R environment:\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)\n\nGWModel Package\nThe GWmodel package provides a collection of localised spatial statistical methods, namely:\n\nGeographically weighted summary statistics,\nGeographically weighted principal components analysis,\nGeographically weighted discriminant analysis, and\nVarious forms of geographically weighted regression, some of which are provided in basic and robust (outlier resistant) forms.\n\nCommonly, outputs or parameters of the GWmodel are mapped to provide a useful exploratory tool, which can often precede (and direct) a more traditional or sophisticated statistical analysis.\n\n\n\n\n\nThe geospatial data used in this hands-on exercise is MP14_SUBZONE_WEB_PL. It is in ESRI shapefile format. The shapefile consists of URA Master Plan 2014’s planning subzone boundaries. Polygon features are used to represent these geographic boundaries. The GIS data is in SVY21 projected coordinates systems.\nThe st_read() function in the sf package is used to import the shapefile as mpsz, a simple feature object.\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\jmphosis\\ISSS624\\Hands-on_Ex\\Hands-on_Ex4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\n\nThe mpsz is transformed using the st_transform() function in the sf package to assign the correct ESPG code (i.e., 3414). This is then verified using the st_crs() function in the sf package.\n\nmpsz_svy21 = st_transform(mpsz, 3414)\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nThe extent of mpsz_svy21 is revealed using the st_bbox() function in the sf package.\n\nst_bbox(mpsz_svy21)\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334 \n\n\n\n\n\n\n\n\nThe condo_resale_2015 is a csv file. The read_csv() function in the readr package is used to import it as condo_resale, a tibble data frame.\n\ncondo_resale = read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nThe glimpse() function in the dplyr package, the head() function and the summary() function in the base package are used to take a preliminary look at and derive the summary statistics of condo_resale.\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             &lt;dbl&gt; 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            &lt;dbl&gt; 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\nhead(condo_resale$LONGITUDE) #see the data in XCOORD column\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\nhead(condo_resale$LATITUDE) #see the data in YCOORD column\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\n\n\nThe st_as_sf() function in the sf package is used to convert the aspatial tibble data frame, condo_resale, into a simple feature object.\nNotice that the st_transform() function in the sf package is used to convert the coordinates from WGS84 (i.e. CRS = 4326) to SVY21 (i.e. CRS = 3414).\n\ncondo_resale.sf = st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %&gt;%\n  st_transform(crs=3414)\n\nThe head() function is used to list the content of condo_resale.sf object, which is a point feature data frame.\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLING_PRICE AREA_SQM   AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n     &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;            &lt;dbl&gt;\n1   118635       3000000      309    30     7.94          0.166            2.52 \n2   288420       3880000      290    32     6.61          0.280            1.93 \n3   267833       3325000      248    33     6.90          0.429            0.502\n4   258380       4250000      127     7     4.04          0.395            1.99 \n5   467169       1400000      145    28    11.8           0.119            1.12 \n6   466472       1320000      139    22    10.3           0.125            0.789\n# ℹ 15 more variables: PROX_URA_GROWTH_AREA &lt;dbl&gt;, PROX_HAWKER_MARKET &lt;dbl&gt;,\n#   PROX_KINDERGARTEN &lt;dbl&gt;, PROX_MRT &lt;dbl&gt;, PROX_PARK &lt;dbl&gt;,\n#   PROX_PRIMARY_SCH &lt;dbl&gt;, PROX_TOP_PRIMARY_SCH &lt;dbl&gt;,\n#   PROX_SHOPPING_MALL &lt;dbl&gt;, PROX_SUPERMARKET &lt;dbl&gt;, PROX_BUS_STOP &lt;dbl&gt;,\n#   NO_Of_UNITS &lt;dbl&gt;, FAMILY_FRIENDLY &lt;dbl&gt;, FREEHOLD &lt;dbl&gt;,\n#   LEASEHOLD_99YR &lt;dbl&gt;, geometry &lt;POINT [m]&gt;\n\n\n\n\n\n\nThe statistical graphics functions in the ggplot2 package are used to perform exploratory data analysis.\n\n\nThe distribution of “SELLING_PRICE” is plotted in a histogram. The histogram reveals a right skewed distribution. This means that more condominium units were transacted at relatively lower prices.\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nStatistically, the skewed dsitribution can be normalised by using log transformation. The mutate() function in the dplyr package is used to derive a new variable, “LOG_SELLING_PRICE” from “SELLING_PRICE”.\n\ncondo_resale.sf = condo_resale.sf %&gt;%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\nThe histogram is then plotted using “LOG_SELLING_PRICE”. The distribution is relatively less skewed after the log transformation.\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\n\n\n\nThe ggarrange() function in the ggpubr package is used to draw a trellis plot of multiple small histograms of the various variables.\n\nAREA_SQM = ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE = ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD = ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE = ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE = ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA = ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET = ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN = ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT = ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK = ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH = ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH = ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\n\n\n\nThe functions in the tmap package are used to show the geospatial distribution of condominium resale prices.\nThe tm_dots() function is used instead of the tm_bubbles() function because the former creates a simple dot plot for point data, while the latter allows each point to be represented as a bubble with a size corresponding to a variable.\nThe tm_view() function with the\n“set.zoom.limits” argument sets the minimum and maximum zoom levels to 11 and 14 respectively.\nThe tmap_options() function with argument “check.and.fix = TRUE” is helpful in preventing errors or unexpected behavior when creating maps, especially when dealing with complex spatial data sets. It helps ensure that the spatial objects are in a valid state for plotting.\n\ntmap_mode(\"view\")\ntmap_options(check.and.fix = TRUE)\n\ntm_shape(mpsz_svy21)+\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style = \"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\nThe tmap_mode() function with “plot” argument is used to turn the display into the plot mode.\n\ntmap_mode(\"plot\")\n\n\n\n\n\nThe hedonic pricing models for condominium resale units are built using the lm() function in the stats package.\n\n\nA simple linear regression model is built using “SELLING_PRICE” as the dependent variable and “AREA_SQM” as the independent variable.\n\ncondo.slr = lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nThe lm() function returns an object of class “lm” or for multiple responses of class c(“mlm,”lm”).\nThe summary() function in the base package and the anova() in the stats package are used to obtain a summary and analysis of variance table of the results. The generic accessor functions coefficients, effects, fitted.values and residuals extract various useful features of the value returned by the lm() function.\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: &lt; 2.2e-16\n\n\nThe output shows that the “SELLING_PRICE” can be explained using the formula:\n\nSELLING_PRICE = -258121.1 + 14719*AREA_SQM\n\nThe R-squared of 0.4518 reveals that the simple regression model built is able to explain about 45% of the resale prices.\nSince the p-value is much smaller than 0.0001, the null hypothesis is rejected, i.e., reject that there is no significant relationship between the independent variable and the dependent variable, and infer that the simple linear regression model is a good estimator of “SELLING_PRICE”.\nThe coefficients section of the output reveals that the p-values of both the estimates of the Intercept and “AREA_SQM” are smaller than 0.001. Hence, the null hypothesis of the B0 and B1 are equal to 0 will be rejected. As a result, it can be inferred that the B0 and B1 are good parameter estimates.\nThe ggplot() function is used to draw a scatterplot to visualise the best fit line using the lm() method. There are a few statistical outliers with relatively high selling prices.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\n\n\n\nVisualising the Relationships of Independent Variables\nBefore building a multiple regression model, it is important to ensure that the indepdent variables used are not highly correlated to each other. If highly correlated independent variables are used in building a regression model, the quality of the model will be compromised. This phenomenon is known as multicollinearity in statistics.\nA correlation matrix is commonly used to visualise the relationships between the independent variables. Beside the pairs() function in the graphics package, there are many packages that support the display of a correlation matrix. In this hands-on exercise, the corrplot package will be used.\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\nThe matrix reorder is very important for mining the hidden structure and pattern in the matrix. There are four methods in corrplot (parameter order), named “AOE”, “FPC”, “hclust”, “alphabet”. In the code chunk above, “AOE” order is used. It orders the variables by using the angular order of the eigenvectors method. From the scatterplot matrix, it is clear that “Freehold” is highly correlated to “LEASE_99YEAR”. In view of this, it is wiser to only include either one of them in the subsequent model building. As a result, the latter is excluded in the subsequent model building.\n\n\n\nThe lm() function is used to calibrate the multiple linear regression model.\n\ncondo.mlr = lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  &lt; 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  &lt; 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  &lt; 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  &lt; 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: &lt; 2.2e-16\n\n\n\n\n\nFrom the output above, it is clear that not all the independent variables are statistically significant. The model is revised by removing variables which are not statistically significant.\n\nStudent Note: The four variables removed are: “PROX_HAWKER_MARKET”, “PROX_KINDERGARTEN”, “PROX_TOP_PRIMARY_SCH”, and “PROX_SUPERMARKET”\n\n\ncondo.mlr1 = lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                             Model Summary                               \n------------------------------------------------------------------------\nR                       0.807       RMSE                     755957.289 \nR-Squared               0.651       Coef. Var                    43.168 \nAdj. R-Squared          0.647       MSE                571471422208.591 \nPred R-Squared          0.638       MAE                      414819.628 \n------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\n\n\nThe gtsummary package provides an elegant and flexible way to create publication-ready summary tables. The tbl_regression() function is used to create a well formatted regression report.\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n  \n    \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nWith gtsummary package, model statistics can be included in the report by either appending them to the report table by using the add_glance_table() function or adding as a table source note by using the add_glance_source_note() function.\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %&gt;% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n  \n    \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = &lt;0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\n\nThe oslrr package is specially programmed for performing Ordinary Least Squares (OLS) regression. It provides a collection of very useful methods for building better multiple linear regression models:\n\nComprehensive regression output,\nResidual diagnostics,\nMeasures of influence,\nHeteroskedasticity tests,\nCollinearity diagnostics,\nModel fit assessment,\nVariable contribution assessment, and\nVariable selection procedures.\n\nThe ols_vif_tol() function in the olsrr package is used to test if there are signs of multicollinearity. Since the VIF of the independent variables are less than 10, it can be concluded that there are no signs of multicollinearity among the independent variables.\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\n\n\n\nIn multiple linear regression, it is important for us to test the assumption that linearity and additivity of the relationship between dependent and independent variables.\nThe ols_plot_resid_fit() function in the olsrr package is used to perform linearity assumption test. The plot shows that most of the data points are scattered around the residual = 0 line. Hence, it can be concluded that the relationships between the dependent variable and independent variables are linear.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\n\n\n\nThe ols_plot_resid_hist() function of the olsrr package is used to perform the normality assumption test of the residuals. The plot reveals that the residuals of the multiple linear regression model resemble normal distribution.\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\nAlternatively, the ols_test_normality() function in the olsrr package is used to conduct a formal statistical test for the normality assumption. The summary table reveals that the p-values of the four tests are way smaller than the alpha value of 0.05. Hence, the null hypothesis is rejected, and it can be inferred that there is statistical evidence that the residuals are not normally distributed.\n\nols_test_normality(condo.mlr1)\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\n\n\n\nAs the hedonic model uses geographically referenced attributes, it is also important to visualise the residual of the hedonic pricing model.\nThe condo_resale.sf simple feature data frame is converted into a SpatialPointsDataFrame in order to perform a spatial autocorrelation test.\nThe residual of the hedonic pricing model is exported and saved as a data frame.\n\nmlr.output = as.data.frame(condo.mlr1$residuals)\n\nThe mlr.output data frame is then joined with the condo_resale.sf simple feature data frame.\n\ncondo_resale.res.sf = cbind(condo_resale.sf,                          condo.mlr1$residuals) %&gt;% rename(`MLR_RES` = `condo.mlr1.residuals`)\n\nThe condo_resale.res.sf simple feature data frame is converted to SpatialPointsDataFrame (because the spdep package can only process sp conformed spatial data objects).\n\ncondo_resale.sp = as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\nThe functions in the tmap package are used to display the distribution of the residuals on an interactive map. The plot reveals that there is sign of spatial autocorrelation.\n\ntmap_mode(\"view\")\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\nTo test the observation, the Moran’s I test is performed.\n\nThe dnearneigh() function in the spdep package is used to compute the distance-based weight matrix.\nThe nb2listw() function in the spdep package is used to convert the output neighbours lists (i.e., nb) into a list of spatial weights.\nThe lm.morantest() function in the spdep package is used to perform Moran’s I test for residual spatial autocorrelation. The Global Moran’s I test for residual spatial autocorrelation shows that it’s p-value is less than 2.2e-16, which is less than the alpha value of 0.05. Hence, the null hypothesis is rejected, and it is inferred that the residuals are not randomly distributed. Since the observed global Moran I = 0.1424418 is greater than 0, it can be inferred that the residuals resemble cluster distribution.\n\n\nnb = dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\n\nnb_lw = nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\n\n\n\n\n\nHedonic pricing models are built using both the fixed and adaptive bandwidth schemes.\n\n\n\n\nThe bw.gwr() function in the GWModel package is used to determine the optimal fixed bandwidth to use in the model. The “adaptive = FALSE” argument meant that fixed bandwidth is used instead.\nThe two possible inputs for the “approach” argument that can be used to determine the stopping rule are:\n\nCross-validation (CV) approach, and\nAkaike information criterion corrected (AICc) approach.\n\nThe output shows that the recommended bandwidth is 971.3405 metres.\n\n bw.fixed = bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.378294e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3408 CV score: 4.721292e+14 \nFixed bandwidth: 971.3403 CV score: 4.721292e+14 \nFixed bandwidth: 971.3406 CV score: 4.721292e+14 \nFixed bandwidth: 971.3404 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \n\n\n\n\n\nThe GWR model using fixed bandwidth and Gaussian kernel is calibrated using the gwr.basic() function in the GWmodel package.\nThe output is saved in a list of class “gwrm”, which shows that the AICc of the GWR is 42263.61 which is significantly smaller than that of the global multiple linear regression model of 42967.14.\n\ngwr.fixed = gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2023-12-17 18:47:15.574136 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3405 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3600e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7425e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5000e+06 -1.5970e+05  3.1971e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8073e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112793548\n   AREA_SQM                 21575\n   AGE                     434201\n   PROX_CBD               2704596\n   PROX_CHILDCARE         1654087\n   PROX_ELDERLYCARE      38867814\n   PROX_URA_GROWTH_AREA  78515730\n   PROX_MRT               3124316\n   PROX_PARK             18122425\n   PROX_PRIMARY_SCH       4637503\n   PROX_SHOPPING_MALL     1529952\n   PROX_BUS_STOP         11342182\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073636\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3804 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6196 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.53407e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2023-12-17 18:47:16.774211 \n\n\n\n\n\n\n\n\nThe bw.gwr() function in the GWModel package is used to determine the optimal adaptive bandwidth to use in the model. The “adaptive = TRUE” argument meant that adaptive bandwidth is used. The output shows that 30 is the recommended data points to be used.\n\nbw.adaptive = bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\n\n\n\nThe GWR model using adaptive bandwidth and Gaussian kernel is calibrated using the gwr.basic() function in the GWmodel package.\nThe output is saved in a list of class “gwrm”, which shows that the AICc of the GWR is 41982.22 which is significantly smaller than that of the global multiple linear regression model of 42967.14 and also smaller than that of the fixed distance GWR of 42263.61.\n\ngwr.adaptive = gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2023-12-17 18:47:26.527722 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2023-12-17 18:47:27.97011 \n\n\n\n\n\n\nIn addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, and explanatory variable coefficients and standard errors:\n\nCondition Number: this diagnostic evaluates local collinearity. In the presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30, may be unreliable.\nLocal R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing from the regression model.\nPredicted: these are the estimated (or fitted) y values computed by GWR.\nResiduals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardised residuals have a mean of zero and a standard deviation of 1. A cold-to-hot rendered map of standardised residuals can be produced by using these values.\nCoefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates are higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.\n\nThey are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its “data” slot in an object called SDF of the output list.\n\n\n\nThe SDF is converted into a simple feature data frame to visualise its fields.\n\ncondo_resale.sf.adaptive = st_as_sf(gwr.adaptive$SDF) %&gt;%\n  st_transform(crs=3414)\n\n\ncondo_resale.sf.adaptive.svy21 = st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21  \n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.94        0   -0.72065800   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\ngwr.adaptive.output = as.data.frame(gwr.adaptive$SDF)\n\ncondo_resale.sf.adaptive = cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\n\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 77\n$ POSTCODE                &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ LOG_SELLING_PRICE       &lt;dbl&gt; 14.91412, 15.17135, 15.01698, 15.26243, 14.151…\n$ MLR_RES                 &lt;dbl&gt; -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               &lt;dbl&gt; 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              &lt;dbl&gt; 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   &lt;dbl&gt; -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              &lt;dbl&gt; -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        &lt;dbl&gt; 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      &lt;dbl&gt; -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  &lt;dbl&gt; -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              &lt;dbl&gt; -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             &lt;dbl&gt; -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      &lt;dbl&gt; 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    &lt;dbl&gt; 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         &lt;dbl&gt; 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           &lt;dbl&gt; 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       &lt;dbl&gt; -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              &lt;dbl&gt; 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    &lt;dbl&gt; 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                &lt;dbl&gt; 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           &lt;dbl&gt; 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            &lt;dbl&gt; 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             &lt;dbl&gt; 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  &lt;dbl&gt; 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             &lt;dbl&gt; 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       &lt;dbl&gt; 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     &lt;dbl&gt; 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE &lt;dbl&gt; 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             &lt;dbl&gt; 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            &lt;dbl&gt; 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     &lt;dbl&gt; 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   &lt;dbl&gt; 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        &lt;dbl&gt; 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          &lt;dbl&gt; 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      &lt;dbl&gt; 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             &lt;dbl&gt; 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            &lt;dbl&gt; 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             &lt;dbl&gt; 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  &lt;dbl&gt; -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             &lt;dbl&gt; -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       &lt;dbl&gt; 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     &lt;dbl&gt; -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV &lt;dbl&gt; -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             &lt;dbl&gt; -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            &lt;dbl&gt; -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     &lt;dbl&gt; 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   &lt;dbl&gt; 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        &lt;dbl&gt; 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          &lt;dbl&gt; 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      &lt;dbl&gt; -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             &lt;dbl&gt; 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                &lt;dbl&gt; 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               &lt;dbl&gt; 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               &lt;dbl&gt; 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                &lt;POINT [m]&gt; POINT (22085.12 29951.54), POINT (25656.…\n\n\n\nsummary(gwr.adaptive$SDF$yhat)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n  171347  1102001  1385528  1751842  1982307 13887901 \n\n\n\n\n\nThe local R2 values are visualised using the functions in the tmap package.\n\nStudent Note: The higher local R2 values for east (Changi, Simei), west (Jurong, Bukit Batok) and central (Orchard) regions indicate that the local regression model fits the observed y values. The lower local R2 values in the central region (Balestier, Toa Payoh, Bishan) indicate that the local regression model does not fit the observed y values as well. There could be other important variables determining resale selling prices in these areas.\n\n\ntmap_mode(\"view\")\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\nBy URA Planning Region\n\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ]) +   tm_polygons()+ \n  tm_shape(condo_resale.sf.adaptive) +    \n  tm_bubbles(col = \"Local_R2\",            \n             size = 0.15,            \n             border.col = \"gray60\",            \n             border.lwd = 1)\n\n\n\n\n\n\n\n\n\n\nThe coefficient estimates are visualised using the functions in the tmap package.\n\nStudent Note: The standard error values and t-values for “AREA_SQM” are mapped below.\n\nIn the context of GWR, t-values are commonly associated with coefficient estimates. Each coefficient estimate has an associated standard error, and the t-value is calculated by dividing the coefficient estimate by its standard error. The resulting t-value is then compared to critical values from a t-distribution to assess whether the coefficient is statistically significant.\nIn general, if the t-value is large (far from zero), it suggests that the coefficient estimate is significantly different from zero. If the t-value is small, it suggests that the coefficient estimate is not significantly different from zero.\n\n\n\ntmap_mode(\"view\")\nAREA_SQM_SE = tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV = tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGollini I, Lu B, Charlton M, Brunsdon C, Harris P (2015) “GWmodel: an R Package for exploring Spatial Heterogeneity using Geographically Weighted Models”. Journal of Statistical Software, 63(17):1-50, http://www.jstatsoft.org/v63/i17/\nLu B, Harris P, Charlton M, Brunsdon C (2014) “The GWmodel R Package: further topics for exploring Spatial Heterogeneity using GeographicallyWeighted Models”. Geo-spatial Information Science 17(2): 85-101, http://www.tandfonline.com/doi/abs/10.1080/1009502.2014.917453\n~~~ End of Hands-on Exercise 4 ~~~"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#overview",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "Geographically Weighted Regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate, demographic factors, physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable).\nIn this hands-on exercise, hedonic pricing models are built using GWR methods. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural or locational factors."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#the-data",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "The two data sets used in this hand-on exercise are:\n\nURA Master Plan Subzone Boundary in shapefile format (i.e. MP14_SUBZONE_WEB_PL); and\n2015 Condo Resale Data in csv format (i.e. condo_resale_2015.csv)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#getting-started",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "The packages used in this hands-on exercise are:\n\nsf for spatial data handling;\ntidyverse for attribute data handling;\ntmap for choropleth mapping;\nggpubr for creating customised and annotated ggplot2 plots for better visualisation;\ncorrplot for multivariate data visualisation and analysis;\nspdep for analysing spatial dependence and spatial relationships in data;\nGWmodel for calibrating geographical weighted family of models;\nolsrr for building ordinary least squares (OLS) regression models and performing diagnostic tests; and\ngtsummary for creating publication-ready analytical and summary tables;\n\nThe packages are loaded into the R environment:\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)\n\nGWModel Package\nThe GWmodel package provides a collection of localised spatial statistical methods, namely:\n\nGeographically weighted summary statistics,\nGeographically weighted principal components analysis,\nGeographically weighted discriminant analysis, and\nVarious forms of geographically weighted regression, some of which are provided in basic and robust (outlier resistant) forms.\n\nCommonly, outputs or parameters of the GWmodel are mapped to provide a useful exploratory tool, which can often precede (and direct) a more traditional or sophisticated statistical analysis."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#geospatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#geospatial-data-wrangling",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "The geospatial data used in this hands-on exercise is MP14_SUBZONE_WEB_PL. It is in ESRI shapefile format. The shapefile consists of URA Master Plan 2014’s planning subzone boundaries. Polygon features are used to represent these geographic boundaries. The GIS data is in SVY21 projected coordinates systems.\nThe st_read() function in the sf package is used to import the shapefile as mpsz, a simple feature object.\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\jmphosis\\ISSS624\\Hands-on_Ex\\Hands-on_Ex4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\n\nThe mpsz is transformed using the st_transform() function in the sf package to assign the correct ESPG code (i.e., 3414). This is then verified using the st_crs() function in the sf package.\n\nmpsz_svy21 = st_transform(mpsz, 3414)\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nThe extent of mpsz_svy21 is revealed using the st_bbox() function in the sf package.\n\nst_bbox(mpsz_svy21)\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#aspatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#aspatial-data-wrangling",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "The condo_resale_2015 is a csv file. The read_csv() function in the readr package is used to import it as condo_resale, a tibble data frame.\n\ncondo_resale = read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nThe glimpse() function in the dplyr package, the head() function and the summary() function in the base package are used to take a preliminary look at and derive the summary statistics of condo_resale.\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             &lt;dbl&gt; 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            &lt;dbl&gt; 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\nhead(condo_resale$LONGITUDE) #see the data in XCOORD column\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\nhead(condo_resale$LATITUDE) #see the data in YCOORD column\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\n\n\nThe st_as_sf() function in the sf package is used to convert the aspatial tibble data frame, condo_resale, into a simple feature object.\nNotice that the st_transform() function in the sf package is used to convert the coordinates from WGS84 (i.e. CRS = 4326) to SVY21 (i.e. CRS = 3414).\n\ncondo_resale.sf = st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %&gt;%\n  st_transform(crs=3414)\n\nThe head() function is used to list the content of condo_resale.sf object, which is a point feature data frame.\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLING_PRICE AREA_SQM   AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n     &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;            &lt;dbl&gt;\n1   118635       3000000      309    30     7.94          0.166            2.52 \n2   288420       3880000      290    32     6.61          0.280            1.93 \n3   267833       3325000      248    33     6.90          0.429            0.502\n4   258380       4250000      127     7     4.04          0.395            1.99 \n5   467169       1400000      145    28    11.8           0.119            1.12 \n6   466472       1320000      139    22    10.3           0.125            0.789\n# ℹ 15 more variables: PROX_URA_GROWTH_AREA &lt;dbl&gt;, PROX_HAWKER_MARKET &lt;dbl&gt;,\n#   PROX_KINDERGARTEN &lt;dbl&gt;, PROX_MRT &lt;dbl&gt;, PROX_PARK &lt;dbl&gt;,\n#   PROX_PRIMARY_SCH &lt;dbl&gt;, PROX_TOP_PRIMARY_SCH &lt;dbl&gt;,\n#   PROX_SHOPPING_MALL &lt;dbl&gt;, PROX_SUPERMARKET &lt;dbl&gt;, PROX_BUS_STOP &lt;dbl&gt;,\n#   NO_Of_UNITS &lt;dbl&gt;, FAMILY_FRIENDLY &lt;dbl&gt;, FREEHOLD &lt;dbl&gt;,\n#   LEASEHOLD_99YR &lt;dbl&gt;, geometry &lt;POINT [m]&gt;"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "The statistical graphics functions in the ggplot2 package are used to perform exploratory data analysis.\n\n\nThe distribution of “SELLING_PRICE” is plotted in a histogram. The histogram reveals a right skewed distribution. This means that more condominium units were transacted at relatively lower prices.\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\nStatistically, the skewed dsitribution can be normalised by using log transformation. The mutate() function in the dplyr package is used to derive a new variable, “LOG_SELLING_PRICE” from “SELLING_PRICE”.\n\ncondo_resale.sf = condo_resale.sf %&gt;%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\nThe histogram is then plotted using “LOG_SELLING_PRICE”. The distribution is relatively less skewed after the log transformation.\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\n\n\n\nThe ggarrange() function in the ggpubr package is used to draw a trellis plot of multiple small histograms of the various variables.\n\nAREA_SQM = ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE = ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD = ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE = ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE = ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA = ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET = ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN = ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT = ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK = ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH = ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH = ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\n\n\n\nThe functions in the tmap package are used to show the geospatial distribution of condominium resale prices.\nThe tm_dots() function is used instead of the tm_bubbles() function because the former creates a simple dot plot for point data, while the latter allows each point to be represented as a bubble with a size corresponding to a variable.\nThe tm_view() function with the\n“set.zoom.limits” argument sets the minimum and maximum zoom levels to 11 and 14 respectively.\nThe tmap_options() function with argument “check.and.fix = TRUE” is helpful in preventing errors or unexpected behavior when creating maps, especially when dealing with complex spatial data sets. It helps ensure that the spatial objects are in a valid state for plotting.\n\ntmap_mode(\"view\")\ntmap_options(check.and.fix = TRUE)\n\ntm_shape(mpsz_svy21)+\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style = \"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\nThe tmap_mode() function with “plot” argument is used to turn the display into the plot mode.\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#hedonic-pricing-modelling-in-r",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#hedonic-pricing-modelling-in-r",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "The hedonic pricing models for condominium resale units are built using the lm() function in the stats package.\n\n\nA simple linear regression model is built using “SELLING_PRICE” as the dependent variable and “AREA_SQM” as the independent variable.\n\ncondo.slr = lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nThe lm() function returns an object of class “lm” or for multiple responses of class c(“mlm,”lm”).\nThe summary() function in the base package and the anova() in the stats package are used to obtain a summary and analysis of variance table of the results. The generic accessor functions coefficients, effects, fitted.values and residuals extract various useful features of the value returned by the lm() function.\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: &lt; 2.2e-16\n\n\nThe output shows that the “SELLING_PRICE” can be explained using the formula:\n\nSELLING_PRICE = -258121.1 + 14719*AREA_SQM\n\nThe R-squared of 0.4518 reveals that the simple regression model built is able to explain about 45% of the resale prices.\nSince the p-value is much smaller than 0.0001, the null hypothesis is rejected, i.e., reject that there is no significant relationship between the independent variable and the dependent variable, and infer that the simple linear regression model is a good estimator of “SELLING_PRICE”.\nThe coefficients section of the output reveals that the p-values of both the estimates of the Intercept and “AREA_SQM” are smaller than 0.001. Hence, the null hypothesis of the B0 and B1 are equal to 0 will be rejected. As a result, it can be inferred that the B0 and B1 are good parameter estimates.\nThe ggplot() function is used to draw a scatterplot to visualise the best fit line using the lm() method. There are a few statistical outliers with relatively high selling prices.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\n\n\n\nVisualising the Relationships of Independent Variables\nBefore building a multiple regression model, it is important to ensure that the indepdent variables used are not highly correlated to each other. If highly correlated independent variables are used in building a regression model, the quality of the model will be compromised. This phenomenon is known as multicollinearity in statistics.\nA correlation matrix is commonly used to visualise the relationships between the independent variables. Beside the pairs() function in the graphics package, there are many packages that support the display of a correlation matrix. In this hands-on exercise, the corrplot package will be used.\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\nThe matrix reorder is very important for mining the hidden structure and pattern in the matrix. There are four methods in corrplot (parameter order), named “AOE”, “FPC”, “hclust”, “alphabet”. In the code chunk above, “AOE” order is used. It orders the variables by using the angular order of the eigenvectors method. From the scatterplot matrix, it is clear that “Freehold” is highly correlated to “LEASE_99YEAR”. In view of this, it is wiser to only include either one of them in the subsequent model building. As a result, the latter is excluded in the subsequent model building.\n\n\n\nThe lm() function is used to calibrate the multiple linear regression model.\n\ncondo.mlr = lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  &lt; 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  &lt; 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  &lt; 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  &lt; 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: &lt; 2.2e-16\n\n\n\n\n\nFrom the output above, it is clear that not all the independent variables are statistically significant. The model is revised by removing variables which are not statistically significant.\n\nStudent Note: The four variables removed are: “PROX_HAWKER_MARKET”, “PROX_KINDERGARTEN”, “PROX_TOP_PRIMARY_SCH”, and “PROX_SUPERMARKET”\n\n\ncondo.mlr1 = lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                             Model Summary                               \n------------------------------------------------------------------------\nR                       0.807       RMSE                     755957.289 \nR-Squared               0.651       Coef. Var                    43.168 \nAdj. R-Squared          0.647       MSE                571471422208.591 \nPred R-Squared          0.638       MAE                      414819.628 \n------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\n\n\nThe gtsummary package provides an elegant and flexible way to create publication-ready summary tables. The tbl_regression() function is used to create a well formatted regression report.\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n  \n    \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nWith gtsummary package, model statistics can be included in the report by either appending them to the report table by using the add_glance_table() function or adding as a table source note by using the add_glance_source_note() function.\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %&gt;% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n\n  \n    \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = &lt;0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\n\nThe oslrr package is specially programmed for performing Ordinary Least Squares (OLS) regression. It provides a collection of very useful methods for building better multiple linear regression models:\n\nComprehensive regression output,\nResidual diagnostics,\nMeasures of influence,\nHeteroskedasticity tests,\nCollinearity diagnostics,\nModel fit assessment,\nVariable contribution assessment, and\nVariable selection procedures.\n\nThe ols_vif_tol() function in the olsrr package is used to test if there are signs of multicollinearity. Since the VIF of the independent variables are less than 10, it can be concluded that there are no signs of multicollinearity among the independent variables.\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\n\n\n\nIn multiple linear regression, it is important for us to test the assumption that linearity and additivity of the relationship between dependent and independent variables.\nThe ols_plot_resid_fit() function in the olsrr package is used to perform linearity assumption test. The plot shows that most of the data points are scattered around the residual = 0 line. Hence, it can be concluded that the relationships between the dependent variable and independent variables are linear.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\n\n\n\nThe ols_plot_resid_hist() function of the olsrr package is used to perform the normality assumption test of the residuals. The plot reveals that the residuals of the multiple linear regression model resemble normal distribution.\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\nAlternatively, the ols_test_normality() function in the olsrr package is used to conduct a formal statistical test for the normality assumption. The summary table reveals that the p-values of the four tests are way smaller than the alpha value of 0.05. Hence, the null hypothesis is rejected, and it can be inferred that there is statistical evidence that the residuals are not normally distributed.\n\nols_test_normality(condo.mlr1)\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\n\n\n\nAs the hedonic model uses geographically referenced attributes, it is also important to visualise the residual of the hedonic pricing model.\nThe condo_resale.sf simple feature data frame is converted into a SpatialPointsDataFrame in order to perform a spatial autocorrelation test.\nThe residual of the hedonic pricing model is exported and saved as a data frame.\n\nmlr.output = as.data.frame(condo.mlr1$residuals)\n\nThe mlr.output data frame is then joined with the condo_resale.sf simple feature data frame.\n\ncondo_resale.res.sf = cbind(condo_resale.sf,                          condo.mlr1$residuals) %&gt;% rename(`MLR_RES` = `condo.mlr1.residuals`)\n\nThe condo_resale.res.sf simple feature data frame is converted to SpatialPointsDataFrame (because the spdep package can only process sp conformed spatial data objects).\n\ncondo_resale.sp = as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\nThe functions in the tmap package are used to display the distribution of the residuals on an interactive map. The plot reveals that there is sign of spatial autocorrelation.\n\ntmap_mode(\"view\")\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\nTo test the observation, the Moran’s I test is performed.\n\nThe dnearneigh() function in the spdep package is used to compute the distance-based weight matrix.\nThe nb2listw() function in the spdep package is used to convert the output neighbours lists (i.e., nb) into a list of spatial weights.\nThe lm.morantest() function in the spdep package is used to perform Moran’s I test for residual spatial autocorrelation. The Global Moran’s I test for residual spatial autocorrelation shows that it’s p-value is less than 2.2e-16, which is less than the alpha value of 0.05. Hence, the null hypothesis is rejected, and it is inferred that the residuals are not randomly distributed. Since the observed global Moran I = 0.1424418 is greater than 0, it can be inferred that the residuals resemble cluster distribution.\n\n\nnb = dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\n\nnb_lw = nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#building-hedonic-pricing-models-using-gwmodel",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#building-hedonic-pricing-models-using-gwmodel",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "Hedonic pricing models are built using both the fixed and adaptive bandwidth schemes.\n\n\n\n\nThe bw.gwr() function in the GWModel package is used to determine the optimal fixed bandwidth to use in the model. The “adaptive = FALSE” argument meant that fixed bandwidth is used instead.\nThe two possible inputs for the “approach” argument that can be used to determine the stopping rule are:\n\nCross-validation (CV) approach, and\nAkaike information criterion corrected (AICc) approach.\n\nThe output shows that the recommended bandwidth is 971.3405 metres.\n\n bw.fixed = bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 8.259118e+14 \nFixed bandwidth: 10917.26 CV score: 7.970454e+14 \nFixed bandwidth: 6749.419 CV score: 7.273273e+14 \nFixed bandwidth: 4173.553 CV score: 6.300006e+14 \nFixed bandwidth: 2581.58 CV score: 5.404958e+14 \nFixed bandwidth: 1597.687 CV score: 4.857515e+14 \nFixed bandwidth: 989.6077 CV score: 4.722431e+14 \nFixed bandwidth: 613.7939 CV score: 1.378294e+16 \nFixed bandwidth: 1221.873 CV score: 4.778717e+14 \nFixed bandwidth: 846.0596 CV score: 4.791629e+14 \nFixed bandwidth: 1078.325 CV score: 4.751406e+14 \nFixed bandwidth: 934.7772 CV score: 4.72518e+14 \nFixed bandwidth: 1023.495 CV score: 4.730305e+14 \nFixed bandwidth: 968.6643 CV score: 4.721317e+14 \nFixed bandwidth: 955.7206 CV score: 4.722072e+14 \nFixed bandwidth: 976.6639 CV score: 4.721387e+14 \nFixed bandwidth: 963.7202 CV score: 4.721484e+14 \nFixed bandwidth: 971.7199 CV score: 4.721293e+14 \nFixed bandwidth: 973.6083 CV score: 4.721309e+14 \nFixed bandwidth: 970.5527 CV score: 4.721295e+14 \nFixed bandwidth: 972.4412 CV score: 4.721296e+14 \nFixed bandwidth: 971.2741 CV score: 4.721292e+14 \nFixed bandwidth: 970.9985 CV score: 4.721293e+14 \nFixed bandwidth: 971.4443 CV score: 4.721292e+14 \nFixed bandwidth: 971.5496 CV score: 4.721293e+14 \nFixed bandwidth: 971.3793 CV score: 4.721292e+14 \nFixed bandwidth: 971.3391 CV score: 4.721292e+14 \nFixed bandwidth: 971.3143 CV score: 4.721292e+14 \nFixed bandwidth: 971.3545 CV score: 4.721292e+14 \nFixed bandwidth: 971.3296 CV score: 4.721292e+14 \nFixed bandwidth: 971.345 CV score: 4.721292e+14 \nFixed bandwidth: 971.3355 CV score: 4.721292e+14 \nFixed bandwidth: 971.3413 CV score: 4.721292e+14 \nFixed bandwidth: 971.3377 CV score: 4.721292e+14 \nFixed bandwidth: 971.34 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3408 CV score: 4.721292e+14 \nFixed bandwidth: 971.3403 CV score: 4.721292e+14 \nFixed bandwidth: 971.3406 CV score: 4.721292e+14 \nFixed bandwidth: 971.3404 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \nFixed bandwidth: 971.3405 CV score: 4.721292e+14 \n\n\n\n\n\nThe GWR model using fixed bandwidth and Gaussian kernel is calibrated using the gwr.basic() function in the GWmodel package.\nThe output is saved in a list of class “gwrm”, which shows that the AICc of the GWR is 42263.61 which is significantly smaller than that of the global multiple linear regression model of 42967.14.\n\ngwr.fixed = gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2023-12-17 18:47:15.574136 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3405 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -3.5988e+07 -5.1998e+05  7.6780e+05  1.7412e+06\n   AREA_SQM              1.0003e+03  5.2758e+03  7.4740e+03  1.2301e+04\n   AGE                  -1.3475e+05 -2.0813e+04 -8.6260e+03 -3.7784e+03\n   PROX_CBD             -7.7047e+07 -2.3608e+05 -8.3600e+04  3.4646e+04\n   PROX_CHILDCARE       -6.0097e+06 -3.3667e+05 -9.7425e+04  2.9007e+05\n   PROX_ELDERLYCARE     -3.5000e+06 -1.5970e+05  3.1971e+04  1.9577e+05\n   PROX_URA_GROWTH_AREA -3.0170e+06 -8.2013e+04  7.0749e+04  2.2612e+05\n   PROX_MRT             -3.5282e+06 -6.5836e+05 -1.8833e+05  3.6922e+04\n   PROX_PARK            -1.2062e+06 -2.1732e+05  3.5383e+04  4.1335e+05\n   PROX_PRIMARY_SCH     -2.2695e+07 -1.7066e+05  4.8472e+04  5.1555e+05\n   PROX_SHOPPING_MALL   -7.2585e+06 -1.6684e+05 -1.0517e+04  1.5923e+05\n   PROX_BUS_STOP        -1.4676e+06 -4.5207e+04  3.7601e+05  1.1664e+06\n   NO_Of_UNITS          -1.3170e+03 -2.4822e+02 -3.0846e+01  2.5496e+02\n   FAMILY_FRIENDLY      -2.2749e+06 -1.1140e+05  7.6214e+03  1.6107e+05\n   FREEHOLD             -9.2067e+06  3.8073e+04  1.5169e+05  3.7528e+05\n                             Max.\n   Intercept            112793548\n   AREA_SQM                 21575\n   AGE                     434201\n   PROX_CBD               2704596\n   PROX_CHILDCARE         1654087\n   PROX_ELDERLYCARE      38867814\n   PROX_URA_GROWTH_AREA  78515730\n   PROX_MRT               3124316\n   PROX_PARK             18122425\n   PROX_PRIMARY_SCH       4637503\n   PROX_SHOPPING_MALL     1529952\n   PROX_BUS_STOP         11342182\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073636\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3804 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6196 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 2.53407e+14 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2023-12-17 18:47:16.774211 \n\n\n\n\n\n\n\n\nThe bw.gwr() function in the GWModel package is used to determine the optimal adaptive bandwidth to use in the model. The “adaptive = TRUE” argument meant that adaptive bandwidth is used. The output shows that 30 is the recommended data points to be used.\n\nbw.adaptive = bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 7.952401e+14 \nAdaptive bandwidth: 561 CV score: 7.667364e+14 \nAdaptive bandwidth: 354 CV score: 6.953454e+14 \nAdaptive bandwidth: 226 CV score: 6.15223e+14 \nAdaptive bandwidth: 147 CV score: 5.674373e+14 \nAdaptive bandwidth: 98 CV score: 5.426745e+14 \nAdaptive bandwidth: 68 CV score: 5.168117e+14 \nAdaptive bandwidth: 49 CV score: 4.859631e+14 \nAdaptive bandwidth: 37 CV score: 4.646518e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \nAdaptive bandwidth: 25 CV score: 4.430816e+14 \nAdaptive bandwidth: 32 CV score: 4.505602e+14 \nAdaptive bandwidth: 27 CV score: 4.462172e+14 \nAdaptive bandwidth: 30 CV score: 4.422088e+14 \n\n\n\n\n\nThe GWR model using adaptive bandwidth and Gaussian kernel is calibrated using the gwr.basic() function in the GWmodel package.\nThe output is saved in a list of class “gwrm”, which shows that the AICc of the GWR is 41982.22 which is significantly smaller than that of the global multiple linear regression model of 42967.14 and also smaller than that of the fixed distance GWR of 42263.61.\n\ngwr.adaptive = gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2023-12-17 18:47:26.527722 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n   (Intercept)           527633.22  108183.22   4.877 1.20e-06 ***\n   AREA_SQM               12777.52     367.48  34.771  &lt; 2e-16 ***\n   AGE                   -24687.74    2754.84  -8.962  &lt; 2e-16 ***\n   PROX_CBD              -77131.32    5763.12 -13.384  &lt; 2e-16 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950 0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651 3.61e-06 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332 0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179 2.56e-07 ***\n   PROX_PARK             570504.81   65507.03   8.709  &lt; 2e-16 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654 0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043 1.93e-09 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074 4.42e-07 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791 0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120 0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228 7.98e-13 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: &lt; 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8.120609e+14\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                               Min.     1st Qu.      Median     3rd Qu.\n   Intercept            -1.3487e+08 -2.4669e+05  7.7928e+05  1.6194e+06\n   AREA_SQM              3.3188e+03  5.6285e+03  7.7825e+03  1.2738e+04\n   AGE                  -9.6746e+04 -2.9288e+04 -1.4043e+04 -5.6119e+03\n   PROX_CBD             -2.5330e+06 -1.6256e+05 -7.7242e+04  2.6624e+03\n   PROX_CHILDCARE       -1.2790e+06 -2.0175e+05  8.7158e+03  3.7778e+05\n   PROX_ELDERLYCARE     -1.6212e+06 -9.2050e+04  6.1029e+04  2.8184e+05\n   PROX_URA_GROWTH_AREA -7.2686e+06 -3.0350e+04  4.5869e+04  2.4613e+05\n   PROX_MRT             -4.3781e+07 -6.7282e+05 -2.2115e+05 -7.4593e+04\n   PROX_PARK            -2.9020e+06 -1.6782e+05  1.1601e+05  4.6572e+05\n   PROX_PRIMARY_SCH     -8.6418e+05 -1.6627e+05 -7.7853e+03  4.3222e+05\n   PROX_SHOPPING_MALL   -1.8272e+06 -1.3175e+05 -1.4049e+04  1.3799e+05\n   PROX_BUS_STOP        -2.0579e+06 -7.1461e+04  4.1104e+05  1.2071e+06\n   NO_Of_UNITS          -2.1993e+03 -2.3685e+02 -3.4699e+01  1.1657e+02\n   FAMILY_FRIENDLY      -5.9879e+05 -5.0927e+04  2.6173e+04  2.2481e+05\n   FREEHOLD             -1.6340e+05  4.0765e+04  1.9023e+05  3.7960e+05\n                            Max.\n   Intercept            18758355\n   AREA_SQM                23064\n   AGE                     13303\n   PROX_CBD             11346650\n   PROX_CHILDCARE        2892127\n   PROX_ELDERLYCARE      2465671\n   PROX_URA_GROWTH_AREA  7384059\n   PROX_MRT              1186242\n   PROX_PARK             2588497\n   PROX_PRIMARY_SCH      3381462\n   PROX_SHOPPING_MALL   38038564\n   PROX_BUS_STOP        12081592\n   NO_Of_UNITS              1010\n   FAMILY_FRIENDLY       2072414\n   FREEHOLD              1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 2.528227e+14 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2023-12-17 18:47:27.97011 \n\n\n\n\n\n\nIn addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, and explanatory variable coefficients and standard errors:\n\nCondition Number: this diagnostic evaluates local collinearity. In the presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30, may be unreliable.\nLocal R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing from the regression model.\nPredicted: these are the estimated (or fitted) y values computed by GWR.\nResiduals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardised residuals have a mean of zero and a standard deviation of 1. A cold-to-hot rendered map of standardised residuals can be produced by using these values.\nCoefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates are higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.\n\nThey are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its “data” slot in an object called SDF of the output list.\n\n\n\nThe SDF is converted into a simple feature data frame to visualise its fields.\n\ncondo_resale.sf.adaptive = st_as_sf(gwr.adaptive$SDF) %&gt;%\n  st_transform(crs=3414)\n\n\ncondo_resale.sf.adaptive.svy21 = st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21  \n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.94        0   -0.72065800   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\ngwr.adaptive.output = as.data.frame(gwr.adaptive$SDF)\n\ncondo_resale.sf.adaptive = cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\n\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 77\n$ POSTCODE                &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ LOG_SELLING_PRICE       &lt;dbl&gt; 14.91412, 15.17135, 15.01698, 15.26243, 14.151…\n$ MLR_RES                 &lt;dbl&gt; -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               &lt;dbl&gt; 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              &lt;dbl&gt; 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   &lt;dbl&gt; -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              &lt;dbl&gt; -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        &lt;dbl&gt; 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      &lt;dbl&gt; -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  &lt;dbl&gt; -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              &lt;dbl&gt; -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             &lt;dbl&gt; -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      &lt;dbl&gt; 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    &lt;dbl&gt; 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         &lt;dbl&gt; 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           &lt;dbl&gt; 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       &lt;dbl&gt; -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              &lt;dbl&gt; 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    &lt;dbl&gt; 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                &lt;dbl&gt; 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           &lt;dbl&gt; 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            &lt;dbl&gt; 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             &lt;dbl&gt; 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  &lt;dbl&gt; 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             &lt;dbl&gt; 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       &lt;dbl&gt; 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     &lt;dbl&gt; 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE &lt;dbl&gt; 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             &lt;dbl&gt; 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            &lt;dbl&gt; 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     &lt;dbl&gt; 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   &lt;dbl&gt; 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        &lt;dbl&gt; 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          &lt;dbl&gt; 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      &lt;dbl&gt; 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             &lt;dbl&gt; 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            &lt;dbl&gt; 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             &lt;dbl&gt; 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  &lt;dbl&gt; -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             &lt;dbl&gt; -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       &lt;dbl&gt; 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     &lt;dbl&gt; -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV &lt;dbl&gt; -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             &lt;dbl&gt; -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            &lt;dbl&gt; -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     &lt;dbl&gt; 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   &lt;dbl&gt; 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        &lt;dbl&gt; 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          &lt;dbl&gt; 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      &lt;dbl&gt; -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             &lt;dbl&gt; 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                &lt;dbl&gt; 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               &lt;dbl&gt; 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               &lt;dbl&gt; 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                &lt;POINT [m]&gt; POINT (22085.12 29951.54), POINT (25656.…\n\n\n\nsummary(gwr.adaptive$SDF$yhat)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n  171347  1102001  1385528  1751842  1982307 13887901 \n\n\n\n\n\nThe local R2 values are visualised using the functions in the tmap package.\n\nStudent Note: The higher local R2 values for east (Changi, Simei), west (Jurong, Bukit Batok) and central (Orchard) regions indicate that the local regression model fits the observed y values. The lower local R2 values in the central region (Balestier, Toa Payoh, Bishan) indicate that the local regression model does not fit the observed y values as well. There could be other important variables determining resale selling prices in these areas.\n\n\ntmap_mode(\"view\")\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\nBy URA Planning Region\n\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ]) +   tm_polygons()+ \n  tm_shape(condo_resale.sf.adaptive) +    \n  tm_bubbles(col = \"Local_R2\",            \n             size = 0.15,            \n             border.col = \"gray60\",            \n             border.lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#section",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#section",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "The coefficient estimates are visualised using the functions in the tmap package.\n\nStudent Note: The standard error values and t-values for “AREA_SQM” are mapped below.\n\nIn the context of GWR, t-values are commonly associated with coefficient estimates. Each coefficient estimate has an associated standard error, and the t-value is calculated by dividing the coefficient estimate by its standard error. The resulting t-value is then compared to critical values from a t-distribution to assess whether the coefficient is statistically significant.\nIn general, if the t-value is large (far from zero), it suggests that the coefficient estimate is significantly different from zero. If the t-value is small, it suggests that the coefficient estimate is not significantly different from zero.\n\n\n\ntmap_mode(\"view\")\nAREA_SQM_SE = tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV = tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4.html#references",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "Gollini I, Lu B, Charlton M, Brunsdon C, Harris P (2015) “GWmodel: an R Package for exploring Spatial Heterogeneity using Geographically Weighted Models”. Journal of Statistical Software, 63(17):1-50, http://www.jstatsoft.org/v63/i17/\nLu B, Harris P, Charlton M, Brunsdon C (2014) “The GWmodel R Package: further topics for exploring Spatial Heterogeneity using GeographicallyWeighted Models”. Geo-spatial Information Science 17(2): 85-101, http://www.tandfonline.com/doi/abs/10.1080/1009502.2014.917453\n~~~ End of Hands-on Exercise 4 ~~~"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex1/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html",
    "title": "In-class Exercise 2",
    "section": "",
    "text": "Note: This In-class Exercise 2 combines the following three in-class exercises on isss624.netlify.app:"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#overview",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#overview",
    "title": "In-class Exercise 2",
    "section": "1 Overview",
    "text": "1 Overview\nThis in-class exercise introduces an alternative R package, sfdep. According to Josiah Perry, the developer of the package, “sfdep builds on the great shoulders of spdep package for spatial dependence. sfdep creates an sf and tidyverse friendly interface to the package as well as introduces new functionality that is not present in spdep. sfdep utilizes list columns extensively to make this interface possible.”"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#getting-started---installing-and-loading-the-r-packages",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#getting-started---installing-and-loading-the-r-packages",
    "title": "In-class Exercise 2",
    "section": "2 Getting Started - Installing and Loading the R Packages",
    "text": "2 Getting Started - Installing and Loading the R Packages\nThe code chunk below loads the packages used in this in-class exercise:\n\nsf for importing, managing, and processing geospatial data;\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data;\ntmap for thematic mapping;\nknitr for embedding R code in different document formats (e.g., HTML) to facilitate dynamic report generation;\nsfdep for analysing spatial dependence and spatial relationships in data (building on spdep); and\nplotly for making interactive plots.\n\n\npacman::p_load(sf, tmap, sfdep, tidyverse, knitr, plotly)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-data",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-data",
    "title": "In-class Exercise 2",
    "section": "3 Importing Data",
    "text": "3 Importing Data\nFor the purpose of the in-class exercise, the Hunan data sets are used:\n\nHunan’s County Boundary Layer. This is a geospatial data set in ESRI shapefile format.\nHunan’s Local Development Indicators 2012. This csv file contains data on selected Hunan’s local development indicators in 2012.\n\nThe data sets are placed under two sub-folders:\n\ngeospatial (County Boundary Layer), and\naspatial (Local Development Indicators 2012).\n\nThese two sub-folders are within the data folder of my In-class_Ex2 folder.\n\n3.1 Importing shapefile\nThe st_read() (under sf package) is used to import the geospatial data set: hunan, a polygon feature layer in ESRI shapefile format.\n\nStudent Note: The geospatial objects are polygon features. There are a total of 88 features and 8 fields in hunan simple feature data frame. hunan is in wgs84 coordinate system.\n\n\nhunan = st_read(dsn = \"data/geospatial\",                   layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\jmphosis\\ISSS624\\In-class_Ex\\In-class_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n3.2 Importing csv file\nThe read_csv() (under readr package) is used to import the aspatial data set: hunan_2012, a csv file.\n\nStudent Note: The hunan_2012 tibble data frame contains 88 rows and 29 columns. There are two columns with character data - County and City.\n\n\nhunan2012 = read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n3.3 Performing Relational Join\nThe attribute table of the spatial polygons data frame, hunan, is updated using the attribute fields of the tibble data frame, hunan2012 using left_join() (under dplyr package). In order to retain the geospatial properties, the left data frame must be the sf data.frame (i.e. hunan)\n\nStudent Note: Without explicitly stating the “by” argument for left_join(), the two tables are joined by the ‘County’ columns.\n\n\nStudent Note: The geometry variable is automatically selected (when using dplyr package - part of tidyverse).\n\n\nhunan_GDPPC = left_join(hunan,hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\nhunan_GDPPC\n\nSimple feature collection with 88 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\n\n\n\n3.4 Visualising Regional Development Indicator\nA basemap and a choropleth map are prepared usign qtm() (under tmap package) to visualise the 2012 Gross Domestic Product Per Capita (GDPPC).\n\ntmap_mode(\"plot\")\ntm_shape(hunan_GDPPC) +\n  tm_fill(\"GDPPC\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of GDP per capita by district, Hunan Province\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#deriving-contiguity-spatial-weights",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#deriving-contiguity-spatial-weights",
    "title": "In-class Exercise 2",
    "section": "4 Deriving Contiguity Spatial Weights",
    "text": "4 Deriving Contiguity Spatial Weights\nBy and large, there are two type of spatial weights, they are contiguity weights and distance-based weights. In this section, the contiguity spatial weights are derived by using sfdep package.\nThe two steps for deriving contiguity spatial weights are:\n\nIdentify contiguity neighbour list using st_contiguity() (under sfdep package); and\nDerive contiguity spatial weights using st_weights() (under sfdep package).\n\n\n4.1 Identifying Contiguity Neighbours Using Queen’s Method\nThe st_contiguity() (under sfdep package) is used to derive a contiguity neighbour list using Queen’s method.\n\nStudent Note: The “queen” argument in the function is set to either TRUE (default) or FALSE. The TRUE option will return a list of first order neighbours using the Queen’s contiguity criteria; the FALSE option will return a list of first order neighbours using the Rook’s method. According to Queen’s criteria, two regions are considered neighbours if they share any part of their boundary (even if it is a single point). This results in a more inclusive definition of neighbour relationships.\n\n\nStudent Note: The summary report below shows that there are 88 area units in nb_queen. The most connected area unit (85) has 11 neighbours. The least connected area units (30 and 65) have only one neighbour each.\n\n\nStudent Note: The .before = 1 argument indicates that the new column, “nb”, should appear at the front.\n\n\nnb_queen = hunan_GDPPC %&gt;% \n  mutate(nb = st_contiguity(geometry),\n         .before = 1)\n\nsummary(nb_queen$nb)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\nnb_queen\n\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb   NAME_2  ID_3    NAME_3   ENGTYPE_3\n1                 2, 3, 4, 57, 85  Changde 21098   Anxiang      County\n2               1, 57, 58, 78, 85  Changde 21100   Hanshou      County\n3                     1, 4, 5, 85  Changde 21101    Jinshi County City\n4                      1, 3, 5, 6  Changde 21102        Li      County\n5                     3, 4, 6, 85  Changde 21103     Linli      County\n6                4, 5, 69, 75, 85  Changde 21104    Shimen      County\n7                  67, 71, 74, 84 Changsha 21109   Liuyang County City\n8       9, 46, 47, 56, 78, 80, 86 Changsha 21110 Ningxiang      County\n9           8, 66, 68, 78, 84, 86 Changsha 21111 Wangcheng      County\n10 16, 17, 19, 20, 22, 70, 72, 73 Chenzhou 21112     Anren      County\n      County GDPPC                       geometry\n1    Anxiang 23667 POLYGON ((112.0625 29.75523...\n2    Hanshou 20981 POLYGON ((112.2288 29.11684...\n3     Jinshi 34592 POLYGON ((111.8927 29.6013,...\n4         Li 24473 POLYGON ((111.3731 29.94649...\n5      Linli 25554 POLYGON ((111.6324 29.76288...\n6     Shimen 27137 POLYGON ((110.8825 30.11675...\n7    Liuyang 63118 POLYGON ((113.9905 28.5682,...\n8  Ningxiang 62202 POLYGON ((112.7181 28.38299...\n9  Wangcheng 70666 POLYGON ((112.7914 28.52688...\n10     Anren 12761 POLYGON ((113.1757 26.82734...\n\n\nOne of the advantage of sfdep over spdep is that the former’s output is an sf tibble data frame.\n\nkable(head(nb_queen,\n           n = 10))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnb\nNAME_2\nID_3\nNAME_3\nENGTYPE_3\nCounty\nGDPPC\ngeometry\n\n\n\n\n2, 3, 4, 57, 85\nChangde\n21098\nAnxiang\nCounty\nAnxiang\n23667\nPOLYGON ((112.0625 29.75523…\n\n\n1, 57, 58, 78, 85\nChangde\n21100\nHanshou\nCounty\nHanshou\n20981\nPOLYGON ((112.2288 29.11684…\n\n\n1, 4, 5, 85\nChangde\n21101\nJinshi\nCounty City\nJinshi\n34592\nPOLYGON ((111.8927 29.6013,…\n\n\n1, 3, 5, 6\nChangde\n21102\nLi\nCounty\nLi\n24473\nPOLYGON ((111.3731 29.94649…\n\n\n3, 4, 6, 85\nChangde\n21103\nLinli\nCounty\nLinli\n25554\nPOLYGON ((111.6324 29.76288…\n\n\n4, 5, 69, 75, 85\nChangde\n21104\nShimen\nCounty\nShimen\n27137\nPOLYGON ((110.8825 30.11675…\n\n\n67, 71, 74, 84\nChangsha\n21109\nLiuyang\nCounty City\nLiuyang\n63118\nPOLYGON ((113.9905 28.5682,…\n\n\n9, 46, 47, 56, 78, 80, 86\nChangsha\n21110\nNingxiang\nCounty\nNingxiang\n62202\nPOLYGON ((112.7181 28.38299…\n\n\n8, 66, 68, 78, 84, 86\nChangsha\n21111\nWangcheng\nCounty\nWangcheng\n70666\nPOLYGON ((112.7914 28.52688…\n\n\n16, 17, 19, 20, 22, 70, 72, 73\nChenzhou\n21112\nAnren\nCounty\nAnren\n12761\nPOLYGON ((113.1757 26.82734…\n\n\n\n\n\n\n\n4.2 Identifying Contiguity Neighbours Using Rooks’ Method\nThe st_contiguity() (under sfdep package) is used to derive a contiguity neighbour list using Rooks’ method.\n\nStudent Note: The “queen” argument in the function is set to either TRUE (default) or FALSE. The TRUE option will return a list of first order neighbours using the Queen’s contiguity criteria; the FALSE option will return a list of first order neighbours using the Rook’s method. According to Rook’s criteria, two regions are considered neighbours if they share an entire edge (but not corners). This results in a stricter definition neighbour relationships.\n\n\nStudent Note: The summary report below shows that there are 88 area units in nb_rook. The most connected area unit (85) has 10 (not 11) neighbours. The least connected area units (30 and 65) have only one neighbour each.\n\n\nStudent Note: The “.before = 1” argument in mutate() indicates that the new column, “nb” should appear at the front.\n\n\nnb_rook = hunan_GDPPC %&gt;% \n  mutate(nb = st_contiguity(geometry,\n                            queen = FALSE),\n         .before = 1)\n\nsummary(nb_rook$nb)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\nnb_rook\n\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                           nb   NAME_2  ID_3    NAME_3   ENGTYPE_3    County\n1                3, 4, 57, 85  Changde 21098   Anxiang      County   Anxiang\n2              57, 58, 78, 85  Changde 21100   Hanshou      County   Hanshou\n3                 1, 4, 5, 85  Changde 21101    Jinshi County City    Jinshi\n4                  1, 3, 5, 6  Changde 21102        Li      County        Li\n5                 3, 4, 6, 85  Changde 21103     Linli      County     Linli\n6            4, 5, 69, 75, 85  Changde 21104    Shimen      County    Shimen\n7              67, 71, 74, 84 Changsha 21109   Liuyang County City   Liuyang\n8   9, 46, 47, 56, 78, 80, 86 Changsha 21110 Ningxiang      County Ningxiang\n9       8, 66, 68, 78, 84, 86 Changsha 21111 Wangcheng      County Wangcheng\n10 16, 19, 20, 22, 70, 72, 73 Chenzhou 21112     Anren      County     Anren\n   GDPPC                       geometry\n1  23667 POLYGON ((112.0625 29.75523...\n2  20981 POLYGON ((112.2288 29.11684...\n3  34592 POLYGON ((111.8927 29.6013,...\n4  24473 POLYGON ((111.3731 29.94649...\n5  25554 POLYGON ((111.6324 29.76288...\n6  27137 POLYGON ((110.8825 30.11675...\n7  63118 POLYGON ((113.9905 28.5682,...\n8  62202 POLYGON ((112.7181 28.38299...\n9  70666 POLYGON ((112.7914 28.52688...\n10 12761 POLYGON ((113.1757 26.82734...\n\n\n\n\n4.3 Identifying Higher Order Neighbours\nThe st_nb_lag_cumul() (under sfdep package) is used to identify higher order contiguity neighbours. The result contains both first and second order neighbors because the order is set to 2.\n\nStudent Note: The summary report below shows that there are 88 area units in nb2_queen. For order set at 2, the most connected area unit (56) has 33 neighbours. The least connected area units (30 and 88) have five neighbours each.\n\n\nnb2_queen =  hunan_GDPPC %&gt;% \n  mutate(nb = st_contiguity(geometry),\n         nb2 = st_nb_lag_cumul(nb, 2),\n         .before = 1)\n\nsummary(nb2_queen$nb2)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 1324 \nPercentage nonzero weights: 17.09711 \nAverage number of links: 15.04545 \nLink number distribution:\n\n 5  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 26 28 33 \n 2  1  6  4  5  4  8  5 10  4  4  8  4  8  5  2  2  1  2  1  1  1 \n2 least connected regions:\n30 88 with 5 links\n1 most connected region:\n56 with 33 links\n\nnb2_queen\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                                        nb2\n1                                     2, 3, 4, 5, 6, 32, 56, 57, 58, 64, 69, 75, 76, 78, 85\n2                           1, 3, 4, 5, 6, 8, 9, 32, 56, 57, 58, 64, 68, 69, 75, 76, 78, 85\n3                                                 1, 2, 4, 5, 6, 32, 56, 57, 69, 75, 78, 85\n4                                                             1, 2, 3, 5, 6, 57, 69, 75, 85\n5                                                 1, 2, 3, 4, 6, 32, 56, 57, 69, 75, 78, 85\n6                                         1, 2, 3, 4, 5, 32, 53, 55, 56, 57, 69, 75, 78, 85\n7                                                     9, 19, 66, 67, 71, 73, 74, 76, 84, 86\n8  2, 9, 19, 21, 31, 32, 34, 35, 36, 41, 45, 46, 47, 56, 58, 66, 68, 74, 78, 80, 84, 85, 86\n9               2, 7, 8, 19, 21, 35, 46, 47, 56, 58, 66, 67, 68, 74, 76, 78, 80, 84, 85, 86\n10               11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 70, 71, 72, 73, 74, 82, 83, 86\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\n\n\n\n4.4 Deriving Contiguity Weights Using Queen’s Method\nThe st_weights() (under sfdep package) is used to compute the contiguity weights.\nThe arguments for st_weights() include:\n\nnb: A neighbour list object as created by st_neighbours().\nstyle: Default “W” for row standardised weights. This value can also be “B”, “C”, “U”, “minmax”, and “S”.\n\nThe “style” argument set to “W” specifies a binary spatial weight matrix, where the presence of a spatial relationship is indicated by 1, and absence by 0. All neighbouring units are considered equal in terms of their impact on the target unit, reflecting a uniform spatial relationship.\nIf the “style” argument is set to “B”, it specifies a binary spatial lag matrix, where the presence of a spatial relationship is indicated by 1, and absence by 0. At the same time, the direction of the connection is considered for the calculations.\n“C” is globally standardised (sums over all links to n), “U” is equal to “C” divided by the number of neighbours (sums over all links to unity), while “S” is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. (1999) (sums over all links to n).\n\nallow_zero: If TRUE, assigns zero as lagged value to zone without neighbors.\n\n\nwm_q = hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1)\n\nwm_q\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                            wt\n1                                                      0.2, 0.2, 0.2, 0.2, 0.2\n2                                                      0.2, 0.2, 0.2, 0.2, 0.2\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                      0.2, 0.2, 0.2, 0.2, 0.2\n7                                                       0.25, 0.25, 0.25, 0.25\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n10                      0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#distance-based-weights",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#distance-based-weights",
    "title": "In-class Exercise 2",
    "section": "5 Distance-based Weights",
    "text": "5 Distance-based Weights\nThere are three popularly used distance-based spatial weights, they are:\n\nFixed distance weights;\nAdaptive distance weights; and\nInverse distance weights (IDW).\n\n\n5.1 Deriving Fixed Distance Weights\nFirstly, the upper limit for the distance band would need to be derived.\n\nst_nb_dists() (under sfdep package) is used to calculate the nearest neighbour distance. The output is a list of distances for each observation’s neighbors list.\nunlist() (under base package) is then used to return the output as a vector so that the summary statistics of the nearest neighbour distances can be derived.\n\nThe summary statistics report below shows that the maximum nearest neighbour distance is 65.80 km. Hence, the threshold value is set at 66 km to ensure that each area will have at least one neighbour.\n\ngeo = st_geometry(hunan_GDPPC)\nnb = st_knn(geo, longlat = TRUE)\ndists = unlist(st_nb_dists(geo, nb))\n\nsummary(dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.56   29.11   36.89   37.34   43.21   65.80 \n\n\nThe fixed distance weights are then computed.\n\nst_dists_band() (under sfdep package) is used to identify neighbors based on a distance band (i.e. 66km). The output is a list of neighbours (i.e. nb).\nst_weights() is then used to calculate polygon spatial weights of the nb list. Note that:\n\nDefault “style” argument is set to “W” for row standardized weights, and\nDefault “allow_zero” is set to TRUE, which assigns zero as lagged value to zone without neighbors.\n\n\n\nwm_fd = hunan_GDPPC %&gt;%\n  mutate(nb = st_dist_band(geometry,\n                           upper = 66),\n               wt = st_weights(nb),\n               .before = 1)\n\nwm_fd\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                       nb\n1      2, 3, 4, 5, 57, 64\n2       1, 57, 58, 78, 85\n3             1, 4, 5, 57\n4              1, 3, 5, 6\n5          1, 3, 4, 6, 69\n6                4, 5, 69\n7              67, 71, 84\n8       9, 46, 47, 78, 80\n9   8, 46, 66, 68, 84, 86\n10 16, 20, 22, 70, 72, 73\n                                                                 wt   NAME_2\n1  0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667  Changde\n2                                           0.2, 0.2, 0.2, 0.2, 0.2  Changde\n3                                            0.25, 0.25, 0.25, 0.25  Changde\n4                                            0.25, 0.25, 0.25, 0.25  Changde\n5                                           0.2, 0.2, 0.2, 0.2, 0.2  Changde\n6                                   0.3333333, 0.3333333, 0.3333333  Changde\n7                                   0.3333333, 0.3333333, 0.3333333 Changsha\n8                                           0.2, 0.2, 0.2, 0.2, 0.2 Changsha\n9  0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667 Changsha\n10 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667 Chenzhou\n    ID_3    NAME_3   ENGTYPE_3    County GDPPC                       geometry\n1  21098   Anxiang      County   Anxiang 23667 POLYGON ((112.0625 29.75523...\n2  21100   Hanshou      County   Hanshou 20981 POLYGON ((112.2288 29.11684...\n3  21101    Jinshi County City    Jinshi 34592 POLYGON ((111.8927 29.6013,...\n4  21102        Li      County        Li 24473 POLYGON ((111.3731 29.94649...\n5  21103     Linli      County     Linli 25554 POLYGON ((111.6324 29.76288...\n6  21104    Shimen      County    Shimen 27137 POLYGON ((110.8825 30.11675...\n7  21109   Liuyang County City   Liuyang 63118 POLYGON ((113.9905 28.5682,...\n8  21110 Ningxiang      County Ningxiang 62202 POLYGON ((112.7181 28.38299...\n9  21111 Wangcheng      County Wangcheng 70666 POLYGON ((112.7914 28.52688...\n10 21112     Anren      County     Anren 12761 POLYGON ((113.1757 26.82734...\n\n\n\nStudent Note: The wt values of each row adds to 1 as a result of row standardisation. The wt values of each neighbour of a polygon are the same as a result of fixed distance weights.\n\n\n\n5.2 Deriving Adaptive Distance Weights\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have less neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using st_knn() (under sfdep package).\nThe adaptive distance weights are then computed.\n\nst_knn() (under sfdep package) is used to identify neighbors based on k (i.e. k = 8 indicates the nearest eight neighbours). The output is a list of neighbours (i.e. nb).\nst_weights() (under sfdep package) is then used to calculate polygon spatial weights of the nb list. Note that:\n\nDefault “style” argument is set to “W” for row standardized weights, and\nDefault “allow_zero” is set to TRUE, which assigns zero as lagged value to zone without neighbors.\n\n\n\nwm_ad = hunan_GDPPC %&gt;% \n  mutate(nb = st_knn(geometry,\n                     k=8),\n         wt = st_weights(nb),\n               .before = 1)\n\nwm_ad\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1      2, 3, 4, 5, 57, 58, 64, 76\n2     1, 3, 8, 57, 58, 68, 78, 85\n3       1, 2, 4, 5, 6, 57, 64, 85\n4       1, 2, 3, 5, 6, 57, 64, 69\n5       1, 2, 3, 4, 6, 57, 69, 85\n6       1, 2, 3, 4, 5, 69, 75, 85\n7   9, 66, 67, 68, 71, 74, 84, 86\n8    2, 9, 35, 46, 47, 78, 80, 86\n9   8, 46, 47, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                       wt   NAME_2  ID_3\n1  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125  Changde 21098\n2  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125  Changde 21100\n3  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125  Changde 21101\n4  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125  Changde 21102\n5  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125  Changde 21103\n6  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125  Changde 21104\n7  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125 Changsha 21109\n8  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125 Changsha 21110\n9  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125 Changsha 21111\n10 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125 Chenzhou 21112\n      NAME_3   ENGTYPE_3    County GDPPC                       geometry\n1    Anxiang      County   Anxiang 23667 POLYGON ((112.0625 29.75523...\n2    Hanshou      County   Hanshou 20981 POLYGON ((112.2288 29.11684...\n3     Jinshi County City    Jinshi 34592 POLYGON ((111.8927 29.6013,...\n4         Li      County        Li 24473 POLYGON ((111.3731 29.94649...\n5      Linli      County     Linli 25554 POLYGON ((111.6324 29.76288...\n6     Shimen      County    Shimen 27137 POLYGON ((110.8825 30.11675...\n7    Liuyang County City   Liuyang 63118 POLYGON ((113.9905 28.5682,...\n8  Ningxiang      County Ningxiang 62202 POLYGON ((112.7181 28.38299...\n9  Wangcheng      County Wangcheng 70666 POLYGON ((112.7914 28.52688...\n10     Anren      County     Anren 12761 POLYGON ((113.1757 26.82734...\n\n\n\n\n5.3 Deriving Inverse Distance Weights\nIDW assigns higher weights to neighbours that are closer and lower weights to neighbours that are further away.\nThe inverse distance weights (IDW) are then computed.\n\nst_contiguity() (under sfdep package) is used to identify the neighbours by using contiguity criteria. The output is a list of neighbours (i.e. nb).\nst_inverse_distance() (under sfdep package) is then used to calculate inverse distance weights of neighbours on the nb list.\n\n\nwm_idw = hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\n\nwm_idw\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                                              wts\n1                                      0.01526149, 0.03515537, 0.02176677, 0.02836978, 0.01029857\n2                                      0.01526149, 0.01601100, 0.01911052, 0.02327058, 0.01591694\n3                                                  0.03515537, 0.04581089, 0.04116397, 0.01208437\n4                                                  0.02176677, 0.04581089, 0.04637578, 0.01585302\n5                                                  0.04116397, 0.04637578, 0.01896212, 0.01351099\n6                                      0.01585302, 0.01896212, 0.02710909, 0.01140718, 0.01080890\n7                                                  0.01621067, 0.01536702, 0.01133628, 0.01836488\n8              0.01930410, 0.02675555, 0.02151751, 0.01076895, 0.02608065, 0.01519804, 0.01337412\n9                          0.01930410, 0.01651371, 0.01798519, 0.01473155, 0.03015561, 0.01612293\n10 0.02737233, 0.01390810, 0.01458881, 0.02156771, 0.02419268, 0.02350470, 0.01784174, 0.01621545\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#global-measures-of-spatial-association",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#global-measures-of-spatial-association",
    "title": "In-class Exercise 2",
    "section": "6 Global Measures of Spatial Association",
    "text": "6 Global Measures of Spatial Association\n\n6.1 Computing Global Moran’s I\nThe global_moran() (under sfdep package) is used to compute the Moran’s I value. The output is a tibble data frame (unlike when using spdep package).\n\nStudent Note: I value of 0.301 represents Moran’s I value. A positive value in this case indicates positive spatial autocorrelation, meaning that similar values tend to be clustered, i.e., neighbouring regions are more alike than would be expected by random chance.\n\n\nStudent Note: K value of 7.64 represents the average number of neighbours.\n\n\nmoranI = global_moran(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\n\nglimpse(moranI)\n\nList of 2\n $ I: num 0.301\n $ K: num 7.64\n\n\n\n\n6.2 Performing Global Moran’s I Test\nThe global_moran_test() (under sfdep package) is used to perform the Moran’s I test.\n\nThe default for “alternative” argument is “two.sided”. Other supported arguments are “greater” or “less”.\nBy default, the “randomization” argument is TRUE. If FALSE, the assumption of normality is set.\n\n\nStudent Note: Interpretation\n\nThe Moran’s I statistic of 0.300749970 suggests a positive spatial autocorrelation in the GDPPC variable.\nThe p-value of 1.095e-06 is very small, indicating a strong evidence to reject the null hypothesis of spatial randomness and support the alternative hypothesis.\nThe alternative hypothesis is that there is a significant positive autocorrelation in the GDPPC, i.e., neighbouring regions tend to have similar GDPPC values (cluster together).\n\n\n\nglobal_moran_test(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n\n6.3 Performing Global Moran’s I Permutation Test\nIn practice, Monte Carlo simulation is used to perform the statistical test. The global_moran_perm() (under sfdep package) is used to do so.\n\nThe set.seed() is used to ensure reproducibility.\nThe “+ 1” is typically added to the number of simulations because the observed value is also included in the distribution of simulated values.\n\n\nStudent Note: Interpretation\n\nThe Moran’s I statistic of 0.30075 suggests a positive spatial autocorrelation in the GDPPC variable.\nThe p-value of &lt;2.2e-16 is less than the commonly used significance level of 0.05, indicating a strong evidence to reject the null hypothesis of spatial randomness and support the alternative hypothesis.\nThe alternative hypothesis is that there is a significant positive autocorrelation in the GDPPC, i.e., neighbouring regions tend to have similar GDPPC values (cluster together).\nThe rank of 1,00 of the observed Moran’s I statistic compared to the simulated values means that the observed spatial pattern is unlikely to have occurred by random chance.\n\n\n\nset.seed(1234)\n\nglobal_moran_perm(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt,\n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#local-measures-of-spatial-association",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#local-measures-of-spatial-association",
    "title": "In-class Exercise 2",
    "section": "7 Local Measures of Spatial Association",
    "text": "7 Local Measures of Spatial Association\n\n7.1 Computing Local Moran’s I\nThe local_moran() (under sfdep package) is used to compute the local Moran’s I value of GDPPC at county level. The output is a tibble data frame (unlike when using spdep package).\n\nunnest() (under tidyr package) is used to expand a list-column containing data frames into rows and columns.\n\n\nlisa = wm_q %&gt;%\n  mutate(local_moran = local_moran(\n    GDPPC, nb, wt, nsim = 99),\n    .before = 1) %&gt;%\n  unnest(local_moran)\n\nThe output of local_moran() is a sf data frame containing the columns ii, eii, var_ii, z_ii, p_ii, p_ii_sim, and p_folded_sim.\n\nii: Local moran statistic.\neii: Expectation of local moran statistic; for local_moran_perm(), the permutation sample means.\nvar_ii: Variance of local moran statistic; for local_moran_perm(), the permutation sample standard deviations.\nz_ii: Standard deviation of local moran statistic; for local_moran_perm(), based on permutation of sample means and standard deviations\np_ii: p-value of local moran statistic using pnorm(); for local_moran_perm(), using standard deviation based on permutation of sample means and standard deviations\np_ii_sim: For local_moran_perm(), rank() and punif() of observed statistic rank for [0, 1] p-values using “alternative=”\np_folded_sim: The simulation folded [0, 0.5] range ranked p-value.\nskewness: For local_moran_perm(), the output of e1071::skewness() for the permutation samples underlying the standard deviates\nkurtosis: For local_moran_perm(), the output of e1071::kurtosis() for the permutation samples underlying the standard deviates.\n\n\nStudent Note:\n\nPositive local Moran’s I values indicate a location surrounded by similar values (High-High or Low-Low).\nNegative values indicate a location surrounded by dissimilar values (High-Low or Low-High).\nValues near zero suggest no significant local spatial autocorrelation.\n\n\n\n\n7.2 Visualising Local Moran’s I\nThe tmap functions are used to plot a choropleth map using the values in the “ii” field of lisa.\n\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 0.8)\n\n\n\n\nThe choropleth shows evidence of both positive and negative ii values. However, it is useful to consider the p-values for each of these values to see their statistical significance. A choropleth map of Moran’s I p-values (“p_ii_sim”) using functions of tmap package is plotted below.\n\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_fill(\"p_ii_sim\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n   tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\n\n\n\n\n\n7.3 Visualising Local Moran’s I and p-value\nThe two maps are then plotted next to each other.\n\nStudent Note: Interpretation\n\nMost of the p-values show that the Moran’s I values are not statistically significant.\nInterpreting the Moran’s I values together with the p-values, there is statistically significant positive autocorrelation for the GDPPC of counties in the northeast region of Hunan.\n\n\n\ntmap_mode(\"plot\")\nmap1 = tm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 0.8)\n\nmap2 = tm_shape(lisa) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\n\n\n\n\n\n7.4 Visualising Local Indicators of Spatial Association (LISA) Map\nThe LISA map is a categorical map showing outliers and clusters. There are two types of outliers namely: High-Low and Low-High outliers. Likewise, there are two type of clusters namely: High-High and Low-Low clusters. In fact, LISA map is an interpreted map by combining local Moran’s I of geographical areas and their respective p-values.\nIn the lisa sf data frame, we can find three fields contain the LISA categories. They are mean, median and pysal. In general, classification in mean will be used.\n\nStudent Note:\n\nThe plot confirms the earlier interpretation above that there is a statistically significant positive autocorrelation for the GDPPC of counties in the northeast region of Hunan (i.e., High-High clusters).\nThe plot also highlighted other significant clusters: Low-High for two counties in northeast region, and Low-Low for a county in central-west region.\n\n\n\nlisa_sig = lisa  %&gt;%\n  filter(p_ii &lt; 0.05)\n\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#hot-spot-and-cold-spot-area-analysis",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#hot-spot-and-cold-spot-area-analysis",
    "title": "In-class Exercise 2",
    "section": "8 Hot Spot and Cold Spot Area Analysis",
    "text": "8 Hot Spot and Cold Spot Area Analysis\nHot Spot and Cold Spot Area Analysis (HCSA) uses spatial weights to identify locations of statistically significant hot spots and cold spots in an spatially weighted attribute that are in proximity to one another based on a calculated distance. The analysis groups features when similar high (hot) or low (cold) values are found in a cluster. The polygon features usually represent administration boundaries or a custom grid structure.\n\n8.1 Computing Local Gi* Statistics\nThe inverse distance weights (IDW) are already computed in section 5.3 above.\n\nwm_idw\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                                              wts\n1                                      0.01526149, 0.03515537, 0.02176677, 0.02836978, 0.01029857\n2                                      0.01526149, 0.01601100, 0.01911052, 0.02327058, 0.01591694\n3                                                  0.03515537, 0.04581089, 0.04116397, 0.01208437\n4                                                  0.02176677, 0.04581089, 0.04637578, 0.01585302\n5                                                  0.04116397, 0.04637578, 0.01896212, 0.01351099\n6                                      0.01585302, 0.01896212, 0.02710909, 0.01140718, 0.01080890\n7                                                  0.01621067, 0.01536702, 0.01133628, 0.01836488\n8              0.01930410, 0.02675555, 0.02151751, 0.01076895, 0.02608065, 0.01519804, 0.01337412\n9                          0.01930410, 0.01651371, 0.01798519, 0.01473155, 0.03015561, 0.01612293\n10 0.02737233, 0.01390810, 0.01458881, 0.02156771, 0.02419268, 0.02350470, 0.01784174, 0.01621545\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\n\nThe local_gstar_perm() (under sfdep package) is used to compute local Gi* statistics.\n\nHCSA = wm_idw %&gt;% \n  mutate(local_Gi = local_gstar_perm(\n    GDPPC, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_Gi)\n\nHCSA\n\nSimple feature collection with 88 features and 16 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 17\n   gi_star   e_gi    var_gi p_value   p_sim p_folded_sim skewness kurtosis nb   \n     &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;nb&gt; \n 1  0.0416 0.0114   6.41e-6  0.0493 9.61e-1         0.7      0.35    0.875 &lt;int&gt;\n 2 -0.333  0.0106   3.84e-6 -0.0941 9.25e-1         1        0.5     0.661 &lt;int&gt;\n 3  0.281  0.0126   7.51e-6 -0.151  8.80e-1         0.9      0.45    0.640 &lt;int&gt;\n 4  0.411  0.0118   9.22e-6  0.264  7.92e-1         0.6      0.3     0.853 &lt;int&gt;\n 5  0.387  0.0115   9.56e-6  0.339  7.34e-1         0.62     0.31    1.07  &lt;int&gt;\n 6 -0.368  0.0118   5.91e-6 -0.583  5.60e-1         0.72     0.36    0.594 &lt;int&gt;\n 7  3.56   0.0151   7.31e-6  2.61   9.01e-3         0.06     0.03    1.09  &lt;int&gt;\n 8  2.52   0.0136   6.14e-6  1.49   1.35e-1         0.2      0.1     1.12  &lt;int&gt;\n 9  4.56   0.0144   5.84e-6  3.53   4.17e-4         0.04     0.02    1.23  &lt;int&gt;\n10  1.16   0.0104   3.70e-6  1.82   6.86e-2         0.12     0.06    0.416 &lt;int&gt;\n# ℹ 78 more rows\n# ℹ 8 more variables: wts &lt;list&gt;, NAME_2 &lt;chr&gt;, ID_3 &lt;int&gt;, NAME_3 &lt;chr&gt;,\n#   ENGTYPE_3 &lt;chr&gt;, County &lt;chr&gt;, GDPPC &lt;dbl&gt;, geometry &lt;POLYGON [°]&gt;\n\n\n\n\n8.2 Visualising Gi*\nThe Gi* values are plotted using functions in the tmap package.\n\nStudent Note: Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\n\n\nStudent Note: Interpretation\n\nThe positive Gi* values for the northeast region indicate High-High clustering, while the negative Gi* values for the northwest and central-west regions indicate Low-Low clustering.\n\n\n\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n\n\n\n\n\n\n8.3 Visualising p-value of Hot Spot and Cold Spot Area Analysis\nThe p-values of the HCSA are plotted using functions in the tmap package.\n\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_fill(\"p_sim\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n8.4 Visualising Local Hot Spot and Cold Spot Area Analysis\nThe two maps are then plotted next to each other.\n\nStudent Note: Interpretation\n\nThere are no statistically significant Hot Spots or Cold Spots in the western region.\nFor the northeast region, there are statistically High-High clusters.\n\n\n\ntmap_mode(\"plot\")\nmap1 = tm_shape(HCSA) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Gi* of GDPPC\",\n            main.title.size = 0.8)\n\nmap2 = tm_shape(HCSA) +\n  tm_fill(\"p_sim\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n          labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of Gi*\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\n\n\n\n\n\n8.5 Visualising Hot Spot and Cold Spot Areas\nThe significant (i.e., p-values less than 0.05) hot spot and cold spot areas are then plotted by using tmap functions.\nThe plot below reveals one hot spot area and one cold spot area. The hot spot area coincides with the High-High cluster identified using local Moran’s I method. Both local Moran’s I and Gi* values are derived from the spatially weighted values, and both are measures to assess spatial autocorrelation. LISA identifies local spatial patterns while Gi* is useful for identifying hot spots and cold spot areas.\n\nHCSA_sig = HCSA  %&gt;%\n  filter(p_sim &lt; 0.05)\n\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.4)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#emerging-hot-spot-analysis",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#emerging-hot-spot-analysis",
    "title": "In-class Exercise 2",
    "section": "9 Emerging Hot Spot Analysis",
    "text": "9 Emerging Hot Spot Analysis\nEmerging Hot Spot Analysis (EHSA) is a spatio-temporal analysis method for revealing and describing how hot spot and cold spot areas evolve over time.\nThe analysis consist of four main steps:\n\nBuild a space-time cube;\nCalculate Getis-Ord local Gi* statistic for each bin by using an False Discovery rate (FDR) correction;\n\nStudent Note: FDR is used to adjust p-values for multiple comparisons to address the issue of inflated Type I errors when conducting many test simultaneously, such as when assessing the significance of local spatial clusters.\n\nEvaluate the hot and cold spot trends by using Mann-Kendall trend test;\nCategorise each study area location by referring to the resultant trend z-score and p-value for each location within data, and with the hot spot z-score and p-value for each bin.\n\n\n9.1 Importing Attribute Table\nThe read_csv() (under readr package) is used to import Hunan_GDPPC.csv.\n\nGDPPC = read_csv(\"data/aspatial/Hunan_GDPPC.csv\")\n\n\nStudent Note: ‘Year’ variable is numerical data type (not datetime).\n\n\n\n9.2 Creating a Time Series Cube\nThe spacetime() (under sfdep package) is used to create a spacetime cube.\n\nGDPPC_st = spacetime(GDPPC, hunan,\n                     .loc_col = \"County\",\n                     .time_col = \"Year\")\n\nThe is_spacetime_cube() (under sfdep package) is used to verify if GDPPC_st is indeed a spacetime cube object. The TRUE return below confirms that GDPPC_st object is indeed a spacetime cube.\n\nis_spacetime_cube(GDPPC_st)\n\n[1] TRUE\n\n\n\n\n9.3 Computing Gi* Statistics\nThe Gi* statistics is then computed by identifying neighbours, deriving an inverse distance weights, and then calculating the local Gi* for each location.\n\nactivate() (under dplyr package) is used to activate the geometry context\nmutate() (under dplyr package) is used to create two new columns “nb” and “wt”.\nset_nbs() and set_wts() (both under sfdep package) are used to activate the data context again and copy over the nb and wt columns to each time-slice.\n\nThe row order is very important so do not rearrange the observations after using set_nbs() or set_wts().\n\n\n\nGDPPC_nb = GDPPC_st %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\nhead(GDPPC_nb)\n\n# A tibble: 6 × 5\n   Year County  GDPPC nb        wt       \n  &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;list&gt;    &lt;list&gt;   \n1  2005 Anxiang  8184 &lt;int [6]&gt; &lt;dbl [6]&gt;\n2  2005 Hanshou  6560 &lt;int [6]&gt; &lt;dbl [6]&gt;\n3  2005 Jinshi   9956 &lt;int [5]&gt; &lt;dbl [5]&gt;\n4  2005 Li       8394 &lt;int [5]&gt; &lt;dbl [5]&gt;\n5  2005 Linli    8850 &lt;int [5]&gt; &lt;dbl [5]&gt;\n6  2005 Shimen   9244 &lt;int [6]&gt; &lt;dbl [6]&gt;\n\n\nThe new columns are then used to calculate the local Gi* for each location. This is done by grouping by “Year” and using local_gstar_perm() (under sfdep package). Then, unnest() (under tidyr package) is used to unnest the “gi_star” column of the newly created gi_stars data frame.\n\ngi_stars = GDPPC_nb %&gt;%\n  group_by(Year) %&gt;%\n  mutate(gi_star = local_gstar_perm(\n    GDPPC, nb, wt)) %&gt;%\n  unnest(gi_star)\n\nhead(gi_stars)\n\n# A tibble: 6 × 13\n# Groups:   Year [1]\n   Year County  GDPPC nb        wt        gi_star   e_gi   var_gi  p_value p_sim\n  &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;list&gt;    &lt;list&gt;      &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;\n1  2005 Anxiang  8184 &lt;int [6]&gt; &lt;dbl [6]&gt;   0.398 0.0115  2.69e-6  0.382   0.702\n2  2005 Hanshou  6560 &lt;int [6]&gt; &lt;dbl [6]&gt;  -0.237 0.0109  2.64e-6  0.00199 0.998\n3  2005 Jinshi   9956 &lt;int [5]&gt; &lt;dbl [5]&gt;   1.05  0.0126  3.33e-6  0.507   0.612\n4  2005 Li       8394 &lt;int [5]&gt; &lt;dbl [5]&gt;   0.966 0.0117  3.24e-6  0.920   0.357\n5  2005 Linli    8850 &lt;int [5]&gt; &lt;dbl [5]&gt;   1.05  0.0120  3.23e-6  0.885   0.376\n6  2005 Shimen   9244 &lt;int [6]&gt; &lt;dbl [6]&gt;   0.210 0.0121  2.99e-6 -0.215   0.830\n# ℹ 3 more variables: p_folded_sim &lt;dbl&gt;, skewness &lt;dbl&gt;, kurtosis &lt;dbl&gt;\n\n\n\n\n9.4 Mann-Kendall Test\nEach location is then evaluated for a trend using the Mann-Kendall test. For illustration, Changsha (provincial capital of Hunan) is tested below.\n\nStudent Note: The |&gt; symbol is called the “pipe-forward” operator, and it is used in the context of the magrittr package in R. It was introduced in magrittr to provide an alternative to the %&gt;% pipe operator. The |&gt; operator is part of the native syntax of R since version 4.1.0. Just like %&gt;%, the |&gt; operator is used to chain operations together, passing the result of one expression as the first argument to the next.\n\n\ncbg = gi_stars %&gt;% \n  ungroup() %&gt;% \n  filter(County == \"Changsha\") |&gt; \n  select(County, Year, gi_star)\n\nhead(cbg)\n\n# A tibble: 6 × 3\n  County    Year gi_star\n  &lt;chr&gt;    &lt;dbl&gt;   &lt;dbl&gt;\n1 Changsha  2005    5.03\n2 Changsha  2006    5.17\n3 Changsha  2007    5.30\n4 Changsha  2008    5.60\n5 Changsha  2009    6.28\n6 Changsha  2010    5.94\n\n\nThe result is then plotted using functions in ggplot2 package.\n\nggplot(data = cbg, \n       aes(x = Year, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\n\n\n\nAn interactive plot can also be created using ggplotly() (under plotly package).\n\np = ggplot(data = cbg, \n       aes(x = Year, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\nggplotly(p)\n\n\n\n\n\nThe p-value for the test is then calculated. In the result below, sl is the p-value. This result tells us that there is a slight upward but insignificant trend.\n\ncbg %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;%\n  unnest_wider(mk)\n\n# A tibble: 1 × 5\n    tau      sl     S     D  varS\n  &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 0.485 0.00742    66  136.  589.\n\n\nThe above test can be replicated for each location using group_by() (under dplyr package).\n\nehsa = gi_stars %&gt;%\n  group_by(County) %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;%\n  unnest_wider(mk)\n\nhead(ehsa)\n\n# A tibble: 6 × 6\n  County        tau        sl     S     D  varS\n  &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Anhua      0.191  0.303        26  136.  589.\n2 Anren     -0.294  0.108       -40  136.  589.\n3 Anxiang    0      1             0  136.  589.\n4 Baojing   -0.691  0.000128    -94  136.  589.\n5 Chaling   -0.0882 0.650       -12  136.  589.\n6 Changning -0.750  0.0000318  -102  136.  589.\n\n\nThe values are then arranged in order of the “tau” values to show significant emerging hot or cold spots.\n\nemerging = ehsa %&gt;% \n  arrange(sl, abs(tau)) %&gt;% \n  slice(1:5)\n\nhead(emerging)\n\n# A tibble: 5 × 6\n  County        tau         sl     S     D  varS\n  &lt;chr&gt;       &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Shuangfeng  0.868 0.00000143   118  136.  589.\n2 Xiangtan    0.868 0.00000143   118  136.  589.\n3 Xiangxiang  0.868 0.00000143   118  136.  589.\n4 Chengbu    -0.824 0.00000482  -112  136.  589.\n5 Dongan     -0.824 0.00000482  -112  136.  589.\n\n\n\n\n9.5 Performing Emerging Hot Spot Analysis\nThe EHSA analysis is then performed by using emerging_hotspot_analysis() (under sfdep package).\n\nThe main argument is a spacetime object x (i.e. GDPPC_st).\nThe “.var” argument is the quoted name of the variable of interest (i.e. GDPPC).\nThe “k” argument is used to specify the number of time lags. The default = 1 means comparing time series sequentially.\nThe “nsim” argument states the number of simulations to be performed.\n\n\nehsa = emerging_hotspot_analysis(\n  x = GDPPC_st, \n  .var = \"GDPPC\", \n  k = 1, \n  nsim = 99\n)\n\nhead(ehsa)\n\n# A tibble: 6 × 4\n  location    tau    p_value classification     \n  &lt;chr&gt;     &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;              \n1 Anxiang   0.221 0.232      sporadic coldspot  \n2 Hanshou   0.147 0.434      sporadic hotspot   \n3 Jinshi    0.441 0.0151     oscilating hotspot \n4 Li       -0.824 0.00000482 sporadic coldspot  \n5 Linli     0.118 0.537      oscilating hotspot \n6 Shimen   -0.471 0.00946    oscilating coldspot\n\n\n\n\n9.6 Visualising Distribution of Emerging Hot Spot Analysis Classes\nThe functions in ggplot2 package are used to reveal the distribution of EHSA classes using bar chart.\nThe bar chat below shows that sporadic cold spots class has the high numbers of counties.\n\nggplot(data = ehsa,\n       aes(x = classification)) +\n  geom_bar()\n\n\n\n\n\n\n9.7 Visualising Emerging Hot Spot Analysis\nThe hunan and ehsa data frames are joined.\n\nhunan_ehsa = hunan %&gt;%\n  left_join(ehsa,\n            by = join_by(County == location))\n\nThe geographic distribution of EHSA classes are then plotted using functions in tmap package.\n\nehsa_sig = hunan_ehsa  %&gt;%\n  filter(p_value &lt; 0.05)\ntmap_mode(\"plot\")\n\ntm_shape(hunan_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)\n\n\n\n\n\nStudent Note: Interpretation\n\nThe grey areas mean that there are no statistically significant values. This is not the same as no pattern (which could be statistically significant).\nThere is a mix of different types of hot or cold spot patterns in Hunan.\nFocusing on the class with the most number of counties, the presence of sporadic cold spots indicates that there are many counties that are on-again, off-again cold spots over time (i.e., spatial concentration of low GDPPC values).\nThere are also a number of sporadic hot spots, which indicates that there are some counties that are on-again, off-again hot spots over time (i.e., spatial concentration of high GDPPC values).\nOverall, the high number of sporadic classes (both hot and cold) indicates that the trends of spatial concentration of GDPPC values in many counties in Hunan are not stable or linear (increasing or decreasing over time) but are more unpredictable. This also means that spatial patterns in GDPPC are not static across different time periods.\n\n\n~~~ End of In-class Exercise 2 ~~~"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "Spatial Interaction Models (SIMs) are mathematical models for estimating flows between spatial entities. They were developed by Alan Wilson in the late 1960s and early 1970, with considerable uptake and refinement for transport modelling since then (Boyce and Williams, 2015).\nThere are four main types of traditional SIMs (Wilson 1971):\n\nUnconstrained\nProduction-constrained\nAttraction-constrained\nDoubly-constrained\n\nOrdinary least square (OLS), log-normal, Poisson and negative binomial (NB) regression methods have been used extensively to calibrate OD flow models by processing flow data as different types of dependent variables.\nIn this in-class exercise, the appropriate R packages are used to calibrate SIM by using there four regression methods.\nNote: Calibration is the process of adjusting parameters in the model to try and get the estimates to agree with the observed data as much as possible. Adjusting the parameters is the sort of iterative process that computers are particularly good at and the goodness-of-fit statistics can be used to indicate when the optimum solution is found. Historically, this process required a researcher with the requisite programming skills to write a computer algorithm to iteratively adjust each parameter, check the goodness-of-fit, and then start all over again until the goodness-of-fit statistic was maximised or minimised (Adam Dennett, 2018).\n\n\n\nIn this in-class exercise, a SIM is calibrated to determine the factors affecting the public bus passenger flows during the morning peak in Singapore.\n\n\n\nFor the purpose of this exercise, the following R packages are used:\n\nsf for importing, integrating, processing and transforming geospatial data;\ntidyverse for importing, integrating, wrangling and visualising data;\ntmap for creating thematic maps;\nsp for handling spatial data in computationally efficient ways;\nperformance for computing measures to assess model quality;\nreshape2 for handling matrix format; and\nggpubr for publication ready plots.\n\n\npacman::p_load(tmap, sf, sp,\n               performance, reshape2,\n               ggpubr, tidyverse)\n\n\n\n\nThis exercise is a continuation of Chapter 15: Processing and Visualising Flow Data and the following data will be used:\n\nod_data.rds: weekday morning peak passenger flows at planning subzone level.\nmpsz.rds: URA Master Plan 2019 Planning Subzone boundary in simple feature tibble data frame format.\n\nBesides these two data sets, an additional attribute data file called pop.csv will be used.\n\n\n\nIn spatial interaction, a distance matrix is a table that shows the distance between pairs of locations. For example, in the table below we can see an Euclidean distance of 3926.0025 between MESZ01 and RVSZ05, of 3939.1079 between MESZ01 and SRSZ01, and so on. By definition, an location’s distance from itself, which is shown in the main diagonal of the table, is 0.\nIn this section,a distance matrix is computed by using the mpsz, which is first imported as a sf tibble dataframe object class.\n\nmpsz = read_rds(\"data/rds/mpsz.rds\")\nmpsz\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26...\n\n\n\n\nThere are at least two ways to compute the required distance matrix. One is based on sf and the other is based on sp. Past experience shown that computing distance matrix by using sf function took a relatively longer time than the sp method, especially when the data set is large. In view of this, the sp method is used in the code chunks below.\nThe as() function with “Class” argument set as “Spatial” is used to convert mpsz from sf tibble data frame to SpatialPolygonsDataFrame of sp object\n\nStudent Note: For SpatialPolygonsDataFrame, in order to select a variable within a data.frame within the object, we will need to use something like mpsz@data$var_name.\n\n\nmpsz_sp = as(mpsz, \"Spatial\")\nmpsz_sp\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 332 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 6\nnames       : SUBZONE_N, SUBZONE_C, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C \nmin values  : ADMIRALTY,    AMSZ01, ANG MO KIO,         AM, CENTRAL REGION,       CR \nmax values  :    YUNNAN,    YSSZ09,     YISHUN,         YS,    WEST REGION,       WR \n\n\n\n\n\nThe spDists() function in the sp package is used to compute the Euclidean distance between the centroids of the planning subzones.\n\nStudent Note: Calculating the distance between centroids is computationally less intensive compared to more detailed spatial analyses. However, using centroid-to-centroid distance is a simplification and may not always capture the full complexity of spatial relationships.\n\nNotice that the output dist is a matrix object class of R. Also, notice that the column headers and row headers are not labeled with the planning subzone codes.\n\nStudent Note:\n\nIf longlat = TRUE, longitude and latitude are used to calculate the distance.\ndist is a matrix 332 by 332 (based on 332 observations from mpsz).\n\n\n\ndist = spDists(mpsz_sp, \n                longlat = FALSE)\nhead(dist, n=c(10, 10))\n\n           [,1]       [,2]      [,3]      [,4]       [,5]      [,6]      [,7]\n [1,]     0.000  3926.0025  3939.108 20252.964  2989.9839  1431.330 19211.836\n [2,]  3926.003     0.0000   305.737 16513.865   951.8314  5254.066 16242.523\n [3,]  3939.108   305.7370     0.000 16412.062  1045.9088  5299.849 16026.146\n [4,] 20252.964 16513.8648 16412.062     0.000 17450.3044 21665.795  7229.017\n [5,]  2989.984   951.8314  1045.909 17450.304     0.0000  4303.232 17020.916\n [6,]  1431.330  5254.0664  5299.849 21665.795  4303.2323     0.000 20617.082\n [7,] 19211.836 16242.5230 16026.146  7229.017 17020.9161 20617.082     0.000\n [8,] 14960.942 12749.4101 12477.871 11284.279 13336.0421 16281.453  5606.082\n [9,]  7515.256  7934.8082  7649.776 18427.503  7801.6163  8403.896 14810.930\n[10,]  6391.342  4975.0021  4669.295 15469.566  5226.8731  7707.091 13111.391\n           [,8]      [,9]     [,10]\n [1,] 14960.942  7515.256  6391.342\n [2,] 12749.410  7934.808  4975.002\n [3,] 12477.871  7649.776  4669.295\n [4,] 11284.279 18427.503 15469.566\n [5,] 13336.042  7801.616  5226.873\n [6,] 16281.453  8403.896  7707.091\n [7,]  5606.082 14810.930 13111.391\n [8,]     0.000  9472.024  8575.490\n [9,]  9472.024     0.000  3780.800\n[10,]  8575.490  3780.800     0.000\n\n\n\n\n\nA list sorted according to the the distance matrix by planning sub-zone code is created to hold the sub-zone codes.\n\nsz_names = mpsz$SUBZONE_C\n\nNext, the sub-zone codes are attached to row and column to facilitate distance matrix matching later on.\n\ncolnames(dist) = paste0(sz_names)\nrownames(dist) = paste0(sz_names)\n\n\n\n\nNext, the distance matrix is pivoted into a long table by using the row and column subzone codes.\nNote that the within zone (i.e., when Var1 and Var2 are the same) distance is 0.\n\nStudent Note: Do not use code to sort the data, otherwise the sequence will be messed up.\n\n\ndistPair = melt(dist) %&gt;%\n  rename(dist = value)\nhead(distPair, 10)\n\n     Var1   Var2      dist\n1  MESZ01 MESZ01     0.000\n2  RVSZ05 MESZ01  3926.003\n3  SRSZ01 MESZ01  3939.108\n4  WISZ01 MESZ01 20252.964\n5  MUSZ02 MESZ01  2989.984\n6  MPSZ05 MESZ01  1431.330\n7  WISZ03 MESZ01 19211.836\n8  WISZ02 MESZ01 14960.942\n9  SISZ02 MESZ01  7515.256\n10 SISZ01 MESZ01  6391.342\n\n\n\n\n\nA constant value is then used to replace the intra-zonal distance of 0.\nThe minimum value of the inter-zonal distance is derived using the summary() function. The value is 173.8. Hence, by quick estimation, an intra-zonal distance proxy value of less than half of 173.8 would be appropriate.\n\ndistPair %&gt;%\n  filter(dist &gt; 0) %&gt;%\n  summary()\n\n      Var1             Var2             dist        \n MESZ01 :   331   MESZ01 :   331   Min.   :  173.8  \n RVSZ05 :   331   RVSZ05 :   331   1st Qu.: 7149.5  \n SRSZ01 :   331   SRSZ01 :   331   Median :11890.0  \n WISZ01 :   331   WISZ01 :   331   Mean   :12229.4  \n MUSZ02 :   331   MUSZ02 :   331   3rd Qu.:16401.7  \n MPSZ05 :   331   MPSZ05 :   331   Max.   :49894.4  \n (Other):107906   (Other):107906                    \n\n\nHence, a constant distance value of 50m is added as the intra-zonal distance. The resulting data.frame is checked using the summary() function, showing that the minimum distance is now 50m.\n\ndistPair$dist = ifelse(distPair$dist == 0,\n                        50, distPair$dist)\n\ndistPair %&gt;%\n  summary()\n\n      Var1             Var2             dist      \n MESZ01 :   332   MESZ01 :   332   Min.   :   50  \n RVSZ05 :   332   RVSZ05 :   332   1st Qu.: 7097  \n SRSZ01 :   332   SRSZ01 :   332   Median :11864  \n WISZ01 :   332   WISZ01 :   332   Mean   :12193  \n MUSZ02 :   332   MUSZ02 :   332   3rd Qu.:16388  \n MPSZ05 :   332   MPSZ05 :   332   Max.   :49894  \n (Other):108232   (Other):108232                  \n\n\nThe origin (Var1) and destination (Var2) fields are renamed, and the output is saved as in rds format for future use.\n\ndistPair = distPair %&gt;%\n  rename(orig = Var1,\n         dest = Var2)\n\nwrite_rds(distPair, \"data/rds/distPair.rds\") \n\n\n\n\n\nThe code chunk below is used import the od_data.\n\nod_data = read_rds(\"data/rds/od_data.rds\")\n\nThe total passenger trip between and within planning subzones is computed using group_by() and summarise() functions in the dplyr package. The output is all flow_data, which is shown below using the head() function.\n\nflow_data = od_data %&gt;%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %&gt;% \n  summarize(TRIPS = sum(MORNING_PEAK)) \n\nhead(flow_data, 10)\n\n# A tibble: 10 × 3\n# Groups:   ORIGIN_SZ [1]\n   ORIGIN_SZ DESTIN_SZ TRIPS\n   &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;\n 1 AMSZ01    AMSZ01     2694\n 2 AMSZ01    AMSZ02    10591\n 3 AMSZ01    AMSZ03    14980\n 4 AMSZ01    AMSZ04     3106\n 5 AMSZ01    AMSZ05     7734\n 6 AMSZ01    AMSZ06     2306\n 7 AMSZ01    AMSZ07     1824\n 8 AMSZ01    AMSZ08     2734\n 9 AMSZ01    AMSZ09     2300\n10 AMSZ01    AMSZ10      164\n\n\n\n\nA new field, “FlowNoIntra”, is created to either hold the value 0 if there was an intra-zonal flow, or hold the value of the number of inter-zonal trips.\nAnother new field, “offset”, is created to hold the value of 0.000001 if there was intra-zonal flow, or hold the value of 1 if there was no inter-zonal flow.\n\nflow_data$FlowNoIntra = ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0, flow_data$TRIPS)\n\nflow_data$offset = ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0.000001, 1)\n\n\n\n\nThe data value type of “ORINGIN_SZ” and “DESTIN_SZ” in the flow_data are converted to factor data type.\n\nflow_data$ORIGIN_SZ = as.factor(flow_data$ORIGIN_SZ)\nflow_data$DESTIN_SZ = as.factor(flow_data$DESTIN_SZ)\n\nThen, the left_join() function in the dplyr package is used to combine the flow_data data.frame and the distPair data.frame. The output is flow_data1.\n\nflow_data1 = flow_data %&gt;%\n  left_join (distPair,\n             by = c(\"ORIGIN_SZ\" = \"orig\",\n                    \"DESTIN_SZ\" = \"dest\"))\n\n\n\n\n\n\n\nThe pre-prepared population data by planning sub-zone is imported using the read_csv() function in the readr package as pop, which is a sf tibble data.frame. It divides the population into three age groups: ages 7-12, 13-24, and 25-64.\n\npop = read_csv(\"data/aspatial/pop.csv\")\n\n\n\n\nThe pop data.frame is then joined with the mpsz data.frame. The relevant columns are selected, and two are renamed.\n\npop = pop %&gt;%\n  left_join(mpsz,\n            by = c(\"PA\" = \"PLN_AREA_N\",\n                   \"SZ\" = \"SUBZONE_N\")) %&gt;%\n  select(1:6) %&gt;%\n  rename(SZ_NAME = SZ,\n         SZ = SUBZONE_C)\n\n\n\n\nThe origin attribute is then prepared by combining flow_data1 and pop by matching “ORIGIN_SZ” to “SZ”\n\nflow_data1 = flow_data1 %&gt;%\n  left_join(pop,\n            by = c(ORIGIN_SZ = \"SZ\")) %&gt;%\n  rename(ORIGIN_AGE7_12 = AGE7_12,\n         ORIGIN_AGE13_24 = AGE13_24,\n         ORIGIN_AGE25_64 = AGE25_64) %&gt;%\n  select(-c(PA, SZ_NAME))\n\n\n\n\nThe destination attribute is then prepared by combining flow_data1 and pop by matching “DESTIN_SZ” to “SZ”\n\nflow_data1 = flow_data1 %&gt;%\n  left_join(pop,\n            by = c(DESTIN_SZ = \"SZ\")) %&gt;%\n  rename(DESTIN_AGE7_12 = AGE7_12,\n         DESTIN_AGE13_24 = AGE13_24,\n         DESTIN_AGE25_64 = AGE25_64) %&gt;%\n  select(-c(PA, SZ_NAME))\n\nThe output data file is then saved as SIM_data in rds data file format.\n\nwrite_rds(flow_data1, \"data/rds/SIM_data\")\n\n\n\n\n\nSIMs are calibrated using Poisson Regression methods below.\n\n\nThe modelling data in rds file format is first imported.\n\nSIM_data = read_rds(\"data/rds/SIM_data.rds\")\n\n\n\n\nThen, the distribution of the dependent variable (i.e. “TRIPS”) is plotted by using the histogram method.\nThe historgram shows that the distribution is highly skewed and does not resemble normal distribution.\n\nggplot(data = SIM_data,\n       aes(x = TRIPS)) +\n  geom_histogram()\n\n\n\n\nThe relation between the dependent variable and one of the key independent variable in SIM, namely distance is then visualised using the scatterplot method.\nThe scatterplot shows that their relationship hardly resembles a linear relationship.\n\nggplot(data = SIM_data,\n       aes(x = dist,\n           y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\nHowever, if the log transformed version of both variables are plotted, the result better resembles a linear relationship.\n\nggplot(data = SIM_data,\n       aes(x = log(dist),\n           y = log(TRIPS))) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\n\n\n\nSince Poisson Regression is based on log transformation, and log 0 is undefined, it is important for us to ensure that there are no zero values in the explanatory variables.\nThe summary() function is used to compute the summary statistics of all variables in SIM_data data.frame. This revealed that the variables “ORIGIN_AGE7_12”, “ORIGIN_AGE13_24”, “ORIGIN_AGE25_64”, “DESTIN_AGE7_12”, “DESTIN_AGE13_24”, “DESTIN_AGE25_64” have zero values.\n\nsummary(SIM_data)\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS           FlowNoIntra      \n Length:14274       Length:14274       Min.   :     1.0   Min.   :     1.0  \n Class :character   Class :character   1st Qu.:    11.0   1st Qu.:    11.0  \n Mode  :character   Mode  :character   Median :    56.0   Median :    56.0  \n                                       Mean   :   664.3   Mean   :   664.3  \n                                       3rd Qu.:   296.0   3rd Qu.:   296.0  \n                                       Max.   :104167.0   Max.   :104167.0  \n     offset       dist         ORIGIN_AGE7_12 ORIGIN_AGE13_24 ORIGIN_AGE25_64\n Min.   :1   Min.   :  173.8   Min.   :   0   Min.   :    0   Min.   :    0  \n 1st Qu.:1   1st Qu.: 3465.4   1st Qu.: 240   1st Qu.:  460   1st Qu.: 2210  \n Median :1   Median : 6121.0   Median : 710   Median : 1400   Median : 7030  \n Mean   :1   Mean   : 6951.8   Mean   :1037   Mean   : 2278   Mean   :10536  \n 3rd Qu.:1   3rd Qu.: 9725.1   3rd Qu.:1500   3rd Qu.: 3282   3rd Qu.:15830  \n Max.   :1   Max.   :26135.8   Max.   :6340   Max.   :16380   Max.   :74610  \n DESTIN_AGE7_12 DESTIN_AGE13_24 DESTIN_AGE25_64\n Min.   :   0   Min.   :    0   Min.   :    0  \n 1st Qu.: 250   1st Qu.:  460   1st Qu.: 2210  \n Median : 720   Median : 1430   Median : 7120  \n Mean   :1040   Mean   : 2305   Mean   :10648  \n 3rd Qu.:1500   3rd Qu.: 3290   3rd Qu.:15830  \n Max.   :6340   Max.   :16380   Max.   :74610  \n\n\nIn view of this, these zero values are replaced with the value of 0.99.\n\nSIM_data$DESTIN_AGE7_12 = ifelse(\n  SIM_data$DESTIN_AGE7_12 == 0,\n  0.99, SIM_data$DESTIN_AGE7_12)\nSIM_data$DESTIN_AGE13_24 = ifelse(\n  SIM_data$DESTIN_AGE13_24 == 0,\n  0.99, SIM_data$DESTIN_AGE13_24)\nSIM_data$DESTIN_AGE25_64 = ifelse(\n  SIM_data$DESTIN_AGE25_64 == 0,\n  0.99, SIM_data$DESTIN_AGE25_64)\nSIM_data$ORIGIN_AGE7_12 = ifelse(\n  SIM_data$ORIGIN_AGE7_12 == 0,\n  0.99, SIM_data$ORIGIN_AGE7_12)\nSIM_data$ORIGIN_AGE13_24 = ifelse(\n  SIM_data$ORIGIN_AGE13_24 == 0,\n  0.99, SIM_data$ORIGIN_AGE13_24)\nSIM_data$ORIGIN_AGE25_64 = ifelse(\n  SIM_data$ORIGIN_AGE25_64 == 0,\n  0.99, SIM_data$ORIGIN_AGE25_64)\n\nsummary(SIM_data)\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS           FlowNoIntra      \n Length:14274       Length:14274       Min.   :     1.0   Min.   :     1.0  \n Class :character   Class :character   1st Qu.:    11.0   1st Qu.:    11.0  \n Mode  :character   Mode  :character   Median :    56.0   Median :    56.0  \n                                       Mean   :   664.3   Mean   :   664.3  \n                                       3rd Qu.:   296.0   3rd Qu.:   296.0  \n                                       Max.   :104167.0   Max.   :104167.0  \n     offset       dist         ORIGIN_AGE7_12    ORIGIN_AGE13_24   \n Min.   :1   Min.   :  173.8   Min.   :   0.99   Min.   :    0.99  \n 1st Qu.:1   1st Qu.: 3465.4   1st Qu.: 240.00   1st Qu.:  460.00  \n Median :1   Median : 6121.0   Median : 710.00   Median : 1400.00  \n Mean   :1   Mean   : 6951.8   Mean   :1036.73   Mean   : 2278.59  \n 3rd Qu.:1   3rd Qu.: 9725.1   3rd Qu.:1500.00   3rd Qu.: 3282.50  \n Max.   :1   Max.   :26135.8   Max.   :6340.00   Max.   :16380.00  \n ORIGIN_AGE25_64    DESTIN_AGE7_12    DESTIN_AGE13_24    DESTIN_AGE25_64   \n Min.   :    0.99   Min.   :   0.99   Min.   :    0.99   Min.   :    0.99  \n 1st Qu.: 2210.00   1st Qu.: 250.00   1st Qu.:  460.00   1st Qu.: 2210.00  \n Median : 7030.00   Median : 720.00   Median : 1430.00   Median : 7120.00  \n Mean   :10535.93   Mean   :1039.98   Mean   : 2305.33   Mean   :10647.95  \n 3rd Qu.:15830.00   3rd Qu.:1500.00   3rd Qu.: 3290.00   3rd Qu.:15830.00  \n Max.   :74610.00   Max.   :6340.00   Max.   :16380.00   Max.   :74610.00  \n\n\n\n\n\nAn unconstrained SIM is calibrated below by using the glm() function of the stats package. The explanatory variables are origin population by different age cohorts (e.g., “ORIGIN_AGE25_64”), destination population by different age cohorts (e.g., “DESTIN_AGE25_64”), and the distance between the origin and destination in km (i.e., “dist”).\n\nuncSIM = glm(formula = TRIPS ~ \n                log(ORIGIN_AGE25_64) + \n                log(DESTIN_AGE25_64) +\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nuncSIM\n\n\nCall:  glm(formula = TRIPS ~ log(ORIGIN_AGE25_64) + log(DESTIN_AGE25_64) + \n    log(dist), family = poisson(link = \"log\"), data = SIM_data, \n    na.action = na.exclude)\n\nCoefficients:\n         (Intercept)  log(ORIGIN_AGE25_64)  log(DESTIN_AGE25_64)  \n            17.00287               0.21001               0.01289  \n           log(dist)  \n            -1.51785  \n\nDegrees of Freedom: 14273 Total (i.e. Null);  14270 Residual\nNull Deviance:      36120000 \nResidual Deviance: 19960000     AIC: 20040000\n\n\n\n\n\nThe R-Squared value is calculated to measure how much variation of the trips can be accounted by the unconstrained SIM.\n\nCalcRSquared = function(observed, estimated){\n  r = cor(observed, estimated)\n  R2 = r^2\n  R2\n}\n\nCalcRSquared(uncSIM$data$TRIPS, uncSIM$fitted.values)\n\n[1] 0.1694734\n\nr2_mcfadden(uncSIM)\n\n# R2 for Generalized Linear Regression\n       R2: 0.446\n  adj. R2: 0.446\n\n\n\n\n\nAn origin constrained SIM is fitted.\n\norcSIM = glm(formula = TRIPS ~ \n                 ORIGIN_SZ +\n                 log(DESTIN_AGE25_64) +\n                 log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(orcSIM)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + log(DESTIN_AGE25_64) + log(dist), \n    family = poisson(link = \"log\"), data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                       Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)          19.9309957  0.0054015  3689.887  &lt; 2e-16 ***\nORIGIN_SZAMSZ02       0.6805710  0.0052686   129.175  &lt; 2e-16 ***\nORIGIN_SZAMSZ03       0.3597850  0.0054884    65.554  &lt; 2e-16 ***\nORIGIN_SZAMSZ04      -0.1106566  0.0060027   -18.434  &lt; 2e-16 ***\nORIGIN_SZAMSZ05      -0.3140561  0.0067998   -46.186  &lt; 2e-16 ***\nORIGIN_SZAMSZ06       0.0634425  0.0060258    10.528  &lt; 2e-16 ***\nORIGIN_SZAMSZ07      -1.1301580  0.0110298  -102.464  &lt; 2e-16 ***\nORIGIN_SZAMSZ08      -0.6330394  0.0102949   -61.491  &lt; 2e-16 ***\nORIGIN_SZAMSZ09       0.1064915  0.0063450    16.784  &lt; 2e-16 ***\nORIGIN_SZAMSZ10       0.5061899  0.0053889    93.931  &lt; 2e-16 ***\nORIGIN_SZAMSZ11      -1.3167911  0.0144870   -90.895  &lt; 2e-16 ***\nORIGIN_SZAMSZ12      -1.5103004  0.0127453  -118.499  &lt; 2e-16 ***\nORIGIN_SZBDSZ01       1.3626004  0.0051433   264.929  &lt; 2e-16 ***\nORIGIN_SZBDSZ02       0.9554084  0.0059655   160.156  &lt; 2e-16 ***\nORIGIN_SZBDSZ03       1.1476190  0.0054278   211.433  &lt; 2e-16 ***\nORIGIN_SZBDSZ04       2.0110410  0.0046344   433.940  &lt; 2e-16 ***\nORIGIN_SZBDSZ05       1.0658940  0.0053976   197.477  &lt; 2e-16 ***\nORIGIN_SZBDSZ06       1.2719222  0.0054774   232.213  &lt; 2e-16 ***\nORIGIN_SZBDSZ07      -0.5053039  0.0111553   -45.297  &lt; 2e-16 ***\nORIGIN_SZBDSZ08      -0.3556193  0.0102947   -34.544  &lt; 2e-16 ***\nORIGIN_SZBKSZ01      -0.3606399  0.0075473   -47.784  &lt; 2e-16 ***\nORIGIN_SZBKSZ02       0.1357265  0.0061394    22.107  &lt; 2e-16 ***\nORIGIN_SZBKSZ03       0.4101999  0.0058983    69.545  &lt; 2e-16 ***\nORIGIN_SZBKSZ04      -0.3418645  0.0070764   -48.310  &lt; 2e-16 ***\nORIGIN_SZBKSZ05      -0.2986750  0.0074073   -40.322  &lt; 2e-16 ***\nORIGIN_SZBKSZ06      -0.2637855  0.0068739   -38.375  &lt; 2e-16 ***\nORIGIN_SZBKSZ07       0.5498323  0.0051476   106.813  &lt; 2e-16 ***\nORIGIN_SZBKSZ08      -0.0527393  0.0061457    -8.582  &lt; 2e-16 ***\nORIGIN_SZBKSZ09      -0.1564691  0.0067300   -23.249  &lt; 2e-16 ***\nORIGIN_SZBLSZ01      -1.7551329  0.0176599   -99.385  &lt; 2e-16 ***\nORIGIN_SZBLSZ02      -1.9493637  0.0213859   -91.152  &lt; 2e-16 ***\nORIGIN_SZBLSZ03      -2.9057732  0.0535995   -54.213  &lt; 2e-16 ***\nORIGIN_SZBLSZ04      -1.4672066  0.0254726   -57.599  &lt; 2e-16 ***\nORIGIN_SZBMSZ01       0.1806064  0.0060563    29.821  &lt; 2e-16 ***\nORIGIN_SZBMSZ02      -1.4026549  0.0078244  -179.267  &lt; 2e-16 ***\nORIGIN_SZBMSZ03      -0.5976236  0.0063808   -93.660  &lt; 2e-16 ***\nORIGIN_SZBMSZ04      -0.5456513  0.0059061   -92.388  &lt; 2e-16 ***\nORIGIN_SZBMSZ05      -3.1095195  0.0188118  -165.297  &lt; 2e-16 ***\nORIGIN_SZBMSZ06      -3.0273827  0.0194319  -155.794  &lt; 2e-16 ***\nORIGIN_SZBMSZ07      -0.7378197  0.0066865  -110.345  &lt; 2e-16 ***\nORIGIN_SZBMSZ08      -0.9306150  0.0067188  -138.510  &lt; 2e-16 ***\nORIGIN_SZBMSZ09      -1.4137345  0.0101071  -139.876  &lt; 2e-16 ***\nORIGIN_SZBMSZ10      -1.7054195  0.0101582  -167.886  &lt; 2e-16 ***\nORIGIN_SZBMSZ11      -1.2418380  0.0076792  -161.714  &lt; 2e-16 ***\nORIGIN_SZBMSZ12      -1.3746537  0.0109769  -125.231  &lt; 2e-16 ***\nORIGIN_SZBMSZ13      -0.4339494  0.0069335   -62.587  &lt; 2e-16 ***\nORIGIN_SZBMSZ14      -0.9950458  0.0076302  -130.410  &lt; 2e-16 ***\nORIGIN_SZBMSZ15      -0.6544196  0.0068964   -94.892  &lt; 2e-16 ***\nORIGIN_SZBMSZ16      -1.5193747  0.0105329  -144.250  &lt; 2e-16 ***\nORIGIN_SZBMSZ17      -1.6536771  0.0180672   -91.529  &lt; 2e-16 ***\nORIGIN_SZBPSZ01       0.1484355  0.0064734    22.930  &lt; 2e-16 ***\nORIGIN_SZBPSZ02      -0.3602094  0.0073902   -48.741  &lt; 2e-16 ***\nORIGIN_SZBPSZ03      -0.1567975  0.0072226   -21.709  &lt; 2e-16 ***\nORIGIN_SZBPSZ04       0.4504873  0.0058418    77.115  &lt; 2e-16 ***\nORIGIN_SZBPSZ05       0.5028646  0.0053682    93.675  &lt; 2e-16 ***\nORIGIN_SZBPSZ06      -1.0125668  0.0105638   -95.853  &lt; 2e-16 ***\nORIGIN_SZBPSZ07      -0.3859065  0.0098561   -39.154  &lt; 2e-16 ***\nORIGIN_SZBSSZ01       0.1488497  0.0065504    22.724  &lt; 2e-16 ***\nORIGIN_SZBSSZ02       0.4269498  0.0055893    76.387  &lt; 2e-16 ***\nORIGIN_SZBSSZ03      -0.2437385  0.0062020   -39.300  &lt; 2e-16 ***\nORIGIN_SZBTSZ01       0.1987940  0.0066672    29.817  &lt; 2e-16 ***\nORIGIN_SZBTSZ02      -0.4571546  0.0090784   -50.356  &lt; 2e-16 ***\nORIGIN_SZBTSZ03      -0.2697243  0.0077941   -34.606  &lt; 2e-16 ***\nORIGIN_SZBTSZ04      -1.0997236  0.0115225   -95.441  &lt; 2e-16 ***\nORIGIN_SZBTSZ05      -1.0053122  0.0132594   -75.819  &lt; 2e-16 ***\nORIGIN_SZBTSZ06      -1.0841201  0.0102242  -106.035  &lt; 2e-16 ***\nORIGIN_SZBTSZ07      -2.3134497  0.0158499  -145.960  &lt; 2e-16 ***\nORIGIN_SZBTSZ08      -1.1581618  0.0121161   -95.589  &lt; 2e-16 ***\nORIGIN_SZCBSZ01      -1.0805930  0.0577831   -18.701  &lt; 2e-16 ***\nORIGIN_SZCCSZ01      -0.8145372  0.0152638   -53.364  &lt; 2e-16 ***\nORIGIN_SZCHSZ01       0.0377079  0.0133240     2.830 0.004654 ** \nORIGIN_SZCHSZ02      -0.6209553  0.0096388   -64.422  &lt; 2e-16 ***\nORIGIN_SZCHSZ03       1.6790244  0.0069559   241.381  &lt; 2e-16 ***\nORIGIN_SZCKSZ01       0.0839586  0.0059934    14.008  &lt; 2e-16 ***\nORIGIN_SZCKSZ02       0.4379511  0.0062289    70.309  &lt; 2e-16 ***\nORIGIN_SZCKSZ03       0.7956950  0.0051892   153.335  &lt; 2e-16 ***\nORIGIN_SZCKSZ04       1.2740323  0.0053165   239.637  &lt; 2e-16 ***\nORIGIN_SZCKSZ05       0.9326213  0.0061807   150.893  &lt; 2e-16 ***\nORIGIN_SZCKSZ06       0.3976273  0.0085639    46.431  &lt; 2e-16 ***\nORIGIN_SZCLSZ01      -0.7522917  0.0094655   -79.477  &lt; 2e-16 ***\nORIGIN_SZCLSZ02      -1.3937450  0.0153260   -90.940  &lt; 2e-16 ***\nORIGIN_SZCLSZ03      -0.7898683  0.0091016   -86.784  &lt; 2e-16 ***\nORIGIN_SZCLSZ04       0.8451512  0.0051258   164.882  &lt; 2e-16 ***\nORIGIN_SZCLSZ05      -1.6573818  0.0166091   -99.788  &lt; 2e-16 ***\nORIGIN_SZCLSZ06       0.9478181  0.0048182   196.716  &lt; 2e-16 ***\nORIGIN_SZCLSZ07      -0.2499753  0.0064632   -38.677  &lt; 2e-16 ***\nORIGIN_SZCLSZ08       0.1350119  0.0069296    19.483  &lt; 2e-16 ***\nORIGIN_SZCLSZ09      -1.3868782  0.0192743   -71.955  &lt; 2e-16 ***\nORIGIN_SZDTSZ02      -3.7535792  0.0871325   -43.079  &lt; 2e-16 ***\nORIGIN_SZDTSZ03      -3.8462041  0.0840156   -45.780  &lt; 2e-16 ***\nORIGIN_SZDTSZ13      -2.9738127  0.0349241   -85.151  &lt; 2e-16 ***\nORIGIN_SZGLSZ01      -1.5175198  0.0110135  -137.787  &lt; 2e-16 ***\nORIGIN_SZGLSZ02       0.2405712  0.0058742    40.954  &lt; 2e-16 ***\nORIGIN_SZGLSZ03       0.1940241  0.0061989    31.300  &lt; 2e-16 ***\nORIGIN_SZGLSZ04       1.0292572  0.0049028   209.931  &lt; 2e-16 ***\nORIGIN_SZGLSZ05       0.9864552  0.0050898   193.811  &lt; 2e-16 ***\nORIGIN_SZHGSZ01       0.3073609  0.0054307    56.597  &lt; 2e-16 ***\nORIGIN_SZHGSZ02       0.3827293  0.0054555    70.154  &lt; 2e-16 ***\nORIGIN_SZHGSZ03       0.2342580  0.0059240    39.544  &lt; 2e-16 ***\nORIGIN_SZHGSZ04       0.8750090  0.0049639   176.275  &lt; 2e-16 ***\nORIGIN_SZHGSZ05       1.1695280  0.0049468   236.420  &lt; 2e-16 ***\nORIGIN_SZHGSZ06      -0.0462411  0.0063805    -7.247 4.25e-13 ***\nORIGIN_SZHGSZ07       0.4488583  0.0055139    81.404  &lt; 2e-16 ***\nORIGIN_SZHGSZ08       0.2236095  0.0061279    36.490  &lt; 2e-16 ***\nORIGIN_SZHGSZ09      -1.6376674  0.0084442  -193.941  &lt; 2e-16 ***\nORIGIN_SZHGSZ10      -2.9849025  0.0501042   -59.574  &lt; 2e-16 ***\nORIGIN_SZJESZ01       0.3926525  0.0056268    69.783  &lt; 2e-16 ***\nORIGIN_SZJESZ02       0.1230160  0.0056864    21.633  &lt; 2e-16 ***\nORIGIN_SZJESZ03       0.0188276  0.0061020     3.085 0.002032 ** \nORIGIN_SZJESZ04      -1.3611618  0.0117184  -116.156  &lt; 2e-16 ***\nORIGIN_SZJESZ05      -2.0643662  0.0157083  -131.419  &lt; 2e-16 ***\nORIGIN_SZJESZ06       0.1556368  0.0055245    28.172  &lt; 2e-16 ***\nORIGIN_SZJESZ07      -1.7664532  0.0133171  -132.646  &lt; 2e-16 ***\nORIGIN_SZJESZ08      -0.9115981  0.0138203   -65.961  &lt; 2e-16 ***\nORIGIN_SZJESZ09       0.6121916  0.0060381   101.388  &lt; 2e-16 ***\nORIGIN_SZJESZ10      -1.1953045  0.0233216   -51.253  &lt; 2e-16 ***\nORIGIN_SZJESZ11      -1.4088748  0.0220921   -63.773  &lt; 2e-16 ***\nORIGIN_SZJWSZ01       0.5759093  0.0077741    74.081  &lt; 2e-16 ***\nORIGIN_SZJWSZ02       0.9769314  0.0053029   184.227  &lt; 2e-16 ***\nORIGIN_SZJWSZ03       1.3242695  0.0049068   269.882  &lt; 2e-16 ***\nORIGIN_SZJWSZ04       0.5621088  0.0057831    97.199  &lt; 2e-16 ***\nORIGIN_SZJWSZ05      -1.5744341  0.0146904  -107.174  &lt; 2e-16 ***\nORIGIN_SZJWSZ06      -0.9113320  0.0126913   -71.807  &lt; 2e-16 ***\nORIGIN_SZJWSZ07      -2.3083419  0.0357843   -64.507  &lt; 2e-16 ***\nORIGIN_SZJWSZ08       2.0114225  0.0047956   419.429  &lt; 2e-16 ***\nORIGIN_SZJWSZ09       1.9086705  0.0045255   421.759  &lt; 2e-16 ***\nORIGIN_SZKLSZ01       0.2743166  0.0056908    48.204  &lt; 2e-16 ***\nORIGIN_SZKLSZ02      -0.6443386  0.0074521   -86.463  &lt; 2e-16 ***\nORIGIN_SZKLSZ03      -0.3990113  0.0067213   -59.366  &lt; 2e-16 ***\nORIGIN_SZKLSZ04      -2.1413876  0.0138405  -154.719  &lt; 2e-16 ***\nORIGIN_SZKLSZ05      -1.0913697  0.0121512   -89.816  &lt; 2e-16 ***\nORIGIN_SZKLSZ06      -5.6240764  0.1857405   -30.279  &lt; 2e-16 ***\nORIGIN_SZKLSZ07      -1.1885897  0.0096830  -122.750  &lt; 2e-16 ***\nORIGIN_SZKLSZ08      -1.7018593  0.0114317  -148.872  &lt; 2e-16 ***\nORIGIN_SZLKSZ01      -1.6659670  0.0446420   -37.318  &lt; 2e-16 ***\nORIGIN_SZMDSZ01      -1.1210505  0.0318834   -35.161  &lt; 2e-16 ***\nORIGIN_SZMDSZ02      -0.5096299  0.0116645   -43.691  &lt; 2e-16 ***\nORIGIN_SZMDSZ03      -1.9187039  0.0198291   -96.762  &lt; 2e-16 ***\nORIGIN_SZMPSZ01      -0.5260512  0.0094201   -55.844  &lt; 2e-16 ***\nORIGIN_SZMPSZ02      -0.2905084  0.0077974   -37.257  &lt; 2e-16 ***\nORIGIN_SZMPSZ03       0.3342293  0.0063715    52.457  &lt; 2e-16 ***\nORIGIN_SZMUSZ02      -3.8337096  0.1105053   -34.693  &lt; 2e-16 ***\nORIGIN_SZNTSZ01      -2.9845040  0.0397028   -75.171  &lt; 2e-16 ***\nORIGIN_SZNTSZ02      -3.1812985  0.0249470  -127.522  &lt; 2e-16 ***\nORIGIN_SZNTSZ03      -0.9742991  0.0085424  -114.054  &lt; 2e-16 ***\nORIGIN_SZNTSZ05      -4.2086932  0.0579737   -72.597  &lt; 2e-16 ***\nORIGIN_SZNTSZ06      -4.5831822  0.0583494   -78.547  &lt; 2e-16 ***\nORIGIN_SZNVSZ01       0.3186962  0.0052944    60.195  &lt; 2e-16 ***\nORIGIN_SZNVSZ02      -0.5321136  0.0073747   -72.154  &lt; 2e-16 ***\nORIGIN_SZNVSZ03      -0.9911852  0.0090560  -109.451  &lt; 2e-16 ***\nORIGIN_SZNVSZ04      -0.8329721  0.0099590   -83.640  &lt; 2e-16 ***\nORIGIN_SZNVSZ05      -2.1460777  0.0182401  -117.657  &lt; 2e-16 ***\nORIGIN_SZPGSZ01      -0.5604078  0.0151515   -36.987  &lt; 2e-16 ***\nORIGIN_SZPGSZ02      -0.4025139  0.0085135   -47.279  &lt; 2e-16 ***\nORIGIN_SZPGSZ03       0.6975483  0.0055534   125.608  &lt; 2e-16 ***\nORIGIN_SZPGSZ04       1.2175486  0.0051080   238.363  &lt; 2e-16 ***\nORIGIN_SZPGSZ05       0.3895354  0.0069851    55.767  &lt; 2e-16 ***\nORIGIN_SZPLSZ01      -0.5572701  0.0134473   -41.441  &lt; 2e-16 ***\nORIGIN_SZPLSZ02      -0.9854214  0.0172337   -57.180  &lt; 2e-16 ***\nORIGIN_SZPLSZ03      -1.6991954  0.0472629   -35.952  &lt; 2e-16 ***\nORIGIN_SZPLSZ04      -2.2000217  0.0373580   -58.890  &lt; 2e-16 ***\nORIGIN_SZPLSZ05      -1.7086663  0.0260920   -65.486  &lt; 2e-16 ***\nORIGIN_SZPNSZ01       1.5292867  0.0055102   277.535  &lt; 2e-16 ***\nORIGIN_SZPNSZ02       0.7457519  0.0127815    58.346  &lt; 2e-16 ***\nORIGIN_SZPNSZ03      -1.3659046  0.0216180   -63.184  &lt; 2e-16 ***\nORIGIN_SZPNSZ04      -2.0025379  0.0360655   -55.525  &lt; 2e-16 ***\nORIGIN_SZPNSZ05      -0.9157959  0.0320955   -28.533  &lt; 2e-16 ***\nORIGIN_SZPRSZ01       0.0522611  0.0139142     3.756 0.000173 ***\nORIGIN_SZPRSZ02       1.3063371  0.0053809   242.774  &lt; 2e-16 ***\nORIGIN_SZPRSZ03       0.9963670  0.0054293   183.516  &lt; 2e-16 ***\nORIGIN_SZPRSZ04      -0.0300950  0.0088010    -3.419 0.000627 ***\nORIGIN_SZPRSZ05       1.6840313  0.0050839   331.245  &lt; 2e-16 ***\nORIGIN_SZPRSZ06      -0.8277202  0.0131296   -63.042  &lt; 2e-16 ***\nORIGIN_SZPRSZ07      -2.1698449  0.0177362  -122.340  &lt; 2e-16 ***\nORIGIN_SZPRSZ08       0.4559353  0.0072609    62.793  &lt; 2e-16 ***\nORIGIN_SZQTSZ01      -0.3517047  0.0078770   -44.650  &lt; 2e-16 ***\nORIGIN_SZQTSZ02      -0.8199353  0.0071544  -114.605  &lt; 2e-16 ***\nORIGIN_SZQTSZ03      -0.2457614  0.0065555   -37.490  &lt; 2e-16 ***\nORIGIN_SZQTSZ04      -1.2216614  0.0084050  -145.349  &lt; 2e-16 ***\nORIGIN_SZQTSZ05      -0.7219952  0.0072360   -99.778  &lt; 2e-16 ***\nORIGIN_SZQTSZ06      -0.6729363  0.0076658   -87.784  &lt; 2e-16 ***\nORIGIN_SZQTSZ07      -1.4497690  0.0109365  -132.563  &lt; 2e-16 ***\nORIGIN_SZQTSZ08      -0.2770151  0.0070193   -39.465  &lt; 2e-16 ***\nORIGIN_SZQTSZ09      -0.6157554  0.0078739   -78.202  &lt; 2e-16 ***\nORIGIN_SZQTSZ10      -0.3091547  0.0075471   -40.963  &lt; 2e-16 ***\nORIGIN_SZQTSZ11      -1.9698881  0.0151247  -130.243  &lt; 2e-16 ***\nORIGIN_SZQTSZ12      -2.6449643  0.0205857  -128.485  &lt; 2e-16 ***\nORIGIN_SZQTSZ13      -0.3754107  0.0088433   -42.452  &lt; 2e-16 ***\nORIGIN_SZQTSZ14      -1.6537473  0.0134378  -123.067  &lt; 2e-16 ***\nORIGIN_SZQTSZ15      -0.3435351  0.0131956   -26.034  &lt; 2e-16 ***\nORIGIN_SZRCSZ01      -1.7104390  0.0141179  -121.154  &lt; 2e-16 ***\nORIGIN_SZRCSZ06      -1.1250727  0.0094909  -118.542  &lt; 2e-16 ***\nORIGIN_SZRVSZ01      -3.0220116  0.0339694   -88.963  &lt; 2e-16 ***\nORIGIN_SZRVSZ02      -3.6040075  0.0297641  -121.086  &lt; 2e-16 ***\nORIGIN_SZRVSZ03      -3.2345594  0.0259149  -124.814  &lt; 2e-16 ***\nORIGIN_SZRVSZ04      -3.6900313  0.0575908   -64.073  &lt; 2e-16 ***\nORIGIN_SZRVSZ05      -2.9527570  0.0178582  -165.344  &lt; 2e-16 ***\nORIGIN_SZSBSZ01       0.0238445  0.0078563     3.035 0.002405 ** \nORIGIN_SZSBSZ02      -0.5780602  0.0093054   -62.121  &lt; 2e-16 ***\nORIGIN_SZSBSZ03       0.8961719  0.0054586   164.175  &lt; 2e-16 ***\nORIGIN_SZSBSZ04       0.8421798  0.0061888   136.080  &lt; 2e-16 ***\nORIGIN_SZSBSZ05      -0.1682984  0.0078342   -21.482  &lt; 2e-16 ***\nORIGIN_SZSBSZ06      -1.1482701  0.0196421   -58.460  &lt; 2e-16 ***\nORIGIN_SZSBSZ07      -0.8830317  0.0160709   -54.946  &lt; 2e-16 ***\nORIGIN_SZSBSZ08      -1.1039492  0.0174602   -63.226  &lt; 2e-16 ***\nORIGIN_SZSBSZ09      -0.5946691  0.0101961   -58.323  &lt; 2e-16 ***\nORIGIN_SZSESZ02       1.1144933  0.0050948   218.749  &lt; 2e-16 ***\nORIGIN_SZSESZ03       1.1058963  0.0049026   225.574  &lt; 2e-16 ***\nORIGIN_SZSESZ04       0.7427975  0.0056948   130.433  &lt; 2e-16 ***\nORIGIN_SZSESZ05      -0.2812684  0.0069596   -40.414  &lt; 2e-16 ***\nORIGIN_SZSESZ06       0.8168315  0.0055800   146.387  &lt; 2e-16 ***\nORIGIN_SZSESZ07      -2.2842043  0.0231232   -98.784  &lt; 2e-16 ***\nORIGIN_SZSGSZ01      -0.7313790  0.0098957   -73.909  &lt; 2e-16 ***\nORIGIN_SZSGSZ02      -1.1185406  0.0110919  -100.843  &lt; 2e-16 ***\nORIGIN_SZSGSZ03       0.1752618  0.0060508    28.965  &lt; 2e-16 ***\nORIGIN_SZSGSZ04       0.3764395  0.0056165    67.023  &lt; 2e-16 ***\nORIGIN_SZSGSZ05      -1.7203916  0.0118945  -144.637  &lt; 2e-16 ***\nORIGIN_SZSGSZ06       0.4630857  0.0052886    87.563  &lt; 2e-16 ***\nORIGIN_SZSGSZ07      -0.7051233  0.0073133   -96.417  &lt; 2e-16 ***\nORIGIN_SZSKSZ01       0.2053928  0.0100710    20.395  &lt; 2e-16 ***\nORIGIN_SZSKSZ02       1.2630428  0.0063490   198.935  &lt; 2e-16 ***\nORIGIN_SZSKSZ03      -0.3035297  0.0096788   -31.360  &lt; 2e-16 ***\nORIGIN_SZSKSZ04      -1.7952886  0.0359225   -49.977  &lt; 2e-16 ***\nORIGIN_SZSKSZ05      -0.3836861  0.0176686   -21.716  &lt; 2e-16 ***\nORIGIN_SZSLSZ01      -2.5916326  0.0348001   -74.472  &lt; 2e-16 ***\nORIGIN_SZSLSZ04      -0.2251549  0.0088517   -25.436  &lt; 2e-16 ***\nORIGIN_SZSRSZ01      -2.9590365  0.0173638  -170.414  &lt; 2e-16 ***\nORIGIN_SZTHSZ01      -1.9639893  0.0570321   -34.437  &lt; 2e-16 ***\nORIGIN_SZTHSZ03      -1.7281304  0.0272797   -63.349  &lt; 2e-16 ***\nORIGIN_SZTHSZ04      -2.7837906  0.0343179   -81.118  &lt; 2e-16 ***\nORIGIN_SZTHSZ06      -2.1800693  0.0205491  -106.091  &lt; 2e-16 ***\nORIGIN_SZTMSZ01       0.8228136  0.0066824   123.131  &lt; 2e-16 ***\nORIGIN_SZTMSZ02       2.3174781  0.0044978   515.243  &lt; 2e-16 ***\nORIGIN_SZTMSZ03       1.7061757  0.0048615   350.957  &lt; 2e-16 ***\nORIGIN_SZTMSZ04       1.2407899  0.0058389   212.504  &lt; 2e-16 ***\nORIGIN_SZTMSZ05      -0.1000526  0.0124079    -8.064 7.41e-16 ***\nORIGIN_SZTNSZ01      -2.0347519  0.0139596  -145.760  &lt; 2e-16 ***\nORIGIN_SZTNSZ02      -1.8682671  0.0107901  -173.146  &lt; 2e-16 ***\nORIGIN_SZTNSZ03      -2.1737183  0.0146759  -148.115  &lt; 2e-16 ***\nORIGIN_SZTNSZ04      -0.5006452  0.0081501   -61.428  &lt; 2e-16 ***\nORIGIN_SZTPSZ01      -0.6722487  0.0075606   -88.914  &lt; 2e-16 ***\nORIGIN_SZTPSZ02       0.4552916  0.0050191    90.711  &lt; 2e-16 ***\nORIGIN_SZTPSZ03      -0.7865781  0.0072250  -108.869  &lt; 2e-16 ***\nORIGIN_SZTPSZ04      -0.7049044  0.0066456  -106.071  &lt; 2e-16 ***\nORIGIN_SZTPSZ05      -0.5574925  0.0070366   -79.227  &lt; 2e-16 ***\nORIGIN_SZTPSZ06      -0.4247282  0.0068709   -61.815  &lt; 2e-16 ***\nORIGIN_SZTPSZ07      -0.2846984  0.0071030   -40.081  &lt; 2e-16 ***\nORIGIN_SZTPSZ08      -1.0898051  0.0110046   -99.031  &lt; 2e-16 ***\nORIGIN_SZTPSZ09      -0.8092746  0.0079160  -102.232  &lt; 2e-16 ***\nORIGIN_SZTPSZ10      -0.9332072  0.0086809  -107.502  &lt; 2e-16 ***\nORIGIN_SZTPSZ11      -0.0421981  0.0064343    -6.558 5.44e-11 ***\nORIGIN_SZTPSZ12      -0.6330081  0.0078324   -80.819  &lt; 2e-16 ***\nORIGIN_SZTSSZ01      -1.7650409  0.0517357   -34.116  &lt; 2e-16 ***\nORIGIN_SZTSSZ02       1.1707267  0.0094178   124.310  &lt; 2e-16 ***\nORIGIN_SZTSSZ03       0.6581679  0.0095894    68.635  &lt; 2e-16 ***\nORIGIN_SZTSSZ04       0.8736493  0.0104965    83.233  &lt; 2e-16 ***\nORIGIN_SZTSSZ05       0.0957248  0.0178709     5.356 8.49e-08 ***\nORIGIN_SZTSSZ06       1.7581609  0.0206810    85.013  &lt; 2e-16 ***\nORIGIN_SZWCSZ01       0.8097950  0.0105622    76.669  &lt; 2e-16 ***\nORIGIN_SZWCSZ02      -1.9966163  0.0345747   -57.748  &lt; 2e-16 ***\nORIGIN_SZWCSZ03      -5.0687420  0.1474971   -34.365  &lt; 2e-16 ***\nORIGIN_SZWDSZ01       1.4926003  0.0047216   316.124  &lt; 2e-16 ***\nORIGIN_SZWDSZ02       0.9916597  0.0055755   177.859  &lt; 2e-16 ***\nORIGIN_SZWDSZ03       1.5918065  0.0052180   305.062  &lt; 2e-16 ***\nORIGIN_SZWDSZ04       1.3717152  0.0060516   226.669  &lt; 2e-16 ***\nORIGIN_SZWDSZ05       0.6700111  0.0062287   107.569  &lt; 2e-16 ***\nORIGIN_SZWDSZ06       0.8115996  0.0060947   133.165  &lt; 2e-16 ***\nORIGIN_SZWDSZ07      -0.6488914  0.0093567   -69.351  &lt; 2e-16 ***\nORIGIN_SZWDSZ08      -0.3610234  0.0096440   -37.435  &lt; 2e-16 ***\nORIGIN_SZWDSZ09       1.4445461  0.0052279   276.317  &lt; 2e-16 ***\nORIGIN_SZYSSZ01      -0.2039272  0.0069548   -29.322  &lt; 2e-16 ***\nORIGIN_SZYSSZ02       0.8707707  0.0058957   147.697  &lt; 2e-16 ***\nORIGIN_SZYSSZ03       1.8348842  0.0050377   364.231  &lt; 2e-16 ***\nORIGIN_SZYSSZ04       1.0780641  0.0052960   203.564  &lt; 2e-16 ***\nORIGIN_SZYSSZ05       0.3222765  0.0069700    46.237  &lt; 2e-16 ***\nORIGIN_SZYSSZ06      -0.4424689  0.0124866   -35.435  &lt; 2e-16 ***\nORIGIN_SZYSSZ07      -1.0267883  0.0155821   -65.895  &lt; 2e-16 ***\nORIGIN_SZYSSZ08       0.1833117  0.0070935    25.842  &lt; 2e-16 ***\nORIGIN_SZYSSZ09       1.0766070  0.0050451   213.396  &lt; 2e-16 ***\nlog(DESTIN_AGE25_64)  0.0295428  0.0001051   280.998  &lt; 2e-16 ***\nlog(dist)            -1.7024691  0.0004625 -3681.042  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 36117615  on 14273  degrees of freedom\nResidual deviance: 12983718  on 13993  degrees of freedom\nAIC: 13068835\n\nNumber of Fisher Scoring iterations: 6\n\n\nThe R-squared value is then calculated to examine how the constraints hold for destinations this time.\n\nCalcRSquared(orcSIM$data$TRIPS, orcSIM$fitted.values)\n\n[1] 0.4029115\n\n\n\n\n\nA destination constrained SIM is fitted.\n\ndecSIM = glm(formula = TRIPS ~ \n                DESTIN_SZ + \n                log(ORIGIN_AGE25_64) + \n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(decSIM)\n\n\nCall:\nglm(formula = TRIPS ~ DESTIN_SZ + log(ORIGIN_AGE25_64) + log(dist), \n    family = poisson(link = \"log\"), data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                       Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)          19.4822997  0.0050784  3836.298  &lt; 2e-16 ***\nDESTIN_SZAMSZ02       0.1263056  0.0049743    25.392  &lt; 2e-16 ***\nDESTIN_SZAMSZ03       0.0421788  0.0049859     8.460  &lt; 2e-16 ***\nDESTIN_SZAMSZ04      -1.1668479  0.0074254  -157.143  &lt; 2e-16 ***\nDESTIN_SZAMSZ05      -1.2586639  0.0075854  -165.931  &lt; 2e-16 ***\nDESTIN_SZAMSZ06      -1.1414791  0.0073474  -155.359  &lt; 2e-16 ***\nDESTIN_SZAMSZ07      -1.5565804  0.0109476  -142.185  &lt; 2e-16 ***\nDESTIN_SZAMSZ08      -0.3990754  0.0074159   -53.813  &lt; 2e-16 ***\nDESTIN_SZAMSZ09      -1.0109118  0.0076802  -131.626  &lt; 2e-16 ***\nDESTIN_SZAMSZ10       0.0159285  0.0051765     3.077  0.00209 ** \nDESTIN_SZAMSZ11      -0.3653273  0.0094866   -38.510  &lt; 2e-16 ***\nDESTIN_SZAMSZ12       0.5297606  0.0053243    99.500  &lt; 2e-16 ***\nDESTIN_SZBDSZ01       1.0394822  0.0044226   235.037  &lt; 2e-16 ***\nDESTIN_SZBDSZ02       0.1956964  0.0059564    32.855  &lt; 2e-16 ***\nDESTIN_SZBDSZ03       0.3209267  0.0053718    59.742  &lt; 2e-16 ***\nDESTIN_SZBDSZ04       1.2429874  0.0043104   288.370  &lt; 2e-16 ***\nDESTIN_SZBDSZ05       0.8535842  0.0046360   184.122  &lt; 2e-16 ***\nDESTIN_SZBDSZ06       0.5181443  0.0053736    96.423  &lt; 2e-16 ***\nDESTIN_SZBDSZ07      -0.5849371  0.0110468   -52.951  &lt; 2e-16 ***\nDESTIN_SZBDSZ08      -1.2871050  0.0128623  -100.068  &lt; 2e-16 ***\nDESTIN_SZBKSZ01      -1.0633560  0.0077771  -136.730  &lt; 2e-16 ***\nDESTIN_SZBKSZ02      -0.4065316  0.0066712   -60.938  &lt; 2e-16 ***\nDESTIN_SZBKSZ03      -0.6815674  0.0066509  -102.477  &lt; 2e-16 ***\nDESTIN_SZBKSZ04      -0.4185485  0.0058306   -71.785  &lt; 2e-16 ***\nDESTIN_SZBKSZ05      -0.8887654  0.0073867  -120.319  &lt; 2e-16 ***\nDESTIN_SZBKSZ06      -0.9436078  0.0068625  -137.501  &lt; 2e-16 ***\nDESTIN_SZBKSZ07      -0.0067325  0.0048408    -1.391  0.16430    \nDESTIN_SZBKSZ08      -1.2680903  0.0079177  -160.160  &lt; 2e-16 ***\nDESTIN_SZBKSZ09      -0.0350151  0.0054287    -6.450 1.12e-10 ***\nDESTIN_SZBLSZ01      -0.3045203  0.0081978   -37.146  &lt; 2e-16 ***\nDESTIN_SZBLSZ02       0.6432424  0.0074449    86.400  &lt; 2e-16 ***\nDESTIN_SZBLSZ03       1.9595113  0.0084705   231.333  &lt; 2e-16 ***\nDESTIN_SZBLSZ04       0.0149756  0.0172081     0.870  0.38415    \nDESTIN_SZBMSZ01      -0.0378127  0.0055294    -6.838 8.00e-12 ***\nDESTIN_SZBMSZ02      -0.8458055  0.0054043  -156.505  &lt; 2e-16 ***\nDESTIN_SZBMSZ03      -1.1334399  0.0063720  -177.878  &lt; 2e-16 ***\nDESTIN_SZBMSZ04      -1.1164759  0.0057743  -193.353  &lt; 2e-16 ***\nDESTIN_SZBMSZ05      -1.1078742  0.0078703  -140.766  &lt; 2e-16 ***\nDESTIN_SZBMSZ06      -2.2787234  0.0155126  -146.895  &lt; 2e-16 ***\nDESTIN_SZBMSZ07      -0.2739089  0.0051924   -52.752  &lt; 2e-16 ***\nDESTIN_SZBMSZ08      -1.6825978  0.0071842  -234.209  &lt; 2e-16 ***\nDESTIN_SZBMSZ09      -3.0047801  0.0159980  -187.823  &lt; 2e-16 ***\nDESTIN_SZBMSZ10      -2.2232689  0.0096907  -229.423  &lt; 2e-16 ***\nDESTIN_SZBMSZ11      -1.9657136  0.0086445  -227.394  &lt; 2e-16 ***\nDESTIN_SZBMSZ12      -1.5359286  0.0089658  -171.310  &lt; 2e-16 ***\nDESTIN_SZBMSZ13      -0.5657561  0.0059960   -94.355  &lt; 2e-16 ***\nDESTIN_SZBMSZ14      -1.6904858  0.0084858  -199.214  &lt; 2e-16 ***\nDESTIN_SZBMSZ15      -1.5268383  0.0079959  -190.953  &lt; 2e-16 ***\nDESTIN_SZBMSZ16      -2.2045600  0.0130872  -168.452  &lt; 2e-16 ***\nDESTIN_SZBMSZ17      -2.2992381  0.0184895  -124.353  &lt; 2e-16 ***\nDESTIN_SZBPSZ01      -0.8549497  0.0065168  -131.191  &lt; 2e-16 ***\nDESTIN_SZBPSZ02      -1.7470549  0.0095751  -182.457  &lt; 2e-16 ***\nDESTIN_SZBPSZ03      -1.4015145  0.0090888  -154.203  &lt; 2e-16 ***\nDESTIN_SZBPSZ04      -0.5250632  0.0066496   -78.962  &lt; 2e-16 ***\nDESTIN_SZBPSZ05       0.3413171  0.0046404    73.553  &lt; 2e-16 ***\nDESTIN_SZBPSZ06      -0.8569188  0.0090795   -94.380  &lt; 2e-16 ***\nDESTIN_SZBPSZ07      -0.0751284  0.0089704    -8.375  &lt; 2e-16 ***\nDESTIN_SZBSSZ01       0.1015228  0.0055735    18.215  &lt; 2e-16 ***\nDESTIN_SZBSSZ02      -0.7066412  0.0063845  -110.682  &lt; 2e-16 ***\nDESTIN_SZBSSZ03       0.1622730  0.0046689    34.756  &lt; 2e-16 ***\nDESTIN_SZBTSZ01       0.5470615  0.0047984   114.009  &lt; 2e-16 ***\nDESTIN_SZBTSZ02      -0.1393371  0.0078266   -17.803  &lt; 2e-16 ***\nDESTIN_SZBTSZ03       0.1474771  0.0059428    24.816  &lt; 2e-16 ***\nDESTIN_SZBTSZ04      -1.2857827  0.0122000  -105.392  &lt; 2e-16 ***\nDESTIN_SZBTSZ05      -0.2629188  0.0081769   -32.154  &lt; 2e-16 ***\nDESTIN_SZBTSZ06      -0.8319920  0.0081401  -102.209  &lt; 2e-16 ***\nDESTIN_SZBTSZ07      -1.8829448  0.0121227  -155.324  &lt; 2e-16 ***\nDESTIN_SZBTSZ08      -1.5732123  0.0116752  -134.748  &lt; 2e-16 ***\nDESTIN_SZCBSZ01      -3.5334327  0.3333510   -10.600  &lt; 2e-16 ***\nDESTIN_SZCCSZ01      -0.2129306  0.0093782   -22.705  &lt; 2e-16 ***\nDESTIN_SZCHSZ01      -0.1494972  0.0113078   -13.221  &lt; 2e-16 ***\nDESTIN_SZCHSZ02       0.0041774  0.0063195     0.661  0.50860    \nDESTIN_SZCHSZ03       2.5565450  0.0046495   549.857  &lt; 2e-16 ***\nDESTIN_SZCKSZ01       0.0489719  0.0053801     9.102  &lt; 2e-16 ***\nDESTIN_SZCKSZ02      -0.3548993  0.0060671   -58.496  &lt; 2e-16 ***\nDESTIN_SZCKSZ03       0.5386351  0.0044913   119.928  &lt; 2e-16 ***\nDESTIN_SZCKSZ04      -0.4425512  0.0073837   -59.936  &lt; 2e-16 ***\nDESTIN_SZCKSZ05      -0.4092591  0.0077267   -52.967  &lt; 2e-16 ***\nDESTIN_SZCKSZ06       0.2207041  0.0074252    29.724  &lt; 2e-16 ***\nDESTIN_SZCLSZ01       0.2851460  0.0052362    54.457  &lt; 2e-16 ***\nDESTIN_SZCLSZ02      -1.9270528  0.0147688  -130.482  &lt; 2e-16 ***\nDESTIN_SZCLSZ03      -0.6266521  0.0086780   -72.212  &lt; 2e-16 ***\nDESTIN_SZCLSZ04      -0.1335581  0.0054216   -24.634  &lt; 2e-16 ***\nDESTIN_SZCLSZ05      -0.8912963  0.0096015   -92.829  &lt; 2e-16 ***\nDESTIN_SZCLSZ06       0.1781234  0.0048150    36.993  &lt; 2e-16 ***\nDESTIN_SZCLSZ07      -0.5609619  0.0062277   -90.075  &lt; 2e-16 ***\nDESTIN_SZCLSZ08      -0.3875308  0.0068390   -56.665  &lt; 2e-16 ***\nDESTIN_SZCLSZ09       0.2539453  0.0072623    34.968  &lt; 2e-16 ***\nDESTIN_SZDTSZ02      -2.5036295  0.0373421   -67.046  &lt; 2e-16 ***\nDESTIN_SZDTSZ03      -0.8956407  0.0149971   -59.721  &lt; 2e-16 ***\nDESTIN_SZDTSZ13      -1.6562176  0.0175441   -94.403  &lt; 2e-16 ***\nDESTIN_SZGLSZ01      -0.2716152  0.0056553   -48.029  &lt; 2e-16 ***\nDESTIN_SZGLSZ02      -0.1735665  0.0055548   -31.246  &lt; 2e-16 ***\nDESTIN_SZGLSZ03       0.7029507  0.0044934   156.441  &lt; 2e-16 ***\nDESTIN_SZGLSZ04       0.5788027  0.0045449   127.351  &lt; 2e-16 ***\nDESTIN_SZGLSZ05       0.6865291  0.0045131   152.118  &lt; 2e-16 ***\nDESTIN_SZHGSZ01       0.3275950  0.0043866    74.681  &lt; 2e-16 ***\nDESTIN_SZHGSZ02      -0.6326974  0.0063517   -99.610  &lt; 2e-16 ***\nDESTIN_SZHGSZ03      -1.0597982  0.0073914  -143.382  &lt; 2e-16 ***\nDESTIN_SZHGSZ04      -0.2267013  0.0052178   -43.448  &lt; 2e-16 ***\nDESTIN_SZHGSZ05      -0.3063050  0.0055452   -55.238  &lt; 2e-16 ***\nDESTIN_SZHGSZ06      -0.7483961  0.0065544  -114.182  &lt; 2e-16 ***\nDESTIN_SZHGSZ07       0.1096958  0.0051309    21.379  &lt; 2e-16 ***\nDESTIN_SZHGSZ08      -0.1374201  0.0056692   -24.240  &lt; 2e-16 ***\nDESTIN_SZHGSZ09       0.0775400  0.0060230    12.874  &lt; 2e-16 ***\nDESTIN_SZHGSZ10      -3.3017475  0.0289292  -114.132  &lt; 2e-16 ***\nDESTIN_SZJESZ01      -0.0489065  0.0057246    -8.543  &lt; 2e-16 ***\nDESTIN_SZJESZ02      -0.5101614  0.0060074   -84.921  &lt; 2e-16 ***\nDESTIN_SZJESZ03      -0.5328921  0.0064129   -83.097  &lt; 2e-16 ***\nDESTIN_SZJESZ04      -0.7348953  0.0082249   -89.351  &lt; 2e-16 ***\nDESTIN_SZJESZ05      -1.0864570  0.0111740   -97.231  &lt; 2e-16 ***\nDESTIN_SZJESZ06       0.2407920  0.0046801    51.451  &lt; 2e-16 ***\nDESTIN_SZJESZ07      -1.1523093  0.0090103  -127.888  &lt; 2e-16 ***\nDESTIN_SZJESZ08      -0.4627356  0.0094529   -48.952  &lt; 2e-16 ***\nDESTIN_SZJESZ09       0.0528616  0.0068126     7.759 8.53e-15 ***\nDESTIN_SZJESZ10       1.0240660  0.0084045   121.848  &lt; 2e-16 ***\nDESTIN_SZJESZ11       0.7875517  0.0076251   103.284  &lt; 2e-16 ***\nDESTIN_SZJWSZ01      -0.1533418  0.0076198   -20.124  &lt; 2e-16 ***\nDESTIN_SZJWSZ02      -0.0011019  0.0059389    -0.186  0.85280    \nDESTIN_SZJWSZ03       0.9063789  0.0046747   193.892  &lt; 2e-16 ***\nDESTIN_SZJWSZ04       0.7019286  0.0049743   141.112  &lt; 2e-16 ***\nDESTIN_SZJWSZ05      -0.5197057  0.0072971   -71.220  &lt; 2e-16 ***\nDESTIN_SZJWSZ06       0.3350986  0.0061171    54.780  &lt; 2e-16 ***\nDESTIN_SZJWSZ07      -0.5961960  0.0328336   -18.158  &lt; 2e-16 ***\nDESTIN_SZJWSZ08       0.8054662  0.0056006   143.819  &lt; 2e-16 ***\nDESTIN_SZJWSZ09       1.5860146  0.0040282   393.723  &lt; 2e-16 ***\nDESTIN_SZKLSZ01      -0.6500838  0.0063560  -102.279  &lt; 2e-16 ***\nDESTIN_SZKLSZ02      -0.7039434  0.0064465  -109.197  &lt; 2e-16 ***\nDESTIN_SZKLSZ03      -1.1972384  0.0075577  -158.413  &lt; 2e-16 ***\nDESTIN_SZKLSZ04      -1.7172228  0.0097573  -175.993  &lt; 2e-16 ***\nDESTIN_SZKLSZ05      -0.6042386  0.0093730   -64.466  &lt; 2e-16 ***\nDESTIN_SZKLSZ06      -3.0201496  0.0389503   -77.539  &lt; 2e-16 ***\nDESTIN_SZKLSZ07      -1.1522413  0.0076607  -150.409  &lt; 2e-16 ***\nDESTIN_SZKLSZ08      -0.6977825  0.0057610  -121.122  &lt; 2e-16 ***\nDESTIN_SZLKSZ01      -0.6895952  0.0268661   -25.668  &lt; 2e-16 ***\nDESTIN_SZMDSZ01      -0.7155951  0.0228203   -31.358  &lt; 2e-16 ***\nDESTIN_SZMDSZ02      -0.8153643  0.0123003   -66.288  &lt; 2e-16 ***\nDESTIN_SZMDSZ03      -2.7745226  0.0301326   -92.077  &lt; 2e-16 ***\nDESTIN_SZMPSZ01      -0.5492095  0.0087198   -62.984  &lt; 2e-16 ***\nDESTIN_SZMPSZ02      -0.6104744  0.0069346   -88.033  &lt; 2e-16 ***\nDESTIN_SZMPSZ03       0.2775047  0.0054964    50.489  &lt; 2e-16 ***\nDESTIN_SZMUSZ02      -2.6322870  0.0214943  -122.464  &lt; 2e-16 ***\nDESTIN_SZNTSZ01      -4.0762008  0.0531046   -76.758  &lt; 2e-16 ***\nDESTIN_SZNTSZ02      -1.9765545  0.0125659  -157.296  &lt; 2e-16 ***\nDESTIN_SZNTSZ03      -1.4563069  0.0085433  -170.462  &lt; 2e-16 ***\nDESTIN_SZNTSZ05      -2.0125598  0.0270737   -74.336  &lt; 2e-16 ***\nDESTIN_SZNTSZ06      -3.0145357  0.0504986   -59.695  &lt; 2e-16 ***\nDESTIN_SZNVSZ01      -0.4693625  0.0053866   -87.135  &lt; 2e-16 ***\nDESTIN_SZNVSZ02      -0.4525631  0.0060428   -74.894  &lt; 2e-16 ***\nDESTIN_SZNVSZ03      -0.4821492  0.0064725   -74.492  &lt; 2e-16 ***\nDESTIN_SZNVSZ04      -1.8929756  0.0128397  -147.432  &lt; 2e-16 ***\nDESTIN_SZNVSZ05      -1.4501752  0.0099737  -145.400  &lt; 2e-16 ***\nDESTIN_SZPGSZ01      -1.2305867  0.0174321   -70.593  &lt; 2e-16 ***\nDESTIN_SZPGSZ02      -0.8232919  0.0080153  -102.715  &lt; 2e-16 ***\nDESTIN_SZPGSZ03       0.2138480  0.0050850    42.054  &lt; 2e-16 ***\nDESTIN_SZPGSZ04       0.1045757  0.0053579    19.518  &lt; 2e-16 ***\nDESTIN_SZPGSZ05      -0.7542450  0.0088883   -84.858  &lt; 2e-16 ***\nDESTIN_SZPLSZ01      -0.0098642  0.0080428    -1.226  0.22003    \nDESTIN_SZPLSZ02      -1.2630412  0.0152594   -82.771  &lt; 2e-16 ***\nDESTIN_SZPLSZ03      -0.1554479  0.0108611   -14.312  &lt; 2e-16 ***\nDESTIN_SZPLSZ04      -1.5505819  0.0114768  -135.105  &lt; 2e-16 ***\nDESTIN_SZPLSZ05      -0.2417805  0.0130391   -18.543  &lt; 2e-16 ***\nDESTIN_SZPNSZ01       0.7926715  0.0073628   107.659  &lt; 2e-16 ***\nDESTIN_SZPNSZ02       2.1914920  0.0073537   298.013  &lt; 2e-16 ***\nDESTIN_SZPNSZ03       1.0246845  0.0086874   117.951  &lt; 2e-16 ***\nDESTIN_SZPNSZ04       2.5522612  0.0091789   278.057  &lt; 2e-16 ***\nDESTIN_SZPNSZ05       1.7995301  0.0138562   129.872  &lt; 2e-16 ***\nDESTIN_SZPRSZ01      -0.6576686  0.0096037   -68.481  &lt; 2e-16 ***\nDESTIN_SZPRSZ02       0.3113532  0.0059851    52.021  &lt; 2e-16 ***\nDESTIN_SZPRSZ03       0.9255296  0.0044779   206.687  &lt; 2e-16 ***\nDESTIN_SZPRSZ04      -0.0028578  0.0093218    -0.307  0.75917    \nDESTIN_SZPRSZ05       0.2457863  0.0058261    42.187  &lt; 2e-16 ***\nDESTIN_SZPRSZ06       0.3692137  0.0064542    57.205  &lt; 2e-16 ***\nDESTIN_SZPRSZ07      -1.6733306  0.0138440  -120.871  &lt; 2e-16 ***\nDESTIN_SZPRSZ08      -0.2221048  0.0074846   -29.675  &lt; 2e-16 ***\nDESTIN_SZQTSZ01      -1.0185488  0.0093179  -109.311  &lt; 2e-16 ***\nDESTIN_SZQTSZ02      -1.2802688  0.0081670  -156.761  &lt; 2e-16 ***\nDESTIN_SZQTSZ03      -1.3322708  0.0079106  -168.415  &lt; 2e-16 ***\nDESTIN_SZQTSZ04      -1.1803631  0.0077366  -152.568  &lt; 2e-16 ***\nDESTIN_SZQTSZ05      -1.2215818  0.0072829  -167.734  &lt; 2e-16 ***\nDESTIN_SZQTSZ06      -1.3213145  0.0074858  -176.509  &lt; 2e-16 ***\nDESTIN_SZQTSZ07      -1.6426306  0.0123347  -133.171  &lt; 2e-16 ***\nDESTIN_SZQTSZ08      -0.2224169  0.0058405   -38.082  &lt; 2e-16 ***\nDESTIN_SZQTSZ09      -0.8142678  0.0069796  -116.665  &lt; 2e-16 ***\nDESTIN_SZQTSZ10      -0.1090496  0.0062573   -17.428  &lt; 2e-16 ***\nDESTIN_SZQTSZ11      -0.0108951  0.0061145    -1.782  0.07477 .  \nDESTIN_SZQTSZ12      -0.8582515  0.0090243   -95.105  &lt; 2e-16 ***\nDESTIN_SZQTSZ13       0.1834409  0.0065231    28.122  &lt; 2e-16 ***\nDESTIN_SZQTSZ14       0.1994454  0.0073615    27.093  &lt; 2e-16 ***\nDESTIN_SZQTSZ15       0.6740197  0.0088699    75.990  &lt; 2e-16 ***\nDESTIN_SZRCSZ01      -0.7746427  0.0079375   -97.593  &lt; 2e-16 ***\nDESTIN_SZRCSZ06      -1.4394098  0.0209931   -68.566  &lt; 2e-16 ***\nDESTIN_SZRVSZ01      -2.6060495  0.0175759  -148.274  &lt; 2e-16 ***\nDESTIN_SZRVSZ02      -2.5823769  0.0354706   -72.803  &lt; 2e-16 ***\nDESTIN_SZRVSZ03      -2.5890601  0.0152644  -169.614  &lt; 2e-16 ***\nDESTIN_SZRVSZ04      -2.2277482  0.0165661  -134.477  &lt; 2e-16 ***\nDESTIN_SZRVSZ05      -3.8610445  0.0298251  -129.456  &lt; 2e-16 ***\nDESTIN_SZSBSZ01      -1.2035529  0.0103954  -115.777  &lt; 2e-16 ***\nDESTIN_SZSBSZ02      -1.0267199  0.0085239  -120.452  &lt; 2e-16 ***\nDESTIN_SZSBSZ03       0.5977382  0.0050336   118.750  &lt; 2e-16 ***\nDESTIN_SZSBSZ04       0.5362769  0.0060573    88.534  &lt; 2e-16 ***\nDESTIN_SZSBSZ05      -1.0440525  0.0089622  -116.495  &lt; 2e-16 ***\nDESTIN_SZSBSZ06      -1.3939595  0.0246679   -56.509  &lt; 2e-16 ***\nDESTIN_SZSBSZ07       0.1029116  0.0235414     4.372 1.23e-05 ***\nDESTIN_SZSBSZ08       1.3564902  0.0060529   224.105  &lt; 2e-16 ***\nDESTIN_SZSBSZ09       0.4573712  0.0056585    80.829  &lt; 2e-16 ***\nDESTIN_SZSESZ02      -0.1553609  0.0056716   -27.393  &lt; 2e-16 ***\nDESTIN_SZSESZ03       0.5412776  0.0043801   123.576  &lt; 2e-16 ***\nDESTIN_SZSESZ04      -0.6382091  0.0065411   -97.568  &lt; 2e-16 ***\nDESTIN_SZSESZ05      -0.3332093  0.0055002   -60.581  &lt; 2e-16 ***\nDESTIN_SZSESZ06      -0.3085951  0.0072340   -42.659  &lt; 2e-16 ***\nDESTIN_SZSESZ07      -2.6237684  0.0245753  -106.764  &lt; 2e-16 ***\nDESTIN_SZSGSZ01      -0.1062372  0.0066634   -15.943  &lt; 2e-16 ***\nDESTIN_SZSGSZ02      -0.0475568  0.0058908    -8.073 6.85e-16 ***\nDESTIN_SZSGSZ03      -0.2118402  0.0055056   -38.477  &lt; 2e-16 ***\nDESTIN_SZSGSZ04      -0.1099618  0.0054841   -20.051  &lt; 2e-16 ***\nDESTIN_SZSGSZ05      -2.1556963  0.0113821  -189.394  &lt; 2e-16 ***\nDESTIN_SZSGSZ06       0.4416352  0.0043842   100.734  &lt; 2e-16 ***\nDESTIN_SZSGSZ07      -0.3949335  0.0059250   -66.655  &lt; 2e-16 ***\nDESTIN_SZSISZ01      -1.2847094  0.0288610   -44.514  &lt; 2e-16 ***\nDESTIN_SZSKSZ01       0.3089834  0.0082924    37.261  &lt; 2e-16 ***\nDESTIN_SZSKSZ02       1.4139309  0.0059981   235.729  &lt; 2e-16 ***\nDESTIN_SZSKSZ03       0.2427688  0.0067373    36.034  &lt; 2e-16 ***\nDESTIN_SZSKSZ04      -0.2527488  0.0161286   -15.671  &lt; 2e-16 ***\nDESTIN_SZSKSZ05       0.6046051  0.0122766    49.249  &lt; 2e-16 ***\nDESTIN_SZSLSZ01      -0.3927387  0.0099790   -39.356  &lt; 2e-16 ***\nDESTIN_SZSLSZ04      -0.5942110  0.0086225   -68.914  &lt; 2e-16 ***\nDESTIN_SZSRSZ01      -2.6855766  0.0138707  -193.615  &lt; 2e-16 ***\nDESTIN_SZTHSZ01      -3.2750084  0.0402668   -81.333  &lt; 2e-16 ***\nDESTIN_SZTHSZ03      -1.7964408  0.0261810   -68.616  &lt; 2e-16 ***\nDESTIN_SZTHSZ04      -2.6323994  0.0241831  -108.853  &lt; 2e-16 ***\nDESTIN_SZTHSZ06      -1.9444390  0.0166052  -117.098  &lt; 2e-16 ***\nDESTIN_SZTMSZ01       0.3856054  0.0063086    61.123  &lt; 2e-16 ***\nDESTIN_SZTMSZ02       1.8586526  0.0039229   473.790  &lt; 2e-16 ***\nDESTIN_SZTMSZ03       1.2601385  0.0044018   286.278  &lt; 2e-16 ***\nDESTIN_SZTMSZ04       1.5884327  0.0043362   366.316  &lt; 2e-16 ***\nDESTIN_SZTMSZ05       1.0377553  0.0063271   164.018  &lt; 2e-16 ***\nDESTIN_SZTNSZ01      -0.9954275  0.0080345  -123.895  &lt; 2e-16 ***\nDESTIN_SZTNSZ02      -2.1032696  0.0109228  -192.557  &lt; 2e-16 ***\nDESTIN_SZTNSZ03      -2.0044892  0.0129215  -155.128  &lt; 2e-16 ***\nDESTIN_SZTNSZ04      -0.9750326  0.0081677  -119.377  &lt; 2e-16 ***\nDESTIN_SZTPSZ01      -0.7788383  0.0068769  -113.254  &lt; 2e-16 ***\nDESTIN_SZTPSZ02       0.2866080  0.0042843    66.898  &lt; 2e-16 ***\nDESTIN_SZTPSZ03      -0.8749841  0.0065470  -133.646  &lt; 2e-16 ***\nDESTIN_SZTPSZ04      -1.6852792  0.0081488  -206.812  &lt; 2e-16 ***\nDESTIN_SZTPSZ05      -1.3721346  0.0068230  -201.104  &lt; 2e-16 ***\nDESTIN_SZTPSZ06      -0.7832133  0.0069164  -113.239  &lt; 2e-16 ***\nDESTIN_SZTPSZ07      -2.3109126  0.0130830  -176.635  &lt; 2e-16 ***\nDESTIN_SZTPSZ08      -1.6406531  0.0104897  -156.406  &lt; 2e-16 ***\nDESTIN_SZTPSZ09      -0.5636273  0.0076848   -73.343  &lt; 2e-16 ***\nDESTIN_SZTPSZ10      -1.5640843  0.0099984  -156.433  &lt; 2e-16 ***\nDESTIN_SZTPSZ11      -0.3700482  0.0059834   -61.846  &lt; 2e-16 ***\nDESTIN_SZTPSZ12      -0.8828228  0.0072302  -122.102  &lt; 2e-16 ***\nDESTIN_SZTSSZ01       0.3529526  0.0221887    15.907  &lt; 2e-16 ***\nDESTIN_SZTSSZ02       1.0265792  0.0153515    66.871  &lt; 2e-16 ***\nDESTIN_SZTSSZ03       1.9647347  0.0092388   212.662  &lt; 2e-16 ***\nDESTIN_SZTSSZ04       1.8649836  0.0089976   207.275  &lt; 2e-16 ***\nDESTIN_SZTSSZ05       2.8437058  0.0085738   331.673  &lt; 2e-16 ***\nDESTIN_SZTSSZ06       3.4238870  0.0161304   212.263  &lt; 2e-16 ***\nDESTIN_SZWCSZ01       2.9550693  0.0051690   571.689  &lt; 2e-16 ***\nDESTIN_SZWCSZ02      -0.8214103  0.0129213   -63.570  &lt; 2e-16 ***\nDESTIN_SZWCSZ03      -1.7393427  0.0347472   -50.057  &lt; 2e-16 ***\nDESTIN_SZWDSZ01       1.3424417  0.0039957   335.972  &lt; 2e-16 ***\nDESTIN_SZWDSZ02      -0.2103694  0.0068601   -30.666  &lt; 2e-16 ***\nDESTIN_SZWDSZ03       0.8268551  0.0051363   160.983  &lt; 2e-16 ***\nDESTIN_SZWDSZ04      -0.0643997  0.0079076    -8.144 3.82e-16 ***\nDESTIN_SZWDSZ05       0.0451985  0.0075732     5.968 2.40e-09 ***\nDESTIN_SZWDSZ06       0.6981330  0.0051936   134.423  &lt; 2e-16 ***\nDESTIN_SZWDSZ07      -0.0403233  0.0067749    -5.952 2.65e-09 ***\nDESTIN_SZWDSZ08       0.2850631  0.0069225    41.179  &lt; 2e-16 ***\nDESTIN_SZWDSZ09       1.3016106  0.0050365   258.433  &lt; 2e-16 ***\nDESTIN_SZYSSZ01       0.7598564  0.0044144   172.133  &lt; 2e-16 ***\nDESTIN_SZYSSZ02       0.2648061  0.0058239    45.469  &lt; 2e-16 ***\nDESTIN_SZYSSZ03      -0.0412163  0.0068337    -6.031 1.63e-09 ***\nDESTIN_SZYSSZ04      -0.0561054  0.0060829    -9.223  &lt; 2e-16 ***\nDESTIN_SZYSSZ05      -0.9970159  0.0121827   -81.839  &lt; 2e-16 ***\nDESTIN_SZYSSZ06      -1.3808376  0.0125738  -109.819  &lt; 2e-16 ***\nDESTIN_SZYSSZ07      -0.7128364  0.0165296   -43.125  &lt; 2e-16 ***\nDESTIN_SZYSSZ08       0.9409510  0.0045886   205.064  &lt; 2e-16 ***\nDESTIN_SZYSSZ09       0.3738436  0.0047971    77.930  &lt; 2e-16 ***\nlog(ORIGIN_AGE25_64)  0.1928847  0.0001667  1157.214  &lt; 2e-16 ***\nlog(dist)            -1.7828141  0.0004794 -3718.501  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 36117615  on 14273  degrees of freedom\nResidual deviance: 12319763  on 13992  degrees of freedom\nAIC: 12404881\n\nNumber of Fisher Scoring iterations: 7\n\n\nThe R-squared value is then calculated to examine how the constraints hold for destinations this time.\n\nCalcRSquared(decSIM$data$TRIPS, decSIM$fitted.values)\n\n[1] 0.496166\n\n\n\n\n\nA doubly constrained SIM is fitted.\n\ndbcSIM = glm(formula = TRIPS ~ \n                ORIGIN_SZ + \n                DESTIN_SZ + \n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(dbcSIM)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + DESTIN_SZ + log(dist), family = poisson(link = \"log\"), \n    data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                  Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)     21.9587595  0.0066831  3285.715  &lt; 2e-16 ***\nORIGIN_SZAMSZ02  0.4778050  0.0054127    88.275  &lt; 2e-16 ***\nORIGIN_SZAMSZ03  0.2895973  0.0055517    52.163  &lt; 2e-16 ***\nORIGIN_SZAMSZ04 -0.2628080  0.0060720   -43.282  &lt; 2e-16 ***\nORIGIN_SZAMSZ05 -0.2631404  0.0069008   -38.132  &lt; 2e-16 ***\nORIGIN_SZAMSZ06  0.1722337  0.0062028    27.767  &lt; 2e-16 ***\nORIGIN_SZAMSZ07 -0.9883200  0.0111224   -88.859  &lt; 2e-16 ***\nORIGIN_SZAMSZ08 -0.4052821  0.0104095   -38.934  &lt; 2e-16 ***\nORIGIN_SZAMSZ09  0.0356290  0.0064816     5.497 3.86e-08 ***\nORIGIN_SZAMSZ10  0.4815569  0.0055521    86.735  &lt; 2e-16 ***\nORIGIN_SZAMSZ11 -1.4440079  0.0146079   -98.851  &lt; 2e-16 ***\nORIGIN_SZAMSZ12 -1.7862677  0.0128071  -139.475  &lt; 2e-16 ***\nORIGIN_SZBDSZ01  0.8653749  0.0054381   159.132  &lt; 2e-16 ***\nORIGIN_SZBDSZ02  0.0841000  0.0062834    13.385  &lt; 2e-16 ***\nORIGIN_SZBDSZ03  0.3158343  0.0057510    54.918  &lt; 2e-16 ***\nORIGIN_SZBDSZ04  1.4556701  0.0049986   291.215  &lt; 2e-16 ***\nORIGIN_SZBDSZ05  0.6363125  0.0057193   111.257  &lt; 2e-16 ***\nORIGIN_SZBDSZ06  0.6749341  0.0058650   115.078  &lt; 2e-16 ***\nORIGIN_SZBDSZ07 -1.2176407  0.0113698  -107.095  &lt; 2e-16 ***\nORIGIN_SZBDSZ08 -0.9803580  0.0105604   -92.833  &lt; 2e-16 ***\nORIGIN_SZBKSZ01 -0.2919642  0.0080763   -36.151  &lt; 2e-16 ***\nORIGIN_SZBKSZ02  0.4609570  0.0067997    67.791  &lt; 2e-16 ***\nORIGIN_SZBKSZ03  0.6273448  0.0065989    95.068  &lt; 2e-16 ***\nORIGIN_SZBKSZ04 -0.2499063  0.0076555   -32.644  &lt; 2e-16 ***\nORIGIN_SZBKSZ05 -0.2628428  0.0078905   -33.311  &lt; 2e-16 ***\nORIGIN_SZBKSZ06 -0.2174034  0.0075134   -28.936  &lt; 2e-16 ***\nORIGIN_SZBKSZ07  0.7094093  0.0058574   121.114  &lt; 2e-16 ***\nORIGIN_SZBKSZ08 -0.1614362  0.0067626   -23.872  &lt; 2e-16 ***\nORIGIN_SZBKSZ09 -0.2739085  0.0072969   -37.537  &lt; 2e-16 ***\nORIGIN_SZBLSZ01 -2.4281074  0.0181172  -134.022  &lt; 2e-16 ***\nORIGIN_SZBLSZ02 -2.7305447  0.0219341  -124.489  &lt; 2e-16 ***\nORIGIN_SZBLSZ03 -3.3071431  0.0540398   -61.198  &lt; 2e-16 ***\nORIGIN_SZBLSZ04 -2.4550671  0.0263946   -93.014  &lt; 2e-16 ***\nORIGIN_SZBMSZ01  0.1198976  0.0065964    18.176  &lt; 2e-16 ***\nORIGIN_SZBMSZ02 -1.3908667  0.0083230  -167.112  &lt; 2e-16 ***\nORIGIN_SZBMSZ03 -0.6999122  0.0069754  -100.339  &lt; 2e-16 ***\nORIGIN_SZBMSZ04 -0.2691159  0.0066184   -40.662  &lt; 2e-16 ***\nORIGIN_SZBMSZ05 -2.6163780  0.0190989  -136.991  &lt; 2e-16 ***\nORIGIN_SZBMSZ06 -2.9729956  0.0197182  -150.774  &lt; 2e-16 ***\nORIGIN_SZBMSZ07 -0.7309916  0.0072407  -100.956  &lt; 2e-16 ***\nORIGIN_SZBMSZ08 -1.0019514  0.0073169  -136.936  &lt; 2e-16 ***\nORIGIN_SZBMSZ09 -1.3667460  0.0105325  -129.764  &lt; 2e-16 ***\nORIGIN_SZBMSZ10 -1.6907268  0.0106687  -158.476  &lt; 2e-16 ***\nORIGIN_SZBMSZ11 -1.2288802  0.0082919  -148.202  &lt; 2e-16 ***\nORIGIN_SZBMSZ12 -1.6517767  0.0115101  -143.507  &lt; 2e-16 ***\nORIGIN_SZBMSZ13 -0.7251351  0.0075289   -96.314  &lt; 2e-16 ***\nORIGIN_SZBMSZ14 -1.1534912  0.0082629  -139.599  &lt; 2e-16 ***\nORIGIN_SZBMSZ15 -0.5476774  0.0075710   -72.339  &lt; 2e-16 ***\nORIGIN_SZBMSZ16 -1.5195034  0.0111459  -136.329  &lt; 2e-16 ***\nORIGIN_SZBMSZ17 -1.6026767  0.0184419   -86.904  &lt; 2e-16 ***\nORIGIN_SZBPSZ01  0.5571291  0.0071866    77.523  &lt; 2e-16 ***\nORIGIN_SZBPSZ02  0.0523197  0.0082259     6.360 2.01e-10 ***\nORIGIN_SZBPSZ03  0.2942047  0.0080482    36.555  &lt; 2e-16 ***\nORIGIN_SZBPSZ04  0.6246296  0.0065878    94.816  &lt; 2e-16 ***\nORIGIN_SZBPSZ05  0.8663708  0.0060852   142.372  &lt; 2e-16 ***\nORIGIN_SZBPSZ06 -0.9896182  0.0109551   -90.334  &lt; 2e-16 ***\nORIGIN_SZBPSZ07 -0.5219250  0.0101830   -51.255  &lt; 2e-16 ***\nORIGIN_SZBSSZ01  0.3299588  0.0066440    49.663  &lt; 2e-16 ***\nORIGIN_SZBSSZ02  0.2851357  0.0057077    49.956  &lt; 2e-16 ***\nORIGIN_SZBSSZ03 -0.2084740  0.0063364   -32.901  &lt; 2e-16 ***\nORIGIN_SZBTSZ01  0.1425664  0.0071103    20.051  &lt; 2e-16 ***\nORIGIN_SZBTSZ02 -0.5591999  0.0093616   -59.733  &lt; 2e-16 ***\nORIGIN_SZBTSZ03 -0.3648190  0.0081677   -44.666  &lt; 2e-16 ***\nORIGIN_SZBTSZ04 -1.4555078  0.0120138  -121.152  &lt; 2e-16 ***\nORIGIN_SZBTSZ05 -0.8635510  0.0133848   -64.517  &lt; 2e-16 ***\nORIGIN_SZBTSZ06 -1.1383111  0.0106421  -106.963  &lt; 2e-16 ***\nORIGIN_SZBTSZ07 -2.3477669  0.0160858  -145.953  &lt; 2e-16 ***\nORIGIN_SZBTSZ08 -1.2918779  0.0124862  -103.464  &lt; 2e-16 ***\nORIGIN_SZCBSZ01 -3.3713588  0.0578683   -58.259  &lt; 2e-16 ***\nORIGIN_SZCCSZ01 -0.6029242  0.0153385   -39.308  &lt; 2e-16 ***\nORIGIN_SZCHSZ01 -0.7641380  0.0135100   -56.561  &lt; 2e-16 ***\nORIGIN_SZCHSZ02 -0.8400736  0.0101951   -82.400  &lt; 2e-16 ***\nORIGIN_SZCHSZ03  1.2753127  0.0072576   175.720  &lt; 2e-16 ***\nORIGIN_SZCKSZ01  0.2470943  0.0067135    36.806  &lt; 2e-16 ***\nORIGIN_SZCKSZ02  0.5793581  0.0070498    82.181  &lt; 2e-16 ***\nORIGIN_SZCKSZ03  1.0795767  0.0060642   178.025  &lt; 2e-16 ***\nORIGIN_SZCKSZ04  1.4947920  0.0063122   236.808  &lt; 2e-16 ***\nORIGIN_SZCKSZ05  0.7457580  0.0074071   100.681  &lt; 2e-16 ***\nORIGIN_SZCKSZ06  0.5760952  0.0094861    60.730  &lt; 2e-16 ***\nORIGIN_SZCLSZ01 -0.9061335  0.0098617   -91.884  &lt; 2e-16 ***\nORIGIN_SZCLSZ02 -1.7609479  0.0156124  -112.791  &lt; 2e-16 ***\nORIGIN_SZCLSZ03 -1.0081325  0.0095171  -105.929  &lt; 2e-16 ***\nORIGIN_SZCLSZ04  0.6181200  0.0057953   106.659  &lt; 2e-16 ***\nORIGIN_SZCLSZ05 -2.0462335  0.0168934  -121.127  &lt; 2e-16 ***\nORIGIN_SZCLSZ06  0.7902389  0.0055680   141.924  &lt; 2e-16 ***\nORIGIN_SZCLSZ07 -0.5472929  0.0071001   -77.082  &lt; 2e-16 ***\nORIGIN_SZCLSZ08 -0.2197650  0.0077460   -28.372  &lt; 2e-16 ***\nORIGIN_SZCLSZ09 -1.8175782  0.0195989   -92.739  &lt; 2e-16 ***\nORIGIN_SZDTSZ02 -3.7618796  0.0872098   -43.136  &lt; 2e-16 ***\nORIGIN_SZDTSZ03 -3.4514766  0.0840812   -41.049  &lt; 2e-16 ***\nORIGIN_SZDTSZ13 -3.0627578  0.0352485   -86.891  &lt; 2e-16 ***\nORIGIN_SZGLSZ01 -1.8055929  0.0111938  -161.303  &lt; 2e-16 ***\nORIGIN_SZGLSZ02 -0.1588829  0.0061413   -25.871  &lt; 2e-16 ***\nORIGIN_SZGLSZ03 -0.2508524  0.0064276   -39.027  &lt; 2e-16 ***\nORIGIN_SZGLSZ04  0.8819358  0.0051993   169.627  &lt; 2e-16 ***\nORIGIN_SZGLSZ05  0.6062778  0.0053735   112.828  &lt; 2e-16 ***\nORIGIN_SZHGSZ01  0.3841503  0.0056776    67.660  &lt; 2e-16 ***\nORIGIN_SZHGSZ02  0.3962330  0.0057579    68.815  &lt; 2e-16 ***\nORIGIN_SZHGSZ03  0.2159531  0.0061671    35.017  &lt; 2e-16 ***\nORIGIN_SZHGSZ04  0.7831941  0.0052216   149.992  &lt; 2e-16 ***\nORIGIN_SZHGSZ05  1.1741558  0.0051799   226.677  &lt; 2e-16 ***\nORIGIN_SZHGSZ06 -0.1891403  0.0065556   -28.852  &lt; 2e-16 ***\nORIGIN_SZHGSZ07  0.3105421  0.0057186    54.304  &lt; 2e-16 ***\nORIGIN_SZHGSZ08 -0.0766364  0.0063474   -12.074  &lt; 2e-16 ***\nORIGIN_SZHGSZ09 -1.2211107  0.0101434  -120.384  &lt; 2e-16 ***\nORIGIN_SZHGSZ10 -3.4844709  0.0504793   -69.028  &lt; 2e-16 ***\nORIGIN_SZJESZ01  0.4916496  0.0063444    77.493  &lt; 2e-16 ***\nORIGIN_SZJESZ02  0.1343893  0.0063762    21.077  &lt; 2e-16 ***\nORIGIN_SZJESZ03 -0.2761723  0.0068085   -40.563  &lt; 2e-16 ***\nORIGIN_SZJESZ04 -1.5932744  0.0121402  -131.240  &lt; 2e-16 ***\nORIGIN_SZJESZ05 -2.3041311  0.0160245  -143.788  &lt; 2e-16 ***\nORIGIN_SZJESZ06  0.2811076  0.0062495    44.981  &lt; 2e-16 ***\nORIGIN_SZJESZ07 -1.9413956  0.0136276  -142.461  &lt; 2e-16 ***\nORIGIN_SZJESZ08 -1.3315645  0.0143168   -93.007  &lt; 2e-16 ***\nORIGIN_SZJESZ09  0.4418314  0.0069208    63.841  &lt; 2e-16 ***\nORIGIN_SZJESZ10 -1.5551555  0.0236523   -65.751  &lt; 2e-16 ***\nORIGIN_SZJESZ11 -1.8888230  0.0224630   -84.086  &lt; 2e-16 ***\nORIGIN_SZJWSZ01  0.2564586  0.0084699    30.279  &lt; 2e-16 ***\nORIGIN_SZJWSZ02  0.6899398  0.0061751   111.729  &lt; 2e-16 ***\nORIGIN_SZJWSZ03  1.4761229  0.0057392   257.198  &lt; 2e-16 ***\nORIGIN_SZJWSZ04  0.5701272  0.0065749    86.713  &lt; 2e-16 ***\nORIGIN_SZJWSZ05 -2.1253657  0.0150769  -140.968  &lt; 2e-16 ***\nORIGIN_SZJWSZ06 -1.5307265  0.0131906  -116.047  &lt; 2e-16 ***\nORIGIN_SZJWSZ07 -2.8801618  0.0360772   -79.833  &lt; 2e-16 ***\nORIGIN_SZJWSZ08  1.4428820  0.0059638   241.938  &lt; 2e-16 ***\nORIGIN_SZJWSZ09  1.8968475  0.0055649   340.860  &lt; 2e-16 ***\nORIGIN_SZKLSZ01  0.1116580  0.0059844    18.658  &lt; 2e-16 ***\nORIGIN_SZKLSZ02 -0.9618787  0.0077344  -124.364  &lt; 2e-16 ***\nORIGIN_SZKLSZ03 -0.7070626  0.0070275  -100.613  &lt; 2e-16 ***\nORIGIN_SZKLSZ04 -2.2742765  0.0139991  -162.459  &lt; 2e-16 ***\nORIGIN_SZKLSZ05 -1.1907262  0.0123719   -96.244  &lt; 2e-16 ***\nORIGIN_SZKLSZ06 -5.9774897  0.1857994   -32.172  &lt; 2e-16 ***\nORIGIN_SZKLSZ07 -1.4258369  0.0103083  -138.320  &lt; 2e-16 ***\nORIGIN_SZKLSZ08 -1.7625888  0.0116107  -151.808  &lt; 2e-16 ***\nORIGIN_SZLKSZ01 -2.0541388  0.0448216   -45.829  &lt; 2e-16 ***\nORIGIN_SZMDSZ01 -0.8571117  0.0321054   -26.697  &lt; 2e-16 ***\nORIGIN_SZMDSZ02 -0.6034597  0.0120724   -49.987  &lt; 2e-16 ***\nORIGIN_SZMDSZ03 -2.1681163  0.0201078  -107.825  &lt; 2e-16 ***\nORIGIN_SZMPSZ01 -0.9331562  0.0096218   -96.984  &lt; 2e-16 ***\nORIGIN_SZMPSZ02 -1.0268229  0.0081379  -126.178  &lt; 2e-16 ***\nORIGIN_SZMPSZ03  0.0054001  0.0066875     0.807 0.419385    \nORIGIN_SZMUSZ02 -3.6269863  0.1105492   -32.809  &lt; 2e-16 ***\nORIGIN_SZNTSZ01 -3.0593717  0.0399843   -76.514  &lt; 2e-16 ***\nORIGIN_SZNTSZ02 -3.3331415  0.0251754  -132.397  &lt; 2e-16 ***\nORIGIN_SZNTSZ03 -0.8351522  0.0090372   -92.413  &lt; 2e-16 ***\nORIGIN_SZNTSZ05 -4.2082472  0.0583343   -72.140  &lt; 2e-16 ***\nORIGIN_SZNTSZ06 -3.8549296  0.0593793   -64.920  &lt; 2e-16 ***\nORIGIN_SZNVSZ01  0.2789069  0.0056024    49.784  &lt; 2e-16 ***\nORIGIN_SZNVSZ02 -0.6036857  0.0077126   -78.273  &lt; 2e-16 ***\nORIGIN_SZNVSZ03 -1.0072683  0.0092678  -108.685  &lt; 2e-16 ***\nORIGIN_SZNVSZ04 -0.8723996  0.0101399   -86.037  &lt; 2e-16 ***\nORIGIN_SZNVSZ05 -2.1552928  0.0183064  -117.734  &lt; 2e-16 ***\nORIGIN_SZPGSZ01  0.0520607  0.0157846     3.298 0.000973 ***\nORIGIN_SZPGSZ02 -0.3481687  0.0089328   -38.976  &lt; 2e-16 ***\nORIGIN_SZPGSZ03  0.9095292  0.0058835   154.590  &lt; 2e-16 ***\nORIGIN_SZPGSZ04  1.3653717  0.0054727   249.489  &lt; 2e-16 ***\nORIGIN_SZPGSZ05  0.3762720  0.0073841    50.957  &lt; 2e-16 ***\nORIGIN_SZPLSZ01 -0.9142754  0.0136552   -66.954  &lt; 2e-16 ***\nORIGIN_SZPLSZ02 -1.0987582  0.0175891   -62.468  &lt; 2e-16 ***\nORIGIN_SZPLSZ03 -2.3427113  0.0474176   -49.406  &lt; 2e-16 ***\nORIGIN_SZPLSZ04 -2.9140779  0.0374458   -77.821  &lt; 2e-16 ***\nORIGIN_SZPLSZ05 -2.2381965  0.0261572   -85.567  &lt; 2e-16 ***\nORIGIN_SZPNSZ01  0.9659006  0.0075177   128.484  &lt; 2e-16 ***\nORIGIN_SZPNSZ02 -0.0158348  0.0143869    -1.101 0.271053    \nORIGIN_SZPNSZ03 -2.1837321  0.0224396   -97.316  &lt; 2e-16 ***\nORIGIN_SZPNSZ04 -3.2481509  0.0370762   -87.608  &lt; 2e-16 ***\nORIGIN_SZPNSZ05 -2.0450679  0.0328165   -62.318  &lt; 2e-16 ***\nORIGIN_SZPRSZ01 -0.6701245  0.0141567   -47.336  &lt; 2e-16 ***\nORIGIN_SZPRSZ02  0.7931907  0.0058079   136.570  &lt; 2e-16 ***\nORIGIN_SZPRSZ03  0.4249094  0.0058610    72.498  &lt; 2e-16 ***\nORIGIN_SZPRSZ04 -0.8529967  0.0090997   -93.739  &lt; 2e-16 ***\nORIGIN_SZPRSZ05  0.7865479  0.0055282   142.278  &lt; 2e-16 ***\nORIGIN_SZPRSZ06 -1.3303664  0.0134512   -98.903  &lt; 2e-16 ***\nORIGIN_SZPRSZ07 -3.0458370  0.0181514  -167.802  &lt; 2e-16 ***\nORIGIN_SZPRSZ08 -0.5342399  0.0075966   -70.327  &lt; 2e-16 ***\nORIGIN_SZQTSZ01 -0.2548930  0.0086485   -29.473  &lt; 2e-16 ***\nORIGIN_SZQTSZ02 -0.8662439  0.0076549  -113.162  &lt; 2e-16 ***\nORIGIN_SZQTSZ03 -0.0890168  0.0072455   -12.286  &lt; 2e-16 ***\nORIGIN_SZQTSZ04 -1.4634370  0.0089384  -163.724  &lt; 2e-16 ***\nORIGIN_SZQTSZ05 -0.6535669  0.0077612   -84.210  &lt; 2e-16 ***\nORIGIN_SZQTSZ06 -0.8275765  0.0081835  -101.128  &lt; 2e-16 ***\nORIGIN_SZQTSZ07 -1.5369800  0.0112808  -136.248  &lt; 2e-16 ***\nORIGIN_SZQTSZ08 -0.4437979  0.0075302   -58.936  &lt; 2e-16 ***\nORIGIN_SZQTSZ09 -0.8184934  0.0083589   -97.918  &lt; 2e-16 ***\nORIGIN_SZQTSZ10 -0.6906597  0.0080980   -85.288  &lt; 2e-16 ***\nORIGIN_SZQTSZ11 -2.3251162  0.0154191  -150.795  &lt; 2e-16 ***\nORIGIN_SZQTSZ12 -3.0442790  0.0208985  -145.670  &lt; 2e-16 ***\nORIGIN_SZQTSZ13 -0.7241013  0.0093441   -77.493  &lt; 2e-16 ***\nORIGIN_SZQTSZ14 -1.8225351  0.0138207  -131.870  &lt; 2e-16 ***\nORIGIN_SZQTSZ15 -0.8720806  0.0138589   -62.926  &lt; 2e-16 ***\nORIGIN_SZRCSZ01 -1.8063415  0.0144295  -125.184  &lt; 2e-16 ***\nORIGIN_SZRCSZ06 -0.5370905  0.0101573   -52.877  &lt; 2e-16 ***\nORIGIN_SZRVSZ01 -2.7426167  0.0341386   -80.338  &lt; 2e-16 ***\nORIGIN_SZRVSZ02 -3.0827269  0.0302299  -101.976  &lt; 2e-16 ***\nORIGIN_SZRVSZ03 -2.9133853  0.0262543  -110.968  &lt; 2e-16 ***\nORIGIN_SZRVSZ04 -3.4220022  0.0582209   -58.776  &lt; 2e-16 ***\nORIGIN_SZRVSZ05 -2.6206257  0.0197470  -132.710  &lt; 2e-16 ***\nORIGIN_SZSBSZ01  0.1010337  0.0085117    11.870  &lt; 2e-16 ***\nORIGIN_SZSBSZ02 -0.8810456  0.0098244   -89.680  &lt; 2e-16 ***\nORIGIN_SZSBSZ03  0.8303668  0.0063009   131.785  &lt; 2e-16 ***\nORIGIN_SZSBSZ04  0.3489128  0.0071456    48.829  &lt; 2e-16 ***\nORIGIN_SZSBSZ05 -0.3182914  0.0085560   -37.201  &lt; 2e-16 ***\nORIGIN_SZSBSZ06 -0.9074308  0.0200035   -45.364  &lt; 2e-16 ***\nORIGIN_SZSBSZ07 -0.2217124  0.0167188   -13.261  &lt; 2e-16 ***\nORIGIN_SZSBSZ08 -1.3007367  0.0178771   -72.760  &lt; 2e-16 ***\nORIGIN_SZSBSZ09 -0.9813703  0.0107885   -90.965  &lt; 2e-16 ***\nORIGIN_SZSESZ02  1.1283424  0.0054209   208.146  &lt; 2e-16 ***\nORIGIN_SZSESZ03  1.2389996  0.0051926   238.610  &lt; 2e-16 ***\nORIGIN_SZSESZ04  0.7535119  0.0060371   124.814  &lt; 2e-16 ***\nORIGIN_SZSESZ05 -0.2347978  0.0071482   -32.847  &lt; 2e-16 ***\nORIGIN_SZSESZ06  0.9520620  0.0057572   165.368  &lt; 2e-16 ***\nORIGIN_SZSESZ07 -2.4296685  0.0231677  -104.873  &lt; 2e-16 ***\nORIGIN_SZSGSZ01 -0.6995899  0.0099969   -69.980  &lt; 2e-16 ***\nORIGIN_SZSGSZ02 -1.2602157  0.0111471  -113.053  &lt; 2e-16 ***\nORIGIN_SZSGSZ03  0.0725860  0.0061970    11.713  &lt; 2e-16 ***\nORIGIN_SZSGSZ04  0.2738315  0.0057524    47.603  &lt; 2e-16 ***\nORIGIN_SZSGSZ05 -2.0207710  0.0119838  -168.625  &lt; 2e-16 ***\nORIGIN_SZSGSZ06  0.4885608  0.0054646    89.404  &lt; 2e-16 ***\nORIGIN_SZSGSZ07 -0.8892155  0.0075074  -118.445  &lt; 2e-16 ***\nORIGIN_SZSKSZ01 -0.3682754  0.0108025   -34.092  &lt; 2e-16 ***\nORIGIN_SZSKSZ02  1.1826086  0.0071388   165.659  &lt; 2e-16 ***\nORIGIN_SZSKSZ03 -0.3230177  0.0101683   -31.767  &lt; 2e-16 ***\nORIGIN_SZSKSZ04 -1.8504236  0.0362400   -51.060  &lt; 2e-16 ***\nORIGIN_SZSKSZ05 -0.2759035  0.0185157   -14.901  &lt; 2e-16 ***\nORIGIN_SZSLSZ01 -2.2757902  0.0348766   -65.253  &lt; 2e-16 ***\nORIGIN_SZSLSZ04 -0.0899820  0.0090356    -9.959  &lt; 2e-16 ***\nORIGIN_SZSRSZ01 -2.1460151  0.0187871  -114.228  &lt; 2e-16 ***\nORIGIN_SZTHSZ01 -2.6851549  0.0571841   -46.956  &lt; 2e-16 ***\nORIGIN_SZTHSZ03 -1.0121495  0.0275551   -36.732  &lt; 2e-16 ***\nORIGIN_SZTHSZ04 -2.6129645  0.0345167   -75.701  &lt; 2e-16 ***\nORIGIN_SZTHSZ06 -1.7229100  0.0208134   -82.779  &lt; 2e-16 ***\nORIGIN_SZTMSZ01 -0.2254986  0.0070312   -32.071  &lt; 2e-16 ***\nORIGIN_SZTMSZ02  1.7271575  0.0049219   350.914  &lt; 2e-16 ***\nORIGIN_SZTMSZ03  0.9891319  0.0052266   189.250  &lt; 2e-16 ***\nORIGIN_SZTMSZ04  0.2018090  0.0062114    32.490  &lt; 2e-16 ***\nORIGIN_SZTMSZ05 -1.1882870  0.0125842   -94.427  &lt; 2e-16 ***\nORIGIN_SZTNSZ01 -1.6122620  0.0141911  -113.611  &lt; 2e-16 ***\nORIGIN_SZTNSZ02 -1.5630967  0.0112227  -139.280  &lt; 2e-16 ***\nORIGIN_SZTNSZ03 -2.0739538  0.0149298  -138.914  &lt; 2e-16 ***\nORIGIN_SZTNSZ04 -0.2816960  0.0085295   -33.026  &lt; 2e-16 ***\nORIGIN_SZTPSZ01 -0.7822239  0.0077901  -100.412  &lt; 2e-16 ***\nORIGIN_SZTPSZ02  0.5735478  0.0053042   108.131  &lt; 2e-16 ***\nORIGIN_SZTPSZ03 -0.8748650  0.0074202  -117.903  &lt; 2e-16 ***\nORIGIN_SZTPSZ04 -0.8537831  0.0069792  -122.332  &lt; 2e-16 ***\nORIGIN_SZTPSZ05 -0.5581114  0.0077012   -72.471  &lt; 2e-16 ***\nORIGIN_SZTPSZ06  0.0262001  0.0075241     3.482 0.000497 ***\nORIGIN_SZTPSZ07 -0.5969952  0.0074272   -80.380  &lt; 2e-16 ***\nORIGIN_SZTPSZ08 -1.0537959  0.0111297   -94.683  &lt; 2e-16 ***\nORIGIN_SZTPSZ09 -0.9588508  0.0081314  -117.920  &lt; 2e-16 ***\nORIGIN_SZTPSZ10 -1.1177249  0.0089403  -125.021  &lt; 2e-16 ***\nORIGIN_SZTPSZ11 -0.2799677  0.0067135   -41.702  &lt; 2e-16 ***\nORIGIN_SZTPSZ12 -0.8898871  0.0080215  -110.938  &lt; 2e-16 ***\nORIGIN_SZTSSZ01 -2.6146463  0.0521606   -50.127  &lt; 2e-16 ***\nORIGIN_SZTSSZ02  0.1682588  0.0119965    14.026  &lt; 2e-16 ***\nORIGIN_SZTSSZ03  0.2587653  0.0123809    20.900  &lt; 2e-16 ***\nORIGIN_SZTSSZ04 -0.5473825  0.0135215   -40.482  &lt; 2e-16 ***\nORIGIN_SZTSSZ05 -0.9967379  0.0206068   -48.369  &lt; 2e-16 ***\nORIGIN_SZTSSZ06  0.4933147  0.0229597    21.486  &lt; 2e-16 ***\nORIGIN_SZWCSZ01  1.2524706  0.0111133   112.700  &lt; 2e-16 ***\nORIGIN_SZWCSZ02 -2.8544820  0.0347805   -82.071  &lt; 2e-16 ***\nORIGIN_SZWCSZ03 -5.1277334  0.1475585   -34.751  &lt; 2e-16 ***\nORIGIN_SZWDSZ01  1.4725308  0.0056496   260.645  &lt; 2e-16 ***\nORIGIN_SZWDSZ02  0.1571680  0.0064909    24.214  &lt; 2e-16 ***\nORIGIN_SZWDSZ03  1.2584097  0.0061471   204.717  &lt; 2e-16 ***\nORIGIN_SZWDSZ04  0.8578765  0.0069277   123.833  &lt; 2e-16 ***\nORIGIN_SZWDSZ05  0.1702728  0.0069687    24.434  &lt; 2e-16 ***\nORIGIN_SZWDSZ06  0.1736910  0.0069507    24.989  &lt; 2e-16 ***\nORIGIN_SZWDSZ07 -1.5610176  0.0100803  -154.859  &lt; 2e-16 ***\nORIGIN_SZWDSZ08 -0.9490906  0.0102047   -93.005  &lt; 2e-16 ***\nORIGIN_SZWDSZ09  1.2107011  0.0062294   194.354  &lt; 2e-16 ***\nORIGIN_SZYSSZ01 -0.3324158  0.0074537   -44.598  &lt; 2e-16 ***\nORIGIN_SZYSSZ02  0.8177113  0.0066108   123.693  &lt; 2e-16 ***\nORIGIN_SZYSSZ03  1.6751777  0.0058470   286.503  &lt; 2e-16 ***\nORIGIN_SZYSSZ04  0.8130044  0.0059025   137.738  &lt; 2e-16 ***\nORIGIN_SZYSSZ05  0.3678420  0.0072431    50.785  &lt; 2e-16 ***\nORIGIN_SZYSSZ06 -0.6024384  0.0126722   -47.540  &lt; 2e-16 ***\nORIGIN_SZYSSZ07 -0.7631918  0.0158478   -48.157  &lt; 2e-16 ***\nORIGIN_SZYSSZ08  0.2141930  0.0076154    28.126  &lt; 2e-16 ***\nORIGIN_SZYSSZ09  1.0809368  0.0057973   186.457  &lt; 2e-16 ***\nDESTIN_SZAMSZ02  0.0761304  0.0051207    14.867  &lt; 2e-16 ***\nDESTIN_SZAMSZ03  0.0143394  0.0050755     2.825 0.004724 ** \nDESTIN_SZAMSZ04 -1.2516780  0.0074947  -167.008  &lt; 2e-16 ***\nDESTIN_SZAMSZ05 -1.2312375  0.0076598  -160.741  &lt; 2e-16 ***\nDESTIN_SZAMSZ06 -1.0333412  0.0075283  -137.261  &lt; 2e-16 ***\nDESTIN_SZAMSZ07 -1.5338249  0.0110036  -139.392  &lt; 2e-16 ***\nDESTIN_SZAMSZ08 -0.3751665  0.0075358   -49.784  &lt; 2e-16 ***\nDESTIN_SZAMSZ09 -1.1633493  0.0077556  -150.001  &lt; 2e-16 ***\nDESTIN_SZAMSZ10  0.1017717  0.0053151    19.148  &lt; 2e-16 ***\nDESTIN_SZAMSZ11 -0.8840362  0.0097007   -91.131  &lt; 2e-16 ***\nDESTIN_SZAMSZ12  0.1628123  0.0055220    29.484  &lt; 2e-16 ***\nDESTIN_SZBDSZ01  1.0040794  0.0047922   209.523  &lt; 2e-16 ***\nDESTIN_SZBDSZ02 -0.2478149  0.0063085   -39.283  &lt; 2e-16 ***\nDESTIN_SZBDSZ03  0.1016088  0.0057420    17.696  &lt; 2e-16 ***\nDESTIN_SZBDSZ04  1.1082928  0.0047747   232.116  &lt; 2e-16 ***\nDESTIN_SZBDSZ05  0.8737933  0.0050593   172.712  &lt; 2e-16 ***\nDESTIN_SZBDSZ06  0.2897032  0.0058244    49.740  &lt; 2e-16 ***\nDESTIN_SZBDSZ07 -0.9026193  0.0113656   -79.416  &lt; 2e-16 ***\nDESTIN_SZBDSZ08 -1.7063577  0.0131234  -130.024  &lt; 2e-16 ***\nDESTIN_SZBKSZ01 -1.3892839  0.0083307  -166.767  &lt; 2e-16 ***\nDESTIN_SZBKSZ02 -0.6661120  0.0073464   -90.672  &lt; 2e-16 ***\nDESTIN_SZBKSZ03 -0.9536826  0.0073196  -130.292  &lt; 2e-16 ***\nDESTIN_SZBKSZ04 -0.6655610  0.0065868  -101.044  &lt; 2e-16 ***\nDESTIN_SZBKSZ05 -0.9053119  0.0079264  -114.215  &lt; 2e-16 ***\nDESTIN_SZBKSZ06 -1.2622159  0.0075079  -168.119  &lt; 2e-16 ***\nDESTIN_SZBKSZ07 -0.0423370  0.0056686    -7.469 8.10e-14 ***\nDESTIN_SZBKSZ08 -1.3811240  0.0084985  -162.515  &lt; 2e-16 ***\nDESTIN_SZBKSZ09 -0.0797012  0.0061428   -12.975  &lt; 2e-16 ***\nDESTIN_SZBLSZ01 -0.8859670  0.0088108  -100.555  &lt; 2e-16 ***\nDESTIN_SZBLSZ02  0.1362723  0.0082167    16.585  &lt; 2e-16 ***\nDESTIN_SZBLSZ03  1.2037396  0.0093508   128.732  &lt; 2e-16 ***\nDESTIN_SZBLSZ04 -0.9316219  0.0178080   -52.315  &lt; 2e-16 ***\nDESTIN_SZBMSZ01  0.7188470  0.0061160   117.536  &lt; 2e-16 ***\nDESTIN_SZBMSZ02 -0.0597895  0.0061206    -9.769  &lt; 2e-16 ***\nDESTIN_SZBMSZ03 -0.2427075  0.0069937   -34.704  &lt; 2e-16 ***\nDESTIN_SZBMSZ04 -0.0622494  0.0065569    -9.494  &lt; 2e-16 ***\nDESTIN_SZBMSZ05 -0.2857019  0.0086450   -33.048  &lt; 2e-16 ***\nDESTIN_SZBMSZ06 -1.3486558  0.0158904   -84.872  &lt; 2e-16 ***\nDESTIN_SZBMSZ07  0.4549687  0.0058315    78.020  &lt; 2e-16 ***\nDESTIN_SZBMSZ08 -0.8730268  0.0077814  -112.195  &lt; 2e-16 ***\nDESTIN_SZBMSZ09 -2.0319890  0.0163038  -124.633  &lt; 2e-16 ***\nDESTIN_SZBMSZ10 -1.4319101  0.0102616  -139.541  &lt; 2e-16 ***\nDESTIN_SZBMSZ11 -1.2429176  0.0092250  -134.733  &lt; 2e-16 ***\nDESTIN_SZBMSZ12 -0.8526549  0.0096009   -88.810  &lt; 2e-16 ***\nDESTIN_SZBMSZ13  0.1399907  0.0066885    20.930  &lt; 2e-16 ***\nDESTIN_SZBMSZ14 -1.0103155  0.0091377  -110.566  &lt; 2e-16 ***\nDESTIN_SZBMSZ15 -0.6819769  0.0086179   -79.135  &lt; 2e-16 ***\nDESTIN_SZBMSZ16 -1.4468308  0.0134051  -107.931  &lt; 2e-16 ***\nDESTIN_SZBMSZ17 -1.5312175  0.0186843   -81.952  &lt; 2e-16 ***\nDESTIN_SZBPSZ01 -1.1726725  0.0073257  -160.077  &lt; 2e-16 ***\nDESTIN_SZBPSZ02 -2.1072012  0.0103320  -203.949  &lt; 2e-16 ***\nDESTIN_SZBPSZ03 -1.6944911  0.0098520  -171.995  &lt; 2e-16 ***\nDESTIN_SZBPSZ04 -0.7664610  0.0074458  -102.939  &lt; 2e-16 ***\nDESTIN_SZBPSZ05  0.1358370  0.0056258    24.145  &lt; 2e-16 ***\nDESTIN_SZBPSZ06 -1.2425471  0.0096942  -128.175  &lt; 2e-16 ***\nDESTIN_SZBPSZ07 -0.1666192  0.0094969   -17.545  &lt; 2e-16 ***\nDESTIN_SZBSSZ01  0.3857894  0.0057261    67.374  &lt; 2e-16 ***\nDESTIN_SZBSSZ02 -0.5293265  0.0064886   -81.578  &lt; 2e-16 ***\nDESTIN_SZBSSZ03  0.3909966  0.0048540    80.551  &lt; 2e-16 ***\nDESTIN_SZBTSZ01  0.7114965  0.0054528   130.482  &lt; 2e-16 ***\nDESTIN_SZBTSZ02 -0.0487084  0.0082474    -5.906 3.51e-09 ***\nDESTIN_SZBTSZ03  0.5539032  0.0064423    85.979  &lt; 2e-16 ***\nDESTIN_SZBTSZ04 -0.7120734  0.0128676   -55.339  &lt; 2e-16 ***\nDESTIN_SZBTSZ05  0.2176097  0.0086791    25.073  &lt; 2e-16 ***\nDESTIN_SZBTSZ06 -0.2167084  0.0084925   -25.518  &lt; 2e-16 ***\nDESTIN_SZBTSZ07 -1.4045618  0.0124363  -112.940  &lt; 2e-16 ***\nDESTIN_SZBTSZ08 -0.8213918  0.0120793   -68.000  &lt; 2e-16 ***\nDESTIN_SZCBSZ01 -5.7340877  0.3333916   -17.199  &lt; 2e-16 ***\nDESTIN_SZCCSZ01 -0.0304192  0.0095920    -3.171 0.001518 ** \nDESTIN_SZCHSZ01 -0.2598507  0.0115311   -22.535  &lt; 2e-16 ***\nDESTIN_SZCHSZ02  0.3497750  0.0068334    51.186  &lt; 2e-16 ***\nDESTIN_SZCHSZ03  2.4550172  0.0050883   482.481  &lt; 2e-16 ***\nDESTIN_SZCKSZ01 -0.4691744  0.0063130   -74.319  &lt; 2e-16 ***\nDESTIN_SZCKSZ02 -0.9557084  0.0069331  -137.847  &lt; 2e-16 ***\nDESTIN_SZCKSZ03  0.0442112  0.0057117     7.740 9.91e-15 ***\nDESTIN_SZCKSZ04 -0.8592063  0.0081238  -105.764  &lt; 2e-16 ***\nDESTIN_SZCKSZ05 -1.1745333  0.0087305  -134.532  &lt; 2e-16 ***\nDESTIN_SZCKSZ06 -0.4982877  0.0085514   -58.269  &lt; 2e-16 ***\nDESTIN_SZCLSZ01  0.2665065  0.0059712    44.632  &lt; 2e-16 ***\nDESTIN_SZCLSZ02 -1.9758876  0.0150823  -131.007  &lt; 2e-16 ***\nDESTIN_SZCLSZ03 -0.9051310  0.0091479   -98.944  &lt; 2e-16 ***\nDESTIN_SZCLSZ04 -0.0828732  0.0061559   -13.462  &lt; 2e-16 ***\nDESTIN_SZCLSZ05 -1.1414780  0.0100760  -113.287  &lt; 2e-16 ***\nDESTIN_SZCLSZ06  0.3229402  0.0056269    57.392  &lt; 2e-16 ***\nDESTIN_SZCLSZ07 -0.4833612  0.0069777   -69.272  &lt; 2e-16 ***\nDESTIN_SZCLSZ08 -0.3219670  0.0075615   -42.580  &lt; 2e-16 ***\nDESTIN_SZCLSZ09  0.0564166  0.0080703     6.991 2.74e-12 ***\nDESTIN_SZDTSZ02 -1.6384236  0.0374725   -43.723  &lt; 2e-16 ***\nDESTIN_SZDTSZ03 -0.4021571  0.0152716   -26.334  &lt; 2e-16 ***\nDESTIN_SZDTSZ13 -1.2799441  0.0177095   -72.274  &lt; 2e-16 ***\nDESTIN_SZGLSZ01 -0.0190303  0.0060665    -3.137 0.001707 ** \nDESTIN_SZGLSZ02 -0.0308469  0.0058724    -5.253 1.50e-07 ***\nDESTIN_SZGLSZ03  0.6927638  0.0048456   142.969  &lt; 2e-16 ***\nDESTIN_SZGLSZ04  0.9325848  0.0049183   189.616  &lt; 2e-16 ***\nDESTIN_SZGLSZ05  0.8480056  0.0048801   173.768  &lt; 2e-16 ***\nDESTIN_SZHGSZ01  0.0652969  0.0047795    13.662  &lt; 2e-16 ***\nDESTIN_SZHGSZ02 -0.9498251  0.0066577  -142.667  &lt; 2e-16 ***\nDESTIN_SZHGSZ03 -1.4372499  0.0076387  -188.154  &lt; 2e-16 ***\nDESTIN_SZHGSZ04 -0.5236292  0.0055353   -94.599  &lt; 2e-16 ***\nDESTIN_SZHGSZ05 -0.5420295  0.0058099   -93.295  &lt; 2e-16 ***\nDESTIN_SZHGSZ06 -0.9054730  0.0067581  -133.983  &lt; 2e-16 ***\nDESTIN_SZHGSZ07  0.0215109  0.0054019     3.982 6.83e-05 ***\nDESTIN_SZHGSZ08 -0.0490979  0.0059206    -8.293  &lt; 2e-16 ***\nDESTIN_SZHGSZ09 -0.0711560  0.0062875   -11.317  &lt; 2e-16 ***\nDESTIN_SZHGSZ10 -3.5807154  0.0290642  -123.200  &lt; 2e-16 ***\nDESTIN_SZJESZ01 -0.4023638  0.0065057   -61.848  &lt; 2e-16 ***\nDESTIN_SZJESZ02 -0.7654353  0.0067096  -114.081  &lt; 2e-16 ***\nDESTIN_SZJESZ03 -0.8778812  0.0071238  -123.232  &lt; 2e-16 ***\nDESTIN_SZJESZ04 -1.1998075  0.0088733  -135.215  &lt; 2e-16 ***\nDESTIN_SZJESZ05 -1.5623652  0.0116898  -133.652  &lt; 2e-16 ***\nDESTIN_SZJESZ06  0.2311474  0.0055595    41.577  &lt; 2e-16 ***\nDESTIN_SZJESZ07 -1.2753348  0.0094838  -134.475  &lt; 2e-16 ***\nDESTIN_SZJESZ08 -0.7654533  0.0099306   -77.081  &lt; 2e-16 ***\nDESTIN_SZJESZ09  0.1637628  0.0074164    22.081  &lt; 2e-16 ***\nDESTIN_SZJESZ10  0.7394958  0.0091249    81.041  &lt; 2e-16 ***\nDESTIN_SZJESZ11  0.5157364  0.0086546    59.591  &lt; 2e-16 ***\nDESTIN_SZJWSZ01 -1.0165204  0.0083025  -122.435  &lt; 2e-16 ***\nDESTIN_SZJWSZ02 -0.8530646  0.0067851  -125.727  &lt; 2e-16 ***\nDESTIN_SZJWSZ03  0.5176135  0.0056449    91.695  &lt; 2e-16 ***\nDESTIN_SZJWSZ04  0.3427105  0.0058499    58.584  &lt; 2e-16 ***\nDESTIN_SZJWSZ05 -1.1695940  0.0080069  -146.073  &lt; 2e-16 ***\nDESTIN_SZJWSZ06 -0.7466462  0.0070240  -106.299  &lt; 2e-16 ***\nDESTIN_SZJWSZ07 -3.0124535  0.0333481   -90.334  &lt; 2e-16 ***\nDESTIN_SZJWSZ08 -0.4253502  0.0066584   -63.881  &lt; 2e-16 ***\nDESTIN_SZJWSZ09  0.9428005  0.0053190   177.251  &lt; 2e-16 ***\nDESTIN_SZKLSZ01 -0.2965013  0.0066422   -44.639  &lt; 2e-16 ***\nDESTIN_SZKLSZ02 -0.4921137  0.0067689   -72.702  &lt; 2e-16 ***\nDESTIN_SZKLSZ03 -0.8489213  0.0078294  -108.427  &lt; 2e-16 ***\nDESTIN_SZKLSZ04 -1.2656342  0.0099918  -126.667  &lt; 2e-16 ***\nDESTIN_SZKLSZ05 -0.3570126  0.0096300   -37.073  &lt; 2e-16 ***\nDESTIN_SZKLSZ06 -2.4764906  0.0390868   -63.359  &lt; 2e-16 ***\nDESTIN_SZKLSZ07 -0.7316189  0.0080994   -90.330  &lt; 2e-16 ***\nDESTIN_SZKLSZ08 -0.1115398  0.0061168   -18.235  &lt; 2e-16 ***\nDESTIN_SZLKSZ01 -1.4940710  0.0271518   -55.027  &lt; 2e-16 ***\nDESTIN_SZMDSZ01 -1.6101440  0.0231238   -69.631  &lt; 2e-16 ***\nDESTIN_SZMDSZ02 -0.9339318  0.0126277   -73.959  &lt; 2e-16 ***\nDESTIN_SZMDSZ03 -3.4868547  0.0303657  -114.829  &lt; 2e-16 ***\nDESTIN_SZMPSZ01 -0.4518483  0.0089869   -50.279  &lt; 2e-16 ***\nDESTIN_SZMPSZ02 -0.5868264  0.0073193   -80.176  &lt; 2e-16 ***\nDESTIN_SZMPSZ03  0.4805365  0.0059041    81.391  &lt; 2e-16 ***\nDESTIN_SZMUSZ02 -1.3837581  0.0218713   -63.268  &lt; 2e-16 ***\nDESTIN_SZNTSZ01 -3.0694691  0.0533346   -57.551  &lt; 2e-16 ***\nDESTIN_SZNTSZ02 -1.4992973  0.0130358  -115.014  &lt; 2e-16 ***\nDESTIN_SZNTSZ03 -0.5221236  0.0089923   -58.064  &lt; 2e-16 ***\nDESTIN_SZNTSZ05 -1.9751162  0.0282369   -69.948  &lt; 2e-16 ***\nDESTIN_SZNTSZ06 -3.9959411  0.0511214   -78.166  &lt; 2e-16 ***\nDESTIN_SZNVSZ01 -0.1126966  0.0057077   -19.745  &lt; 2e-16 ***\nDESTIN_SZNVSZ02 -0.0259250  0.0064427    -4.024 5.72e-05 ***\nDESTIN_SZNVSZ03 -0.0123214  0.0067692    -1.820 0.068725 .  \nDESTIN_SZNVSZ04 -1.3371298  0.0130261  -102.650  &lt; 2e-16 ***\nDESTIN_SZNVSZ05 -0.9686333  0.0101539   -95.395  &lt; 2e-16 ***\nDESTIN_SZPGSZ01 -1.1798309  0.0180543   -65.349  &lt; 2e-16 ***\nDESTIN_SZPGSZ02 -1.3289737  0.0085335  -155.736  &lt; 2e-16 ***\nDESTIN_SZPGSZ03 -0.1661373  0.0055166   -30.116  &lt; 2e-16 ***\nDESTIN_SZPGSZ04 -0.3046408  0.0058469   -52.103  &lt; 2e-16 ***\nDESTIN_SZPGSZ05 -1.5412612  0.0093261  -165.264  &lt; 2e-16 ***\nDESTIN_SZPLSZ01 -0.3439667  0.0083504   -41.192  &lt; 2e-16 ***\nDESTIN_SZPLSZ02 -1.7574919  0.0154244  -113.942  &lt; 2e-16 ***\nDESTIN_SZPLSZ03 -0.3455776  0.0112089   -30.831  &lt; 2e-16 ***\nDESTIN_SZPLSZ04 -2.0749385  0.0141153  -146.999  &lt; 2e-16 ***\nDESTIN_SZPLSZ05 -0.4855216  0.0134069   -36.214  &lt; 2e-16 ***\nDESTIN_SZPNSZ01  0.0117816  0.0083558     1.410 0.158543    \nDESTIN_SZPNSZ02  0.7389858  0.0089823    82.272  &lt; 2e-16 ***\nDESTIN_SZPNSZ03 -0.4708719  0.0098588   -47.761  &lt; 2e-16 ***\nDESTIN_SZPNSZ04  1.3156771  0.0111200   118.316  &lt; 2e-16 ***\nDESTIN_SZPNSZ05  0.9881886  0.0153169    64.516  &lt; 2e-16 ***\nDESTIN_SZPRSZ01 -1.0678999  0.0098295  -108.642  &lt; 2e-16 ***\nDESTIN_SZPRSZ02  0.0650279  0.0063927    10.172  &lt; 2e-16 ***\nDESTIN_SZPRSZ03  0.6348138  0.0050147   126.592  &lt; 2e-16 ***\nDESTIN_SZPRSZ04 -0.3640286  0.0097572   -37.309  &lt; 2e-16 ***\nDESTIN_SZPRSZ05  0.0380410  0.0062577     6.079 1.21e-09 ***\nDESTIN_SZPRSZ06  0.3153712  0.0068742    45.877  &lt; 2e-16 ***\nDESTIN_SZPRSZ07 -1.6669973  0.0145573  -114.513  &lt; 2e-16 ***\nDESTIN_SZPRSZ08 -0.6170648  0.0078424   -78.683  &lt; 2e-16 ***\nDESTIN_SZQTSZ01 -0.5496582  0.0098285   -55.925  &lt; 2e-16 ***\nDESTIN_SZQTSZ02 -0.7318114  0.0086807   -84.303  &lt; 2e-16 ***\nDESTIN_SZQTSZ03 -0.5893064  0.0084789   -69.503  &lt; 2e-16 ***\nDESTIN_SZQTSZ04 -0.7103906  0.0085341   -83.242  &lt; 2e-16 ***\nDESTIN_SZQTSZ05 -0.4721472  0.0078164   -60.405  &lt; 2e-16 ***\nDESTIN_SZQTSZ06 -0.6591466  0.0080069   -82.322  &lt; 2e-16 ***\nDESTIN_SZQTSZ07 -0.9540454  0.0126807   -75.236  &lt; 2e-16 ***\nDESTIN_SZQTSZ08  0.4508867  0.0064870    69.507  &lt; 2e-16 ***\nDESTIN_SZQTSZ09 -0.4061810  0.0075485   -53.810  &lt; 2e-16 ***\nDESTIN_SZQTSZ10  0.1351889  0.0068202    19.822  &lt; 2e-16 ***\nDESTIN_SZQTSZ11  0.3181553  0.0067958    46.816  &lt; 2e-16 ***\nDESTIN_SZQTSZ12 -0.1055766  0.0095576   -11.046  &lt; 2e-16 ***\nDESTIN_SZQTSZ13  0.5199663  0.0071928    72.290  &lt; 2e-16 ***\nDESTIN_SZQTSZ14  0.6086332  0.0078537    77.496  &lt; 2e-16 ***\nDESTIN_SZQTSZ15  1.3906866  0.0092250   150.753  &lt; 2e-16 ***\nDESTIN_SZRCSZ01 -0.0862091  0.0085363   -10.099  &lt; 2e-16 ***\nDESTIN_SZRCSZ06 -1.0186282  0.0211113   -48.250  &lt; 2e-16 ***\nDESTIN_SZRVSZ01 -1.5294454  0.0179337   -85.283  &lt; 2e-16 ***\nDESTIN_SZRVSZ02 -2.3607754  0.0355628   -66.383  &lt; 2e-16 ***\nDESTIN_SZRVSZ03 -1.5266254  0.0156276   -97.688  &lt; 2e-16 ***\nDESTIN_SZRVSZ04 -1.0986565  0.0168695   -65.127  &lt; 2e-16 ***\nDESTIN_SZRVSZ05 -2.4004418  0.0320917   -74.799  &lt; 2e-16 ***\nDESTIN_SZSBSZ01 -1.4023966  0.0109496  -128.078  &lt; 2e-16 ***\nDESTIN_SZSBSZ02 -1.3899893  0.0090891  -152.929  &lt; 2e-16 ***\nDESTIN_SZSBSZ03  0.4509008  0.0059864    75.321  &lt; 2e-16 ***\nDESTIN_SZSBSZ04  0.1796309  0.0070142    25.610  &lt; 2e-16 ***\nDESTIN_SZSBSZ05 -1.3159699  0.0096485  -136.391  &lt; 2e-16 ***\nDESTIN_SZSBSZ06 -1.7705263  0.0253064   -69.964  &lt; 2e-16 ***\nDESTIN_SZSBSZ07 -0.7471529  0.0238628   -31.310  &lt; 2e-16 ***\nDESTIN_SZSBSZ08  0.7884520  0.0069638   113.221  &lt; 2e-16 ***\nDESTIN_SZSBSZ09  0.0131702  0.0066350     1.985 0.047150 *  \nDESTIN_SZSESZ02 -0.7247347  0.0060626  -119.541  &lt; 2e-16 ***\nDESTIN_SZSESZ03  0.1032728  0.0048330    21.368  &lt; 2e-16 ***\nDESTIN_SZSESZ04 -1.0992420  0.0068328  -160.878  &lt; 2e-16 ***\nDESTIN_SZSESZ05 -0.8374712  0.0058155  -144.006  &lt; 2e-16 ***\nDESTIN_SZSESZ06 -0.5531619  0.0074766   -73.985  &lt; 2e-16 ***\nDESTIN_SZSESZ07 -3.0328672  0.0246371  -123.101  &lt; 2e-16 ***\nDESTIN_SZSGSZ01 -0.1933777  0.0068235   -28.340  &lt; 2e-16 ***\nDESTIN_SZSGSZ02 -0.3000845  0.0060284   -49.779  &lt; 2e-16 ***\nDESTIN_SZSGSZ03 -0.4322879  0.0057308   -75.433  &lt; 2e-16 ***\nDESTIN_SZSGSZ04 -0.1214792  0.0056548   -21.482  &lt; 2e-16 ***\nDESTIN_SZSGSZ05 -2.0309074  0.0114993  -176.611  &lt; 2e-16 ***\nDESTIN_SZSGSZ06  0.6592095  0.0046364   142.182  &lt; 2e-16 ***\nDESTIN_SZSGSZ07 -0.4618538  0.0062027   -74.460  &lt; 2e-16 ***\nDESTIN_SZSISZ01 -0.5227257  0.0293399   -17.816  &lt; 2e-16 ***\nDESTIN_SZSKSZ01 -0.4797341  0.0091087   -52.668  &lt; 2e-16 ***\nDESTIN_SZSKSZ02  0.8477357  0.0067821   124.996  &lt; 2e-16 ***\nDESTIN_SZSKSZ03 -0.2477566  0.0074817   -33.115  &lt; 2e-16 ***\nDESTIN_SZSKSZ04 -1.3315992  0.0167055   -79.710  &lt; 2e-16 ***\nDESTIN_SZSKSZ05 -0.3519096  0.0131326   -26.797  &lt; 2e-16 ***\nDESTIN_SZSLSZ01 -0.8570431  0.0102100   -83.941  &lt; 2e-16 ***\nDESTIN_SZSLSZ04 -0.9949105  0.0088280  -112.699  &lt; 2e-16 ***\nDESTIN_SZSRSZ01 -1.0260696  0.0154393   -66.458  &lt; 2e-16 ***\nDESTIN_SZTHSZ01 -4.2040410  0.0404795  -103.856  &lt; 2e-16 ***\nDESTIN_SZTHSZ03 -2.4907000  0.0264056   -94.325  &lt; 2e-16 ***\nDESTIN_SZTHSZ04 -3.0701470  0.0244975  -125.325  &lt; 2e-16 ***\nDESTIN_SZTHSZ06 -2.5308161  0.0169699  -149.135  &lt; 2e-16 ***\nDESTIN_SZTMSZ01 -0.2354889  0.0067201   -35.042  &lt; 2e-16 ***\nDESTIN_SZTMSZ02  1.7379292  0.0044573   389.906  &lt; 2e-16 ***\nDESTIN_SZTMSZ03  0.9112458  0.0048718   187.043  &lt; 2e-16 ***\nDESTIN_SZTMSZ04  1.0731075  0.0048626   220.685  &lt; 2e-16 ***\nDESTIN_SZTMSZ05  0.6398583  0.0067321    95.046  &lt; 2e-16 ***\nDESTIN_SZTNSZ01 -0.3500456  0.0083835   -41.754  &lt; 2e-16 ***\nDESTIN_SZTNSZ02 -1.0573515  0.0112412   -94.060  &lt; 2e-16 ***\nDESTIN_SZTNSZ03 -1.4069979  0.0132733  -106.002  &lt; 2e-16 ***\nDESTIN_SZTNSZ04 -0.3616604  0.0085207   -42.445  &lt; 2e-16 ***\nDESTIN_SZTPSZ01 -0.5919243  0.0071153   -83.190  &lt; 2e-16 ***\nDESTIN_SZTPSZ02  0.7083350  0.0046540   152.198  &lt; 2e-16 ***\nDESTIN_SZTPSZ03 -0.5746433  0.0069625   -82.534  &lt; 2e-16 ***\nDESTIN_SZTPSZ04 -1.5821259  0.0084517  -187.196  &lt; 2e-16 ***\nDESTIN_SZTPSZ05 -1.1796256  0.0073039  -161.505  &lt; 2e-16 ***\nDESTIN_SZTPSZ06 -0.3968272  0.0077295   -51.339  &lt; 2e-16 ***\nDESTIN_SZTPSZ07 -2.1796617  0.0135199  -161.219  &lt; 2e-16 ***\nDESTIN_SZTPSZ08 -1.2568483  0.0107267  -117.170  &lt; 2e-16 ***\nDESTIN_SZTPSZ09 -0.2446623  0.0080840   -30.265  &lt; 2e-16 ***\nDESTIN_SZTPSZ10 -1.2542191  0.0102049  -122.904  &lt; 2e-16 ***\nDESTIN_SZTPSZ11 -0.0886883  0.0062888   -14.102  &lt; 2e-16 ***\nDESTIN_SZTPSZ12 -0.7211823  0.0075086   -96.048  &lt; 2e-16 ***\nDESTIN_SZTSSZ01 -1.6271921  0.0238498   -68.227  &lt; 2e-16 ***\nDESTIN_SZTSSZ02 -0.3340439  0.0169137   -19.750  &lt; 2e-16 ***\nDESTIN_SZTSSZ03  0.3924580  0.0111060    35.338  &lt; 2e-16 ***\nDESTIN_SZTSSZ04  0.4169932  0.0114926    36.283  &lt; 2e-16 ***\nDESTIN_SZTSSZ05  1.3206287  0.0120381   109.704  &lt; 2e-16 ***\nDESTIN_SZTSSZ06  2.4023725  0.0192840   124.579  &lt; 2e-16 ***\nDESTIN_SZWCSZ01  2.0697378  0.0061379   337.206  &lt; 2e-16 ***\nDESTIN_SZWCSZ02 -2.0934025  0.0134782  -155.318  &lt; 2e-16 ***\nDESTIN_SZWCSZ03 -3.0670149  0.0349748   -87.692  &lt; 2e-16 ***\nDESTIN_SZWDSZ01  1.0113215  0.0051461   196.522  &lt; 2e-16 ***\nDESTIN_SZWDSZ02 -1.3383793  0.0076482  -174.993  &lt; 2e-16 ***\nDESTIN_SZWDSZ03  0.3394361  0.0060396    56.202  &lt; 2e-16 ***\nDESTIN_SZWDSZ04 -0.8324928  0.0086019   -96.780  &lt; 2e-16 ***\nDESTIN_SZWDSZ05 -0.8279090  0.0083251   -99.447  &lt; 2e-16 ***\nDESTIN_SZWDSZ06 -0.2252899  0.0061074   -36.888  &lt; 2e-16 ***\nDESTIN_SZWDSZ07 -1.3638599  0.0077990  -174.877  &lt; 2e-16 ***\nDESTIN_SZWDSZ08 -0.4350176  0.0077566   -56.083  &lt; 2e-16 ***\nDESTIN_SZWDSZ09  0.5461048  0.0060745    89.901  &lt; 2e-16 ***\nDESTIN_SZYSSZ01  0.0243093  0.0053476     4.546 5.47e-06 ***\nDESTIN_SZYSSZ02 -0.3398962  0.0065947   -51.540  &lt; 2e-16 ***\nDESTIN_SZYSSZ03 -0.3694187  0.0074032   -49.900  &lt; 2e-16 ***\nDESTIN_SZYSSZ04 -0.5222848  0.0067396   -77.495  &lt; 2e-16 ***\nDESTIN_SZYSSZ05 -1.5460539  0.0124899  -123.784  &lt; 2e-16 ***\nDESTIN_SZYSSZ06 -1.5556892  0.0127640  -121.881  &lt; 2e-16 ***\nDESTIN_SZYSSZ07 -0.8673403  0.0167723   -51.713  &lt; 2e-16 ***\nDESTIN_SZYSSZ08  0.5389364  0.0052540   102.577  &lt; 2e-16 ***\nDESTIN_SZYSSZ09  0.1199483  0.0055235    21.716  &lt; 2e-16 ***\nlog(dist)       -1.8906989  0.0005319 -3554.786  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 36117615  on 14273  degrees of freedom\nResidual deviance:  8091747  on 13715  degrees of freedom\nAIC: 8177420\n\nNumber of Fisher Scoring iterations: 7\n\n\nThe R-squared value is then calculated to examine how the constraints hold for destinations this time.\nNote that there is a relatively greater improvement in the R-squared value.\n\nCalcRSquared(dbcSIM$data$TRIPS, dbcSIM$fitted.values)\n\n[1] 0.6883675\n\n\n\n\n\nAnother useful model performance measure for continuous dependent variable is the Root Mean Squared Error. The compare_performance() in the performance package is used to compare the different models.\nA list called model_list is created to hold the four models.\n\nmodel_list = list(unconstrained=uncSIM,\n                   originConstrained=orcSIM,\n                   destinationConstrained=decSIM,\n                   doublyConstrained=dbcSIM)\n\nThe RMSE of the models are computed using the compare_performance() function. The output reveals that doubly constrained SIM is the best model among the four SIMs because it has the smallest RMSE value of 1487.111.\n\ncompare_performance(model_list,\n                    metrics = \"RMSE\")\n\n# Comparison of Model Performance Indices\n\nName                   | Model |     RMSE\n-----------------------------------------\nunconstrained          |   glm | 2429.978\noriginConstrained      |   glm | 2057.579\ndestinationConstrained |   glm | 1891.724\ndoublyConstrained      |   glm | 1487.111\n\n\n\n\n\nThe observed values and the fitted values are visualised below.\nThe fitted values from each model are extracted.\n\ndf = as.data.frame(uncSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\nThe values are then joined to the SIM_data data.frame.\n\nSIM_data = SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(uncTRIPS = \"uncSIM$fitted.values\")\n\nThe same steps are repeated for the three other SIMs - Origin Constrained SIM (i.e. orcSIM), Destination Constrained SIM (i.e. decSIM), and Doubly Constrained SIM (i.e. dbcSIM).\n\ndf = as.data.frame(orcSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\nSIM_data = SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(orcTRIPS = \"orcSIM$fitted.values\")\n\ndf = as.data.frame(decSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\nSIM_data = SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(decTRIPS = \"decSIM$fitted.values\")\n\ndf = as.data.frame(dbcSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\nSIM_data = SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(dbcTRIPS = \"dbcSIM$fitted.values\")\n\nThe plots are then visualised below:\n\nunc_p = ggplot(data = SIM_data,\n                aes(x = uncTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\norc_p = ggplot(data = SIM_data,\n                aes(x = orcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndec_p = ggplot(data = SIM_data,\n                aes(x = decTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndbc_p = ggplot(data = SIM_data,\n                aes(x = dbcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\nggarrange(unc_p, orc_p, dec_p, dbc_p,\n          ncol = 2,\n          nrow = 2)\n\n\n\n\n~~~ End of In-class Exercise 3 ~~~"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#overview",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#overview",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "Spatial Interaction Models (SIMs) are mathematical models for estimating flows between spatial entities. They were developed by Alan Wilson in the late 1960s and early 1970, with considerable uptake and refinement for transport modelling since then (Boyce and Williams, 2015).\nThere are four main types of traditional SIMs (Wilson 1971):\n\nUnconstrained\nProduction-constrained\nAttraction-constrained\nDoubly-constrained\n\nOrdinary least square (OLS), log-normal, Poisson and negative binomial (NB) regression methods have been used extensively to calibrate OD flow models by processing flow data as different types of dependent variables.\nIn this in-class exercise, the appropriate R packages are used to calibrate SIM by using there four regression methods.\nNote: Calibration is the process of adjusting parameters in the model to try and get the estimates to agree with the observed data as much as possible. Adjusting the parameters is the sort of iterative process that computers are particularly good at and the goodness-of-fit statistics can be used to indicate when the optimum solution is found. Historically, this process required a researcher with the requisite programming skills to write a computer algorithm to iteratively adjust each parameter, check the goodness-of-fit, and then start all over again until the goodness-of-fit statistic was maximised or minimised (Adam Dennett, 2018)."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#the-case-study-and-data",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#the-case-study-and-data",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "In this in-class exercise, a SIM is calibrated to determine the factors affecting the public bus passenger flows during the morning peak in Singapore."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#getting-started",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#getting-started",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "For the purpose of this exercise, the following R packages are used:\n\nsf for importing, integrating, processing and transforming geospatial data;\ntidyverse for importing, integrating, wrangling and visualising data;\ntmap for creating thematic maps;\nsp for handling spatial data in computationally efficient ways;\nperformance for computing measures to assess model quality;\nreshape2 for handling matrix format; and\nggpubr for publication ready plots.\n\n\npacman::p_load(tmap, sf, sp,\n               performance, reshape2,\n               ggpubr, tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#the-data",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#the-data",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "This exercise is a continuation of Chapter 15: Processing and Visualising Flow Data and the following data will be used:\n\nod_data.rds: weekday morning peak passenger flows at planning subzone level.\nmpsz.rds: URA Master Plan 2019 Planning Subzone boundary in simple feature tibble data frame format.\n\nBesides these two data sets, an additional attribute data file called pop.csv will be used."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#computing-distance-matrix",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#computing-distance-matrix",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "In spatial interaction, a distance matrix is a table that shows the distance between pairs of locations. For example, in the table below we can see an Euclidean distance of 3926.0025 between MESZ01 and RVSZ05, of 3939.1079 between MESZ01 and SRSZ01, and so on. By definition, an location’s distance from itself, which is shown in the main diagonal of the table, is 0.\nIn this section,a distance matrix is computed by using the mpsz, which is first imported as a sf tibble dataframe object class.\n\nmpsz = read_rds(\"data/rds/mpsz.rds\")\nmpsz\n\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26...\n\n\n\n\nThere are at least two ways to compute the required distance matrix. One is based on sf and the other is based on sp. Past experience shown that computing distance matrix by using sf function took a relatively longer time than the sp method, especially when the data set is large. In view of this, the sp method is used in the code chunks below.\nThe as() function with “Class” argument set as “Spatial” is used to convert mpsz from sf tibble data frame to SpatialPolygonsDataFrame of sp object\n\nStudent Note: For SpatialPolygonsDataFrame, in order to select a variable within a data.frame within the object, we will need to use something like mpsz@data$var_name.\n\n\nmpsz_sp = as(mpsz, \"Spatial\")\nmpsz_sp\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 332 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 6\nnames       : SUBZONE_N, SUBZONE_C, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C \nmin values  : ADMIRALTY,    AMSZ01, ANG MO KIO,         AM, CENTRAL REGION,       CR \nmax values  :    YUNNAN,    YSSZ09,     YISHUN,         YS,    WEST REGION,       WR \n\n\n\n\n\nThe spDists() function in the sp package is used to compute the Euclidean distance between the centroids of the planning subzones.\n\nStudent Note: Calculating the distance between centroids is computationally less intensive compared to more detailed spatial analyses. However, using centroid-to-centroid distance is a simplification and may not always capture the full complexity of spatial relationships.\n\nNotice that the output dist is a matrix object class of R. Also, notice that the column headers and row headers are not labeled with the planning subzone codes.\n\nStudent Note:\n\nIf longlat = TRUE, longitude and latitude are used to calculate the distance.\ndist is a matrix 332 by 332 (based on 332 observations from mpsz).\n\n\n\ndist = spDists(mpsz_sp, \n                longlat = FALSE)\nhead(dist, n=c(10, 10))\n\n           [,1]       [,2]      [,3]      [,4]       [,5]      [,6]      [,7]\n [1,]     0.000  3926.0025  3939.108 20252.964  2989.9839  1431.330 19211.836\n [2,]  3926.003     0.0000   305.737 16513.865   951.8314  5254.066 16242.523\n [3,]  3939.108   305.7370     0.000 16412.062  1045.9088  5299.849 16026.146\n [4,] 20252.964 16513.8648 16412.062     0.000 17450.3044 21665.795  7229.017\n [5,]  2989.984   951.8314  1045.909 17450.304     0.0000  4303.232 17020.916\n [6,]  1431.330  5254.0664  5299.849 21665.795  4303.2323     0.000 20617.082\n [7,] 19211.836 16242.5230 16026.146  7229.017 17020.9161 20617.082     0.000\n [8,] 14960.942 12749.4101 12477.871 11284.279 13336.0421 16281.453  5606.082\n [9,]  7515.256  7934.8082  7649.776 18427.503  7801.6163  8403.896 14810.930\n[10,]  6391.342  4975.0021  4669.295 15469.566  5226.8731  7707.091 13111.391\n           [,8]      [,9]     [,10]\n [1,] 14960.942  7515.256  6391.342\n [2,] 12749.410  7934.808  4975.002\n [3,] 12477.871  7649.776  4669.295\n [4,] 11284.279 18427.503 15469.566\n [5,] 13336.042  7801.616  5226.873\n [6,] 16281.453  8403.896  7707.091\n [7,]  5606.082 14810.930 13111.391\n [8,]     0.000  9472.024  8575.490\n [9,]  9472.024     0.000  3780.800\n[10,]  8575.490  3780.800     0.000\n\n\n\n\n\nA list sorted according to the the distance matrix by planning sub-zone code is created to hold the sub-zone codes.\n\nsz_names = mpsz$SUBZONE_C\n\nNext, the sub-zone codes are attached to row and column to facilitate distance matrix matching later on.\n\ncolnames(dist) = paste0(sz_names)\nrownames(dist) = paste0(sz_names)\n\n\n\n\nNext, the distance matrix is pivoted into a long table by using the row and column subzone codes.\nNote that the within zone (i.e., when Var1 and Var2 are the same) distance is 0.\n\nStudent Note: Do not use code to sort the data, otherwise the sequence will be messed up.\n\n\ndistPair = melt(dist) %&gt;%\n  rename(dist = value)\nhead(distPair, 10)\n\n     Var1   Var2      dist\n1  MESZ01 MESZ01     0.000\n2  RVSZ05 MESZ01  3926.003\n3  SRSZ01 MESZ01  3939.108\n4  WISZ01 MESZ01 20252.964\n5  MUSZ02 MESZ01  2989.984\n6  MPSZ05 MESZ01  1431.330\n7  WISZ03 MESZ01 19211.836\n8  WISZ02 MESZ01 14960.942\n9  SISZ02 MESZ01  7515.256\n10 SISZ01 MESZ01  6391.342\n\n\n\n\n\nA constant value is then used to replace the intra-zonal distance of 0.\nThe minimum value of the inter-zonal distance is derived using the summary() function. The value is 173.8. Hence, by quick estimation, an intra-zonal distance proxy value of less than half of 173.8 would be appropriate.\n\ndistPair %&gt;%\n  filter(dist &gt; 0) %&gt;%\n  summary()\n\n      Var1             Var2             dist        \n MESZ01 :   331   MESZ01 :   331   Min.   :  173.8  \n RVSZ05 :   331   RVSZ05 :   331   1st Qu.: 7149.5  \n SRSZ01 :   331   SRSZ01 :   331   Median :11890.0  \n WISZ01 :   331   WISZ01 :   331   Mean   :12229.4  \n MUSZ02 :   331   MUSZ02 :   331   3rd Qu.:16401.7  \n MPSZ05 :   331   MPSZ05 :   331   Max.   :49894.4  \n (Other):107906   (Other):107906                    \n\n\nHence, a constant distance value of 50m is added as the intra-zonal distance. The resulting data.frame is checked using the summary() function, showing that the minimum distance is now 50m.\n\ndistPair$dist = ifelse(distPair$dist == 0,\n                        50, distPair$dist)\n\ndistPair %&gt;%\n  summary()\n\n      Var1             Var2             dist      \n MESZ01 :   332   MESZ01 :   332   Min.   :   50  \n RVSZ05 :   332   RVSZ05 :   332   1st Qu.: 7097  \n SRSZ01 :   332   SRSZ01 :   332   Median :11864  \n WISZ01 :   332   WISZ01 :   332   Mean   :12193  \n MUSZ02 :   332   MUSZ02 :   332   3rd Qu.:16388  \n MPSZ05 :   332   MPSZ05 :   332   Max.   :49894  \n (Other):108232   (Other):108232                  \n\n\nThe origin (Var1) and destination (Var2) fields are renamed, and the output is saved as in rds format for future use.\n\ndistPair = distPair %&gt;%\n  rename(orig = Var1,\n         dest = Var2)\n\nwrite_rds(distPair, \"data/rds/distPair.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#preparing-flow-data",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#preparing-flow-data",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "The code chunk below is used import the od_data.\n\nod_data = read_rds(\"data/rds/od_data.rds\")\n\nThe total passenger trip between and within planning subzones is computed using group_by() and summarise() functions in the dplyr package. The output is all flow_data, which is shown below using the head() function.\n\nflow_data = od_data %&gt;%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %&gt;% \n  summarize(TRIPS = sum(MORNING_PEAK)) \n\nhead(flow_data, 10)\n\n# A tibble: 10 × 3\n# Groups:   ORIGIN_SZ [1]\n   ORIGIN_SZ DESTIN_SZ TRIPS\n   &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;\n 1 AMSZ01    AMSZ01     2694\n 2 AMSZ01    AMSZ02    10591\n 3 AMSZ01    AMSZ03    14980\n 4 AMSZ01    AMSZ04     3106\n 5 AMSZ01    AMSZ05     7734\n 6 AMSZ01    AMSZ06     2306\n 7 AMSZ01    AMSZ07     1824\n 8 AMSZ01    AMSZ08     2734\n 9 AMSZ01    AMSZ09     2300\n10 AMSZ01    AMSZ10      164\n\n\n\n\nA new field, “FlowNoIntra”, is created to either hold the value 0 if there was an intra-zonal flow, or hold the value of the number of inter-zonal trips.\nAnother new field, “offset”, is created to hold the value of 0.000001 if there was intra-zonal flow, or hold the value of 1 if there was no inter-zonal flow.\n\nflow_data$FlowNoIntra = ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0, flow_data$TRIPS)\n\nflow_data$offset = ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, \n  0.000001, 1)\n\n\n\n\nThe data value type of “ORINGIN_SZ” and “DESTIN_SZ” in the flow_data are converted to factor data type.\n\nflow_data$ORIGIN_SZ = as.factor(flow_data$ORIGIN_SZ)\nflow_data$DESTIN_SZ = as.factor(flow_data$DESTIN_SZ)\n\nThen, the left_join() function in the dplyr package is used to combine the flow_data data.frame and the distPair data.frame. The output is flow_data1.\n\nflow_data1 = flow_data %&gt;%\n  left_join (distPair,\n             by = c(\"ORIGIN_SZ\" = \"orig\",\n                    \"DESTIN_SZ\" = \"dest\"))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#preparing-origin-and-destination-attributes",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#preparing-origin-and-destination-attributes",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "The pre-prepared population data by planning sub-zone is imported using the read_csv() function in the readr package as pop, which is a sf tibble data.frame. It divides the population into three age groups: ages 7-12, 13-24, and 25-64.\n\npop = read_csv(\"data/aspatial/pop.csv\")\n\n\n\n\nThe pop data.frame is then joined with the mpsz data.frame. The relevant columns are selected, and two are renamed.\n\npop = pop %&gt;%\n  left_join(mpsz,\n            by = c(\"PA\" = \"PLN_AREA_N\",\n                   \"SZ\" = \"SUBZONE_N\")) %&gt;%\n  select(1:6) %&gt;%\n  rename(SZ_NAME = SZ,\n         SZ = SUBZONE_C)\n\n\n\n\nThe origin attribute is then prepared by combining flow_data1 and pop by matching “ORIGIN_SZ” to “SZ”\n\nflow_data1 = flow_data1 %&gt;%\n  left_join(pop,\n            by = c(ORIGIN_SZ = \"SZ\")) %&gt;%\n  rename(ORIGIN_AGE7_12 = AGE7_12,\n         ORIGIN_AGE13_24 = AGE13_24,\n         ORIGIN_AGE25_64 = AGE25_64) %&gt;%\n  select(-c(PA, SZ_NAME))\n\n\n\n\nThe destination attribute is then prepared by combining flow_data1 and pop by matching “DESTIN_SZ” to “SZ”\n\nflow_data1 = flow_data1 %&gt;%\n  left_join(pop,\n            by = c(DESTIN_SZ = \"SZ\")) %&gt;%\n  rename(DESTIN_AGE7_12 = AGE7_12,\n         DESTIN_AGE13_24 = AGE13_24,\n         DESTIN_AGE25_64 = AGE25_64) %&gt;%\n  select(-c(PA, SZ_NAME))\n\nThe output data file is then saved as SIM_data in rds data file format.\n\nwrite_rds(flow_data1, \"data/rds/SIM_data\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#calibrating-spatial-interaction-models",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#calibrating-spatial-interaction-models",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "SIMs are calibrated using Poisson Regression methods below.\n\n\nThe modelling data in rds file format is first imported.\n\nSIM_data = read_rds(\"data/rds/SIM_data.rds\")\n\n\n\n\nThen, the distribution of the dependent variable (i.e. “TRIPS”) is plotted by using the histogram method.\nThe historgram shows that the distribution is highly skewed and does not resemble normal distribution.\n\nggplot(data = SIM_data,\n       aes(x = TRIPS)) +\n  geom_histogram()\n\n\n\n\nThe relation between the dependent variable and one of the key independent variable in SIM, namely distance is then visualised using the scatterplot method.\nThe scatterplot shows that their relationship hardly resembles a linear relationship.\n\nggplot(data = SIM_data,\n       aes(x = dist,\n           y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\nHowever, if the log transformed version of both variables are plotted, the result better resembles a linear relationship.\n\nggplot(data = SIM_data,\n       aes(x = log(dist),\n           y = log(TRIPS))) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\n\n\n\nSince Poisson Regression is based on log transformation, and log 0 is undefined, it is important for us to ensure that there are no zero values in the explanatory variables.\nThe summary() function is used to compute the summary statistics of all variables in SIM_data data.frame. This revealed that the variables “ORIGIN_AGE7_12”, “ORIGIN_AGE13_24”, “ORIGIN_AGE25_64”, “DESTIN_AGE7_12”, “DESTIN_AGE13_24”, “DESTIN_AGE25_64” have zero values.\n\nsummary(SIM_data)\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS           FlowNoIntra      \n Length:14274       Length:14274       Min.   :     1.0   Min.   :     1.0  \n Class :character   Class :character   1st Qu.:    11.0   1st Qu.:    11.0  \n Mode  :character   Mode  :character   Median :    56.0   Median :    56.0  \n                                       Mean   :   664.3   Mean   :   664.3  \n                                       3rd Qu.:   296.0   3rd Qu.:   296.0  \n                                       Max.   :104167.0   Max.   :104167.0  \n     offset       dist         ORIGIN_AGE7_12 ORIGIN_AGE13_24 ORIGIN_AGE25_64\n Min.   :1   Min.   :  173.8   Min.   :   0   Min.   :    0   Min.   :    0  \n 1st Qu.:1   1st Qu.: 3465.4   1st Qu.: 240   1st Qu.:  460   1st Qu.: 2210  \n Median :1   Median : 6121.0   Median : 710   Median : 1400   Median : 7030  \n Mean   :1   Mean   : 6951.8   Mean   :1037   Mean   : 2278   Mean   :10536  \n 3rd Qu.:1   3rd Qu.: 9725.1   3rd Qu.:1500   3rd Qu.: 3282   3rd Qu.:15830  \n Max.   :1   Max.   :26135.8   Max.   :6340   Max.   :16380   Max.   :74610  \n DESTIN_AGE7_12 DESTIN_AGE13_24 DESTIN_AGE25_64\n Min.   :   0   Min.   :    0   Min.   :    0  \n 1st Qu.: 250   1st Qu.:  460   1st Qu.: 2210  \n Median : 720   Median : 1430   Median : 7120  \n Mean   :1040   Mean   : 2305   Mean   :10648  \n 3rd Qu.:1500   3rd Qu.: 3290   3rd Qu.:15830  \n Max.   :6340   Max.   :16380   Max.   :74610  \n\n\nIn view of this, these zero values are replaced with the value of 0.99.\n\nSIM_data$DESTIN_AGE7_12 = ifelse(\n  SIM_data$DESTIN_AGE7_12 == 0,\n  0.99, SIM_data$DESTIN_AGE7_12)\nSIM_data$DESTIN_AGE13_24 = ifelse(\n  SIM_data$DESTIN_AGE13_24 == 0,\n  0.99, SIM_data$DESTIN_AGE13_24)\nSIM_data$DESTIN_AGE25_64 = ifelse(\n  SIM_data$DESTIN_AGE25_64 == 0,\n  0.99, SIM_data$DESTIN_AGE25_64)\nSIM_data$ORIGIN_AGE7_12 = ifelse(\n  SIM_data$ORIGIN_AGE7_12 == 0,\n  0.99, SIM_data$ORIGIN_AGE7_12)\nSIM_data$ORIGIN_AGE13_24 = ifelse(\n  SIM_data$ORIGIN_AGE13_24 == 0,\n  0.99, SIM_data$ORIGIN_AGE13_24)\nSIM_data$ORIGIN_AGE25_64 = ifelse(\n  SIM_data$ORIGIN_AGE25_64 == 0,\n  0.99, SIM_data$ORIGIN_AGE25_64)\n\nsummary(SIM_data)\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS           FlowNoIntra      \n Length:14274       Length:14274       Min.   :     1.0   Min.   :     1.0  \n Class :character   Class :character   1st Qu.:    11.0   1st Qu.:    11.0  \n Mode  :character   Mode  :character   Median :    56.0   Median :    56.0  \n                                       Mean   :   664.3   Mean   :   664.3  \n                                       3rd Qu.:   296.0   3rd Qu.:   296.0  \n                                       Max.   :104167.0   Max.   :104167.0  \n     offset       dist         ORIGIN_AGE7_12    ORIGIN_AGE13_24   \n Min.   :1   Min.   :  173.8   Min.   :   0.99   Min.   :    0.99  \n 1st Qu.:1   1st Qu.: 3465.4   1st Qu.: 240.00   1st Qu.:  460.00  \n Median :1   Median : 6121.0   Median : 710.00   Median : 1400.00  \n Mean   :1   Mean   : 6951.8   Mean   :1036.73   Mean   : 2278.59  \n 3rd Qu.:1   3rd Qu.: 9725.1   3rd Qu.:1500.00   3rd Qu.: 3282.50  \n Max.   :1   Max.   :26135.8   Max.   :6340.00   Max.   :16380.00  \n ORIGIN_AGE25_64    DESTIN_AGE7_12    DESTIN_AGE13_24    DESTIN_AGE25_64   \n Min.   :    0.99   Min.   :   0.99   Min.   :    0.99   Min.   :    0.99  \n 1st Qu.: 2210.00   1st Qu.: 250.00   1st Qu.:  460.00   1st Qu.: 2210.00  \n Median : 7030.00   Median : 720.00   Median : 1430.00   Median : 7120.00  \n Mean   :10535.93   Mean   :1039.98   Mean   : 2305.33   Mean   :10647.95  \n 3rd Qu.:15830.00   3rd Qu.:1500.00   3rd Qu.: 3290.00   3rd Qu.:15830.00  \n Max.   :74610.00   Max.   :6340.00   Max.   :16380.00   Max.   :74610.00  \n\n\n\n\n\nAn unconstrained SIM is calibrated below by using the glm() function of the stats package. The explanatory variables are origin population by different age cohorts (e.g., “ORIGIN_AGE25_64”), destination population by different age cohorts (e.g., “DESTIN_AGE25_64”), and the distance between the origin and destination in km (i.e., “dist”).\n\nuncSIM = glm(formula = TRIPS ~ \n                log(ORIGIN_AGE25_64) + \n                log(DESTIN_AGE25_64) +\n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nuncSIM\n\n\nCall:  glm(formula = TRIPS ~ log(ORIGIN_AGE25_64) + log(DESTIN_AGE25_64) + \n    log(dist), family = poisson(link = \"log\"), data = SIM_data, \n    na.action = na.exclude)\n\nCoefficients:\n         (Intercept)  log(ORIGIN_AGE25_64)  log(DESTIN_AGE25_64)  \n            17.00287               0.21001               0.01289  \n           log(dist)  \n            -1.51785  \n\nDegrees of Freedom: 14273 Total (i.e. Null);  14270 Residual\nNull Deviance:      36120000 \nResidual Deviance: 19960000     AIC: 20040000\n\n\n\n\n\nThe R-Squared value is calculated to measure how much variation of the trips can be accounted by the unconstrained SIM.\n\nCalcRSquared = function(observed, estimated){\n  r = cor(observed, estimated)\n  R2 = r^2\n  R2\n}\n\nCalcRSquared(uncSIM$data$TRIPS, uncSIM$fitted.values)\n\n[1] 0.1694734\n\nr2_mcfadden(uncSIM)\n\n# R2 for Generalized Linear Regression\n       R2: 0.446\n  adj. R2: 0.446\n\n\n\n\n\nAn origin constrained SIM is fitted.\n\norcSIM = glm(formula = TRIPS ~ \n                 ORIGIN_SZ +\n                 log(DESTIN_AGE25_64) +\n                 log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(orcSIM)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + log(DESTIN_AGE25_64) + log(dist), \n    family = poisson(link = \"log\"), data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                       Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)          19.9309957  0.0054015  3689.887  &lt; 2e-16 ***\nORIGIN_SZAMSZ02       0.6805710  0.0052686   129.175  &lt; 2e-16 ***\nORIGIN_SZAMSZ03       0.3597850  0.0054884    65.554  &lt; 2e-16 ***\nORIGIN_SZAMSZ04      -0.1106566  0.0060027   -18.434  &lt; 2e-16 ***\nORIGIN_SZAMSZ05      -0.3140561  0.0067998   -46.186  &lt; 2e-16 ***\nORIGIN_SZAMSZ06       0.0634425  0.0060258    10.528  &lt; 2e-16 ***\nORIGIN_SZAMSZ07      -1.1301580  0.0110298  -102.464  &lt; 2e-16 ***\nORIGIN_SZAMSZ08      -0.6330394  0.0102949   -61.491  &lt; 2e-16 ***\nORIGIN_SZAMSZ09       0.1064915  0.0063450    16.784  &lt; 2e-16 ***\nORIGIN_SZAMSZ10       0.5061899  0.0053889    93.931  &lt; 2e-16 ***\nORIGIN_SZAMSZ11      -1.3167911  0.0144870   -90.895  &lt; 2e-16 ***\nORIGIN_SZAMSZ12      -1.5103004  0.0127453  -118.499  &lt; 2e-16 ***\nORIGIN_SZBDSZ01       1.3626004  0.0051433   264.929  &lt; 2e-16 ***\nORIGIN_SZBDSZ02       0.9554084  0.0059655   160.156  &lt; 2e-16 ***\nORIGIN_SZBDSZ03       1.1476190  0.0054278   211.433  &lt; 2e-16 ***\nORIGIN_SZBDSZ04       2.0110410  0.0046344   433.940  &lt; 2e-16 ***\nORIGIN_SZBDSZ05       1.0658940  0.0053976   197.477  &lt; 2e-16 ***\nORIGIN_SZBDSZ06       1.2719222  0.0054774   232.213  &lt; 2e-16 ***\nORIGIN_SZBDSZ07      -0.5053039  0.0111553   -45.297  &lt; 2e-16 ***\nORIGIN_SZBDSZ08      -0.3556193  0.0102947   -34.544  &lt; 2e-16 ***\nORIGIN_SZBKSZ01      -0.3606399  0.0075473   -47.784  &lt; 2e-16 ***\nORIGIN_SZBKSZ02       0.1357265  0.0061394    22.107  &lt; 2e-16 ***\nORIGIN_SZBKSZ03       0.4101999  0.0058983    69.545  &lt; 2e-16 ***\nORIGIN_SZBKSZ04      -0.3418645  0.0070764   -48.310  &lt; 2e-16 ***\nORIGIN_SZBKSZ05      -0.2986750  0.0074073   -40.322  &lt; 2e-16 ***\nORIGIN_SZBKSZ06      -0.2637855  0.0068739   -38.375  &lt; 2e-16 ***\nORIGIN_SZBKSZ07       0.5498323  0.0051476   106.813  &lt; 2e-16 ***\nORIGIN_SZBKSZ08      -0.0527393  0.0061457    -8.582  &lt; 2e-16 ***\nORIGIN_SZBKSZ09      -0.1564691  0.0067300   -23.249  &lt; 2e-16 ***\nORIGIN_SZBLSZ01      -1.7551329  0.0176599   -99.385  &lt; 2e-16 ***\nORIGIN_SZBLSZ02      -1.9493637  0.0213859   -91.152  &lt; 2e-16 ***\nORIGIN_SZBLSZ03      -2.9057732  0.0535995   -54.213  &lt; 2e-16 ***\nORIGIN_SZBLSZ04      -1.4672066  0.0254726   -57.599  &lt; 2e-16 ***\nORIGIN_SZBMSZ01       0.1806064  0.0060563    29.821  &lt; 2e-16 ***\nORIGIN_SZBMSZ02      -1.4026549  0.0078244  -179.267  &lt; 2e-16 ***\nORIGIN_SZBMSZ03      -0.5976236  0.0063808   -93.660  &lt; 2e-16 ***\nORIGIN_SZBMSZ04      -0.5456513  0.0059061   -92.388  &lt; 2e-16 ***\nORIGIN_SZBMSZ05      -3.1095195  0.0188118  -165.297  &lt; 2e-16 ***\nORIGIN_SZBMSZ06      -3.0273827  0.0194319  -155.794  &lt; 2e-16 ***\nORIGIN_SZBMSZ07      -0.7378197  0.0066865  -110.345  &lt; 2e-16 ***\nORIGIN_SZBMSZ08      -0.9306150  0.0067188  -138.510  &lt; 2e-16 ***\nORIGIN_SZBMSZ09      -1.4137345  0.0101071  -139.876  &lt; 2e-16 ***\nORIGIN_SZBMSZ10      -1.7054195  0.0101582  -167.886  &lt; 2e-16 ***\nORIGIN_SZBMSZ11      -1.2418380  0.0076792  -161.714  &lt; 2e-16 ***\nORIGIN_SZBMSZ12      -1.3746537  0.0109769  -125.231  &lt; 2e-16 ***\nORIGIN_SZBMSZ13      -0.4339494  0.0069335   -62.587  &lt; 2e-16 ***\nORIGIN_SZBMSZ14      -0.9950458  0.0076302  -130.410  &lt; 2e-16 ***\nORIGIN_SZBMSZ15      -0.6544196  0.0068964   -94.892  &lt; 2e-16 ***\nORIGIN_SZBMSZ16      -1.5193747  0.0105329  -144.250  &lt; 2e-16 ***\nORIGIN_SZBMSZ17      -1.6536771  0.0180672   -91.529  &lt; 2e-16 ***\nORIGIN_SZBPSZ01       0.1484355  0.0064734    22.930  &lt; 2e-16 ***\nORIGIN_SZBPSZ02      -0.3602094  0.0073902   -48.741  &lt; 2e-16 ***\nORIGIN_SZBPSZ03      -0.1567975  0.0072226   -21.709  &lt; 2e-16 ***\nORIGIN_SZBPSZ04       0.4504873  0.0058418    77.115  &lt; 2e-16 ***\nORIGIN_SZBPSZ05       0.5028646  0.0053682    93.675  &lt; 2e-16 ***\nORIGIN_SZBPSZ06      -1.0125668  0.0105638   -95.853  &lt; 2e-16 ***\nORIGIN_SZBPSZ07      -0.3859065  0.0098561   -39.154  &lt; 2e-16 ***\nORIGIN_SZBSSZ01       0.1488497  0.0065504    22.724  &lt; 2e-16 ***\nORIGIN_SZBSSZ02       0.4269498  0.0055893    76.387  &lt; 2e-16 ***\nORIGIN_SZBSSZ03      -0.2437385  0.0062020   -39.300  &lt; 2e-16 ***\nORIGIN_SZBTSZ01       0.1987940  0.0066672    29.817  &lt; 2e-16 ***\nORIGIN_SZBTSZ02      -0.4571546  0.0090784   -50.356  &lt; 2e-16 ***\nORIGIN_SZBTSZ03      -0.2697243  0.0077941   -34.606  &lt; 2e-16 ***\nORIGIN_SZBTSZ04      -1.0997236  0.0115225   -95.441  &lt; 2e-16 ***\nORIGIN_SZBTSZ05      -1.0053122  0.0132594   -75.819  &lt; 2e-16 ***\nORIGIN_SZBTSZ06      -1.0841201  0.0102242  -106.035  &lt; 2e-16 ***\nORIGIN_SZBTSZ07      -2.3134497  0.0158499  -145.960  &lt; 2e-16 ***\nORIGIN_SZBTSZ08      -1.1581618  0.0121161   -95.589  &lt; 2e-16 ***\nORIGIN_SZCBSZ01      -1.0805930  0.0577831   -18.701  &lt; 2e-16 ***\nORIGIN_SZCCSZ01      -0.8145372  0.0152638   -53.364  &lt; 2e-16 ***\nORIGIN_SZCHSZ01       0.0377079  0.0133240     2.830 0.004654 ** \nORIGIN_SZCHSZ02      -0.6209553  0.0096388   -64.422  &lt; 2e-16 ***\nORIGIN_SZCHSZ03       1.6790244  0.0069559   241.381  &lt; 2e-16 ***\nORIGIN_SZCKSZ01       0.0839586  0.0059934    14.008  &lt; 2e-16 ***\nORIGIN_SZCKSZ02       0.4379511  0.0062289    70.309  &lt; 2e-16 ***\nORIGIN_SZCKSZ03       0.7956950  0.0051892   153.335  &lt; 2e-16 ***\nORIGIN_SZCKSZ04       1.2740323  0.0053165   239.637  &lt; 2e-16 ***\nORIGIN_SZCKSZ05       0.9326213  0.0061807   150.893  &lt; 2e-16 ***\nORIGIN_SZCKSZ06       0.3976273  0.0085639    46.431  &lt; 2e-16 ***\nORIGIN_SZCLSZ01      -0.7522917  0.0094655   -79.477  &lt; 2e-16 ***\nORIGIN_SZCLSZ02      -1.3937450  0.0153260   -90.940  &lt; 2e-16 ***\nORIGIN_SZCLSZ03      -0.7898683  0.0091016   -86.784  &lt; 2e-16 ***\nORIGIN_SZCLSZ04       0.8451512  0.0051258   164.882  &lt; 2e-16 ***\nORIGIN_SZCLSZ05      -1.6573818  0.0166091   -99.788  &lt; 2e-16 ***\nORIGIN_SZCLSZ06       0.9478181  0.0048182   196.716  &lt; 2e-16 ***\nORIGIN_SZCLSZ07      -0.2499753  0.0064632   -38.677  &lt; 2e-16 ***\nORIGIN_SZCLSZ08       0.1350119  0.0069296    19.483  &lt; 2e-16 ***\nORIGIN_SZCLSZ09      -1.3868782  0.0192743   -71.955  &lt; 2e-16 ***\nORIGIN_SZDTSZ02      -3.7535792  0.0871325   -43.079  &lt; 2e-16 ***\nORIGIN_SZDTSZ03      -3.8462041  0.0840156   -45.780  &lt; 2e-16 ***\nORIGIN_SZDTSZ13      -2.9738127  0.0349241   -85.151  &lt; 2e-16 ***\nORIGIN_SZGLSZ01      -1.5175198  0.0110135  -137.787  &lt; 2e-16 ***\nORIGIN_SZGLSZ02       0.2405712  0.0058742    40.954  &lt; 2e-16 ***\nORIGIN_SZGLSZ03       0.1940241  0.0061989    31.300  &lt; 2e-16 ***\nORIGIN_SZGLSZ04       1.0292572  0.0049028   209.931  &lt; 2e-16 ***\nORIGIN_SZGLSZ05       0.9864552  0.0050898   193.811  &lt; 2e-16 ***\nORIGIN_SZHGSZ01       0.3073609  0.0054307    56.597  &lt; 2e-16 ***\nORIGIN_SZHGSZ02       0.3827293  0.0054555    70.154  &lt; 2e-16 ***\nORIGIN_SZHGSZ03       0.2342580  0.0059240    39.544  &lt; 2e-16 ***\nORIGIN_SZHGSZ04       0.8750090  0.0049639   176.275  &lt; 2e-16 ***\nORIGIN_SZHGSZ05       1.1695280  0.0049468   236.420  &lt; 2e-16 ***\nORIGIN_SZHGSZ06      -0.0462411  0.0063805    -7.247 4.25e-13 ***\nORIGIN_SZHGSZ07       0.4488583  0.0055139    81.404  &lt; 2e-16 ***\nORIGIN_SZHGSZ08       0.2236095  0.0061279    36.490  &lt; 2e-16 ***\nORIGIN_SZHGSZ09      -1.6376674  0.0084442  -193.941  &lt; 2e-16 ***\nORIGIN_SZHGSZ10      -2.9849025  0.0501042   -59.574  &lt; 2e-16 ***\nORIGIN_SZJESZ01       0.3926525  0.0056268    69.783  &lt; 2e-16 ***\nORIGIN_SZJESZ02       0.1230160  0.0056864    21.633  &lt; 2e-16 ***\nORIGIN_SZJESZ03       0.0188276  0.0061020     3.085 0.002032 ** \nORIGIN_SZJESZ04      -1.3611618  0.0117184  -116.156  &lt; 2e-16 ***\nORIGIN_SZJESZ05      -2.0643662  0.0157083  -131.419  &lt; 2e-16 ***\nORIGIN_SZJESZ06       0.1556368  0.0055245    28.172  &lt; 2e-16 ***\nORIGIN_SZJESZ07      -1.7664532  0.0133171  -132.646  &lt; 2e-16 ***\nORIGIN_SZJESZ08      -0.9115981  0.0138203   -65.961  &lt; 2e-16 ***\nORIGIN_SZJESZ09       0.6121916  0.0060381   101.388  &lt; 2e-16 ***\nORIGIN_SZJESZ10      -1.1953045  0.0233216   -51.253  &lt; 2e-16 ***\nORIGIN_SZJESZ11      -1.4088748  0.0220921   -63.773  &lt; 2e-16 ***\nORIGIN_SZJWSZ01       0.5759093  0.0077741    74.081  &lt; 2e-16 ***\nORIGIN_SZJWSZ02       0.9769314  0.0053029   184.227  &lt; 2e-16 ***\nORIGIN_SZJWSZ03       1.3242695  0.0049068   269.882  &lt; 2e-16 ***\nORIGIN_SZJWSZ04       0.5621088  0.0057831    97.199  &lt; 2e-16 ***\nORIGIN_SZJWSZ05      -1.5744341  0.0146904  -107.174  &lt; 2e-16 ***\nORIGIN_SZJWSZ06      -0.9113320  0.0126913   -71.807  &lt; 2e-16 ***\nORIGIN_SZJWSZ07      -2.3083419  0.0357843   -64.507  &lt; 2e-16 ***\nORIGIN_SZJWSZ08       2.0114225  0.0047956   419.429  &lt; 2e-16 ***\nORIGIN_SZJWSZ09       1.9086705  0.0045255   421.759  &lt; 2e-16 ***\nORIGIN_SZKLSZ01       0.2743166  0.0056908    48.204  &lt; 2e-16 ***\nORIGIN_SZKLSZ02      -0.6443386  0.0074521   -86.463  &lt; 2e-16 ***\nORIGIN_SZKLSZ03      -0.3990113  0.0067213   -59.366  &lt; 2e-16 ***\nORIGIN_SZKLSZ04      -2.1413876  0.0138405  -154.719  &lt; 2e-16 ***\nORIGIN_SZKLSZ05      -1.0913697  0.0121512   -89.816  &lt; 2e-16 ***\nORIGIN_SZKLSZ06      -5.6240764  0.1857405   -30.279  &lt; 2e-16 ***\nORIGIN_SZKLSZ07      -1.1885897  0.0096830  -122.750  &lt; 2e-16 ***\nORIGIN_SZKLSZ08      -1.7018593  0.0114317  -148.872  &lt; 2e-16 ***\nORIGIN_SZLKSZ01      -1.6659670  0.0446420   -37.318  &lt; 2e-16 ***\nORIGIN_SZMDSZ01      -1.1210505  0.0318834   -35.161  &lt; 2e-16 ***\nORIGIN_SZMDSZ02      -0.5096299  0.0116645   -43.691  &lt; 2e-16 ***\nORIGIN_SZMDSZ03      -1.9187039  0.0198291   -96.762  &lt; 2e-16 ***\nORIGIN_SZMPSZ01      -0.5260512  0.0094201   -55.844  &lt; 2e-16 ***\nORIGIN_SZMPSZ02      -0.2905084  0.0077974   -37.257  &lt; 2e-16 ***\nORIGIN_SZMPSZ03       0.3342293  0.0063715    52.457  &lt; 2e-16 ***\nORIGIN_SZMUSZ02      -3.8337096  0.1105053   -34.693  &lt; 2e-16 ***\nORIGIN_SZNTSZ01      -2.9845040  0.0397028   -75.171  &lt; 2e-16 ***\nORIGIN_SZNTSZ02      -3.1812985  0.0249470  -127.522  &lt; 2e-16 ***\nORIGIN_SZNTSZ03      -0.9742991  0.0085424  -114.054  &lt; 2e-16 ***\nORIGIN_SZNTSZ05      -4.2086932  0.0579737   -72.597  &lt; 2e-16 ***\nORIGIN_SZNTSZ06      -4.5831822  0.0583494   -78.547  &lt; 2e-16 ***\nORIGIN_SZNVSZ01       0.3186962  0.0052944    60.195  &lt; 2e-16 ***\nORIGIN_SZNVSZ02      -0.5321136  0.0073747   -72.154  &lt; 2e-16 ***\nORIGIN_SZNVSZ03      -0.9911852  0.0090560  -109.451  &lt; 2e-16 ***\nORIGIN_SZNVSZ04      -0.8329721  0.0099590   -83.640  &lt; 2e-16 ***\nORIGIN_SZNVSZ05      -2.1460777  0.0182401  -117.657  &lt; 2e-16 ***\nORIGIN_SZPGSZ01      -0.5604078  0.0151515   -36.987  &lt; 2e-16 ***\nORIGIN_SZPGSZ02      -0.4025139  0.0085135   -47.279  &lt; 2e-16 ***\nORIGIN_SZPGSZ03       0.6975483  0.0055534   125.608  &lt; 2e-16 ***\nORIGIN_SZPGSZ04       1.2175486  0.0051080   238.363  &lt; 2e-16 ***\nORIGIN_SZPGSZ05       0.3895354  0.0069851    55.767  &lt; 2e-16 ***\nORIGIN_SZPLSZ01      -0.5572701  0.0134473   -41.441  &lt; 2e-16 ***\nORIGIN_SZPLSZ02      -0.9854214  0.0172337   -57.180  &lt; 2e-16 ***\nORIGIN_SZPLSZ03      -1.6991954  0.0472629   -35.952  &lt; 2e-16 ***\nORIGIN_SZPLSZ04      -2.2000217  0.0373580   -58.890  &lt; 2e-16 ***\nORIGIN_SZPLSZ05      -1.7086663  0.0260920   -65.486  &lt; 2e-16 ***\nORIGIN_SZPNSZ01       1.5292867  0.0055102   277.535  &lt; 2e-16 ***\nORIGIN_SZPNSZ02       0.7457519  0.0127815    58.346  &lt; 2e-16 ***\nORIGIN_SZPNSZ03      -1.3659046  0.0216180   -63.184  &lt; 2e-16 ***\nORIGIN_SZPNSZ04      -2.0025379  0.0360655   -55.525  &lt; 2e-16 ***\nORIGIN_SZPNSZ05      -0.9157959  0.0320955   -28.533  &lt; 2e-16 ***\nORIGIN_SZPRSZ01       0.0522611  0.0139142     3.756 0.000173 ***\nORIGIN_SZPRSZ02       1.3063371  0.0053809   242.774  &lt; 2e-16 ***\nORIGIN_SZPRSZ03       0.9963670  0.0054293   183.516  &lt; 2e-16 ***\nORIGIN_SZPRSZ04      -0.0300950  0.0088010    -3.419 0.000627 ***\nORIGIN_SZPRSZ05       1.6840313  0.0050839   331.245  &lt; 2e-16 ***\nORIGIN_SZPRSZ06      -0.8277202  0.0131296   -63.042  &lt; 2e-16 ***\nORIGIN_SZPRSZ07      -2.1698449  0.0177362  -122.340  &lt; 2e-16 ***\nORIGIN_SZPRSZ08       0.4559353  0.0072609    62.793  &lt; 2e-16 ***\nORIGIN_SZQTSZ01      -0.3517047  0.0078770   -44.650  &lt; 2e-16 ***\nORIGIN_SZQTSZ02      -0.8199353  0.0071544  -114.605  &lt; 2e-16 ***\nORIGIN_SZQTSZ03      -0.2457614  0.0065555   -37.490  &lt; 2e-16 ***\nORIGIN_SZQTSZ04      -1.2216614  0.0084050  -145.349  &lt; 2e-16 ***\nORIGIN_SZQTSZ05      -0.7219952  0.0072360   -99.778  &lt; 2e-16 ***\nORIGIN_SZQTSZ06      -0.6729363  0.0076658   -87.784  &lt; 2e-16 ***\nORIGIN_SZQTSZ07      -1.4497690  0.0109365  -132.563  &lt; 2e-16 ***\nORIGIN_SZQTSZ08      -0.2770151  0.0070193   -39.465  &lt; 2e-16 ***\nORIGIN_SZQTSZ09      -0.6157554  0.0078739   -78.202  &lt; 2e-16 ***\nORIGIN_SZQTSZ10      -0.3091547  0.0075471   -40.963  &lt; 2e-16 ***\nORIGIN_SZQTSZ11      -1.9698881  0.0151247  -130.243  &lt; 2e-16 ***\nORIGIN_SZQTSZ12      -2.6449643  0.0205857  -128.485  &lt; 2e-16 ***\nORIGIN_SZQTSZ13      -0.3754107  0.0088433   -42.452  &lt; 2e-16 ***\nORIGIN_SZQTSZ14      -1.6537473  0.0134378  -123.067  &lt; 2e-16 ***\nORIGIN_SZQTSZ15      -0.3435351  0.0131956   -26.034  &lt; 2e-16 ***\nORIGIN_SZRCSZ01      -1.7104390  0.0141179  -121.154  &lt; 2e-16 ***\nORIGIN_SZRCSZ06      -1.1250727  0.0094909  -118.542  &lt; 2e-16 ***\nORIGIN_SZRVSZ01      -3.0220116  0.0339694   -88.963  &lt; 2e-16 ***\nORIGIN_SZRVSZ02      -3.6040075  0.0297641  -121.086  &lt; 2e-16 ***\nORIGIN_SZRVSZ03      -3.2345594  0.0259149  -124.814  &lt; 2e-16 ***\nORIGIN_SZRVSZ04      -3.6900313  0.0575908   -64.073  &lt; 2e-16 ***\nORIGIN_SZRVSZ05      -2.9527570  0.0178582  -165.344  &lt; 2e-16 ***\nORIGIN_SZSBSZ01       0.0238445  0.0078563     3.035 0.002405 ** \nORIGIN_SZSBSZ02      -0.5780602  0.0093054   -62.121  &lt; 2e-16 ***\nORIGIN_SZSBSZ03       0.8961719  0.0054586   164.175  &lt; 2e-16 ***\nORIGIN_SZSBSZ04       0.8421798  0.0061888   136.080  &lt; 2e-16 ***\nORIGIN_SZSBSZ05      -0.1682984  0.0078342   -21.482  &lt; 2e-16 ***\nORIGIN_SZSBSZ06      -1.1482701  0.0196421   -58.460  &lt; 2e-16 ***\nORIGIN_SZSBSZ07      -0.8830317  0.0160709   -54.946  &lt; 2e-16 ***\nORIGIN_SZSBSZ08      -1.1039492  0.0174602   -63.226  &lt; 2e-16 ***\nORIGIN_SZSBSZ09      -0.5946691  0.0101961   -58.323  &lt; 2e-16 ***\nORIGIN_SZSESZ02       1.1144933  0.0050948   218.749  &lt; 2e-16 ***\nORIGIN_SZSESZ03       1.1058963  0.0049026   225.574  &lt; 2e-16 ***\nORIGIN_SZSESZ04       0.7427975  0.0056948   130.433  &lt; 2e-16 ***\nORIGIN_SZSESZ05      -0.2812684  0.0069596   -40.414  &lt; 2e-16 ***\nORIGIN_SZSESZ06       0.8168315  0.0055800   146.387  &lt; 2e-16 ***\nORIGIN_SZSESZ07      -2.2842043  0.0231232   -98.784  &lt; 2e-16 ***\nORIGIN_SZSGSZ01      -0.7313790  0.0098957   -73.909  &lt; 2e-16 ***\nORIGIN_SZSGSZ02      -1.1185406  0.0110919  -100.843  &lt; 2e-16 ***\nORIGIN_SZSGSZ03       0.1752618  0.0060508    28.965  &lt; 2e-16 ***\nORIGIN_SZSGSZ04       0.3764395  0.0056165    67.023  &lt; 2e-16 ***\nORIGIN_SZSGSZ05      -1.7203916  0.0118945  -144.637  &lt; 2e-16 ***\nORIGIN_SZSGSZ06       0.4630857  0.0052886    87.563  &lt; 2e-16 ***\nORIGIN_SZSGSZ07      -0.7051233  0.0073133   -96.417  &lt; 2e-16 ***\nORIGIN_SZSKSZ01       0.2053928  0.0100710    20.395  &lt; 2e-16 ***\nORIGIN_SZSKSZ02       1.2630428  0.0063490   198.935  &lt; 2e-16 ***\nORIGIN_SZSKSZ03      -0.3035297  0.0096788   -31.360  &lt; 2e-16 ***\nORIGIN_SZSKSZ04      -1.7952886  0.0359225   -49.977  &lt; 2e-16 ***\nORIGIN_SZSKSZ05      -0.3836861  0.0176686   -21.716  &lt; 2e-16 ***\nORIGIN_SZSLSZ01      -2.5916326  0.0348001   -74.472  &lt; 2e-16 ***\nORIGIN_SZSLSZ04      -0.2251549  0.0088517   -25.436  &lt; 2e-16 ***\nORIGIN_SZSRSZ01      -2.9590365  0.0173638  -170.414  &lt; 2e-16 ***\nORIGIN_SZTHSZ01      -1.9639893  0.0570321   -34.437  &lt; 2e-16 ***\nORIGIN_SZTHSZ03      -1.7281304  0.0272797   -63.349  &lt; 2e-16 ***\nORIGIN_SZTHSZ04      -2.7837906  0.0343179   -81.118  &lt; 2e-16 ***\nORIGIN_SZTHSZ06      -2.1800693  0.0205491  -106.091  &lt; 2e-16 ***\nORIGIN_SZTMSZ01       0.8228136  0.0066824   123.131  &lt; 2e-16 ***\nORIGIN_SZTMSZ02       2.3174781  0.0044978   515.243  &lt; 2e-16 ***\nORIGIN_SZTMSZ03       1.7061757  0.0048615   350.957  &lt; 2e-16 ***\nORIGIN_SZTMSZ04       1.2407899  0.0058389   212.504  &lt; 2e-16 ***\nORIGIN_SZTMSZ05      -0.1000526  0.0124079    -8.064 7.41e-16 ***\nORIGIN_SZTNSZ01      -2.0347519  0.0139596  -145.760  &lt; 2e-16 ***\nORIGIN_SZTNSZ02      -1.8682671  0.0107901  -173.146  &lt; 2e-16 ***\nORIGIN_SZTNSZ03      -2.1737183  0.0146759  -148.115  &lt; 2e-16 ***\nORIGIN_SZTNSZ04      -0.5006452  0.0081501   -61.428  &lt; 2e-16 ***\nORIGIN_SZTPSZ01      -0.6722487  0.0075606   -88.914  &lt; 2e-16 ***\nORIGIN_SZTPSZ02       0.4552916  0.0050191    90.711  &lt; 2e-16 ***\nORIGIN_SZTPSZ03      -0.7865781  0.0072250  -108.869  &lt; 2e-16 ***\nORIGIN_SZTPSZ04      -0.7049044  0.0066456  -106.071  &lt; 2e-16 ***\nORIGIN_SZTPSZ05      -0.5574925  0.0070366   -79.227  &lt; 2e-16 ***\nORIGIN_SZTPSZ06      -0.4247282  0.0068709   -61.815  &lt; 2e-16 ***\nORIGIN_SZTPSZ07      -0.2846984  0.0071030   -40.081  &lt; 2e-16 ***\nORIGIN_SZTPSZ08      -1.0898051  0.0110046   -99.031  &lt; 2e-16 ***\nORIGIN_SZTPSZ09      -0.8092746  0.0079160  -102.232  &lt; 2e-16 ***\nORIGIN_SZTPSZ10      -0.9332072  0.0086809  -107.502  &lt; 2e-16 ***\nORIGIN_SZTPSZ11      -0.0421981  0.0064343    -6.558 5.44e-11 ***\nORIGIN_SZTPSZ12      -0.6330081  0.0078324   -80.819  &lt; 2e-16 ***\nORIGIN_SZTSSZ01      -1.7650409  0.0517357   -34.116  &lt; 2e-16 ***\nORIGIN_SZTSSZ02       1.1707267  0.0094178   124.310  &lt; 2e-16 ***\nORIGIN_SZTSSZ03       0.6581679  0.0095894    68.635  &lt; 2e-16 ***\nORIGIN_SZTSSZ04       0.8736493  0.0104965    83.233  &lt; 2e-16 ***\nORIGIN_SZTSSZ05       0.0957248  0.0178709     5.356 8.49e-08 ***\nORIGIN_SZTSSZ06       1.7581609  0.0206810    85.013  &lt; 2e-16 ***\nORIGIN_SZWCSZ01       0.8097950  0.0105622    76.669  &lt; 2e-16 ***\nORIGIN_SZWCSZ02      -1.9966163  0.0345747   -57.748  &lt; 2e-16 ***\nORIGIN_SZWCSZ03      -5.0687420  0.1474971   -34.365  &lt; 2e-16 ***\nORIGIN_SZWDSZ01       1.4926003  0.0047216   316.124  &lt; 2e-16 ***\nORIGIN_SZWDSZ02       0.9916597  0.0055755   177.859  &lt; 2e-16 ***\nORIGIN_SZWDSZ03       1.5918065  0.0052180   305.062  &lt; 2e-16 ***\nORIGIN_SZWDSZ04       1.3717152  0.0060516   226.669  &lt; 2e-16 ***\nORIGIN_SZWDSZ05       0.6700111  0.0062287   107.569  &lt; 2e-16 ***\nORIGIN_SZWDSZ06       0.8115996  0.0060947   133.165  &lt; 2e-16 ***\nORIGIN_SZWDSZ07      -0.6488914  0.0093567   -69.351  &lt; 2e-16 ***\nORIGIN_SZWDSZ08      -0.3610234  0.0096440   -37.435  &lt; 2e-16 ***\nORIGIN_SZWDSZ09       1.4445461  0.0052279   276.317  &lt; 2e-16 ***\nORIGIN_SZYSSZ01      -0.2039272  0.0069548   -29.322  &lt; 2e-16 ***\nORIGIN_SZYSSZ02       0.8707707  0.0058957   147.697  &lt; 2e-16 ***\nORIGIN_SZYSSZ03       1.8348842  0.0050377   364.231  &lt; 2e-16 ***\nORIGIN_SZYSSZ04       1.0780641  0.0052960   203.564  &lt; 2e-16 ***\nORIGIN_SZYSSZ05       0.3222765  0.0069700    46.237  &lt; 2e-16 ***\nORIGIN_SZYSSZ06      -0.4424689  0.0124866   -35.435  &lt; 2e-16 ***\nORIGIN_SZYSSZ07      -1.0267883  0.0155821   -65.895  &lt; 2e-16 ***\nORIGIN_SZYSSZ08       0.1833117  0.0070935    25.842  &lt; 2e-16 ***\nORIGIN_SZYSSZ09       1.0766070  0.0050451   213.396  &lt; 2e-16 ***\nlog(DESTIN_AGE25_64)  0.0295428  0.0001051   280.998  &lt; 2e-16 ***\nlog(dist)            -1.7024691  0.0004625 -3681.042  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 36117615  on 14273  degrees of freedom\nResidual deviance: 12983718  on 13993  degrees of freedom\nAIC: 13068835\n\nNumber of Fisher Scoring iterations: 6\n\n\nThe R-squared value is then calculated to examine how the constraints hold for destinations this time.\n\nCalcRSquared(orcSIM$data$TRIPS, orcSIM$fitted.values)\n\n[1] 0.4029115\n\n\n\n\n\nA destination constrained SIM is fitted.\n\ndecSIM = glm(formula = TRIPS ~ \n                DESTIN_SZ + \n                log(ORIGIN_AGE25_64) + \n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(decSIM)\n\n\nCall:\nglm(formula = TRIPS ~ DESTIN_SZ + log(ORIGIN_AGE25_64) + log(dist), \n    family = poisson(link = \"log\"), data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                       Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)          19.4822997  0.0050784  3836.298  &lt; 2e-16 ***\nDESTIN_SZAMSZ02       0.1263056  0.0049743    25.392  &lt; 2e-16 ***\nDESTIN_SZAMSZ03       0.0421788  0.0049859     8.460  &lt; 2e-16 ***\nDESTIN_SZAMSZ04      -1.1668479  0.0074254  -157.143  &lt; 2e-16 ***\nDESTIN_SZAMSZ05      -1.2586639  0.0075854  -165.931  &lt; 2e-16 ***\nDESTIN_SZAMSZ06      -1.1414791  0.0073474  -155.359  &lt; 2e-16 ***\nDESTIN_SZAMSZ07      -1.5565804  0.0109476  -142.185  &lt; 2e-16 ***\nDESTIN_SZAMSZ08      -0.3990754  0.0074159   -53.813  &lt; 2e-16 ***\nDESTIN_SZAMSZ09      -1.0109118  0.0076802  -131.626  &lt; 2e-16 ***\nDESTIN_SZAMSZ10       0.0159285  0.0051765     3.077  0.00209 ** \nDESTIN_SZAMSZ11      -0.3653273  0.0094866   -38.510  &lt; 2e-16 ***\nDESTIN_SZAMSZ12       0.5297606  0.0053243    99.500  &lt; 2e-16 ***\nDESTIN_SZBDSZ01       1.0394822  0.0044226   235.037  &lt; 2e-16 ***\nDESTIN_SZBDSZ02       0.1956964  0.0059564    32.855  &lt; 2e-16 ***\nDESTIN_SZBDSZ03       0.3209267  0.0053718    59.742  &lt; 2e-16 ***\nDESTIN_SZBDSZ04       1.2429874  0.0043104   288.370  &lt; 2e-16 ***\nDESTIN_SZBDSZ05       0.8535842  0.0046360   184.122  &lt; 2e-16 ***\nDESTIN_SZBDSZ06       0.5181443  0.0053736    96.423  &lt; 2e-16 ***\nDESTIN_SZBDSZ07      -0.5849371  0.0110468   -52.951  &lt; 2e-16 ***\nDESTIN_SZBDSZ08      -1.2871050  0.0128623  -100.068  &lt; 2e-16 ***\nDESTIN_SZBKSZ01      -1.0633560  0.0077771  -136.730  &lt; 2e-16 ***\nDESTIN_SZBKSZ02      -0.4065316  0.0066712   -60.938  &lt; 2e-16 ***\nDESTIN_SZBKSZ03      -0.6815674  0.0066509  -102.477  &lt; 2e-16 ***\nDESTIN_SZBKSZ04      -0.4185485  0.0058306   -71.785  &lt; 2e-16 ***\nDESTIN_SZBKSZ05      -0.8887654  0.0073867  -120.319  &lt; 2e-16 ***\nDESTIN_SZBKSZ06      -0.9436078  0.0068625  -137.501  &lt; 2e-16 ***\nDESTIN_SZBKSZ07      -0.0067325  0.0048408    -1.391  0.16430    \nDESTIN_SZBKSZ08      -1.2680903  0.0079177  -160.160  &lt; 2e-16 ***\nDESTIN_SZBKSZ09      -0.0350151  0.0054287    -6.450 1.12e-10 ***\nDESTIN_SZBLSZ01      -0.3045203  0.0081978   -37.146  &lt; 2e-16 ***\nDESTIN_SZBLSZ02       0.6432424  0.0074449    86.400  &lt; 2e-16 ***\nDESTIN_SZBLSZ03       1.9595113  0.0084705   231.333  &lt; 2e-16 ***\nDESTIN_SZBLSZ04       0.0149756  0.0172081     0.870  0.38415    \nDESTIN_SZBMSZ01      -0.0378127  0.0055294    -6.838 8.00e-12 ***\nDESTIN_SZBMSZ02      -0.8458055  0.0054043  -156.505  &lt; 2e-16 ***\nDESTIN_SZBMSZ03      -1.1334399  0.0063720  -177.878  &lt; 2e-16 ***\nDESTIN_SZBMSZ04      -1.1164759  0.0057743  -193.353  &lt; 2e-16 ***\nDESTIN_SZBMSZ05      -1.1078742  0.0078703  -140.766  &lt; 2e-16 ***\nDESTIN_SZBMSZ06      -2.2787234  0.0155126  -146.895  &lt; 2e-16 ***\nDESTIN_SZBMSZ07      -0.2739089  0.0051924   -52.752  &lt; 2e-16 ***\nDESTIN_SZBMSZ08      -1.6825978  0.0071842  -234.209  &lt; 2e-16 ***\nDESTIN_SZBMSZ09      -3.0047801  0.0159980  -187.823  &lt; 2e-16 ***\nDESTIN_SZBMSZ10      -2.2232689  0.0096907  -229.423  &lt; 2e-16 ***\nDESTIN_SZBMSZ11      -1.9657136  0.0086445  -227.394  &lt; 2e-16 ***\nDESTIN_SZBMSZ12      -1.5359286  0.0089658  -171.310  &lt; 2e-16 ***\nDESTIN_SZBMSZ13      -0.5657561  0.0059960   -94.355  &lt; 2e-16 ***\nDESTIN_SZBMSZ14      -1.6904858  0.0084858  -199.214  &lt; 2e-16 ***\nDESTIN_SZBMSZ15      -1.5268383  0.0079959  -190.953  &lt; 2e-16 ***\nDESTIN_SZBMSZ16      -2.2045600  0.0130872  -168.452  &lt; 2e-16 ***\nDESTIN_SZBMSZ17      -2.2992381  0.0184895  -124.353  &lt; 2e-16 ***\nDESTIN_SZBPSZ01      -0.8549497  0.0065168  -131.191  &lt; 2e-16 ***\nDESTIN_SZBPSZ02      -1.7470549  0.0095751  -182.457  &lt; 2e-16 ***\nDESTIN_SZBPSZ03      -1.4015145  0.0090888  -154.203  &lt; 2e-16 ***\nDESTIN_SZBPSZ04      -0.5250632  0.0066496   -78.962  &lt; 2e-16 ***\nDESTIN_SZBPSZ05       0.3413171  0.0046404    73.553  &lt; 2e-16 ***\nDESTIN_SZBPSZ06      -0.8569188  0.0090795   -94.380  &lt; 2e-16 ***\nDESTIN_SZBPSZ07      -0.0751284  0.0089704    -8.375  &lt; 2e-16 ***\nDESTIN_SZBSSZ01       0.1015228  0.0055735    18.215  &lt; 2e-16 ***\nDESTIN_SZBSSZ02      -0.7066412  0.0063845  -110.682  &lt; 2e-16 ***\nDESTIN_SZBSSZ03       0.1622730  0.0046689    34.756  &lt; 2e-16 ***\nDESTIN_SZBTSZ01       0.5470615  0.0047984   114.009  &lt; 2e-16 ***\nDESTIN_SZBTSZ02      -0.1393371  0.0078266   -17.803  &lt; 2e-16 ***\nDESTIN_SZBTSZ03       0.1474771  0.0059428    24.816  &lt; 2e-16 ***\nDESTIN_SZBTSZ04      -1.2857827  0.0122000  -105.392  &lt; 2e-16 ***\nDESTIN_SZBTSZ05      -0.2629188  0.0081769   -32.154  &lt; 2e-16 ***\nDESTIN_SZBTSZ06      -0.8319920  0.0081401  -102.209  &lt; 2e-16 ***\nDESTIN_SZBTSZ07      -1.8829448  0.0121227  -155.324  &lt; 2e-16 ***\nDESTIN_SZBTSZ08      -1.5732123  0.0116752  -134.748  &lt; 2e-16 ***\nDESTIN_SZCBSZ01      -3.5334327  0.3333510   -10.600  &lt; 2e-16 ***\nDESTIN_SZCCSZ01      -0.2129306  0.0093782   -22.705  &lt; 2e-16 ***\nDESTIN_SZCHSZ01      -0.1494972  0.0113078   -13.221  &lt; 2e-16 ***\nDESTIN_SZCHSZ02       0.0041774  0.0063195     0.661  0.50860    \nDESTIN_SZCHSZ03       2.5565450  0.0046495   549.857  &lt; 2e-16 ***\nDESTIN_SZCKSZ01       0.0489719  0.0053801     9.102  &lt; 2e-16 ***\nDESTIN_SZCKSZ02      -0.3548993  0.0060671   -58.496  &lt; 2e-16 ***\nDESTIN_SZCKSZ03       0.5386351  0.0044913   119.928  &lt; 2e-16 ***\nDESTIN_SZCKSZ04      -0.4425512  0.0073837   -59.936  &lt; 2e-16 ***\nDESTIN_SZCKSZ05      -0.4092591  0.0077267   -52.967  &lt; 2e-16 ***\nDESTIN_SZCKSZ06       0.2207041  0.0074252    29.724  &lt; 2e-16 ***\nDESTIN_SZCLSZ01       0.2851460  0.0052362    54.457  &lt; 2e-16 ***\nDESTIN_SZCLSZ02      -1.9270528  0.0147688  -130.482  &lt; 2e-16 ***\nDESTIN_SZCLSZ03      -0.6266521  0.0086780   -72.212  &lt; 2e-16 ***\nDESTIN_SZCLSZ04      -0.1335581  0.0054216   -24.634  &lt; 2e-16 ***\nDESTIN_SZCLSZ05      -0.8912963  0.0096015   -92.829  &lt; 2e-16 ***\nDESTIN_SZCLSZ06       0.1781234  0.0048150    36.993  &lt; 2e-16 ***\nDESTIN_SZCLSZ07      -0.5609619  0.0062277   -90.075  &lt; 2e-16 ***\nDESTIN_SZCLSZ08      -0.3875308  0.0068390   -56.665  &lt; 2e-16 ***\nDESTIN_SZCLSZ09       0.2539453  0.0072623    34.968  &lt; 2e-16 ***\nDESTIN_SZDTSZ02      -2.5036295  0.0373421   -67.046  &lt; 2e-16 ***\nDESTIN_SZDTSZ03      -0.8956407  0.0149971   -59.721  &lt; 2e-16 ***\nDESTIN_SZDTSZ13      -1.6562176  0.0175441   -94.403  &lt; 2e-16 ***\nDESTIN_SZGLSZ01      -0.2716152  0.0056553   -48.029  &lt; 2e-16 ***\nDESTIN_SZGLSZ02      -0.1735665  0.0055548   -31.246  &lt; 2e-16 ***\nDESTIN_SZGLSZ03       0.7029507  0.0044934   156.441  &lt; 2e-16 ***\nDESTIN_SZGLSZ04       0.5788027  0.0045449   127.351  &lt; 2e-16 ***\nDESTIN_SZGLSZ05       0.6865291  0.0045131   152.118  &lt; 2e-16 ***\nDESTIN_SZHGSZ01       0.3275950  0.0043866    74.681  &lt; 2e-16 ***\nDESTIN_SZHGSZ02      -0.6326974  0.0063517   -99.610  &lt; 2e-16 ***\nDESTIN_SZHGSZ03      -1.0597982  0.0073914  -143.382  &lt; 2e-16 ***\nDESTIN_SZHGSZ04      -0.2267013  0.0052178   -43.448  &lt; 2e-16 ***\nDESTIN_SZHGSZ05      -0.3063050  0.0055452   -55.238  &lt; 2e-16 ***\nDESTIN_SZHGSZ06      -0.7483961  0.0065544  -114.182  &lt; 2e-16 ***\nDESTIN_SZHGSZ07       0.1096958  0.0051309    21.379  &lt; 2e-16 ***\nDESTIN_SZHGSZ08      -0.1374201  0.0056692   -24.240  &lt; 2e-16 ***\nDESTIN_SZHGSZ09       0.0775400  0.0060230    12.874  &lt; 2e-16 ***\nDESTIN_SZHGSZ10      -3.3017475  0.0289292  -114.132  &lt; 2e-16 ***\nDESTIN_SZJESZ01      -0.0489065  0.0057246    -8.543  &lt; 2e-16 ***\nDESTIN_SZJESZ02      -0.5101614  0.0060074   -84.921  &lt; 2e-16 ***\nDESTIN_SZJESZ03      -0.5328921  0.0064129   -83.097  &lt; 2e-16 ***\nDESTIN_SZJESZ04      -0.7348953  0.0082249   -89.351  &lt; 2e-16 ***\nDESTIN_SZJESZ05      -1.0864570  0.0111740   -97.231  &lt; 2e-16 ***\nDESTIN_SZJESZ06       0.2407920  0.0046801    51.451  &lt; 2e-16 ***\nDESTIN_SZJESZ07      -1.1523093  0.0090103  -127.888  &lt; 2e-16 ***\nDESTIN_SZJESZ08      -0.4627356  0.0094529   -48.952  &lt; 2e-16 ***\nDESTIN_SZJESZ09       0.0528616  0.0068126     7.759 8.53e-15 ***\nDESTIN_SZJESZ10       1.0240660  0.0084045   121.848  &lt; 2e-16 ***\nDESTIN_SZJESZ11       0.7875517  0.0076251   103.284  &lt; 2e-16 ***\nDESTIN_SZJWSZ01      -0.1533418  0.0076198   -20.124  &lt; 2e-16 ***\nDESTIN_SZJWSZ02      -0.0011019  0.0059389    -0.186  0.85280    \nDESTIN_SZJWSZ03       0.9063789  0.0046747   193.892  &lt; 2e-16 ***\nDESTIN_SZJWSZ04       0.7019286  0.0049743   141.112  &lt; 2e-16 ***\nDESTIN_SZJWSZ05      -0.5197057  0.0072971   -71.220  &lt; 2e-16 ***\nDESTIN_SZJWSZ06       0.3350986  0.0061171    54.780  &lt; 2e-16 ***\nDESTIN_SZJWSZ07      -0.5961960  0.0328336   -18.158  &lt; 2e-16 ***\nDESTIN_SZJWSZ08       0.8054662  0.0056006   143.819  &lt; 2e-16 ***\nDESTIN_SZJWSZ09       1.5860146  0.0040282   393.723  &lt; 2e-16 ***\nDESTIN_SZKLSZ01      -0.6500838  0.0063560  -102.279  &lt; 2e-16 ***\nDESTIN_SZKLSZ02      -0.7039434  0.0064465  -109.197  &lt; 2e-16 ***\nDESTIN_SZKLSZ03      -1.1972384  0.0075577  -158.413  &lt; 2e-16 ***\nDESTIN_SZKLSZ04      -1.7172228  0.0097573  -175.993  &lt; 2e-16 ***\nDESTIN_SZKLSZ05      -0.6042386  0.0093730   -64.466  &lt; 2e-16 ***\nDESTIN_SZKLSZ06      -3.0201496  0.0389503   -77.539  &lt; 2e-16 ***\nDESTIN_SZKLSZ07      -1.1522413  0.0076607  -150.409  &lt; 2e-16 ***\nDESTIN_SZKLSZ08      -0.6977825  0.0057610  -121.122  &lt; 2e-16 ***\nDESTIN_SZLKSZ01      -0.6895952  0.0268661   -25.668  &lt; 2e-16 ***\nDESTIN_SZMDSZ01      -0.7155951  0.0228203   -31.358  &lt; 2e-16 ***\nDESTIN_SZMDSZ02      -0.8153643  0.0123003   -66.288  &lt; 2e-16 ***\nDESTIN_SZMDSZ03      -2.7745226  0.0301326   -92.077  &lt; 2e-16 ***\nDESTIN_SZMPSZ01      -0.5492095  0.0087198   -62.984  &lt; 2e-16 ***\nDESTIN_SZMPSZ02      -0.6104744  0.0069346   -88.033  &lt; 2e-16 ***\nDESTIN_SZMPSZ03       0.2775047  0.0054964    50.489  &lt; 2e-16 ***\nDESTIN_SZMUSZ02      -2.6322870  0.0214943  -122.464  &lt; 2e-16 ***\nDESTIN_SZNTSZ01      -4.0762008  0.0531046   -76.758  &lt; 2e-16 ***\nDESTIN_SZNTSZ02      -1.9765545  0.0125659  -157.296  &lt; 2e-16 ***\nDESTIN_SZNTSZ03      -1.4563069  0.0085433  -170.462  &lt; 2e-16 ***\nDESTIN_SZNTSZ05      -2.0125598  0.0270737   -74.336  &lt; 2e-16 ***\nDESTIN_SZNTSZ06      -3.0145357  0.0504986   -59.695  &lt; 2e-16 ***\nDESTIN_SZNVSZ01      -0.4693625  0.0053866   -87.135  &lt; 2e-16 ***\nDESTIN_SZNVSZ02      -0.4525631  0.0060428   -74.894  &lt; 2e-16 ***\nDESTIN_SZNVSZ03      -0.4821492  0.0064725   -74.492  &lt; 2e-16 ***\nDESTIN_SZNVSZ04      -1.8929756  0.0128397  -147.432  &lt; 2e-16 ***\nDESTIN_SZNVSZ05      -1.4501752  0.0099737  -145.400  &lt; 2e-16 ***\nDESTIN_SZPGSZ01      -1.2305867  0.0174321   -70.593  &lt; 2e-16 ***\nDESTIN_SZPGSZ02      -0.8232919  0.0080153  -102.715  &lt; 2e-16 ***\nDESTIN_SZPGSZ03       0.2138480  0.0050850    42.054  &lt; 2e-16 ***\nDESTIN_SZPGSZ04       0.1045757  0.0053579    19.518  &lt; 2e-16 ***\nDESTIN_SZPGSZ05      -0.7542450  0.0088883   -84.858  &lt; 2e-16 ***\nDESTIN_SZPLSZ01      -0.0098642  0.0080428    -1.226  0.22003    \nDESTIN_SZPLSZ02      -1.2630412  0.0152594   -82.771  &lt; 2e-16 ***\nDESTIN_SZPLSZ03      -0.1554479  0.0108611   -14.312  &lt; 2e-16 ***\nDESTIN_SZPLSZ04      -1.5505819  0.0114768  -135.105  &lt; 2e-16 ***\nDESTIN_SZPLSZ05      -0.2417805  0.0130391   -18.543  &lt; 2e-16 ***\nDESTIN_SZPNSZ01       0.7926715  0.0073628   107.659  &lt; 2e-16 ***\nDESTIN_SZPNSZ02       2.1914920  0.0073537   298.013  &lt; 2e-16 ***\nDESTIN_SZPNSZ03       1.0246845  0.0086874   117.951  &lt; 2e-16 ***\nDESTIN_SZPNSZ04       2.5522612  0.0091789   278.057  &lt; 2e-16 ***\nDESTIN_SZPNSZ05       1.7995301  0.0138562   129.872  &lt; 2e-16 ***\nDESTIN_SZPRSZ01      -0.6576686  0.0096037   -68.481  &lt; 2e-16 ***\nDESTIN_SZPRSZ02       0.3113532  0.0059851    52.021  &lt; 2e-16 ***\nDESTIN_SZPRSZ03       0.9255296  0.0044779   206.687  &lt; 2e-16 ***\nDESTIN_SZPRSZ04      -0.0028578  0.0093218    -0.307  0.75917    \nDESTIN_SZPRSZ05       0.2457863  0.0058261    42.187  &lt; 2e-16 ***\nDESTIN_SZPRSZ06       0.3692137  0.0064542    57.205  &lt; 2e-16 ***\nDESTIN_SZPRSZ07      -1.6733306  0.0138440  -120.871  &lt; 2e-16 ***\nDESTIN_SZPRSZ08      -0.2221048  0.0074846   -29.675  &lt; 2e-16 ***\nDESTIN_SZQTSZ01      -1.0185488  0.0093179  -109.311  &lt; 2e-16 ***\nDESTIN_SZQTSZ02      -1.2802688  0.0081670  -156.761  &lt; 2e-16 ***\nDESTIN_SZQTSZ03      -1.3322708  0.0079106  -168.415  &lt; 2e-16 ***\nDESTIN_SZQTSZ04      -1.1803631  0.0077366  -152.568  &lt; 2e-16 ***\nDESTIN_SZQTSZ05      -1.2215818  0.0072829  -167.734  &lt; 2e-16 ***\nDESTIN_SZQTSZ06      -1.3213145  0.0074858  -176.509  &lt; 2e-16 ***\nDESTIN_SZQTSZ07      -1.6426306  0.0123347  -133.171  &lt; 2e-16 ***\nDESTIN_SZQTSZ08      -0.2224169  0.0058405   -38.082  &lt; 2e-16 ***\nDESTIN_SZQTSZ09      -0.8142678  0.0069796  -116.665  &lt; 2e-16 ***\nDESTIN_SZQTSZ10      -0.1090496  0.0062573   -17.428  &lt; 2e-16 ***\nDESTIN_SZQTSZ11      -0.0108951  0.0061145    -1.782  0.07477 .  \nDESTIN_SZQTSZ12      -0.8582515  0.0090243   -95.105  &lt; 2e-16 ***\nDESTIN_SZQTSZ13       0.1834409  0.0065231    28.122  &lt; 2e-16 ***\nDESTIN_SZQTSZ14       0.1994454  0.0073615    27.093  &lt; 2e-16 ***\nDESTIN_SZQTSZ15       0.6740197  0.0088699    75.990  &lt; 2e-16 ***\nDESTIN_SZRCSZ01      -0.7746427  0.0079375   -97.593  &lt; 2e-16 ***\nDESTIN_SZRCSZ06      -1.4394098  0.0209931   -68.566  &lt; 2e-16 ***\nDESTIN_SZRVSZ01      -2.6060495  0.0175759  -148.274  &lt; 2e-16 ***\nDESTIN_SZRVSZ02      -2.5823769  0.0354706   -72.803  &lt; 2e-16 ***\nDESTIN_SZRVSZ03      -2.5890601  0.0152644  -169.614  &lt; 2e-16 ***\nDESTIN_SZRVSZ04      -2.2277482  0.0165661  -134.477  &lt; 2e-16 ***\nDESTIN_SZRVSZ05      -3.8610445  0.0298251  -129.456  &lt; 2e-16 ***\nDESTIN_SZSBSZ01      -1.2035529  0.0103954  -115.777  &lt; 2e-16 ***\nDESTIN_SZSBSZ02      -1.0267199  0.0085239  -120.452  &lt; 2e-16 ***\nDESTIN_SZSBSZ03       0.5977382  0.0050336   118.750  &lt; 2e-16 ***\nDESTIN_SZSBSZ04       0.5362769  0.0060573    88.534  &lt; 2e-16 ***\nDESTIN_SZSBSZ05      -1.0440525  0.0089622  -116.495  &lt; 2e-16 ***\nDESTIN_SZSBSZ06      -1.3939595  0.0246679   -56.509  &lt; 2e-16 ***\nDESTIN_SZSBSZ07       0.1029116  0.0235414     4.372 1.23e-05 ***\nDESTIN_SZSBSZ08       1.3564902  0.0060529   224.105  &lt; 2e-16 ***\nDESTIN_SZSBSZ09       0.4573712  0.0056585    80.829  &lt; 2e-16 ***\nDESTIN_SZSESZ02      -0.1553609  0.0056716   -27.393  &lt; 2e-16 ***\nDESTIN_SZSESZ03       0.5412776  0.0043801   123.576  &lt; 2e-16 ***\nDESTIN_SZSESZ04      -0.6382091  0.0065411   -97.568  &lt; 2e-16 ***\nDESTIN_SZSESZ05      -0.3332093  0.0055002   -60.581  &lt; 2e-16 ***\nDESTIN_SZSESZ06      -0.3085951  0.0072340   -42.659  &lt; 2e-16 ***\nDESTIN_SZSESZ07      -2.6237684  0.0245753  -106.764  &lt; 2e-16 ***\nDESTIN_SZSGSZ01      -0.1062372  0.0066634   -15.943  &lt; 2e-16 ***\nDESTIN_SZSGSZ02      -0.0475568  0.0058908    -8.073 6.85e-16 ***\nDESTIN_SZSGSZ03      -0.2118402  0.0055056   -38.477  &lt; 2e-16 ***\nDESTIN_SZSGSZ04      -0.1099618  0.0054841   -20.051  &lt; 2e-16 ***\nDESTIN_SZSGSZ05      -2.1556963  0.0113821  -189.394  &lt; 2e-16 ***\nDESTIN_SZSGSZ06       0.4416352  0.0043842   100.734  &lt; 2e-16 ***\nDESTIN_SZSGSZ07      -0.3949335  0.0059250   -66.655  &lt; 2e-16 ***\nDESTIN_SZSISZ01      -1.2847094  0.0288610   -44.514  &lt; 2e-16 ***\nDESTIN_SZSKSZ01       0.3089834  0.0082924    37.261  &lt; 2e-16 ***\nDESTIN_SZSKSZ02       1.4139309  0.0059981   235.729  &lt; 2e-16 ***\nDESTIN_SZSKSZ03       0.2427688  0.0067373    36.034  &lt; 2e-16 ***\nDESTIN_SZSKSZ04      -0.2527488  0.0161286   -15.671  &lt; 2e-16 ***\nDESTIN_SZSKSZ05       0.6046051  0.0122766    49.249  &lt; 2e-16 ***\nDESTIN_SZSLSZ01      -0.3927387  0.0099790   -39.356  &lt; 2e-16 ***\nDESTIN_SZSLSZ04      -0.5942110  0.0086225   -68.914  &lt; 2e-16 ***\nDESTIN_SZSRSZ01      -2.6855766  0.0138707  -193.615  &lt; 2e-16 ***\nDESTIN_SZTHSZ01      -3.2750084  0.0402668   -81.333  &lt; 2e-16 ***\nDESTIN_SZTHSZ03      -1.7964408  0.0261810   -68.616  &lt; 2e-16 ***\nDESTIN_SZTHSZ04      -2.6323994  0.0241831  -108.853  &lt; 2e-16 ***\nDESTIN_SZTHSZ06      -1.9444390  0.0166052  -117.098  &lt; 2e-16 ***\nDESTIN_SZTMSZ01       0.3856054  0.0063086    61.123  &lt; 2e-16 ***\nDESTIN_SZTMSZ02       1.8586526  0.0039229   473.790  &lt; 2e-16 ***\nDESTIN_SZTMSZ03       1.2601385  0.0044018   286.278  &lt; 2e-16 ***\nDESTIN_SZTMSZ04       1.5884327  0.0043362   366.316  &lt; 2e-16 ***\nDESTIN_SZTMSZ05       1.0377553  0.0063271   164.018  &lt; 2e-16 ***\nDESTIN_SZTNSZ01      -0.9954275  0.0080345  -123.895  &lt; 2e-16 ***\nDESTIN_SZTNSZ02      -2.1032696  0.0109228  -192.557  &lt; 2e-16 ***\nDESTIN_SZTNSZ03      -2.0044892  0.0129215  -155.128  &lt; 2e-16 ***\nDESTIN_SZTNSZ04      -0.9750326  0.0081677  -119.377  &lt; 2e-16 ***\nDESTIN_SZTPSZ01      -0.7788383  0.0068769  -113.254  &lt; 2e-16 ***\nDESTIN_SZTPSZ02       0.2866080  0.0042843    66.898  &lt; 2e-16 ***\nDESTIN_SZTPSZ03      -0.8749841  0.0065470  -133.646  &lt; 2e-16 ***\nDESTIN_SZTPSZ04      -1.6852792  0.0081488  -206.812  &lt; 2e-16 ***\nDESTIN_SZTPSZ05      -1.3721346  0.0068230  -201.104  &lt; 2e-16 ***\nDESTIN_SZTPSZ06      -0.7832133  0.0069164  -113.239  &lt; 2e-16 ***\nDESTIN_SZTPSZ07      -2.3109126  0.0130830  -176.635  &lt; 2e-16 ***\nDESTIN_SZTPSZ08      -1.6406531  0.0104897  -156.406  &lt; 2e-16 ***\nDESTIN_SZTPSZ09      -0.5636273  0.0076848   -73.343  &lt; 2e-16 ***\nDESTIN_SZTPSZ10      -1.5640843  0.0099984  -156.433  &lt; 2e-16 ***\nDESTIN_SZTPSZ11      -0.3700482  0.0059834   -61.846  &lt; 2e-16 ***\nDESTIN_SZTPSZ12      -0.8828228  0.0072302  -122.102  &lt; 2e-16 ***\nDESTIN_SZTSSZ01       0.3529526  0.0221887    15.907  &lt; 2e-16 ***\nDESTIN_SZTSSZ02       1.0265792  0.0153515    66.871  &lt; 2e-16 ***\nDESTIN_SZTSSZ03       1.9647347  0.0092388   212.662  &lt; 2e-16 ***\nDESTIN_SZTSSZ04       1.8649836  0.0089976   207.275  &lt; 2e-16 ***\nDESTIN_SZTSSZ05       2.8437058  0.0085738   331.673  &lt; 2e-16 ***\nDESTIN_SZTSSZ06       3.4238870  0.0161304   212.263  &lt; 2e-16 ***\nDESTIN_SZWCSZ01       2.9550693  0.0051690   571.689  &lt; 2e-16 ***\nDESTIN_SZWCSZ02      -0.8214103  0.0129213   -63.570  &lt; 2e-16 ***\nDESTIN_SZWCSZ03      -1.7393427  0.0347472   -50.057  &lt; 2e-16 ***\nDESTIN_SZWDSZ01       1.3424417  0.0039957   335.972  &lt; 2e-16 ***\nDESTIN_SZWDSZ02      -0.2103694  0.0068601   -30.666  &lt; 2e-16 ***\nDESTIN_SZWDSZ03       0.8268551  0.0051363   160.983  &lt; 2e-16 ***\nDESTIN_SZWDSZ04      -0.0643997  0.0079076    -8.144 3.82e-16 ***\nDESTIN_SZWDSZ05       0.0451985  0.0075732     5.968 2.40e-09 ***\nDESTIN_SZWDSZ06       0.6981330  0.0051936   134.423  &lt; 2e-16 ***\nDESTIN_SZWDSZ07      -0.0403233  0.0067749    -5.952 2.65e-09 ***\nDESTIN_SZWDSZ08       0.2850631  0.0069225    41.179  &lt; 2e-16 ***\nDESTIN_SZWDSZ09       1.3016106  0.0050365   258.433  &lt; 2e-16 ***\nDESTIN_SZYSSZ01       0.7598564  0.0044144   172.133  &lt; 2e-16 ***\nDESTIN_SZYSSZ02       0.2648061  0.0058239    45.469  &lt; 2e-16 ***\nDESTIN_SZYSSZ03      -0.0412163  0.0068337    -6.031 1.63e-09 ***\nDESTIN_SZYSSZ04      -0.0561054  0.0060829    -9.223  &lt; 2e-16 ***\nDESTIN_SZYSSZ05      -0.9970159  0.0121827   -81.839  &lt; 2e-16 ***\nDESTIN_SZYSSZ06      -1.3808376  0.0125738  -109.819  &lt; 2e-16 ***\nDESTIN_SZYSSZ07      -0.7128364  0.0165296   -43.125  &lt; 2e-16 ***\nDESTIN_SZYSSZ08       0.9409510  0.0045886   205.064  &lt; 2e-16 ***\nDESTIN_SZYSSZ09       0.3738436  0.0047971    77.930  &lt; 2e-16 ***\nlog(ORIGIN_AGE25_64)  0.1928847  0.0001667  1157.214  &lt; 2e-16 ***\nlog(dist)            -1.7828141  0.0004794 -3718.501  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 36117615  on 14273  degrees of freedom\nResidual deviance: 12319763  on 13992  degrees of freedom\nAIC: 12404881\n\nNumber of Fisher Scoring iterations: 7\n\n\nThe R-squared value is then calculated to examine how the constraints hold for destinations this time.\n\nCalcRSquared(decSIM$data$TRIPS, decSIM$fitted.values)\n\n[1] 0.496166\n\n\n\n\n\nA doubly constrained SIM is fitted.\n\ndbcSIM = glm(formula = TRIPS ~ \n                ORIGIN_SZ + \n                DESTIN_SZ + \n                log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM_data,\n              na.action = na.exclude)\nsummary(dbcSIM)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + DESTIN_SZ + log(dist), family = poisson(link = \"log\"), \n    data = SIM_data, na.action = na.exclude)\n\nCoefficients:\n                  Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)     21.9587595  0.0066831  3285.715  &lt; 2e-16 ***\nORIGIN_SZAMSZ02  0.4778050  0.0054127    88.275  &lt; 2e-16 ***\nORIGIN_SZAMSZ03  0.2895973  0.0055517    52.163  &lt; 2e-16 ***\nORIGIN_SZAMSZ04 -0.2628080  0.0060720   -43.282  &lt; 2e-16 ***\nORIGIN_SZAMSZ05 -0.2631404  0.0069008   -38.132  &lt; 2e-16 ***\nORIGIN_SZAMSZ06  0.1722337  0.0062028    27.767  &lt; 2e-16 ***\nORIGIN_SZAMSZ07 -0.9883200  0.0111224   -88.859  &lt; 2e-16 ***\nORIGIN_SZAMSZ08 -0.4052821  0.0104095   -38.934  &lt; 2e-16 ***\nORIGIN_SZAMSZ09  0.0356290  0.0064816     5.497 3.86e-08 ***\nORIGIN_SZAMSZ10  0.4815569  0.0055521    86.735  &lt; 2e-16 ***\nORIGIN_SZAMSZ11 -1.4440079  0.0146079   -98.851  &lt; 2e-16 ***\nORIGIN_SZAMSZ12 -1.7862677  0.0128071  -139.475  &lt; 2e-16 ***\nORIGIN_SZBDSZ01  0.8653749  0.0054381   159.132  &lt; 2e-16 ***\nORIGIN_SZBDSZ02  0.0841000  0.0062834    13.385  &lt; 2e-16 ***\nORIGIN_SZBDSZ03  0.3158343  0.0057510    54.918  &lt; 2e-16 ***\nORIGIN_SZBDSZ04  1.4556701  0.0049986   291.215  &lt; 2e-16 ***\nORIGIN_SZBDSZ05  0.6363125  0.0057193   111.257  &lt; 2e-16 ***\nORIGIN_SZBDSZ06  0.6749341  0.0058650   115.078  &lt; 2e-16 ***\nORIGIN_SZBDSZ07 -1.2176407  0.0113698  -107.095  &lt; 2e-16 ***\nORIGIN_SZBDSZ08 -0.9803580  0.0105604   -92.833  &lt; 2e-16 ***\nORIGIN_SZBKSZ01 -0.2919642  0.0080763   -36.151  &lt; 2e-16 ***\nORIGIN_SZBKSZ02  0.4609570  0.0067997    67.791  &lt; 2e-16 ***\nORIGIN_SZBKSZ03  0.6273448  0.0065989    95.068  &lt; 2e-16 ***\nORIGIN_SZBKSZ04 -0.2499063  0.0076555   -32.644  &lt; 2e-16 ***\nORIGIN_SZBKSZ05 -0.2628428  0.0078905   -33.311  &lt; 2e-16 ***\nORIGIN_SZBKSZ06 -0.2174034  0.0075134   -28.936  &lt; 2e-16 ***\nORIGIN_SZBKSZ07  0.7094093  0.0058574   121.114  &lt; 2e-16 ***\nORIGIN_SZBKSZ08 -0.1614362  0.0067626   -23.872  &lt; 2e-16 ***\nORIGIN_SZBKSZ09 -0.2739085  0.0072969   -37.537  &lt; 2e-16 ***\nORIGIN_SZBLSZ01 -2.4281074  0.0181172  -134.022  &lt; 2e-16 ***\nORIGIN_SZBLSZ02 -2.7305447  0.0219341  -124.489  &lt; 2e-16 ***\nORIGIN_SZBLSZ03 -3.3071431  0.0540398   -61.198  &lt; 2e-16 ***\nORIGIN_SZBLSZ04 -2.4550671  0.0263946   -93.014  &lt; 2e-16 ***\nORIGIN_SZBMSZ01  0.1198976  0.0065964    18.176  &lt; 2e-16 ***\nORIGIN_SZBMSZ02 -1.3908667  0.0083230  -167.112  &lt; 2e-16 ***\nORIGIN_SZBMSZ03 -0.6999122  0.0069754  -100.339  &lt; 2e-16 ***\nORIGIN_SZBMSZ04 -0.2691159  0.0066184   -40.662  &lt; 2e-16 ***\nORIGIN_SZBMSZ05 -2.6163780  0.0190989  -136.991  &lt; 2e-16 ***\nORIGIN_SZBMSZ06 -2.9729956  0.0197182  -150.774  &lt; 2e-16 ***\nORIGIN_SZBMSZ07 -0.7309916  0.0072407  -100.956  &lt; 2e-16 ***\nORIGIN_SZBMSZ08 -1.0019514  0.0073169  -136.936  &lt; 2e-16 ***\nORIGIN_SZBMSZ09 -1.3667460  0.0105325  -129.764  &lt; 2e-16 ***\nORIGIN_SZBMSZ10 -1.6907268  0.0106687  -158.476  &lt; 2e-16 ***\nORIGIN_SZBMSZ11 -1.2288802  0.0082919  -148.202  &lt; 2e-16 ***\nORIGIN_SZBMSZ12 -1.6517767  0.0115101  -143.507  &lt; 2e-16 ***\nORIGIN_SZBMSZ13 -0.7251351  0.0075289   -96.314  &lt; 2e-16 ***\nORIGIN_SZBMSZ14 -1.1534912  0.0082629  -139.599  &lt; 2e-16 ***\nORIGIN_SZBMSZ15 -0.5476774  0.0075710   -72.339  &lt; 2e-16 ***\nORIGIN_SZBMSZ16 -1.5195034  0.0111459  -136.329  &lt; 2e-16 ***\nORIGIN_SZBMSZ17 -1.6026767  0.0184419   -86.904  &lt; 2e-16 ***\nORIGIN_SZBPSZ01  0.5571291  0.0071866    77.523  &lt; 2e-16 ***\nORIGIN_SZBPSZ02  0.0523197  0.0082259     6.360 2.01e-10 ***\nORIGIN_SZBPSZ03  0.2942047  0.0080482    36.555  &lt; 2e-16 ***\nORIGIN_SZBPSZ04  0.6246296  0.0065878    94.816  &lt; 2e-16 ***\nORIGIN_SZBPSZ05  0.8663708  0.0060852   142.372  &lt; 2e-16 ***\nORIGIN_SZBPSZ06 -0.9896182  0.0109551   -90.334  &lt; 2e-16 ***\nORIGIN_SZBPSZ07 -0.5219250  0.0101830   -51.255  &lt; 2e-16 ***\nORIGIN_SZBSSZ01  0.3299588  0.0066440    49.663  &lt; 2e-16 ***\nORIGIN_SZBSSZ02  0.2851357  0.0057077    49.956  &lt; 2e-16 ***\nORIGIN_SZBSSZ03 -0.2084740  0.0063364   -32.901  &lt; 2e-16 ***\nORIGIN_SZBTSZ01  0.1425664  0.0071103    20.051  &lt; 2e-16 ***\nORIGIN_SZBTSZ02 -0.5591999  0.0093616   -59.733  &lt; 2e-16 ***\nORIGIN_SZBTSZ03 -0.3648190  0.0081677   -44.666  &lt; 2e-16 ***\nORIGIN_SZBTSZ04 -1.4555078  0.0120138  -121.152  &lt; 2e-16 ***\nORIGIN_SZBTSZ05 -0.8635510  0.0133848   -64.517  &lt; 2e-16 ***\nORIGIN_SZBTSZ06 -1.1383111  0.0106421  -106.963  &lt; 2e-16 ***\nORIGIN_SZBTSZ07 -2.3477669  0.0160858  -145.953  &lt; 2e-16 ***\nORIGIN_SZBTSZ08 -1.2918779  0.0124862  -103.464  &lt; 2e-16 ***\nORIGIN_SZCBSZ01 -3.3713588  0.0578683   -58.259  &lt; 2e-16 ***\nORIGIN_SZCCSZ01 -0.6029242  0.0153385   -39.308  &lt; 2e-16 ***\nORIGIN_SZCHSZ01 -0.7641380  0.0135100   -56.561  &lt; 2e-16 ***\nORIGIN_SZCHSZ02 -0.8400736  0.0101951   -82.400  &lt; 2e-16 ***\nORIGIN_SZCHSZ03  1.2753127  0.0072576   175.720  &lt; 2e-16 ***\nORIGIN_SZCKSZ01  0.2470943  0.0067135    36.806  &lt; 2e-16 ***\nORIGIN_SZCKSZ02  0.5793581  0.0070498    82.181  &lt; 2e-16 ***\nORIGIN_SZCKSZ03  1.0795767  0.0060642   178.025  &lt; 2e-16 ***\nORIGIN_SZCKSZ04  1.4947920  0.0063122   236.808  &lt; 2e-16 ***\nORIGIN_SZCKSZ05  0.7457580  0.0074071   100.681  &lt; 2e-16 ***\nORIGIN_SZCKSZ06  0.5760952  0.0094861    60.730  &lt; 2e-16 ***\nORIGIN_SZCLSZ01 -0.9061335  0.0098617   -91.884  &lt; 2e-16 ***\nORIGIN_SZCLSZ02 -1.7609479  0.0156124  -112.791  &lt; 2e-16 ***\nORIGIN_SZCLSZ03 -1.0081325  0.0095171  -105.929  &lt; 2e-16 ***\nORIGIN_SZCLSZ04  0.6181200  0.0057953   106.659  &lt; 2e-16 ***\nORIGIN_SZCLSZ05 -2.0462335  0.0168934  -121.127  &lt; 2e-16 ***\nORIGIN_SZCLSZ06  0.7902389  0.0055680   141.924  &lt; 2e-16 ***\nORIGIN_SZCLSZ07 -0.5472929  0.0071001   -77.082  &lt; 2e-16 ***\nORIGIN_SZCLSZ08 -0.2197650  0.0077460   -28.372  &lt; 2e-16 ***\nORIGIN_SZCLSZ09 -1.8175782  0.0195989   -92.739  &lt; 2e-16 ***\nORIGIN_SZDTSZ02 -3.7618796  0.0872098   -43.136  &lt; 2e-16 ***\nORIGIN_SZDTSZ03 -3.4514766  0.0840812   -41.049  &lt; 2e-16 ***\nORIGIN_SZDTSZ13 -3.0627578  0.0352485   -86.891  &lt; 2e-16 ***\nORIGIN_SZGLSZ01 -1.8055929  0.0111938  -161.303  &lt; 2e-16 ***\nORIGIN_SZGLSZ02 -0.1588829  0.0061413   -25.871  &lt; 2e-16 ***\nORIGIN_SZGLSZ03 -0.2508524  0.0064276   -39.027  &lt; 2e-16 ***\nORIGIN_SZGLSZ04  0.8819358  0.0051993   169.627  &lt; 2e-16 ***\nORIGIN_SZGLSZ05  0.6062778  0.0053735   112.828  &lt; 2e-16 ***\nORIGIN_SZHGSZ01  0.3841503  0.0056776    67.660  &lt; 2e-16 ***\nORIGIN_SZHGSZ02  0.3962330  0.0057579    68.815  &lt; 2e-16 ***\nORIGIN_SZHGSZ03  0.2159531  0.0061671    35.017  &lt; 2e-16 ***\nORIGIN_SZHGSZ04  0.7831941  0.0052216   149.992  &lt; 2e-16 ***\nORIGIN_SZHGSZ05  1.1741558  0.0051799   226.677  &lt; 2e-16 ***\nORIGIN_SZHGSZ06 -0.1891403  0.0065556   -28.852  &lt; 2e-16 ***\nORIGIN_SZHGSZ07  0.3105421  0.0057186    54.304  &lt; 2e-16 ***\nORIGIN_SZHGSZ08 -0.0766364  0.0063474   -12.074  &lt; 2e-16 ***\nORIGIN_SZHGSZ09 -1.2211107  0.0101434  -120.384  &lt; 2e-16 ***\nORIGIN_SZHGSZ10 -3.4844709  0.0504793   -69.028  &lt; 2e-16 ***\nORIGIN_SZJESZ01  0.4916496  0.0063444    77.493  &lt; 2e-16 ***\nORIGIN_SZJESZ02  0.1343893  0.0063762    21.077  &lt; 2e-16 ***\nORIGIN_SZJESZ03 -0.2761723  0.0068085   -40.563  &lt; 2e-16 ***\nORIGIN_SZJESZ04 -1.5932744  0.0121402  -131.240  &lt; 2e-16 ***\nORIGIN_SZJESZ05 -2.3041311  0.0160245  -143.788  &lt; 2e-16 ***\nORIGIN_SZJESZ06  0.2811076  0.0062495    44.981  &lt; 2e-16 ***\nORIGIN_SZJESZ07 -1.9413956  0.0136276  -142.461  &lt; 2e-16 ***\nORIGIN_SZJESZ08 -1.3315645  0.0143168   -93.007  &lt; 2e-16 ***\nORIGIN_SZJESZ09  0.4418314  0.0069208    63.841  &lt; 2e-16 ***\nORIGIN_SZJESZ10 -1.5551555  0.0236523   -65.751  &lt; 2e-16 ***\nORIGIN_SZJESZ11 -1.8888230  0.0224630   -84.086  &lt; 2e-16 ***\nORIGIN_SZJWSZ01  0.2564586  0.0084699    30.279  &lt; 2e-16 ***\nORIGIN_SZJWSZ02  0.6899398  0.0061751   111.729  &lt; 2e-16 ***\nORIGIN_SZJWSZ03  1.4761229  0.0057392   257.198  &lt; 2e-16 ***\nORIGIN_SZJWSZ04  0.5701272  0.0065749    86.713  &lt; 2e-16 ***\nORIGIN_SZJWSZ05 -2.1253657  0.0150769  -140.968  &lt; 2e-16 ***\nORIGIN_SZJWSZ06 -1.5307265  0.0131906  -116.047  &lt; 2e-16 ***\nORIGIN_SZJWSZ07 -2.8801618  0.0360772   -79.833  &lt; 2e-16 ***\nORIGIN_SZJWSZ08  1.4428820  0.0059638   241.938  &lt; 2e-16 ***\nORIGIN_SZJWSZ09  1.8968475  0.0055649   340.860  &lt; 2e-16 ***\nORIGIN_SZKLSZ01  0.1116580  0.0059844    18.658  &lt; 2e-16 ***\nORIGIN_SZKLSZ02 -0.9618787  0.0077344  -124.364  &lt; 2e-16 ***\nORIGIN_SZKLSZ03 -0.7070626  0.0070275  -100.613  &lt; 2e-16 ***\nORIGIN_SZKLSZ04 -2.2742765  0.0139991  -162.459  &lt; 2e-16 ***\nORIGIN_SZKLSZ05 -1.1907262  0.0123719   -96.244  &lt; 2e-16 ***\nORIGIN_SZKLSZ06 -5.9774897  0.1857994   -32.172  &lt; 2e-16 ***\nORIGIN_SZKLSZ07 -1.4258369  0.0103083  -138.320  &lt; 2e-16 ***\nORIGIN_SZKLSZ08 -1.7625888  0.0116107  -151.808  &lt; 2e-16 ***\nORIGIN_SZLKSZ01 -2.0541388  0.0448216   -45.829  &lt; 2e-16 ***\nORIGIN_SZMDSZ01 -0.8571117  0.0321054   -26.697  &lt; 2e-16 ***\nORIGIN_SZMDSZ02 -0.6034597  0.0120724   -49.987  &lt; 2e-16 ***\nORIGIN_SZMDSZ03 -2.1681163  0.0201078  -107.825  &lt; 2e-16 ***\nORIGIN_SZMPSZ01 -0.9331562  0.0096218   -96.984  &lt; 2e-16 ***\nORIGIN_SZMPSZ02 -1.0268229  0.0081379  -126.178  &lt; 2e-16 ***\nORIGIN_SZMPSZ03  0.0054001  0.0066875     0.807 0.419385    \nORIGIN_SZMUSZ02 -3.6269863  0.1105492   -32.809  &lt; 2e-16 ***\nORIGIN_SZNTSZ01 -3.0593717  0.0399843   -76.514  &lt; 2e-16 ***\nORIGIN_SZNTSZ02 -3.3331415  0.0251754  -132.397  &lt; 2e-16 ***\nORIGIN_SZNTSZ03 -0.8351522  0.0090372   -92.413  &lt; 2e-16 ***\nORIGIN_SZNTSZ05 -4.2082472  0.0583343   -72.140  &lt; 2e-16 ***\nORIGIN_SZNTSZ06 -3.8549296  0.0593793   -64.920  &lt; 2e-16 ***\nORIGIN_SZNVSZ01  0.2789069  0.0056024    49.784  &lt; 2e-16 ***\nORIGIN_SZNVSZ02 -0.6036857  0.0077126   -78.273  &lt; 2e-16 ***\nORIGIN_SZNVSZ03 -1.0072683  0.0092678  -108.685  &lt; 2e-16 ***\nORIGIN_SZNVSZ04 -0.8723996  0.0101399   -86.037  &lt; 2e-16 ***\nORIGIN_SZNVSZ05 -2.1552928  0.0183064  -117.734  &lt; 2e-16 ***\nORIGIN_SZPGSZ01  0.0520607  0.0157846     3.298 0.000973 ***\nORIGIN_SZPGSZ02 -0.3481687  0.0089328   -38.976  &lt; 2e-16 ***\nORIGIN_SZPGSZ03  0.9095292  0.0058835   154.590  &lt; 2e-16 ***\nORIGIN_SZPGSZ04  1.3653717  0.0054727   249.489  &lt; 2e-16 ***\nORIGIN_SZPGSZ05  0.3762720  0.0073841    50.957  &lt; 2e-16 ***\nORIGIN_SZPLSZ01 -0.9142754  0.0136552   -66.954  &lt; 2e-16 ***\nORIGIN_SZPLSZ02 -1.0987582  0.0175891   -62.468  &lt; 2e-16 ***\nORIGIN_SZPLSZ03 -2.3427113  0.0474176   -49.406  &lt; 2e-16 ***\nORIGIN_SZPLSZ04 -2.9140779  0.0374458   -77.821  &lt; 2e-16 ***\nORIGIN_SZPLSZ05 -2.2381965  0.0261572   -85.567  &lt; 2e-16 ***\nORIGIN_SZPNSZ01  0.9659006  0.0075177   128.484  &lt; 2e-16 ***\nORIGIN_SZPNSZ02 -0.0158348  0.0143869    -1.101 0.271053    \nORIGIN_SZPNSZ03 -2.1837321  0.0224396   -97.316  &lt; 2e-16 ***\nORIGIN_SZPNSZ04 -3.2481509  0.0370762   -87.608  &lt; 2e-16 ***\nORIGIN_SZPNSZ05 -2.0450679  0.0328165   -62.318  &lt; 2e-16 ***\nORIGIN_SZPRSZ01 -0.6701245  0.0141567   -47.336  &lt; 2e-16 ***\nORIGIN_SZPRSZ02  0.7931907  0.0058079   136.570  &lt; 2e-16 ***\nORIGIN_SZPRSZ03  0.4249094  0.0058610    72.498  &lt; 2e-16 ***\nORIGIN_SZPRSZ04 -0.8529967  0.0090997   -93.739  &lt; 2e-16 ***\nORIGIN_SZPRSZ05  0.7865479  0.0055282   142.278  &lt; 2e-16 ***\nORIGIN_SZPRSZ06 -1.3303664  0.0134512   -98.903  &lt; 2e-16 ***\nORIGIN_SZPRSZ07 -3.0458370  0.0181514  -167.802  &lt; 2e-16 ***\nORIGIN_SZPRSZ08 -0.5342399  0.0075966   -70.327  &lt; 2e-16 ***\nORIGIN_SZQTSZ01 -0.2548930  0.0086485   -29.473  &lt; 2e-16 ***\nORIGIN_SZQTSZ02 -0.8662439  0.0076549  -113.162  &lt; 2e-16 ***\nORIGIN_SZQTSZ03 -0.0890168  0.0072455   -12.286  &lt; 2e-16 ***\nORIGIN_SZQTSZ04 -1.4634370  0.0089384  -163.724  &lt; 2e-16 ***\nORIGIN_SZQTSZ05 -0.6535669  0.0077612   -84.210  &lt; 2e-16 ***\nORIGIN_SZQTSZ06 -0.8275765  0.0081835  -101.128  &lt; 2e-16 ***\nORIGIN_SZQTSZ07 -1.5369800  0.0112808  -136.248  &lt; 2e-16 ***\nORIGIN_SZQTSZ08 -0.4437979  0.0075302   -58.936  &lt; 2e-16 ***\nORIGIN_SZQTSZ09 -0.8184934  0.0083589   -97.918  &lt; 2e-16 ***\nORIGIN_SZQTSZ10 -0.6906597  0.0080980   -85.288  &lt; 2e-16 ***\nORIGIN_SZQTSZ11 -2.3251162  0.0154191  -150.795  &lt; 2e-16 ***\nORIGIN_SZQTSZ12 -3.0442790  0.0208985  -145.670  &lt; 2e-16 ***\nORIGIN_SZQTSZ13 -0.7241013  0.0093441   -77.493  &lt; 2e-16 ***\nORIGIN_SZQTSZ14 -1.8225351  0.0138207  -131.870  &lt; 2e-16 ***\nORIGIN_SZQTSZ15 -0.8720806  0.0138589   -62.926  &lt; 2e-16 ***\nORIGIN_SZRCSZ01 -1.8063415  0.0144295  -125.184  &lt; 2e-16 ***\nORIGIN_SZRCSZ06 -0.5370905  0.0101573   -52.877  &lt; 2e-16 ***\nORIGIN_SZRVSZ01 -2.7426167  0.0341386   -80.338  &lt; 2e-16 ***\nORIGIN_SZRVSZ02 -3.0827269  0.0302299  -101.976  &lt; 2e-16 ***\nORIGIN_SZRVSZ03 -2.9133853  0.0262543  -110.968  &lt; 2e-16 ***\nORIGIN_SZRVSZ04 -3.4220022  0.0582209   -58.776  &lt; 2e-16 ***\nORIGIN_SZRVSZ05 -2.6206257  0.0197470  -132.710  &lt; 2e-16 ***\nORIGIN_SZSBSZ01  0.1010337  0.0085117    11.870  &lt; 2e-16 ***\nORIGIN_SZSBSZ02 -0.8810456  0.0098244   -89.680  &lt; 2e-16 ***\nORIGIN_SZSBSZ03  0.8303668  0.0063009   131.785  &lt; 2e-16 ***\nORIGIN_SZSBSZ04  0.3489128  0.0071456    48.829  &lt; 2e-16 ***\nORIGIN_SZSBSZ05 -0.3182914  0.0085560   -37.201  &lt; 2e-16 ***\nORIGIN_SZSBSZ06 -0.9074308  0.0200035   -45.364  &lt; 2e-16 ***\nORIGIN_SZSBSZ07 -0.2217124  0.0167188   -13.261  &lt; 2e-16 ***\nORIGIN_SZSBSZ08 -1.3007367  0.0178771   -72.760  &lt; 2e-16 ***\nORIGIN_SZSBSZ09 -0.9813703  0.0107885   -90.965  &lt; 2e-16 ***\nORIGIN_SZSESZ02  1.1283424  0.0054209   208.146  &lt; 2e-16 ***\nORIGIN_SZSESZ03  1.2389996  0.0051926   238.610  &lt; 2e-16 ***\nORIGIN_SZSESZ04  0.7535119  0.0060371   124.814  &lt; 2e-16 ***\nORIGIN_SZSESZ05 -0.2347978  0.0071482   -32.847  &lt; 2e-16 ***\nORIGIN_SZSESZ06  0.9520620  0.0057572   165.368  &lt; 2e-16 ***\nORIGIN_SZSESZ07 -2.4296685  0.0231677  -104.873  &lt; 2e-16 ***\nORIGIN_SZSGSZ01 -0.6995899  0.0099969   -69.980  &lt; 2e-16 ***\nORIGIN_SZSGSZ02 -1.2602157  0.0111471  -113.053  &lt; 2e-16 ***\nORIGIN_SZSGSZ03  0.0725860  0.0061970    11.713  &lt; 2e-16 ***\nORIGIN_SZSGSZ04  0.2738315  0.0057524    47.603  &lt; 2e-16 ***\nORIGIN_SZSGSZ05 -2.0207710  0.0119838  -168.625  &lt; 2e-16 ***\nORIGIN_SZSGSZ06  0.4885608  0.0054646    89.404  &lt; 2e-16 ***\nORIGIN_SZSGSZ07 -0.8892155  0.0075074  -118.445  &lt; 2e-16 ***\nORIGIN_SZSKSZ01 -0.3682754  0.0108025   -34.092  &lt; 2e-16 ***\nORIGIN_SZSKSZ02  1.1826086  0.0071388   165.659  &lt; 2e-16 ***\nORIGIN_SZSKSZ03 -0.3230177  0.0101683   -31.767  &lt; 2e-16 ***\nORIGIN_SZSKSZ04 -1.8504236  0.0362400   -51.060  &lt; 2e-16 ***\nORIGIN_SZSKSZ05 -0.2759035  0.0185157   -14.901  &lt; 2e-16 ***\nORIGIN_SZSLSZ01 -2.2757902  0.0348766   -65.253  &lt; 2e-16 ***\nORIGIN_SZSLSZ04 -0.0899820  0.0090356    -9.959  &lt; 2e-16 ***\nORIGIN_SZSRSZ01 -2.1460151  0.0187871  -114.228  &lt; 2e-16 ***\nORIGIN_SZTHSZ01 -2.6851549  0.0571841   -46.956  &lt; 2e-16 ***\nORIGIN_SZTHSZ03 -1.0121495  0.0275551   -36.732  &lt; 2e-16 ***\nORIGIN_SZTHSZ04 -2.6129645  0.0345167   -75.701  &lt; 2e-16 ***\nORIGIN_SZTHSZ06 -1.7229100  0.0208134   -82.779  &lt; 2e-16 ***\nORIGIN_SZTMSZ01 -0.2254986  0.0070312   -32.071  &lt; 2e-16 ***\nORIGIN_SZTMSZ02  1.7271575  0.0049219   350.914  &lt; 2e-16 ***\nORIGIN_SZTMSZ03  0.9891319  0.0052266   189.250  &lt; 2e-16 ***\nORIGIN_SZTMSZ04  0.2018090  0.0062114    32.490  &lt; 2e-16 ***\nORIGIN_SZTMSZ05 -1.1882870  0.0125842   -94.427  &lt; 2e-16 ***\nORIGIN_SZTNSZ01 -1.6122620  0.0141911  -113.611  &lt; 2e-16 ***\nORIGIN_SZTNSZ02 -1.5630967  0.0112227  -139.280  &lt; 2e-16 ***\nORIGIN_SZTNSZ03 -2.0739538  0.0149298  -138.914  &lt; 2e-16 ***\nORIGIN_SZTNSZ04 -0.2816960  0.0085295   -33.026  &lt; 2e-16 ***\nORIGIN_SZTPSZ01 -0.7822239  0.0077901  -100.412  &lt; 2e-16 ***\nORIGIN_SZTPSZ02  0.5735478  0.0053042   108.131  &lt; 2e-16 ***\nORIGIN_SZTPSZ03 -0.8748650  0.0074202  -117.903  &lt; 2e-16 ***\nORIGIN_SZTPSZ04 -0.8537831  0.0069792  -122.332  &lt; 2e-16 ***\nORIGIN_SZTPSZ05 -0.5581114  0.0077012   -72.471  &lt; 2e-16 ***\nORIGIN_SZTPSZ06  0.0262001  0.0075241     3.482 0.000497 ***\nORIGIN_SZTPSZ07 -0.5969952  0.0074272   -80.380  &lt; 2e-16 ***\nORIGIN_SZTPSZ08 -1.0537959  0.0111297   -94.683  &lt; 2e-16 ***\nORIGIN_SZTPSZ09 -0.9588508  0.0081314  -117.920  &lt; 2e-16 ***\nORIGIN_SZTPSZ10 -1.1177249  0.0089403  -125.021  &lt; 2e-16 ***\nORIGIN_SZTPSZ11 -0.2799677  0.0067135   -41.702  &lt; 2e-16 ***\nORIGIN_SZTPSZ12 -0.8898871  0.0080215  -110.938  &lt; 2e-16 ***\nORIGIN_SZTSSZ01 -2.6146463  0.0521606   -50.127  &lt; 2e-16 ***\nORIGIN_SZTSSZ02  0.1682588  0.0119965    14.026  &lt; 2e-16 ***\nORIGIN_SZTSSZ03  0.2587653  0.0123809    20.900  &lt; 2e-16 ***\nORIGIN_SZTSSZ04 -0.5473825  0.0135215   -40.482  &lt; 2e-16 ***\nORIGIN_SZTSSZ05 -0.9967379  0.0206068   -48.369  &lt; 2e-16 ***\nORIGIN_SZTSSZ06  0.4933147  0.0229597    21.486  &lt; 2e-16 ***\nORIGIN_SZWCSZ01  1.2524706  0.0111133   112.700  &lt; 2e-16 ***\nORIGIN_SZWCSZ02 -2.8544820  0.0347805   -82.071  &lt; 2e-16 ***\nORIGIN_SZWCSZ03 -5.1277334  0.1475585   -34.751  &lt; 2e-16 ***\nORIGIN_SZWDSZ01  1.4725308  0.0056496   260.645  &lt; 2e-16 ***\nORIGIN_SZWDSZ02  0.1571680  0.0064909    24.214  &lt; 2e-16 ***\nORIGIN_SZWDSZ03  1.2584097  0.0061471   204.717  &lt; 2e-16 ***\nORIGIN_SZWDSZ04  0.8578765  0.0069277   123.833  &lt; 2e-16 ***\nORIGIN_SZWDSZ05  0.1702728  0.0069687    24.434  &lt; 2e-16 ***\nORIGIN_SZWDSZ06  0.1736910  0.0069507    24.989  &lt; 2e-16 ***\nORIGIN_SZWDSZ07 -1.5610176  0.0100803  -154.859  &lt; 2e-16 ***\nORIGIN_SZWDSZ08 -0.9490906  0.0102047   -93.005  &lt; 2e-16 ***\nORIGIN_SZWDSZ09  1.2107011  0.0062294   194.354  &lt; 2e-16 ***\nORIGIN_SZYSSZ01 -0.3324158  0.0074537   -44.598  &lt; 2e-16 ***\nORIGIN_SZYSSZ02  0.8177113  0.0066108   123.693  &lt; 2e-16 ***\nORIGIN_SZYSSZ03  1.6751777  0.0058470   286.503  &lt; 2e-16 ***\nORIGIN_SZYSSZ04  0.8130044  0.0059025   137.738  &lt; 2e-16 ***\nORIGIN_SZYSSZ05  0.3678420  0.0072431    50.785  &lt; 2e-16 ***\nORIGIN_SZYSSZ06 -0.6024384  0.0126722   -47.540  &lt; 2e-16 ***\nORIGIN_SZYSSZ07 -0.7631918  0.0158478   -48.157  &lt; 2e-16 ***\nORIGIN_SZYSSZ08  0.2141930  0.0076154    28.126  &lt; 2e-16 ***\nORIGIN_SZYSSZ09  1.0809368  0.0057973   186.457  &lt; 2e-16 ***\nDESTIN_SZAMSZ02  0.0761304  0.0051207    14.867  &lt; 2e-16 ***\nDESTIN_SZAMSZ03  0.0143394  0.0050755     2.825 0.004724 ** \nDESTIN_SZAMSZ04 -1.2516780  0.0074947  -167.008  &lt; 2e-16 ***\nDESTIN_SZAMSZ05 -1.2312375  0.0076598  -160.741  &lt; 2e-16 ***\nDESTIN_SZAMSZ06 -1.0333412  0.0075283  -137.261  &lt; 2e-16 ***\nDESTIN_SZAMSZ07 -1.5338249  0.0110036  -139.392  &lt; 2e-16 ***\nDESTIN_SZAMSZ08 -0.3751665  0.0075358   -49.784  &lt; 2e-16 ***\nDESTIN_SZAMSZ09 -1.1633493  0.0077556  -150.001  &lt; 2e-16 ***\nDESTIN_SZAMSZ10  0.1017717  0.0053151    19.148  &lt; 2e-16 ***\nDESTIN_SZAMSZ11 -0.8840362  0.0097007   -91.131  &lt; 2e-16 ***\nDESTIN_SZAMSZ12  0.1628123  0.0055220    29.484  &lt; 2e-16 ***\nDESTIN_SZBDSZ01  1.0040794  0.0047922   209.523  &lt; 2e-16 ***\nDESTIN_SZBDSZ02 -0.2478149  0.0063085   -39.283  &lt; 2e-16 ***\nDESTIN_SZBDSZ03  0.1016088  0.0057420    17.696  &lt; 2e-16 ***\nDESTIN_SZBDSZ04  1.1082928  0.0047747   232.116  &lt; 2e-16 ***\nDESTIN_SZBDSZ05  0.8737933  0.0050593   172.712  &lt; 2e-16 ***\nDESTIN_SZBDSZ06  0.2897032  0.0058244    49.740  &lt; 2e-16 ***\nDESTIN_SZBDSZ07 -0.9026193  0.0113656   -79.416  &lt; 2e-16 ***\nDESTIN_SZBDSZ08 -1.7063577  0.0131234  -130.024  &lt; 2e-16 ***\nDESTIN_SZBKSZ01 -1.3892839  0.0083307  -166.767  &lt; 2e-16 ***\nDESTIN_SZBKSZ02 -0.6661120  0.0073464   -90.672  &lt; 2e-16 ***\nDESTIN_SZBKSZ03 -0.9536826  0.0073196  -130.292  &lt; 2e-16 ***\nDESTIN_SZBKSZ04 -0.6655610  0.0065868  -101.044  &lt; 2e-16 ***\nDESTIN_SZBKSZ05 -0.9053119  0.0079264  -114.215  &lt; 2e-16 ***\nDESTIN_SZBKSZ06 -1.2622159  0.0075079  -168.119  &lt; 2e-16 ***\nDESTIN_SZBKSZ07 -0.0423370  0.0056686    -7.469 8.10e-14 ***\nDESTIN_SZBKSZ08 -1.3811240  0.0084985  -162.515  &lt; 2e-16 ***\nDESTIN_SZBKSZ09 -0.0797012  0.0061428   -12.975  &lt; 2e-16 ***\nDESTIN_SZBLSZ01 -0.8859670  0.0088108  -100.555  &lt; 2e-16 ***\nDESTIN_SZBLSZ02  0.1362723  0.0082167    16.585  &lt; 2e-16 ***\nDESTIN_SZBLSZ03  1.2037396  0.0093508   128.732  &lt; 2e-16 ***\nDESTIN_SZBLSZ04 -0.9316219  0.0178080   -52.315  &lt; 2e-16 ***\nDESTIN_SZBMSZ01  0.7188470  0.0061160   117.536  &lt; 2e-16 ***\nDESTIN_SZBMSZ02 -0.0597895  0.0061206    -9.769  &lt; 2e-16 ***\nDESTIN_SZBMSZ03 -0.2427075  0.0069937   -34.704  &lt; 2e-16 ***\nDESTIN_SZBMSZ04 -0.0622494  0.0065569    -9.494  &lt; 2e-16 ***\nDESTIN_SZBMSZ05 -0.2857019  0.0086450   -33.048  &lt; 2e-16 ***\nDESTIN_SZBMSZ06 -1.3486558  0.0158904   -84.872  &lt; 2e-16 ***\nDESTIN_SZBMSZ07  0.4549687  0.0058315    78.020  &lt; 2e-16 ***\nDESTIN_SZBMSZ08 -0.8730268  0.0077814  -112.195  &lt; 2e-16 ***\nDESTIN_SZBMSZ09 -2.0319890  0.0163038  -124.633  &lt; 2e-16 ***\nDESTIN_SZBMSZ10 -1.4319101  0.0102616  -139.541  &lt; 2e-16 ***\nDESTIN_SZBMSZ11 -1.2429176  0.0092250  -134.733  &lt; 2e-16 ***\nDESTIN_SZBMSZ12 -0.8526549  0.0096009   -88.810  &lt; 2e-16 ***\nDESTIN_SZBMSZ13  0.1399907  0.0066885    20.930  &lt; 2e-16 ***\nDESTIN_SZBMSZ14 -1.0103155  0.0091377  -110.566  &lt; 2e-16 ***\nDESTIN_SZBMSZ15 -0.6819769  0.0086179   -79.135  &lt; 2e-16 ***\nDESTIN_SZBMSZ16 -1.4468308  0.0134051  -107.931  &lt; 2e-16 ***\nDESTIN_SZBMSZ17 -1.5312175  0.0186843   -81.952  &lt; 2e-16 ***\nDESTIN_SZBPSZ01 -1.1726725  0.0073257  -160.077  &lt; 2e-16 ***\nDESTIN_SZBPSZ02 -2.1072012  0.0103320  -203.949  &lt; 2e-16 ***\nDESTIN_SZBPSZ03 -1.6944911  0.0098520  -171.995  &lt; 2e-16 ***\nDESTIN_SZBPSZ04 -0.7664610  0.0074458  -102.939  &lt; 2e-16 ***\nDESTIN_SZBPSZ05  0.1358370  0.0056258    24.145  &lt; 2e-16 ***\nDESTIN_SZBPSZ06 -1.2425471  0.0096942  -128.175  &lt; 2e-16 ***\nDESTIN_SZBPSZ07 -0.1666192  0.0094969   -17.545  &lt; 2e-16 ***\nDESTIN_SZBSSZ01  0.3857894  0.0057261    67.374  &lt; 2e-16 ***\nDESTIN_SZBSSZ02 -0.5293265  0.0064886   -81.578  &lt; 2e-16 ***\nDESTIN_SZBSSZ03  0.3909966  0.0048540    80.551  &lt; 2e-16 ***\nDESTIN_SZBTSZ01  0.7114965  0.0054528   130.482  &lt; 2e-16 ***\nDESTIN_SZBTSZ02 -0.0487084  0.0082474    -5.906 3.51e-09 ***\nDESTIN_SZBTSZ03  0.5539032  0.0064423    85.979  &lt; 2e-16 ***\nDESTIN_SZBTSZ04 -0.7120734  0.0128676   -55.339  &lt; 2e-16 ***\nDESTIN_SZBTSZ05  0.2176097  0.0086791    25.073  &lt; 2e-16 ***\nDESTIN_SZBTSZ06 -0.2167084  0.0084925   -25.518  &lt; 2e-16 ***\nDESTIN_SZBTSZ07 -1.4045618  0.0124363  -112.940  &lt; 2e-16 ***\nDESTIN_SZBTSZ08 -0.8213918  0.0120793   -68.000  &lt; 2e-16 ***\nDESTIN_SZCBSZ01 -5.7340877  0.3333916   -17.199  &lt; 2e-16 ***\nDESTIN_SZCCSZ01 -0.0304192  0.0095920    -3.171 0.001518 ** \nDESTIN_SZCHSZ01 -0.2598507  0.0115311   -22.535  &lt; 2e-16 ***\nDESTIN_SZCHSZ02  0.3497750  0.0068334    51.186  &lt; 2e-16 ***\nDESTIN_SZCHSZ03  2.4550172  0.0050883   482.481  &lt; 2e-16 ***\nDESTIN_SZCKSZ01 -0.4691744  0.0063130   -74.319  &lt; 2e-16 ***\nDESTIN_SZCKSZ02 -0.9557084  0.0069331  -137.847  &lt; 2e-16 ***\nDESTIN_SZCKSZ03  0.0442112  0.0057117     7.740 9.91e-15 ***\nDESTIN_SZCKSZ04 -0.8592063  0.0081238  -105.764  &lt; 2e-16 ***\nDESTIN_SZCKSZ05 -1.1745333  0.0087305  -134.532  &lt; 2e-16 ***\nDESTIN_SZCKSZ06 -0.4982877  0.0085514   -58.269  &lt; 2e-16 ***\nDESTIN_SZCLSZ01  0.2665065  0.0059712    44.632  &lt; 2e-16 ***\nDESTIN_SZCLSZ02 -1.9758876  0.0150823  -131.007  &lt; 2e-16 ***\nDESTIN_SZCLSZ03 -0.9051310  0.0091479   -98.944  &lt; 2e-16 ***\nDESTIN_SZCLSZ04 -0.0828732  0.0061559   -13.462  &lt; 2e-16 ***\nDESTIN_SZCLSZ05 -1.1414780  0.0100760  -113.287  &lt; 2e-16 ***\nDESTIN_SZCLSZ06  0.3229402  0.0056269    57.392  &lt; 2e-16 ***\nDESTIN_SZCLSZ07 -0.4833612  0.0069777   -69.272  &lt; 2e-16 ***\nDESTIN_SZCLSZ08 -0.3219670  0.0075615   -42.580  &lt; 2e-16 ***\nDESTIN_SZCLSZ09  0.0564166  0.0080703     6.991 2.74e-12 ***\nDESTIN_SZDTSZ02 -1.6384236  0.0374725   -43.723  &lt; 2e-16 ***\nDESTIN_SZDTSZ03 -0.4021571  0.0152716   -26.334  &lt; 2e-16 ***\nDESTIN_SZDTSZ13 -1.2799441  0.0177095   -72.274  &lt; 2e-16 ***\nDESTIN_SZGLSZ01 -0.0190303  0.0060665    -3.137 0.001707 ** \nDESTIN_SZGLSZ02 -0.0308469  0.0058724    -5.253 1.50e-07 ***\nDESTIN_SZGLSZ03  0.6927638  0.0048456   142.969  &lt; 2e-16 ***\nDESTIN_SZGLSZ04  0.9325848  0.0049183   189.616  &lt; 2e-16 ***\nDESTIN_SZGLSZ05  0.8480056  0.0048801   173.768  &lt; 2e-16 ***\nDESTIN_SZHGSZ01  0.0652969  0.0047795    13.662  &lt; 2e-16 ***\nDESTIN_SZHGSZ02 -0.9498251  0.0066577  -142.667  &lt; 2e-16 ***\nDESTIN_SZHGSZ03 -1.4372499  0.0076387  -188.154  &lt; 2e-16 ***\nDESTIN_SZHGSZ04 -0.5236292  0.0055353   -94.599  &lt; 2e-16 ***\nDESTIN_SZHGSZ05 -0.5420295  0.0058099   -93.295  &lt; 2e-16 ***\nDESTIN_SZHGSZ06 -0.9054730  0.0067581  -133.983  &lt; 2e-16 ***\nDESTIN_SZHGSZ07  0.0215109  0.0054019     3.982 6.83e-05 ***\nDESTIN_SZHGSZ08 -0.0490979  0.0059206    -8.293  &lt; 2e-16 ***\nDESTIN_SZHGSZ09 -0.0711560  0.0062875   -11.317  &lt; 2e-16 ***\nDESTIN_SZHGSZ10 -3.5807154  0.0290642  -123.200  &lt; 2e-16 ***\nDESTIN_SZJESZ01 -0.4023638  0.0065057   -61.848  &lt; 2e-16 ***\nDESTIN_SZJESZ02 -0.7654353  0.0067096  -114.081  &lt; 2e-16 ***\nDESTIN_SZJESZ03 -0.8778812  0.0071238  -123.232  &lt; 2e-16 ***\nDESTIN_SZJESZ04 -1.1998075  0.0088733  -135.215  &lt; 2e-16 ***\nDESTIN_SZJESZ05 -1.5623652  0.0116898  -133.652  &lt; 2e-16 ***\nDESTIN_SZJESZ06  0.2311474  0.0055595    41.577  &lt; 2e-16 ***\nDESTIN_SZJESZ07 -1.2753348  0.0094838  -134.475  &lt; 2e-16 ***\nDESTIN_SZJESZ08 -0.7654533  0.0099306   -77.081  &lt; 2e-16 ***\nDESTIN_SZJESZ09  0.1637628  0.0074164    22.081  &lt; 2e-16 ***\nDESTIN_SZJESZ10  0.7394958  0.0091249    81.041  &lt; 2e-16 ***\nDESTIN_SZJESZ11  0.5157364  0.0086546    59.591  &lt; 2e-16 ***\nDESTIN_SZJWSZ01 -1.0165204  0.0083025  -122.435  &lt; 2e-16 ***\nDESTIN_SZJWSZ02 -0.8530646  0.0067851  -125.727  &lt; 2e-16 ***\nDESTIN_SZJWSZ03  0.5176135  0.0056449    91.695  &lt; 2e-16 ***\nDESTIN_SZJWSZ04  0.3427105  0.0058499    58.584  &lt; 2e-16 ***\nDESTIN_SZJWSZ05 -1.1695940  0.0080069  -146.073  &lt; 2e-16 ***\nDESTIN_SZJWSZ06 -0.7466462  0.0070240  -106.299  &lt; 2e-16 ***\nDESTIN_SZJWSZ07 -3.0124535  0.0333481   -90.334  &lt; 2e-16 ***\nDESTIN_SZJWSZ08 -0.4253502  0.0066584   -63.881  &lt; 2e-16 ***\nDESTIN_SZJWSZ09  0.9428005  0.0053190   177.251  &lt; 2e-16 ***\nDESTIN_SZKLSZ01 -0.2965013  0.0066422   -44.639  &lt; 2e-16 ***\nDESTIN_SZKLSZ02 -0.4921137  0.0067689   -72.702  &lt; 2e-16 ***\nDESTIN_SZKLSZ03 -0.8489213  0.0078294  -108.427  &lt; 2e-16 ***\nDESTIN_SZKLSZ04 -1.2656342  0.0099918  -126.667  &lt; 2e-16 ***\nDESTIN_SZKLSZ05 -0.3570126  0.0096300   -37.073  &lt; 2e-16 ***\nDESTIN_SZKLSZ06 -2.4764906  0.0390868   -63.359  &lt; 2e-16 ***\nDESTIN_SZKLSZ07 -0.7316189  0.0080994   -90.330  &lt; 2e-16 ***\nDESTIN_SZKLSZ08 -0.1115398  0.0061168   -18.235  &lt; 2e-16 ***\nDESTIN_SZLKSZ01 -1.4940710  0.0271518   -55.027  &lt; 2e-16 ***\nDESTIN_SZMDSZ01 -1.6101440  0.0231238   -69.631  &lt; 2e-16 ***\nDESTIN_SZMDSZ02 -0.9339318  0.0126277   -73.959  &lt; 2e-16 ***\nDESTIN_SZMDSZ03 -3.4868547  0.0303657  -114.829  &lt; 2e-16 ***\nDESTIN_SZMPSZ01 -0.4518483  0.0089869   -50.279  &lt; 2e-16 ***\nDESTIN_SZMPSZ02 -0.5868264  0.0073193   -80.176  &lt; 2e-16 ***\nDESTIN_SZMPSZ03  0.4805365  0.0059041    81.391  &lt; 2e-16 ***\nDESTIN_SZMUSZ02 -1.3837581  0.0218713   -63.268  &lt; 2e-16 ***\nDESTIN_SZNTSZ01 -3.0694691  0.0533346   -57.551  &lt; 2e-16 ***\nDESTIN_SZNTSZ02 -1.4992973  0.0130358  -115.014  &lt; 2e-16 ***\nDESTIN_SZNTSZ03 -0.5221236  0.0089923   -58.064  &lt; 2e-16 ***\nDESTIN_SZNTSZ05 -1.9751162  0.0282369   -69.948  &lt; 2e-16 ***\nDESTIN_SZNTSZ06 -3.9959411  0.0511214   -78.166  &lt; 2e-16 ***\nDESTIN_SZNVSZ01 -0.1126966  0.0057077   -19.745  &lt; 2e-16 ***\nDESTIN_SZNVSZ02 -0.0259250  0.0064427    -4.024 5.72e-05 ***\nDESTIN_SZNVSZ03 -0.0123214  0.0067692    -1.820 0.068725 .  \nDESTIN_SZNVSZ04 -1.3371298  0.0130261  -102.650  &lt; 2e-16 ***\nDESTIN_SZNVSZ05 -0.9686333  0.0101539   -95.395  &lt; 2e-16 ***\nDESTIN_SZPGSZ01 -1.1798309  0.0180543   -65.349  &lt; 2e-16 ***\nDESTIN_SZPGSZ02 -1.3289737  0.0085335  -155.736  &lt; 2e-16 ***\nDESTIN_SZPGSZ03 -0.1661373  0.0055166   -30.116  &lt; 2e-16 ***\nDESTIN_SZPGSZ04 -0.3046408  0.0058469   -52.103  &lt; 2e-16 ***\nDESTIN_SZPGSZ05 -1.5412612  0.0093261  -165.264  &lt; 2e-16 ***\nDESTIN_SZPLSZ01 -0.3439667  0.0083504   -41.192  &lt; 2e-16 ***\nDESTIN_SZPLSZ02 -1.7574919  0.0154244  -113.942  &lt; 2e-16 ***\nDESTIN_SZPLSZ03 -0.3455776  0.0112089   -30.831  &lt; 2e-16 ***\nDESTIN_SZPLSZ04 -2.0749385  0.0141153  -146.999  &lt; 2e-16 ***\nDESTIN_SZPLSZ05 -0.4855216  0.0134069   -36.214  &lt; 2e-16 ***\nDESTIN_SZPNSZ01  0.0117816  0.0083558     1.410 0.158543    \nDESTIN_SZPNSZ02  0.7389858  0.0089823    82.272  &lt; 2e-16 ***\nDESTIN_SZPNSZ03 -0.4708719  0.0098588   -47.761  &lt; 2e-16 ***\nDESTIN_SZPNSZ04  1.3156771  0.0111200   118.316  &lt; 2e-16 ***\nDESTIN_SZPNSZ05  0.9881886  0.0153169    64.516  &lt; 2e-16 ***\nDESTIN_SZPRSZ01 -1.0678999  0.0098295  -108.642  &lt; 2e-16 ***\nDESTIN_SZPRSZ02  0.0650279  0.0063927    10.172  &lt; 2e-16 ***\nDESTIN_SZPRSZ03  0.6348138  0.0050147   126.592  &lt; 2e-16 ***\nDESTIN_SZPRSZ04 -0.3640286  0.0097572   -37.309  &lt; 2e-16 ***\nDESTIN_SZPRSZ05  0.0380410  0.0062577     6.079 1.21e-09 ***\nDESTIN_SZPRSZ06  0.3153712  0.0068742    45.877  &lt; 2e-16 ***\nDESTIN_SZPRSZ07 -1.6669973  0.0145573  -114.513  &lt; 2e-16 ***\nDESTIN_SZPRSZ08 -0.6170648  0.0078424   -78.683  &lt; 2e-16 ***\nDESTIN_SZQTSZ01 -0.5496582  0.0098285   -55.925  &lt; 2e-16 ***\nDESTIN_SZQTSZ02 -0.7318114  0.0086807   -84.303  &lt; 2e-16 ***\nDESTIN_SZQTSZ03 -0.5893064  0.0084789   -69.503  &lt; 2e-16 ***\nDESTIN_SZQTSZ04 -0.7103906  0.0085341   -83.242  &lt; 2e-16 ***\nDESTIN_SZQTSZ05 -0.4721472  0.0078164   -60.405  &lt; 2e-16 ***\nDESTIN_SZQTSZ06 -0.6591466  0.0080069   -82.322  &lt; 2e-16 ***\nDESTIN_SZQTSZ07 -0.9540454  0.0126807   -75.236  &lt; 2e-16 ***\nDESTIN_SZQTSZ08  0.4508867  0.0064870    69.507  &lt; 2e-16 ***\nDESTIN_SZQTSZ09 -0.4061810  0.0075485   -53.810  &lt; 2e-16 ***\nDESTIN_SZQTSZ10  0.1351889  0.0068202    19.822  &lt; 2e-16 ***\nDESTIN_SZQTSZ11  0.3181553  0.0067958    46.816  &lt; 2e-16 ***\nDESTIN_SZQTSZ12 -0.1055766  0.0095576   -11.046  &lt; 2e-16 ***\nDESTIN_SZQTSZ13  0.5199663  0.0071928    72.290  &lt; 2e-16 ***\nDESTIN_SZQTSZ14  0.6086332  0.0078537    77.496  &lt; 2e-16 ***\nDESTIN_SZQTSZ15  1.3906866  0.0092250   150.753  &lt; 2e-16 ***\nDESTIN_SZRCSZ01 -0.0862091  0.0085363   -10.099  &lt; 2e-16 ***\nDESTIN_SZRCSZ06 -1.0186282  0.0211113   -48.250  &lt; 2e-16 ***\nDESTIN_SZRVSZ01 -1.5294454  0.0179337   -85.283  &lt; 2e-16 ***\nDESTIN_SZRVSZ02 -2.3607754  0.0355628   -66.383  &lt; 2e-16 ***\nDESTIN_SZRVSZ03 -1.5266254  0.0156276   -97.688  &lt; 2e-16 ***\nDESTIN_SZRVSZ04 -1.0986565  0.0168695   -65.127  &lt; 2e-16 ***\nDESTIN_SZRVSZ05 -2.4004418  0.0320917   -74.799  &lt; 2e-16 ***\nDESTIN_SZSBSZ01 -1.4023966  0.0109496  -128.078  &lt; 2e-16 ***\nDESTIN_SZSBSZ02 -1.3899893  0.0090891  -152.929  &lt; 2e-16 ***\nDESTIN_SZSBSZ03  0.4509008  0.0059864    75.321  &lt; 2e-16 ***\nDESTIN_SZSBSZ04  0.1796309  0.0070142    25.610  &lt; 2e-16 ***\nDESTIN_SZSBSZ05 -1.3159699  0.0096485  -136.391  &lt; 2e-16 ***\nDESTIN_SZSBSZ06 -1.7705263  0.0253064   -69.964  &lt; 2e-16 ***\nDESTIN_SZSBSZ07 -0.7471529  0.0238628   -31.310  &lt; 2e-16 ***\nDESTIN_SZSBSZ08  0.7884520  0.0069638   113.221  &lt; 2e-16 ***\nDESTIN_SZSBSZ09  0.0131702  0.0066350     1.985 0.047150 *  \nDESTIN_SZSESZ02 -0.7247347  0.0060626  -119.541  &lt; 2e-16 ***\nDESTIN_SZSESZ03  0.1032728  0.0048330    21.368  &lt; 2e-16 ***\nDESTIN_SZSESZ04 -1.0992420  0.0068328  -160.878  &lt; 2e-16 ***\nDESTIN_SZSESZ05 -0.8374712  0.0058155  -144.006  &lt; 2e-16 ***\nDESTIN_SZSESZ06 -0.5531619  0.0074766   -73.985  &lt; 2e-16 ***\nDESTIN_SZSESZ07 -3.0328672  0.0246371  -123.101  &lt; 2e-16 ***\nDESTIN_SZSGSZ01 -0.1933777  0.0068235   -28.340  &lt; 2e-16 ***\nDESTIN_SZSGSZ02 -0.3000845  0.0060284   -49.779  &lt; 2e-16 ***\nDESTIN_SZSGSZ03 -0.4322879  0.0057308   -75.433  &lt; 2e-16 ***\nDESTIN_SZSGSZ04 -0.1214792  0.0056548   -21.482  &lt; 2e-16 ***\nDESTIN_SZSGSZ05 -2.0309074  0.0114993  -176.611  &lt; 2e-16 ***\nDESTIN_SZSGSZ06  0.6592095  0.0046364   142.182  &lt; 2e-16 ***\nDESTIN_SZSGSZ07 -0.4618538  0.0062027   -74.460  &lt; 2e-16 ***\nDESTIN_SZSISZ01 -0.5227257  0.0293399   -17.816  &lt; 2e-16 ***\nDESTIN_SZSKSZ01 -0.4797341  0.0091087   -52.668  &lt; 2e-16 ***\nDESTIN_SZSKSZ02  0.8477357  0.0067821   124.996  &lt; 2e-16 ***\nDESTIN_SZSKSZ03 -0.2477566  0.0074817   -33.115  &lt; 2e-16 ***\nDESTIN_SZSKSZ04 -1.3315992  0.0167055   -79.710  &lt; 2e-16 ***\nDESTIN_SZSKSZ05 -0.3519096  0.0131326   -26.797  &lt; 2e-16 ***\nDESTIN_SZSLSZ01 -0.8570431  0.0102100   -83.941  &lt; 2e-16 ***\nDESTIN_SZSLSZ04 -0.9949105  0.0088280  -112.699  &lt; 2e-16 ***\nDESTIN_SZSRSZ01 -1.0260696  0.0154393   -66.458  &lt; 2e-16 ***\nDESTIN_SZTHSZ01 -4.2040410  0.0404795  -103.856  &lt; 2e-16 ***\nDESTIN_SZTHSZ03 -2.4907000  0.0264056   -94.325  &lt; 2e-16 ***\nDESTIN_SZTHSZ04 -3.0701470  0.0244975  -125.325  &lt; 2e-16 ***\nDESTIN_SZTHSZ06 -2.5308161  0.0169699  -149.135  &lt; 2e-16 ***\nDESTIN_SZTMSZ01 -0.2354889  0.0067201   -35.042  &lt; 2e-16 ***\nDESTIN_SZTMSZ02  1.7379292  0.0044573   389.906  &lt; 2e-16 ***\nDESTIN_SZTMSZ03  0.9112458  0.0048718   187.043  &lt; 2e-16 ***\nDESTIN_SZTMSZ04  1.0731075  0.0048626   220.685  &lt; 2e-16 ***\nDESTIN_SZTMSZ05  0.6398583  0.0067321    95.046  &lt; 2e-16 ***\nDESTIN_SZTNSZ01 -0.3500456  0.0083835   -41.754  &lt; 2e-16 ***\nDESTIN_SZTNSZ02 -1.0573515  0.0112412   -94.060  &lt; 2e-16 ***\nDESTIN_SZTNSZ03 -1.4069979  0.0132733  -106.002  &lt; 2e-16 ***\nDESTIN_SZTNSZ04 -0.3616604  0.0085207   -42.445  &lt; 2e-16 ***\nDESTIN_SZTPSZ01 -0.5919243  0.0071153   -83.190  &lt; 2e-16 ***\nDESTIN_SZTPSZ02  0.7083350  0.0046540   152.198  &lt; 2e-16 ***\nDESTIN_SZTPSZ03 -0.5746433  0.0069625   -82.534  &lt; 2e-16 ***\nDESTIN_SZTPSZ04 -1.5821259  0.0084517  -187.196  &lt; 2e-16 ***\nDESTIN_SZTPSZ05 -1.1796256  0.0073039  -161.505  &lt; 2e-16 ***\nDESTIN_SZTPSZ06 -0.3968272  0.0077295   -51.339  &lt; 2e-16 ***\nDESTIN_SZTPSZ07 -2.1796617  0.0135199  -161.219  &lt; 2e-16 ***\nDESTIN_SZTPSZ08 -1.2568483  0.0107267  -117.170  &lt; 2e-16 ***\nDESTIN_SZTPSZ09 -0.2446623  0.0080840   -30.265  &lt; 2e-16 ***\nDESTIN_SZTPSZ10 -1.2542191  0.0102049  -122.904  &lt; 2e-16 ***\nDESTIN_SZTPSZ11 -0.0886883  0.0062888   -14.102  &lt; 2e-16 ***\nDESTIN_SZTPSZ12 -0.7211823  0.0075086   -96.048  &lt; 2e-16 ***\nDESTIN_SZTSSZ01 -1.6271921  0.0238498   -68.227  &lt; 2e-16 ***\nDESTIN_SZTSSZ02 -0.3340439  0.0169137   -19.750  &lt; 2e-16 ***\nDESTIN_SZTSSZ03  0.3924580  0.0111060    35.338  &lt; 2e-16 ***\nDESTIN_SZTSSZ04  0.4169932  0.0114926    36.283  &lt; 2e-16 ***\nDESTIN_SZTSSZ05  1.3206287  0.0120381   109.704  &lt; 2e-16 ***\nDESTIN_SZTSSZ06  2.4023725  0.0192840   124.579  &lt; 2e-16 ***\nDESTIN_SZWCSZ01  2.0697378  0.0061379   337.206  &lt; 2e-16 ***\nDESTIN_SZWCSZ02 -2.0934025  0.0134782  -155.318  &lt; 2e-16 ***\nDESTIN_SZWCSZ03 -3.0670149  0.0349748   -87.692  &lt; 2e-16 ***\nDESTIN_SZWDSZ01  1.0113215  0.0051461   196.522  &lt; 2e-16 ***\nDESTIN_SZWDSZ02 -1.3383793  0.0076482  -174.993  &lt; 2e-16 ***\nDESTIN_SZWDSZ03  0.3394361  0.0060396    56.202  &lt; 2e-16 ***\nDESTIN_SZWDSZ04 -0.8324928  0.0086019   -96.780  &lt; 2e-16 ***\nDESTIN_SZWDSZ05 -0.8279090  0.0083251   -99.447  &lt; 2e-16 ***\nDESTIN_SZWDSZ06 -0.2252899  0.0061074   -36.888  &lt; 2e-16 ***\nDESTIN_SZWDSZ07 -1.3638599  0.0077990  -174.877  &lt; 2e-16 ***\nDESTIN_SZWDSZ08 -0.4350176  0.0077566   -56.083  &lt; 2e-16 ***\nDESTIN_SZWDSZ09  0.5461048  0.0060745    89.901  &lt; 2e-16 ***\nDESTIN_SZYSSZ01  0.0243093  0.0053476     4.546 5.47e-06 ***\nDESTIN_SZYSSZ02 -0.3398962  0.0065947   -51.540  &lt; 2e-16 ***\nDESTIN_SZYSSZ03 -0.3694187  0.0074032   -49.900  &lt; 2e-16 ***\nDESTIN_SZYSSZ04 -0.5222848  0.0067396   -77.495  &lt; 2e-16 ***\nDESTIN_SZYSSZ05 -1.5460539  0.0124899  -123.784  &lt; 2e-16 ***\nDESTIN_SZYSSZ06 -1.5556892  0.0127640  -121.881  &lt; 2e-16 ***\nDESTIN_SZYSSZ07 -0.8673403  0.0167723   -51.713  &lt; 2e-16 ***\nDESTIN_SZYSSZ08  0.5389364  0.0052540   102.577  &lt; 2e-16 ***\nDESTIN_SZYSSZ09  0.1199483  0.0055235    21.716  &lt; 2e-16 ***\nlog(dist)       -1.8906989  0.0005319 -3554.786  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 36117615  on 14273  degrees of freedom\nResidual deviance:  8091747  on 13715  degrees of freedom\nAIC: 8177420\n\nNumber of Fisher Scoring iterations: 7\n\n\nThe R-squared value is then calculated to examine how the constraints hold for destinations this time.\nNote that there is a relatively greater improvement in the R-squared value.\n\nCalcRSquared(dbcSIM$data$TRIPS, dbcSIM$fitted.values)\n\n[1] 0.6883675\n\n\n\n\n\nAnother useful model performance measure for continuous dependent variable is the Root Mean Squared Error. The compare_performance() in the performance package is used to compare the different models.\nA list called model_list is created to hold the four models.\n\nmodel_list = list(unconstrained=uncSIM,\n                   originConstrained=orcSIM,\n                   destinationConstrained=decSIM,\n                   doublyConstrained=dbcSIM)\n\nThe RMSE of the models are computed using the compare_performance() function. The output reveals that doubly constrained SIM is the best model among the four SIMs because it has the smallest RMSE value of 1487.111.\n\ncompare_performance(model_list,\n                    metrics = \"RMSE\")\n\n# Comparison of Model Performance Indices\n\nName                   | Model |     RMSE\n-----------------------------------------\nunconstrained          |   glm | 2429.978\noriginConstrained      |   glm | 2057.579\ndestinationConstrained |   glm | 1891.724\ndoublyConstrained      |   glm | 1487.111\n\n\n\n\n\nThe observed values and the fitted values are visualised below.\nThe fitted values from each model are extracted.\n\ndf = as.data.frame(uncSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\nThe values are then joined to the SIM_data data.frame.\n\nSIM_data = SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(uncTRIPS = \"uncSIM$fitted.values\")\n\nThe same steps are repeated for the three other SIMs - Origin Constrained SIM (i.e. orcSIM), Destination Constrained SIM (i.e. decSIM), and Doubly Constrained SIM (i.e. dbcSIM).\n\ndf = as.data.frame(orcSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\nSIM_data = SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(orcTRIPS = \"orcSIM$fitted.values\")\n\ndf = as.data.frame(decSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\nSIM_data = SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(decTRIPS = \"decSIM$fitted.values\")\n\ndf = as.data.frame(dbcSIM$fitted.values) %&gt;%\n  round(digits = 0)\n\nSIM_data = SIM_data %&gt;%\n  cbind(df) %&gt;%\n  rename(dbcTRIPS = \"dbcSIM$fitted.values\")\n\nThe plots are then visualised below:\n\nunc_p = ggplot(data = SIM_data,\n                aes(x = uncTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\norc_p = ggplot(data = SIM_data,\n                aes(x = orcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndec_p = ggplot(data = SIM_data,\n                aes(x = decTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndbc_p = ggplot(data = SIM_data,\n                aes(x = dbcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\nggarrange(unc_p, orc_p, dec_p, dbc_p,\n          ncol = 2,\n          nrow = 2)\n\n\n\n\n~~~ End of In-class Exercise 3 ~~~"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/data/geospatial/entertn.html",
    "href": "In-class_Ex/In-class_Ex4/data/geospatial/entertn.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/data/geospatial/FinServ.html",
    "href": "In-class_Ex/In-class_Ex4/data/geospatial/FinServ.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex4/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/In-class_Ex4.html",
    "href": "In-class_Ex/In-class_Ex4/In-class_Ex4.html",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "A well calibrated Spatial Interaction Model (SIM) requires conceptually logical and well-prepared propulsiveness and attractiveness variables.\nIn this in-class exercise, the tasks are:\n\nPerform geocoding using SLA OneMap API;\nConvert an aspatial data set into a simple feature tibble data.frame;\nPerform point-in-polygon count analysis;\nAppend the propulsiveness and attractiveness variables onto a flow data set; and\nCalibrate Geographically Weighted Poisson Regression models.\n\n\n\n\nThe following packages are loaded into the R environment:\n\nsf for importing, managing, and processing geospatial data;\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data;\ntmap for thematic mapping; and\nhttr for making HTTP requests.\n\n\npacman::p_load(tidyverse, sf, httr, tmap)\n\n\n\n\nThe data set, Generalinformationofschools.csv, is downloaded from Data.gov.sg.\nGeocoding is the process of taking an aspatial description of a location, such as an address or postcode, and returning geographic coordinates, frequently latitude-longitude pair, to identify a location on the Earth’s surface.\nThe Singapore Land Authority (SLA) supports an online geocoding service called OneMap API. The Search API looks up the address data or 6-digit postal code for an entered value. It then returns both latitude, longitude and x,y coordinates of the searched location.\nThe code chunks below perform geocoding using SLA OneMap API. The input data is in csv file format, and imported into the R environment using the read_csv() function in the readr package. A collection of http call functions in the httr package is then used to pass the individual records to the geocoding server on OneMap.\nThe output is two tibble data.frames - found and not_found. The found data.frame contains all records that are geocoded correctly, and the not_found data.frame contains postal code(s) that fail to be geocoded.\nThe found data table is joined with the original csv data table using a unique identifier (i.e. POSTAL) that is common to both data tables. The output data table is saved as a csv file, found.\n\nurl = \"https://www.onemap.gov.sg/api/common/elastic/search\"\n\ncsv = read_csv(\"data/aspatial/Generalinformationofschools.csv\")\npostcodes = csv$`postal_code`\n\nfound = data.frame()\nnot_found = data.frame()\n\nfor(postcode in postcodes){\n  query = list('searchVal' = postcode, 'returnGeom' = 'Y', 'getAddrDetails' = 'Y', 'pageNum' = '1')\n  res = GET(url, query = query)\n  if((content(res)$found)!=0){\n  found = rbind(found, data.frame(content(res))[4:13])\n  } else{\n  not_found = data.frame(postcode)\n  }\n}\n\nNext, both the found and not_found data.frames are combined into a single tibble data.frame, merged. At the same time, merged and not_found tibble data.frames are written into two separate csv files, schools and not_found respectively.\n\nmerged = merge(csv, found, by.x = 'postal_code', by.y = 'results.POSTAL', all = TRUE)\nwrite.csv(merged, file = 'data/aspatial/schools.csv')\nwrite.csv(not_found, file = 'data/aspatial/not_found.csv')\n\n\n\n\n\n\nIn this sub-section, the schools.csv is imported into the R environment and only the necessary fields are selected and renamed.\n\nschools = read_csv('data/aspatial/schools.csv') %&gt;%\n  rename(latitude = \"results.LATITUDE\", \n         longitude = \"results.LONGITUDE\") %&gt;%\n  select(postal_code, school_name, latitude, longitude)\n\n\nStudent Note: Using Google Map, the latitude and longitude of the school (Zhenghua Secondary School) that was not geocoded are 1.389279 and 103.7651 respectively. This is manually coded into the schools data frame.\n\n\nschools = schools %&gt;%\n  mutate(latitude = ifelse(school_name == \"ZHENGHUA SECONDARY SCHOOL\", 1.389279, latitude)) %&gt;%\n  mutate(longitude = ifelse(school_name == \"ZHENGHUA SECONDARY SCHOOL\", 103.7651, longitude))\n\n\n\n\nNext, the schools tibble data.frame is converted into a simple feature tibble data.frame, schools_sf, using the st_as_sf() function in the sf package and the values in the latitude and longitude fields.\n\nschools_sf = st_as_sf(schools,\n                      coords = c(\"longitude\", \"latitude\"),\n                      crs = 4326) %&gt;%\n  st_transform(crs = 3414)\n\n\n\n\nTo ensure that the schools sf tibble data.frame has been projected and converted correctly, the schools point data are plotted for visual inspection.\nFirst, the Master Plan Subzone Boundary shapefile is imported as the mpsz sf tibble data.frame.\n\nmpsz = st_read(dsn = \"data/geospatial/\",\n                layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\jmphosis\\ISSS624\\In-class_Ex\\In-class_Ex4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\nA point symbol map is then plotted to show the locations of the schools.\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz) +\n  tm_polygons() +\ntm_shape(schools_sf) +\n  tm_dots()\n\n\n\n\n\n\n\nThe number of schools in each planning subzone is then counted using the lengths() function in the base pacakge and the st_intersects() function in the sf package.\nThe summary statistics reveal that there are excessive 0 values in “SCHOOL_COUNT” field. If the log() function is used to transform this field, these 0 values would need to be replaced with a value between 0 and 1 (exclusive).\n\nmpsz$`SCHOOL_COUNT` = lengths(\n  st_intersects(mpsz, schools_sf)\n)\n\nsummary(mpsz$SCHOOL_COUNT)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   0.000   1.054   2.000  12.000 \n\n\n\n\n\n\n\n\nThe number of business locations are also counted for each planning subzone using the same steps earlier.\n\nbiz_sf = st_read(dsn = \"data/geospatial\",\n                 layer = \"Business\")\n\nReading layer `Business' from data source \n  `C:\\jmphosis\\ISSS624\\In-class_Ex\\In-class_Ex4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 6550 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3669.148 ymin: 25408.41 xmax: 47034.83 ymax: 50148.54\nProjected CRS: SVY21 / Singapore TM\n\n\nThe points are visualised.\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz) +\n  tm_polygons() +\ntm_shape(biz_sf) +\n  tm_dots()\n\n\n\n\nAgain, the summary statistics show that there are 0 values.\n\nmpsz$`BIZ_COUNT` = lengths(\n  st_intersects(\n    mpsz, biz_sf))\n\nsummary(mpsz$BIZ_COUNT)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    2.00   19.73   13.00  307.00 \n\n\n\n\n\nThe origin-destination bus passengers flow data is imported\n\nflow_data = read_rds(\"data/rds/flow_data.rds\")\n\nThe derived fields of “SCHOOL_COUNT” and “BIZ_COUNT” are added to the flow_data sf tibble data.frame.\n\nStudent Note: The unique join fields are “DESTIN_SZ” of flow_data and SUBZONE_C of mpsz_tidy because the “SCHOOL_COUNT” and “BIZ_COUNT” values are pull factors that attract bus commuters to the destinations.\n\n\nmpsz_tidy = mpsz %&gt;%\n  st_drop_geometry() %&gt;%\n  select(SUBZONE_C, SCHOOL_COUNT, BIZ_COUNT)\n\n\nflow_data = flow_data %&gt;%\n  left_join(mpsz_tidy,\n            by = c(\"DESTIN_SZ\" = \"SUBZONE_C\")) %&gt;%\n  rename(TRIPS = MORNING_PEAK,\n         DIST = dist)\n\n\n\n\nSince the Poisson Regression is based off log, and log 0 is undefined, it is important to ensure that there are no 0 values in the explanatory variables.\nThe summary() function in the base package is used to compute the summary statistics of all variables. As mentioned earlier, the “SCHOOL_COUNT” and “BIZ_COUNT” variables consist of 0 values.\n\nsummary(flow_data)\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS             DIST      \n Length:14734       Length:14734       Min.   :     1   Min.   :   50  \n Class :character   Class :character   1st Qu.:    14   1st Qu.: 3346  \n Mode  :character   Mode  :character   Median :    76   Median : 6067  \n                                       Mean   :  1021   Mean   : 6880  \n                                       3rd Qu.:   426   3rd Qu.: 9729  \n                                       Max.   :232187   Max.   :26136  \n ORIGIN_AGE7_12    ORIGIN_AGE13_24    ORIGIN_AGE25_64    DESTIN_AGE7_12   \n Min.   :   0.99   Min.   :    0.99   Min.   :    0.99   Min.   :   0.99  \n 1st Qu.: 240.00   1st Qu.:  440.00   1st Qu.: 2200.00   1st Qu.: 240.00  \n Median : 700.00   Median : 1350.00   Median : 6810.00   Median : 720.00  \n Mean   :1031.86   Mean   : 2268.84   Mean   :10487.62   Mean   :1033.40  \n 3rd Qu.:1480.00   3rd Qu.: 3260.00   3rd Qu.:15770.00   3rd Qu.:1500.00  \n Max.   :6340.00   Max.   :16380.00   Max.   :74610.00   Max.   :6340.00  \n DESTIN_AGE13_24    DESTIN_AGE25_64     SCHOOL_COUNT      BIZ_COUNT     \n Min.   :    0.99   Min.   :    0.99   Min.   : 0.000   Min.   :  0.00  \n 1st Qu.:  460.00   1st Qu.: 2200.00   1st Qu.: 0.000   1st Qu.:  0.00  \n Median : 1420.00   Median : 7030.00   Median : 1.000   Median :  3.00  \n Mean   : 2290.35   Mean   :10574.46   Mean   : 1.583   Mean   : 16.17  \n 3rd Qu.: 3260.00   3rd Qu.:15830.00   3rd Qu.: 2.000   3rd Qu.: 12.00  \n Max.   :16380.00   Max.   :74610.00   Max.   :12.000   Max.   :307.00  \n          geometry    \n LINESTRING   :14734  \n epsg:3414    :    0  \n +proj=tmer...:    0  \n                      \n                      \n                      \n\n\nThe 0 values are replaced with 0.99.\n\nflow_data$SCHOOL_COUNT = ifelse(\n  flow_data$SCHOOL_COUNT == 0,\n  0.99, flow_data$SCHOOL_COUNT)\nflow_data$BIZ_COUNT = ifelse(\n  flow_data$BIZ_COUNT == 0,\n  0.99, flow_data$BIZ_COUNT)\n\nThe summary() function in the base package is used again to check that the replacements are been made.\n\nsummary(flow_data)\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS             DIST      \n Length:14734       Length:14734       Min.   :     1   Min.   :   50  \n Class :character   Class :character   1st Qu.:    14   1st Qu.: 3346  \n Mode  :character   Mode  :character   Median :    76   Median : 6067  \n                                       Mean   :  1021   Mean   : 6880  \n                                       3rd Qu.:   426   3rd Qu.: 9729  \n                                       Max.   :232187   Max.   :26136  \n ORIGIN_AGE7_12    ORIGIN_AGE13_24    ORIGIN_AGE25_64    DESTIN_AGE7_12   \n Min.   :   0.99   Min.   :    0.99   Min.   :    0.99   Min.   :   0.99  \n 1st Qu.: 240.00   1st Qu.:  440.00   1st Qu.: 2200.00   1st Qu.: 240.00  \n Median : 700.00   Median : 1350.00   Median : 6810.00   Median : 720.00  \n Mean   :1031.86   Mean   : 2268.84   Mean   :10487.62   Mean   :1033.40  \n 3rd Qu.:1480.00   3rd Qu.: 3260.00   3rd Qu.:15770.00   3rd Qu.:1500.00  \n Max.   :6340.00   Max.   :16380.00   Max.   :74610.00   Max.   :6340.00  \n DESTIN_AGE13_24    DESTIN_AGE25_64     SCHOOL_COUNT      BIZ_COUNT     \n Min.   :    0.99   Min.   :    0.99   Min.   : 0.990   Min.   :  0.99  \n 1st Qu.:  460.00   1st Qu.: 2200.00   1st Qu.: 0.990   1st Qu.:  0.99  \n Median : 1420.00   Median : 7030.00   Median : 1.000   Median :  3.00  \n Mean   : 2290.35   Mean   :10574.46   Mean   : 1.987   Mean   : 16.47  \n 3rd Qu.: 3260.00   3rd Qu.:15830.00   3rd Qu.: 2.000   3rd Qu.: 12.00  \n Max.   :16380.00   Max.   :74610.00   Max.   :12.000   Max.   :307.00  \n          geometry    \n LINESTRING   :14734  \n epsg:3414    :    0  \n +proj=tmer...:    0  \n                      \n                      \n                      \n\n\nThe tidied flow_data is then saved into an rds file, flow_data_tidy.\n\nwrite_rds(flow_data,\n          \"data/rds/flow_data_tidy.rds\")\n\n\n\n\n\n\n\n\nThe required packages are loaded.\n\npacman::p_load(tmap, sf, performance,\n               ggpubr, tidyverse)\n\nThe earlier prepared flow_data_tidy is imported.\n\nflow_data = read_rds(\"data/rds/flow_data_tidy.rds\")\n\n\nglimpse(flow_data)\n\nRows: 14,734\nColumns: 13\n$ ORIGIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMS…\n$ DESTIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ02\", \"AMSZ03\", \"AMSZ04\", \"AMSZ05\", \"AMS…\n$ TRIPS           &lt;dbl&gt; 1998, 8289, 8971, 2252, 6136, 2148, 1620, 1925, 1773, …\n$ DIST            &lt;dbl&gt; 50.0000, 810.4491, 1360.9294, 840.4432, 1076.7916, 805…\n$ ORIGIN_AGE7_12  &lt;dbl&gt; 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310,…\n$ ORIGIN_AGE13_24 &lt;dbl&gt; 710, 710, 710, 710, 710, 710, 710, 710, 710, 710, 710,…\n$ ORIGIN_AGE25_64 &lt;dbl&gt; 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, …\n$ DESTIN_AGE7_12  &lt;dbl&gt; 310.00, 1140.00, 1010.00, 980.00, 810.00, 1050.00, 420…\n$ DESTIN_AGE13_24 &lt;dbl&gt; 710.00, 2770.00, 2650.00, 2000.00, 1920.00, 2390.00, 1…\n$ DESTIN_AGE25_64 &lt;dbl&gt; 2780.00, 15700.00, 14240.00, 11320.00, 9650.00, 12460.…\n$ SCHOOL_COUNT    &lt;dbl&gt; 0.99, 2.00, 2.00, 1.00, 3.00, 2.00, 0.99, 0.99, 3.00, …\n$ BIZ_COUNT       &lt;dbl&gt; 1.00, 0.99, 6.00, 0.99, 0.99, 0.99, 1.00, 117.00, 0.99…\n$ geometry        &lt;LINESTRING [m]&gt; LINESTRING (29501.77 39419...., LINESTRING …\n\n\nThe intra-subzone flows are filtered away.\n\nflow_data$FlowNoIntra = ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ,\n  0, flow_data$TRIPS)\n\nflow_data$offset = ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ,\n  0.000001, 1)\n\n\ninter_zonal_flow = flow_data %&gt;%\n  filter(FlowNoIntra &gt; 0)\n\n\n\n\n\nuncSIM_Poisson = glm(formula = TRIPS ~ \n               log(ORIGIN_AGE7_12) +\n               log(ORIGIN_AGE13_24) +\n               log(ORIGIN_AGE25_64) +\n               log(DESTIN_AGE7_12) +\n               log(DESTIN_AGE13_24) +\n               log(DESTIN_AGE25_64) +\n               log(SCHOOL_COUNT) +\n               log(BIZ_COUNT) + \n               log(DIST),\n             family = poisson(link = \"log\"),\n             data = inter_zonal_flow,\n             na.action = na.exclude)\n\nsummary(uncSIM_Poisson)\n\n\nCall:\nglm(formula = TRIPS ~ log(ORIGIN_AGE7_12) + log(ORIGIN_AGE13_24) + \n    log(ORIGIN_AGE25_64) + log(DESTIN_AGE7_12) + log(DESTIN_AGE13_24) + \n    log(DESTIN_AGE25_64) + log(SCHOOL_COUNT) + log(BIZ_COUNT) + \n    log(DIST), family = poisson(link = \"log\"), data = inter_zonal_flow, \n    na.action = na.exclude)\n\nCoefficients:\n                       Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept)          18.0512425  0.0031442  5741.2   &lt;2e-16 ***\nlog(ORIGIN_AGE7_12)   0.2923698  0.0007881   371.0   &lt;2e-16 ***\nlog(ORIGIN_AGE13_24)  0.9007953  0.0008286  1087.1   &lt;2e-16 ***\nlog(ORIGIN_AGE25_64) -0.8116432  0.0009538  -850.9   &lt;2e-16 ***\nlog(DESTIN_AGE7_12)  -0.0924800  0.0005717  -161.8   &lt;2e-16 ***\nlog(DESTIN_AGE13_24)  0.3457561  0.0008534   405.2   &lt;2e-16 ***\nlog(DESTIN_AGE25_64) -0.2252444  0.0007716  -291.9   &lt;2e-16 ***\nlog(SCHOOL_COUNT)     0.5799600  0.0005675  1022.0   &lt;2e-16 ***\nlog(BIZ_COUNT)        0.2072426  0.0001889  1096.9   &lt;2e-16 ***\nlog(DIST)            -1.6184787  0.0003752 -4313.1   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 47094011  on 14470  degrees of freedom\nResidual deviance: 21763889  on 14461  degrees of freedom\nAIC: 21853047\n\nNumber of Fisher Scoring iterations: 8\n\n\n\n\n\n\norcSIM_Poisson = glm(formula = TRIPS ~\n                       ORIGIN_SZ +\n                       log(SCHOOL_COUNT) +\n                       log(BIZ_COUNT) +\n                       log(DIST) -1, # no need for intercept for origin/dest constrained\n                     family = poisson(link = \"log\"),\n                     data = inter_zonal_flow,\n                     na.action = na.exclude)\n\noptions(max.print=10000) \nsummary(orcSIM_Poisson)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + log(SCHOOL_COUNT) + log(BIZ_COUNT) + \n    log(DIST) - 1, family = poisson(link = \"log\"), data = inter_zonal_flow, \n    na.action = na.exclude)\n\nCoefficients:\n                    Estimate Std. Error  z value Pr(&gt;|z|)    \nORIGIN_SZAMSZ01   19.8739840  0.0047627  4172.84   &lt;2e-16 ***\nORIGIN_SZAMSZ02   20.5902203  0.0042786  4812.33   &lt;2e-16 ***\nORIGIN_SZAMSZ03   20.2327026  0.0045531  4443.70   &lt;2e-16 ***\nORIGIN_SZAMSZ04   19.7744438  0.0049837  3967.79   &lt;2e-16 ***\nORIGIN_SZAMSZ05   19.6574529  0.0056396  3485.61   &lt;2e-16 ***\nORIGIN_SZAMSZ06   19.9659115  0.0048946  4079.16   &lt;2e-16 ***\nORIGIN_SZAMSZ07   18.6746164  0.0096316  1938.90   &lt;2e-16 ***\nORIGIN_SZAMSZ08   19.2701601  0.0090776  2122.82   &lt;2e-16 ***\nORIGIN_SZAMSZ09   19.9889467  0.0052858  3781.64   &lt;2e-16 ***\nORIGIN_SZAMSZ10   20.3422035  0.0045778  4443.62   &lt;2e-16 ***\nORIGIN_SZAMSZ11   18.3944113  0.0129212  1423.58   &lt;2e-16 ***\nORIGIN_SZAMSZ12   18.3484209  0.0109652  1673.33   &lt;2e-16 ***\nORIGIN_SZBDSZ01   20.9668587  0.0043388  4832.36   &lt;2e-16 ***\nORIGIN_SZBDSZ02   20.4059518  0.0050601  4032.75   &lt;2e-16 ***\nORIGIN_SZBDSZ03   20.6725514  0.0045276  4565.93   &lt;2e-16 ***\nORIGIN_SZBDSZ04   21.6703853  0.0038930  5566.44   &lt;2e-16 ***\nORIGIN_SZBDSZ05   20.7497445  0.0046085  4502.46   &lt;2e-16 ***\nORIGIN_SZBDSZ06   20.9119361  0.0046432  4503.77   &lt;2e-16 ***\nORIGIN_SZBDSZ07   18.9749815  0.0097896  1938.28   &lt;2e-16 ***\nORIGIN_SZBDSZ08   19.1933901  0.0091312  2101.95   &lt;2e-16 ***\nORIGIN_SZBKSZ01   19.5422606  0.0064732  3018.96   &lt;2e-16 ***\nORIGIN_SZBKSZ02   20.1748913  0.0050076  4028.89   &lt;2e-16 ***\nORIGIN_SZBKSZ03   20.3984624  0.0047226  4319.35   &lt;2e-16 ***\nORIGIN_SZBKSZ04   19.6182212  0.0059652  3288.76   &lt;2e-16 ***\nORIGIN_SZBKSZ05   19.6033818  0.0063181  3102.74   &lt;2e-16 ***\nORIGIN_SZBKSZ06   19.7145224  0.0056372  3497.20   &lt;2e-16 ***\nORIGIN_SZBKSZ07   20.4237448  0.0041912  4873.03   &lt;2e-16 ***\nORIGIN_SZBKSZ08   19.7992538  0.0050405  3928.02   &lt;2e-16 ***\nORIGIN_SZBKSZ09   19.7821586  0.0055558  3560.66   &lt;2e-16 ***\nORIGIN_SZBLSZ01   17.7977276  0.0149058  1194.01   &lt;2e-16 ***\nORIGIN_SZBLSZ02   17.4287491  0.0192364   906.03   &lt;2e-16 ***\nORIGIN_SZBLSZ03   16.5884288  0.0459848   360.74   &lt;2e-16 ***\nORIGIN_SZBLSZ04   17.7851626  0.0232823   763.89   &lt;2e-16 ***\nORIGIN_SZBMSZ01   20.0751840  0.0052887  3795.89   &lt;2e-16 ***\nORIGIN_SZBMSZ02   18.6956140  0.0066656  2804.80   &lt;2e-16 ***\nORIGIN_SZBMSZ03   19.3204425  0.0054755  3528.56   &lt;2e-16 ***\nORIGIN_SZBMSZ04   19.4724220  0.0049390  3942.59   &lt;2e-16 ***\nORIGIN_SZBMSZ05   16.9581801  0.0168804  1004.61   &lt;2e-16 ***\nORIGIN_SZBMSZ06   16.9898638  0.0181852   934.27   &lt;2e-16 ***\nORIGIN_SZBMSZ07   19.2868403  0.0056231  3429.91   &lt;2e-16 ***\nORIGIN_SZBMSZ08   19.1477543  0.0055918  3424.28   &lt;2e-16 ***\nORIGIN_SZBMSZ09   18.7564539  0.0086298  2173.46   &lt;2e-16 ***\nORIGIN_SZBMSZ10   18.3617854  0.0089250  2057.35   &lt;2e-16 ***\nORIGIN_SZBMSZ11   18.9167941  0.0063340  2986.54   &lt;2e-16 ***\nORIGIN_SZBMSZ12   18.7874661  0.0093024  2019.63   &lt;2e-16 ***\nORIGIN_SZBMSZ13   19.5654046  0.0057517  3401.70   &lt;2e-16 ***\nORIGIN_SZBMSZ14   19.0685619  0.0063346  3010.24   &lt;2e-16 ***\nORIGIN_SZBMSZ15   19.4403124  0.0058147  3343.30   &lt;2e-16 ***\nORIGIN_SZBMSZ16   18.4469203  0.0092638  1991.28   &lt;2e-16 ***\nORIGIN_SZBMSZ17   18.3430175  0.0157692  1163.22   &lt;2e-16 ***\nORIGIN_SZBPSZ01   20.1806714  0.0053660  3760.81   &lt;2e-16 ***\nORIGIN_SZBPSZ02   19.8116707  0.0061485  3222.19   &lt;2e-16 ***\nORIGIN_SZBPSZ03   19.8467602  0.0059769  3320.57   &lt;2e-16 ***\nORIGIN_SZBPSZ04   20.4613200  0.0048398  4227.72   &lt;2e-16 ***\nORIGIN_SZBPSZ05   20.5379711  0.0043769  4692.39   &lt;2e-16 ***\nORIGIN_SZBPSZ06   18.8948034  0.0093668  2017.21   &lt;2e-16 ***\nORIGIN_SZBPSZ07   19.4104568  0.0087961  2206.70   &lt;2e-16 ***\nORIGIN_SZBSSZ01   20.0139503  0.0056561  3538.45   &lt;2e-16 ***\nORIGIN_SZBSSZ02   20.2543885  0.0047198  4291.38   &lt;2e-16 ***\nORIGIN_SZBSSZ03   19.5428803  0.0052713  3707.41   &lt;2e-16 ***\nORIGIN_SZBTSZ01   20.0198045  0.0058541  3419.77   &lt;2e-16 ***\nORIGIN_SZBTSZ02   19.3618525  0.0081472  2376.51   &lt;2e-16 ***\nORIGIN_SZBTSZ03   19.5883853  0.0068935  2841.59   &lt;2e-16 ***\nORIGIN_SZBTSZ04   18.7720238  0.0103909  1806.58   &lt;2e-16 ***\nORIGIN_SZBTSZ05   18.8069026  0.0120628  1559.08   &lt;2e-16 ***\nORIGIN_SZBTSZ06   18.7068633  0.0094575  1978.00   &lt;2e-16 ***\nORIGIN_SZBTSZ07   17.6292257  0.0141551  1245.43   &lt;2e-16 ***\nORIGIN_SZBTSZ08   18.6989374  0.0109610  1705.94   &lt;2e-16 ***\nORIGIN_SZCBSZ01   18.2189868  0.0548317   332.27   &lt;2e-16 ***\nORIGIN_SZCCSZ01   18.9734563  0.0139450  1360.59   &lt;2e-16 ***\nORIGIN_SZCHSZ01   19.5955119  0.0121035  1619.00   &lt;2e-16 ***\nORIGIN_SZCHSZ02   19.3320960  0.0081620  2368.55   &lt;2e-16 ***\nORIGIN_SZCHSZ03   21.2164518  0.0063552  3338.43   &lt;2e-16 ***\nORIGIN_SZCKSZ01   20.1046845  0.0049333  4075.29   &lt;2e-16 ***\nORIGIN_SZCKSZ02   20.5371946  0.0050256  4086.53   &lt;2e-16 ***\nORIGIN_SZCKSZ03   20.7210560  0.0042184  4912.07   &lt;2e-16 ***\nORIGIN_SZCKSZ04   21.4013886  0.0042524  5032.80   &lt;2e-16 ***\nORIGIN_SZCKSZ05   20.9413146  0.0049434  4236.18   &lt;2e-16 ***\nORIGIN_SZCKSZ06   20.2557727  0.0071832  2819.88   &lt;2e-16 ***\nORIGIN_SZCLSZ01   19.3383703  0.0076634  2523.46   &lt;2e-16 ***\nORIGIN_SZCLSZ02   18.5226956  0.0135522  1366.77   &lt;2e-16 ***\nORIGIN_SZCLSZ03   19.0225512  0.0080145  2373.51   &lt;2e-16 ***\nORIGIN_SZCLSZ04   20.7981505  0.0042400  4905.22   &lt;2e-16 ***\nORIGIN_SZCLSZ05   18.3015625  0.0146815  1246.58   &lt;2e-16 ***\nORIGIN_SZCLSZ06   20.8207386  0.0039567  5262.09   &lt;2e-16 ***\nORIGIN_SZCLSZ07   19.6728958  0.0054199  3629.76   &lt;2e-16 ***\nORIGIN_SZCLSZ08   20.0851929  0.0056956  3526.43   &lt;2e-16 ***\nORIGIN_SZCLSZ09   18.5749589  0.0165415  1122.93   &lt;2e-16 ***\nORIGIN_SZDTSZ02   15.8276209  0.0833992   189.78   &lt;2e-16 ***\nORIGIN_SZDTSZ03   16.2512838  0.0737972   220.22   &lt;2e-16 ***\nORIGIN_SZDTSZ13   16.7744385  0.0312450   536.87   &lt;2e-16 ***\nORIGIN_SZGLSZ01   18.2368248  0.0096104  1897.62   &lt;2e-16 ***\nORIGIN_SZGLSZ02   19.8705255  0.0049014  4054.06   &lt;2e-16 ***\nORIGIN_SZGLSZ03   19.8249435  0.0053109  3732.85   &lt;2e-16 ***\nORIGIN_SZGLSZ04   20.7800335  0.0041261  5036.20   &lt;2e-16 ***\nORIGIN_SZGLSZ05   20.6040494  0.0043049  4786.23   &lt;2e-16 ***\nORIGIN_SZHGSZ01   20.0273475  0.0044824  4468.04   &lt;2e-16 ***\nORIGIN_SZHGSZ02   20.2480656  0.0044575  4542.47   &lt;2e-16 ***\nORIGIN_SZHGSZ03   20.0756442  0.0049003  4096.81   &lt;2e-16 ***\nORIGIN_SZHGSZ04   20.7577748  0.0040465  5129.84   &lt;2e-16 ***\nORIGIN_SZHGSZ05   20.9779992  0.0040123  5228.42   &lt;2e-16 ***\nORIGIN_SZHGSZ06   19.7403058  0.0054229  3640.20   &lt;2e-16 ***\nORIGIN_SZHGSZ07   20.1896268  0.0046051  4384.22   &lt;2e-16 ***\nORIGIN_SZHGSZ08   19.8646492  0.0052403  3790.72   &lt;2e-16 ***\nORIGIN_SZHGSZ09   18.3647736  0.0069196  2654.04   &lt;2e-16 ***\nORIGIN_SZHGSZ10   16.8720475  0.0421046   400.72   &lt;2e-16 ***\nORIGIN_SZJESZ01   20.2673794  0.0046723  4337.79   &lt;2e-16 ***\nORIGIN_SZJESZ02   20.0595982  0.0046503  4313.61   &lt;2e-16 ***\nORIGIN_SZJESZ03   19.9128778  0.0049848  3994.75   &lt;2e-16 ***\nORIGIN_SZJESZ04   18.5053667  0.0099227  1864.94   &lt;2e-16 ***\nORIGIN_SZJESZ05   17.8172930  0.0138840  1283.29   &lt;2e-16 ***\nORIGIN_SZJESZ06   20.0124157  0.0045009  4446.36   &lt;2e-16 ***\nORIGIN_SZJESZ07   18.1821423  0.0117267  1550.49   &lt;2e-16 ***\nORIGIN_SZJESZ08   18.8713046  0.0116456  1620.46   &lt;2e-16 ***\nORIGIN_SZJESZ09   20.5535527  0.0048456  4241.72   &lt;2e-16 ***\nORIGIN_SZJESZ10   18.4922322  0.0191243   966.95   &lt;2e-16 ***\nORIGIN_SZJESZ11   18.2891211  0.0197114   927.85   &lt;2e-16 ***\nORIGIN_SZJWSZ01   20.4912737  0.0063102  3247.35   &lt;2e-16 ***\nORIGIN_SZJWSZ02   20.8236694  0.0042249  4928.82   &lt;2e-16 ***\nORIGIN_SZJWSZ03   21.2587613  0.0039733  5350.40   &lt;2e-16 ***\nORIGIN_SZJWSZ04   20.3816464  0.0046199  4411.67   &lt;2e-16 ***\nORIGIN_SZJWSZ05   18.0607448  0.0128857  1401.61   &lt;2e-16 ***\nORIGIN_SZJWSZ06   18.7015202  0.0107614  1737.83   &lt;2e-16 ***\nORIGIN_SZJWSZ07   17.3991822  0.0277096   627.91   &lt;2e-16 ***\nORIGIN_SZJWSZ08   21.8044465  0.0037356  5836.95   &lt;2e-16 ***\nORIGIN_SZJWSZ09   21.5414930  0.0036033  5978.19   &lt;2e-16 ***\nORIGIN_SZKLSZ01   20.0307712  0.0047868  4184.59   &lt;2e-16 ***\nORIGIN_SZKLSZ02   19.0634769  0.0062318  3059.05   &lt;2e-16 ***\nORIGIN_SZKLSZ03   19.2685700  0.0057172  3370.25   &lt;2e-16 ***\nORIGIN_SZKLSZ04   17.7085067  0.0119809  1478.06   &lt;2e-16 ***\nORIGIN_SZKLSZ05   18.6384471  0.0107596  1732.26   &lt;2e-16 ***\nORIGIN_SZKLSZ06   13.7280296  0.1857160    73.92   &lt;2e-16 ***\nORIGIN_SZKLSZ07   18.6425146  0.0084952  2194.47   &lt;2e-16 ***\nORIGIN_SZKLSZ08   18.0928506  0.0101567  1781.37   &lt;2e-16 ***\nORIGIN_SZLKSZ01   17.8907138  0.0397083   450.55   &lt;2e-16 ***\nORIGIN_SZMDSZ01   18.7605188  0.0285455   657.22   &lt;2e-16 ***\nORIGIN_SZMDSZ02   19.1533927  0.0102815  1862.90   &lt;2e-16 ***\nORIGIN_SZMDSZ03   17.8404982  0.0169690  1051.36   &lt;2e-16 ***\nORIGIN_SZMPSZ01   19.0765941  0.0083937  2272.74   &lt;2e-16 ***\nORIGIN_SZMPSZ02   19.2162527  0.0068331  2812.24   &lt;2e-16 ***\nORIGIN_SZMPSZ03   19.9965344  0.0054569  3664.44   &lt;2e-16 ***\nORIGIN_SZMUSZ02   15.9130765  0.1037472   153.38   &lt;2e-16 ***\nORIGIN_SZNTSZ01   17.0840999  0.0352513   484.64   &lt;2e-16 ***\nORIGIN_SZNTSZ02   16.5792122  0.0233186   710.99   &lt;2e-16 ***\nORIGIN_SZNTSZ03   18.9506415  0.0075957  2494.93   &lt;2e-16 ***\nORIGIN_SZNTSZ05   15.8770261  0.0495825   320.21   &lt;2e-16 ***\nORIGIN_SZNTSZ06   15.3997415  0.0557029   276.46   &lt;2e-16 ***\nORIGIN_SZNVSZ01   20.2241694  0.0043487  4650.65   &lt;2e-16 ***\nORIGIN_SZNVSZ02   19.1897826  0.0065383  2934.97   &lt;2e-16 ***\nORIGIN_SZNVSZ03   18.8854268  0.0080459  2347.22   &lt;2e-16 ***\nORIGIN_SZNVSZ04   18.8940191  0.0090985  2076.61   &lt;2e-16 ***\nORIGIN_SZNVSZ05   17.6278585  0.0168107  1048.61   &lt;2e-16 ***\nORIGIN_SZPGSZ01   19.4825220  0.0122960  1584.46   &lt;2e-16 ***\nORIGIN_SZPGSZ02   19.4726761  0.0073116  2663.25   &lt;2e-16 ***\nORIGIN_SZPGSZ03   20.5515713  0.0045631  4503.86   &lt;2e-16 ***\nORIGIN_SZPGSZ04   21.0527131  0.0041500  5072.89   &lt;2e-16 ***\nORIGIN_SZPGSZ05   20.1436604  0.0057267  3517.48   &lt;2e-16 ***\nORIGIN_SZPLSZ01   19.1832002  0.0120006  1598.53   &lt;2e-16 ***\nORIGIN_SZPLSZ02   18.8752206  0.0149740  1260.53   &lt;2e-16 ***\nORIGIN_SZPLSZ03   18.1000818  0.0371769   486.86   &lt;2e-16 ***\nORIGIN_SZPLSZ04   17.1730559  0.0370280   463.79   &lt;2e-16 ***\nORIGIN_SZPLSZ05   17.9084439  0.0225031   795.82   &lt;2e-16 ***\nORIGIN_SZPNSZ01   21.0804425  0.0044829  4702.41   &lt;2e-16 ***\nORIGIN_SZPNSZ02   19.8822123  0.0111507  1783.05   &lt;2e-16 ***\nORIGIN_SZPNSZ03   17.9293289  0.0193571   926.24   &lt;2e-16 ***\nORIGIN_SZPNSZ04   17.1039594  0.0334954   510.64   &lt;2e-16 ***\nORIGIN_SZPNSZ05   18.2543864  0.0275554   662.46   &lt;2e-16 ***\nORIGIN_SZPRSZ01   19.8777935  0.0117586  1690.49   &lt;2e-16 ***\nORIGIN_SZPRSZ02   21.0751780  0.0044832  4700.88   &lt;2e-16 ***\nORIGIN_SZPRSZ03   20.6717019  0.0045577  4535.55   &lt;2e-16 ***\nORIGIN_SZPRSZ04   19.6365125  0.0074923  2620.90   &lt;2e-16 ***\nORIGIN_SZPRSZ05   21.3132151  0.0042119  5060.24   &lt;2e-16 ***\nORIGIN_SZPRSZ06   18.9314574  0.0117278  1614.24   &lt;2e-16 ***\nORIGIN_SZPRSZ07   17.2822918  0.0162430  1063.98   &lt;2e-16 ***\nORIGIN_SZPRSZ08   19.9267642  0.0062298  3198.62   &lt;2e-16 ***\nORIGIN_SZQTSZ01   19.7357175  0.0066359  2974.08   &lt;2e-16 ***\nORIGIN_SZQTSZ02   19.2082141  0.0061402  3128.26   &lt;2e-16 ***\nORIGIN_SZQTSZ03   19.7771883  0.0056220  3517.83   &lt;2e-16 ***\nORIGIN_SZQTSZ04   18.7114421  0.0072842  2568.76   &lt;2e-16 ***\nORIGIN_SZQTSZ05   19.3049324  0.0062401  3093.69   &lt;2e-16 ***\nORIGIN_SZQTSZ06   19.2643228  0.0065590  2937.09   &lt;2e-16 ***\nORIGIN_SZQTSZ07   18.5697347  0.0095373  1947.06   &lt;2e-16 ***\nORIGIN_SZQTSZ08   19.6147001  0.0061330  3198.21   &lt;2e-16 ***\nORIGIN_SZQTSZ09   19.2550793  0.0069947  2752.82   &lt;2e-16 ***\nORIGIN_SZQTSZ10   19.5801866  0.0064513  3035.07   &lt;2e-16 ***\nORIGIN_SZQTSZ11   17.7398366  0.0143648  1234.95   &lt;2e-16 ***\nORIGIN_SZQTSZ12   17.2420354  0.0186736   923.34   &lt;2e-16 ***\nORIGIN_SZQTSZ13   19.3857418  0.0078878  2457.69   &lt;2e-16 ***\nORIGIN_SZQTSZ14   18.1300753  0.0122096  1484.90   &lt;2e-16 ***\nORIGIN_SZQTSZ15   19.4222283  0.0120871  1606.86   &lt;2e-16 ***\nORIGIN_SZRCSZ01   18.1549045  0.0125108  1451.13   &lt;2e-16 ***\nORIGIN_SZRCSZ06   18.8836400  0.0082161  2298.38   &lt;2e-16 ***\nORIGIN_SZRVSZ01   16.7864438  0.0323796   518.43   &lt;2e-16 ***\nORIGIN_SZRVSZ02   16.4203244  0.0276836   593.14   &lt;2e-16 ***\nORIGIN_SZRVSZ03   16.6453738  0.0244992   679.42   &lt;2e-16 ***\nORIGIN_SZRVSZ04   15.9559213  0.0556344   286.80   &lt;2e-16 ***\nORIGIN_SZRVSZ05   17.0476331  0.0164122  1038.71   &lt;2e-16 ***\nORIGIN_SZSBSZ01   20.0417968  0.0062488  3207.29   &lt;2e-16 ***\nORIGIN_SZSBSZ02   19.1869565  0.0081051  2367.26   &lt;2e-16 ***\nORIGIN_SZSBSZ03   20.5769861  0.0045108  4561.70   &lt;2e-16 ***\nORIGIN_SZSBSZ04   20.5154199  0.0050548  4058.57   &lt;2e-16 ***\nORIGIN_SZSBSZ05   19.6250669  0.0065562  2993.35   &lt;2e-16 ***\nORIGIN_SZSBSZ06   18.8419757  0.0171135  1101.00   &lt;2e-16 ***\nORIGIN_SZSBSZ07   19.4897259  0.0124528  1565.09   &lt;2e-16 ***\nORIGIN_SZSBSZ08   18.7027917  0.0140545  1330.73   &lt;2e-16 ***\nORIGIN_SZSBSZ09   18.8893480  0.0088571  2132.67   &lt;2e-16 ***\nORIGIN_SZSESZ02   20.8962192  0.0041665  5015.34   &lt;2e-16 ***\nORIGIN_SZSESZ03   20.9452771  0.0039737  5270.94   &lt;2e-16 ***\nORIGIN_SZSESZ04   20.6576142  0.0046364  4455.55   &lt;2e-16 ***\nORIGIN_SZSESZ05   19.5170732  0.0058912  3312.92   &lt;2e-16 ***\nORIGIN_SZSESZ06   20.7595824  0.0045747  4537.89   &lt;2e-16 ***\nORIGIN_SZSESZ07   17.6888256  0.0195787   903.47   &lt;2e-16 ***\nORIGIN_SZSGSZ01   19.1359250  0.0085781  2230.79   &lt;2e-16 ***\nORIGIN_SZSGSZ02   18.5614369  0.0102037  1819.10   &lt;2e-16 ***\nORIGIN_SZSGSZ03   19.9933176  0.0050434  3964.23   &lt;2e-16 ***\nORIGIN_SZSGSZ04   20.2426871  0.0047211  4287.71   &lt;2e-16 ***\nORIGIN_SZSGSZ05   18.0114965  0.0107743  1671.70   &lt;2e-16 ***\nORIGIN_SZSGSZ06   20.2593194  0.0044538  4548.76   &lt;2e-16 ***\nORIGIN_SZSGSZ07   19.0763664  0.0062968  3029.54   &lt;2e-16 ***\nORIGIN_SZSKSZ01   19.9222451  0.0085136  2340.04   &lt;2e-16 ***\nORIGIN_SZSKSZ02   20.8633383  0.0055248  3776.33   &lt;2e-16 ***\nORIGIN_SZSKSZ03   19.6528148  0.0080534  2440.33   &lt;2e-16 ***\nORIGIN_SZSKSZ04   18.0754470  0.0275771   655.45   &lt;2e-16 ***\nORIGIN_SZSKSZ05   19.1192521  0.0155579  1228.91   &lt;2e-16 ***\nORIGIN_SZSLSZ01   17.1501034  0.0329384   520.67   &lt;2e-16 ***\nORIGIN_SZSLSZ04   19.5949774  0.0076753  2552.98   &lt;2e-16 ***\nORIGIN_SZSRSZ01   16.9761403  0.0162020  1047.78   &lt;2e-16 ***\nORIGIN_SZTHSZ01   17.9695687  0.0488559   367.81   &lt;2e-16 ***\nORIGIN_SZTHSZ03   18.5427522  0.0223617   829.22   &lt;2e-16 ***\nORIGIN_SZTHSZ04   17.4760374  0.0286247   610.52   &lt;2e-16 ***\nORIGIN_SZTHSZ06   17.8401186  0.0183322   973.16   &lt;2e-16 ***\nORIGIN_SZTMSZ01   20.3406361  0.0056607  3593.33   &lt;2e-16 ***\nORIGIN_SZTMSZ02   22.0307026  0.0037386  5892.85   &lt;2e-16 ***\nORIGIN_SZTMSZ03   21.3451920  0.0040606  5256.65   &lt;2e-16 ***\nORIGIN_SZTMSZ04   20.6611593  0.0049896  4140.87   &lt;2e-16 ***\nORIGIN_SZTMSZ05   19.3323133  0.0112868  1712.82   &lt;2e-16 ***\nORIGIN_SZTNSZ01   17.9513571  0.0128266  1399.54   &lt;2e-16 ***\nORIGIN_SZTNSZ02   18.0267387  0.0098372  1832.51   &lt;2e-16 ***\nORIGIN_SZTNSZ03   17.7253700  0.0134668  1316.23   &lt;2e-16 ***\nORIGIN_SZTNSZ04   19.4474075  0.0073760  2636.59   &lt;2e-16 ***\nORIGIN_SZTPSZ01   19.1078631  0.0065635  2911.25   &lt;2e-16 ***\nORIGIN_SZTPSZ02   20.2837634  0.0041411  4898.18   &lt;2e-16 ***\nORIGIN_SZTPSZ03   19.1838238  0.0059552  3221.37   &lt;2e-16 ***\nORIGIN_SZTPSZ04   19.1805388  0.0054778  3501.53   &lt;2e-16 ***\nORIGIN_SZTPSZ05   19.3718076  0.0058610  3305.18   &lt;2e-16 ***\nORIGIN_SZTPSZ06   19.6605723  0.0054968  3576.70   &lt;2e-16 ***\nORIGIN_SZTPSZ07   19.4499807  0.0060491  3215.36   &lt;2e-16 ***\nORIGIN_SZTPSZ08   18.7996538  0.0095757  1963.28   &lt;2e-16 ***\nORIGIN_SZTPSZ09   19.0025110  0.0067068  2833.31   &lt;2e-16 ***\nORIGIN_SZTPSZ10   18.8899657  0.0076094  2482.46   &lt;2e-16 ***\nORIGIN_SZTPSZ11   19.6277780  0.0053983  3635.93   &lt;2e-16 ***\nORIGIN_SZTPSZ12   19.1471104  0.0065742  2912.45   &lt;2e-16 ***\nORIGIN_SZTSSZ01   17.4901113  0.0478954   365.17   &lt;2e-16 ***\nORIGIN_SZTSSZ02   20.4997466  0.0081850  2504.55   &lt;2e-16 ***\nORIGIN_SZTSSZ03   20.1076553  0.0084728  2373.19   &lt;2e-16 ***\nORIGIN_SZTSSZ04   20.0646610  0.0089008  2254.26   &lt;2e-16 ***\nORIGIN_SZTSSZ05   19.3962067  0.0151392  1281.19   &lt;2e-16 ***\nORIGIN_SZTSSZ06   20.9235857  0.0178278  1173.65   &lt;2e-16 ***\nORIGIN_SZWCSZ01   20.8411600  0.0086519  2408.86   &lt;2e-16 ***\nORIGIN_SZWCSZ02   17.7355404  0.0328889   539.26   &lt;2e-16 ***\nORIGIN_SZWCSZ03   14.9380886  0.1240699   120.40   &lt;2e-16 ***\nORIGIN_SZWDSZ01   21.1969012  0.0037830  5603.23   &lt;2e-16 ***\nORIGIN_SZWDSZ02   20.5930001  0.0044572  4620.13   &lt;2e-16 ***\nORIGIN_SZWDSZ03   21.2521867  0.0041672  5099.85   &lt;2e-16 ***\nORIGIN_SZWDSZ04   21.0702687  0.0048648  4331.13   &lt;2e-16 ***\nORIGIN_SZWDSZ05   20.4008998  0.0051801  3938.35   &lt;2e-16 ***\nORIGIN_SZWDSZ06   20.6669176  0.0049280  4193.78   &lt;2e-16 ***\nORIGIN_SZWDSZ07   19.0500370  0.0082729  2302.71   &lt;2e-16 ***\nORIGIN_SZWDSZ08   19.0816252  0.0080667  2365.49   &lt;2e-16 ***\nORIGIN_SZWDSZ09   21.4182096  0.0040391  5302.73   &lt;2e-16 ***\nORIGIN_SZYSSZ01   19.5355157  0.0057540  3395.14   &lt;2e-16 ***\nORIGIN_SZYSSZ02   20.8737972  0.0048278  4323.64   &lt;2e-16 ***\nORIGIN_SZYSSZ03   21.6614437  0.0040011  5413.81   &lt;2e-16 ***\nORIGIN_SZYSSZ04   20.9305289  0.0043595  4801.10   &lt;2e-16 ***\nORIGIN_SZYSSZ05   20.1727678  0.0058466  3450.34   &lt;2e-16 ***\nORIGIN_SZYSSZ06   19.1481507  0.0116724  1640.47   &lt;2e-16 ***\nORIGIN_SZYSSZ07   18.7919074  0.0141636  1326.78   &lt;2e-16 ***\nORIGIN_SZYSSZ08   19.9733515  0.0061229  3262.07   &lt;2e-16 ***\nORIGIN_SZYSSZ09   20.9366181  0.0040347  5189.15   &lt;2e-16 ***\nlog(SCHOOL_COUNT)  0.4755516  0.0004701  1011.55   &lt;2e-16 ***\nlog(BIZ_COUNT)     0.1796905  0.0001856   968.12   &lt;2e-16 ***\nlog(DIST)         -1.6929522  0.0004093 -4136.01   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 189463537  on 14471  degrees of freedom\nResidual deviance:  15526121  on 14189  degrees of freedom\nAIC: 15615824\n\nNumber of Fisher Scoring iterations: 6\n\n\n\nCalcRSquared = function(observed, estimated){\n  r = cor(observed, estimated)\n  R2 = r^2\n  R2\n}\n\nThe calculated R-squared value shows how well the factors explain the flow.\n\nCalcRSquared(orcSIM_Poisson$data$TRIPS, orcSIM_Poisson$fitted.values)\n\n[1] 0.4362208\n\n\nThe RMSE (root mean square error) shows how much error the model typically makes in its predictions, with a higher weight for large errors. \n\nperformance_rmse(orcSIM_Poisson,\n                 normalized = FALSE) # use raw values (not normalised to mean = 0, sd = 1)\n\n[1] 2613.236\n\n\n\nperformance_rmse(orcSIM_Poisson,\n                 normalized = TRUE)\n\n[1] 0.01762449\n\n\n\n\n\n\ndecSIM_Poisson = glm(formula = TRIPS ~\n                       DESTIN_SZ +\n                       log(SCHOOL_COUNT) +\n                       log(BIZ_COUNT) +\n                       log(DIST) -1, # no need for intercept for origin/dest constrained\n                     family = poisson(link = \"log\"),\n                     data = inter_zonal_flow,\n                     na.action = na.exclude)\n\noptions(max.print=10000) \nsummary(decSIM_Poisson)\n\n\nCall:\nglm(formula = TRIPS ~ DESTIN_SZ + log(SCHOOL_COUNT) + log(BIZ_COUNT) + \n    log(DIST) - 1, family = poisson(link = \"log\"), data = inter_zonal_flow, \n    na.action = na.exclude)\n\nCoefficients: (2 not defined because of singularities)\n                    Estimate Std. Error  z value Pr(&gt;|z|)    \nDESTIN_SZAMSZ01   21.1707732  0.0043061  4916.50   &lt;2e-16 ***\nDESTIN_SZAMSZ02   21.2078744  0.0045468  4664.38   &lt;2e-16 ***\nDESTIN_SZAMSZ03   21.3013201  0.0044813  4753.42   &lt;2e-16 ***\nDESTIN_SZAMSZ04   20.1308111  0.0064133  3138.93   &lt;2e-16 ***\nDESTIN_SZAMSZ05   20.0506878  0.0065018  3083.86   &lt;2e-16 ***\nDESTIN_SZAMSZ06   20.0451017  0.0064487  3108.40   &lt;2e-16 ***\nDESTIN_SZAMSZ07   19.5826783  0.0097695  2004.47   &lt;2e-16 ***\nDESTIN_SZAMSZ08   20.5737364  0.0070282  2927.33   &lt;2e-16 ***\nDESTIN_SZAMSZ09   20.1033435  0.0066166  3038.33   &lt;2e-16 ***\nDESTIN_SZAMSZ10   21.1095528  0.0046595  4530.43   &lt;2e-16 ***\nDESTIN_SZAMSZ11   20.4752463  0.0086989  2353.77   &lt;2e-16 ***\nDESTIN_SZAMSZ12   21.3327820  0.0050851  4195.12   &lt;2e-16 ***\nDESTIN_SZBDSZ01   22.1599964  0.0042575  5204.92   &lt;2e-16 ***\nDESTIN_SZBDSZ02   21.5725622  0.0054426  3963.67   &lt;2e-16 ***\nDESTIN_SZBDSZ03   21.5623108  0.0050035  4309.49   &lt;2e-16 ***\nDESTIN_SZBDSZ04   22.5476678  0.0041405  5445.62   &lt;2e-16 ***\nDESTIN_SZBDSZ05   22.1161185  0.0043537  5079.89   &lt;2e-16 ***\nDESTIN_SZBDSZ06   21.8637442  0.0048487  4509.20   &lt;2e-16 ***\nDESTIN_SZBDSZ07   20.8019112  0.0096760  2149.85   &lt;2e-16 ***\nDESTIN_SZBDSZ08   20.1783209  0.0110094  1832.83   &lt;2e-16 ***\nDESTIN_SZBKSZ01   20.1613906  0.0068518  2942.48   &lt;2e-16 ***\nDESTIN_SZBKSZ02   21.0060781  0.0056719  3703.53   &lt;2e-16 ***\nDESTIN_SZBKSZ03   20.4005278  0.0060403  3377.42   &lt;2e-16 ***\nDESTIN_SZBKSZ04   20.9578866  0.0050213  4173.80   &lt;2e-16 ***\nDESTIN_SZBKSZ05   20.2484852  0.0067233  3011.70   &lt;2e-16 ***\nDESTIN_SZBKSZ06   20.1610445  0.0062458  3227.92   &lt;2e-16 ***\nDESTIN_SZBKSZ07   21.2226420  0.0043081  4926.25   &lt;2e-16 ***\nDESTIN_SZBKSZ08   19.9407082  0.0070515  2827.87   &lt;2e-16 ***\nDESTIN_SZBKSZ09   20.9449602  0.0050867  4117.62   &lt;2e-16 ***\nDESTIN_SZBLSZ01   20.3549866  0.0071063  2864.35   &lt;2e-16 ***\nDESTIN_SZBLSZ02   20.8680588  0.0065532  3184.41   &lt;2e-16 ***\nDESTIN_SZBLSZ03   21.9666123  0.0074494  2948.77   &lt;2e-16 ***\nDESTIN_SZBLSZ04   20.0608960  0.0132173  1517.77   &lt;2e-16 ***\nDESTIN_SZBMSZ01   21.0397725  0.0051030  4123.04   &lt;2e-16 ***\nDESTIN_SZBMSZ02   20.2136377  0.0049343  4096.57   &lt;2e-16 ***\nDESTIN_SZBMSZ03   19.8975077  0.0057018  3489.68   &lt;2e-16 ***\nDESTIN_SZBMSZ04   19.9672544  0.0050852  3926.55   &lt;2e-16 ***\nDESTIN_SZBMSZ05   20.0404560  0.0069267  2893.22   &lt;2e-16 ***\nDESTIN_SZBMSZ06   18.8757661  0.0131578  1434.57   &lt;2e-16 ***\nDESTIN_SZBMSZ07   20.7776286  0.0047459  4378.01   &lt;2e-16 ***\nDESTIN_SZBMSZ08   19.3422399  0.0064714  2988.87   &lt;2e-16 ***\nDESTIN_SZBMSZ09   17.8682028  0.0152416  1172.33   &lt;2e-16 ***\nDESTIN_SZBMSZ10   18.7038758  0.0088997  2101.62   &lt;2e-16 ***\nDESTIN_SZBMSZ11   18.9932471  0.0080602  2356.42   &lt;2e-16 ***\nDESTIN_SZBMSZ12   19.6174244  0.0079721  2460.76   &lt;2e-16 ***\nDESTIN_SZBMSZ13   20.4715383  0.0054480  3757.65   &lt;2e-16 ***\nDESTIN_SZBMSZ14   19.3024793  0.0077088  2503.95   &lt;2e-16 ***\nDESTIN_SZBMSZ15   19.5269009  0.0070893  2754.43   &lt;2e-16 ***\nDESTIN_SZBMSZ16   18.6388498  0.0114112  1633.38   &lt;2e-16 ***\nDESTIN_SZBMSZ17   18.7799088  0.0166345  1128.97   &lt;2e-16 ***\nDESTIN_SZBPSZ01   20.4774150  0.0056648  3614.85   &lt;2e-16 ***\nDESTIN_SZBPSZ02   19.6017581  0.0084527  2318.98   &lt;2e-16 ***\nDESTIN_SZBPSZ03   19.9321269  0.0080819  2466.27   &lt;2e-16 ***\nDESTIN_SZBPSZ04   20.6870481  0.0060202  3436.25   &lt;2e-16 ***\nDESTIN_SZBPSZ05   21.6162685  0.0041774  5174.53   &lt;2e-16 ***\nDESTIN_SZBPSZ06   20.4807757  0.0078844  2597.64   &lt;2e-16 ***\nDESTIN_SZBPSZ07   21.1369881  0.0081303  2599.77   &lt;2e-16 ***\nDESTIN_SZBSSZ01   21.1811139  0.0051948  4077.34   &lt;2e-16 ***\nDESTIN_SZBSSZ02   20.5179325  0.0057516  3567.33   &lt;2e-16 ***\nDESTIN_SZBSSZ03   21.3589852  0.0043402  4921.24   &lt;2e-16 ***\nDESTIN_SZBTSZ01   21.5090129  0.0045965  4679.39   &lt;2e-16 ***\nDESTIN_SZBTSZ02   20.9831852  0.0070245  2987.16   &lt;2e-16 ***\nDESTIN_SZBTSZ03   21.1683763  0.0056374  3754.97   &lt;2e-16 ***\nDESTIN_SZBTSZ04   19.7596396  0.0108950  1813.65   &lt;2e-16 ***\nDESTIN_SZBTSZ05   20.8687672  0.0070802  2947.49   &lt;2e-16 ***\nDESTIN_SZBTSZ06   20.2638437  0.0072195  2806.84   &lt;2e-16 ***\nDESTIN_SZBTSZ07   19.1141699  0.0111203  1718.86   &lt;2e-16 ***\nDESTIN_SZBTSZ08   19.5399477  0.0100763  1939.19   &lt;2e-16 ***\nDESTIN_SZCBSZ01   16.4813511  0.3162466    52.12   &lt;2e-16 ***\nDESTIN_SZCCSZ01   20.8532304  0.0083758  2489.71   &lt;2e-16 ***\nDESTIN_SZCHSZ01   20.9482470  0.0098587  2124.85   &lt;2e-16 ***\nDESTIN_SZCHSZ02   21.1179780  0.0052656  4010.56   &lt;2e-16 ***\nDESTIN_SZCHSZ03   23.7499643  0.0044918  5287.46   &lt;2e-16 ***\nDESTIN_SZCKSZ01   21.2088192  0.0050017  4240.34   &lt;2e-16 ***\nDESTIN_SZCKSZ02   20.6352040  0.0056894  3626.95   &lt;2e-16 ***\nDESTIN_SZCKSZ03   21.8987323  0.0039865  5493.28   &lt;2e-16 ***\nDESTIN_SZCKSZ04   20.7779858  0.0065557  3169.46   &lt;2e-16 ***\nDESTIN_SZCKSZ05   20.9442110  0.0067538  3101.12   &lt;2e-16 ***\nDESTIN_SZCKSZ06   21.5499768  0.0063637  3386.39   &lt;2e-16 ***\nDESTIN_SZCLSZ01   21.3693521  0.0048795  4379.39   &lt;2e-16 ***\nDESTIN_SZCLSZ02   18.9594111  0.0133951  1415.40   &lt;2e-16 ***\nDESTIN_SZCLSZ03   20.2451898  0.0079855  2535.24   &lt;2e-16 ***\nDESTIN_SZCLSZ04   20.9929209  0.0047947  4378.39   &lt;2e-16 ***\nDESTIN_SZCLSZ05   20.1542496  0.0084907  2373.68   &lt;2e-16 ***\nDESTIN_SZCLSZ06   21.2489954  0.0043420  4893.84   &lt;2e-16 ***\nDESTIN_SZCLSZ07   20.5420545  0.0054687  3756.29   &lt;2e-16 ***\nDESTIN_SZCLSZ08   20.7590701  0.0060710  3419.37   &lt;2e-16 ***\nDESTIN_SZCLSZ09   21.4620539  0.0064648  3319.83   &lt;2e-16 ***\nDESTIN_SZDTSZ02   18.3265114  0.0348776   525.45   &lt;2e-16 ***\nDESTIN_SZDTSZ03   19.8807574  0.0144511  1375.73   &lt;2e-16 ***\nDESTIN_SZDTSZ13   19.2457175  0.0162150  1186.91   &lt;2e-16 ***\nDESTIN_SZGLSZ01   20.8381283  0.0052220  3990.45   &lt;2e-16 ***\nDESTIN_SZGLSZ02   20.8283752  0.0051523  4042.54   &lt;2e-16 ***\nDESTIN_SZGLSZ03   21.8107533  0.0043031  5068.56   &lt;2e-16 ***\nDESTIN_SZGLSZ04   21.6548798  0.0042839  5054.94   &lt;2e-16 ***\nDESTIN_SZGLSZ05   21.8082295  0.0043324  5033.80   &lt;2e-16 ***\nDESTIN_SZHGSZ01   21.5895719  0.0040415  5341.91   &lt;2e-16 ***\nDESTIN_SZHGSZ02   20.7214803  0.0054830  3779.24   &lt;2e-16 ***\nDESTIN_SZHGSZ03   20.3047297  0.0064779  3134.48   &lt;2e-16 ***\nDESTIN_SZHGSZ04   21.0351882  0.0046895  4485.55   &lt;2e-16 ***\nDESTIN_SZHGSZ05   21.0004756  0.0049963  4203.24   &lt;2e-16 ***\nDESTIN_SZHGSZ06   20.4916323  0.0058980  3474.33   &lt;2e-16 ***\nDESTIN_SZHGSZ07   21.2827986  0.0046912  4536.76   &lt;2e-16 ***\nDESTIN_SZHGSZ08   21.0245579  0.0051943  4047.61   &lt;2e-16 ***\nDESTIN_SZHGSZ09   21.3185959  0.0054159  3936.31   &lt;2e-16 ***\nDESTIN_SZHGSZ10   18.0087281  0.0262120   687.04   &lt;2e-16 ***\nDESTIN_SZJESZ01   21.0913748  0.0051232  4116.83   &lt;2e-16 ***\nDESTIN_SZJESZ02   20.5641247  0.0053457  3846.88   &lt;2e-16 ***\nDESTIN_SZJESZ03   20.4197922  0.0058086  3515.45   &lt;2e-16 ***\nDESTIN_SZJESZ04   20.5754533  0.0068670  2996.28   &lt;2e-16 ***\nDESTIN_SZJESZ05   19.7451463  0.0098504  2004.51   &lt;2e-16 ***\nDESTIN_SZJESZ06   21.2459297  0.0041258  5149.59   &lt;2e-16 ***\nDESTIN_SZJESZ07   19.8436708  0.0082194  2414.25   &lt;2e-16 ***\nDESTIN_SZJESZ08   20.6605698  0.0080233  2575.07   &lt;2e-16 ***\nDESTIN_SZJESZ09   20.8393990  0.0059470  3504.21   &lt;2e-16 ***\nDESTIN_SZJESZ10   21.6399787  0.0070874  3053.32   &lt;2e-16 ***\nDESTIN_SZJESZ11   21.8820680  0.0066655  3282.90   &lt;2e-16 ***\nDESTIN_SZJWSZ01   20.8794884  0.0066662  3132.16   &lt;2e-16 ***\nDESTIN_SZJWSZ02   20.9782173  0.0054337  3860.75   &lt;2e-16 ***\nDESTIN_SZJWSZ03   22.0227195  0.0042783  5147.57   &lt;2e-16 ***\nDESTIN_SZJWSZ04   21.6461913  0.0043795  4942.61   &lt;2e-16 ***\nDESTIN_SZJWSZ05   20.6911372  0.0061907  3342.28   &lt;2e-16 ***\nDESTIN_SZJWSZ06   21.1878071  0.0055893  3790.79   &lt;2e-16 ***\nDESTIN_SZJWSZ07   19.0428169  0.0282705   673.59   &lt;2e-16 ***\nDESTIN_SZJWSZ08   21.8903544  0.0050012  4376.98   &lt;2e-16 ***\nDESTIN_SZJWSZ09   22.5424980  0.0036936  6103.06   &lt;2e-16 ***\nDESTIN_SZKLSZ01   20.4634268  0.0056420  3626.98   &lt;2e-16 ***\nDESTIN_SZKLSZ02   20.2478216  0.0059129  3424.34   &lt;2e-16 ***\nDESTIN_SZKLSZ03   19.8695026  0.0067009  2965.21   &lt;2e-16 ***\nDESTIN_SZKLSZ04   19.2897316  0.0088709  2174.49   &lt;2e-16 ***\nDESTIN_SZKLSZ05   20.4770370  0.0086509  2367.05   &lt;2e-16 ***\nDESTIN_SZKLSZ06   18.1276772  0.0362109   500.61   &lt;2e-16 ***\nDESTIN_SZKLSZ07   19.8374632  0.0067383  2943.99   &lt;2e-16 ***\nDESTIN_SZKLSZ08   20.4060780  0.0052667  3874.53   &lt;2e-16 ***\nDESTIN_SZLKSZ01   20.2059596  0.0206353   979.19   &lt;2e-16 ***\nDESTIN_SZMDSZ01   20.1278738  0.0200890  1001.94   &lt;2e-16 ***\nDESTIN_SZMDSZ02   20.1619389  0.0112827  1786.97   &lt;2e-16 ***\nDESTIN_SZMDSZ03   18.4522837  0.0252315   731.32   &lt;2e-16 ***\nDESTIN_SZMPSZ01   20.5799332  0.0079633  2584.35   &lt;2e-16 ***\nDESTIN_SZMPSZ02   20.6316833  0.0062508  3300.64   &lt;2e-16 ***\nDESTIN_SZMPSZ03   21.4621615  0.0050542  4246.37   &lt;2e-16 ***\nDESTIN_SZMUSZ02   18.2421629  0.0199779   913.12   &lt;2e-16 ***\nDESTIN_SZNTSZ01   17.0945488  0.0447827   381.72   &lt;2e-16 ***\nDESTIN_SZNTSZ02   18.8831776  0.0108934  1733.45   &lt;2e-16 ***\nDESTIN_SZNTSZ03   19.3791626  0.0076350  2538.21   &lt;2e-16 ***\nDESTIN_SZNTSZ05   17.6488863  0.0249157   708.35   &lt;2e-16 ***\nDESTIN_SZNTSZ06   16.9605339  0.0428385   395.92   &lt;2e-16 ***\nDESTIN_SZNVSZ01   20.6195831  0.0049645  4153.43   &lt;2e-16 ***\nDESTIN_SZNVSZ02   20.4864758  0.0055142  3715.19   &lt;2e-16 ***\nDESTIN_SZNVSZ03   20.6593888  0.0056869  3632.80   &lt;2e-16 ***\nDESTIN_SZNVSZ04   19.2098031  0.0109717  1750.86   &lt;2e-16 ***\nDESTIN_SZNVSZ05   19.5425604  0.0091838  2127.94   &lt;2e-16 ***\nDESTIN_SZPGSZ01   20.1114052  0.0158000  1272.87   &lt;2e-16 ***\nDESTIN_SZPGSZ02   20.5911926  0.0070070  2938.65   &lt;2e-16 ***\nDESTIN_SZPGSZ03   21.5617486  0.0046202  4666.81   &lt;2e-16 ***\nDESTIN_SZPGSZ04   21.6265975  0.0047271  4575.06   &lt;2e-16 ***\nDESTIN_SZPGSZ05   20.6582587  0.0079272  2606.00   &lt;2e-16 ***\nDESTIN_SZPLSZ01   21.0374316  0.0072946  2883.99   &lt;2e-16 ***\nDESTIN_SZPLSZ02   20.1998476  0.0133686  1510.99   &lt;2e-16 ***\nDESTIN_SZPLSZ03   20.5622087  0.0095875  2144.69   &lt;2e-16 ***\nDESTIN_SZPLSZ04   18.4282724  0.0091170  2021.31   &lt;2e-16 ***\nDESTIN_SZPLSZ05   20.3290145  0.0117543  1729.50   &lt;2e-16 ***\nDESTIN_SZPNSZ01   21.1585918  0.0061564  3436.84   &lt;2e-16 ***\nDESTIN_SZPNSZ02   21.9339216  0.0064986  3375.18   &lt;2e-16 ***\nDESTIN_SZPNSZ03   21.0664486  0.0077158  2730.30   &lt;2e-16 ***\nDESTIN_SZPNSZ04   22.2058965  0.0075647  2935.48   &lt;2e-16 ***\nDESTIN_SZPNSZ05   21.3979375  0.0116638  1834.56   &lt;2e-16 ***\nDESTIN_SZPRSZ01   20.5404495  0.0087571  2345.59   &lt;2e-16 ***\nDESTIN_SZPRSZ02   21.4350373  0.0054455  3936.25   &lt;2e-16 ***\nDESTIN_SZPRSZ03   22.1878608  0.0041362  5364.27   &lt;2e-16 ***\nDESTIN_SZPRSZ04   21.3787623  0.0081675  2617.53   &lt;2e-16 ***\nDESTIN_SZPRSZ05   21.5125691  0.0051256  4197.04   &lt;2e-16 ***\nDESTIN_SZPRSZ06   21.7098256  0.0056265  3858.50   &lt;2e-16 ***\nDESTIN_SZPRSZ07   19.2373819  0.0117872  1632.06   &lt;2e-16 ***\nDESTIN_SZPRSZ08   20.9797582  0.0066625  3148.94   &lt;2e-16 ***\nDESTIN_SZQTSZ01   19.8325026  0.0086624  2289.49   &lt;2e-16 ***\nDESTIN_SZQTSZ02   19.6742323  0.0075310  2612.42   &lt;2e-16 ***\nDESTIN_SZQTSZ03   19.7928367  0.0069200  2860.24   &lt;2e-16 ***\nDESTIN_SZQTSZ04   19.8934383  0.0068995  2883.31   &lt;2e-16 ***\nDESTIN_SZQTSZ05   19.8133562  0.0065317  3033.40   &lt;2e-16 ***\nDESTIN_SZQTSZ06   19.6444600  0.0067951  2890.97   &lt;2e-16 ***\nDESTIN_SZQTSZ07   19.2121502  0.0109930  1747.68   &lt;2e-16 ***\nDESTIN_SZQTSZ08   20.7404258  0.0052550  3946.79   &lt;2e-16 ***\nDESTIN_SZQTSZ09   20.3287578  0.0061674  3296.18   &lt;2e-16 ***\nDESTIN_SZQTSZ10   20.7150297  0.0056284  3680.41   &lt;2e-16 ***\nDESTIN_SZQTSZ11   20.8565966  0.0057354  3636.46   &lt;2e-16 ***\nDESTIN_SZQTSZ12   20.0673193  0.0083219  2411.39   &lt;2e-16 ***\nDESTIN_SZQTSZ13   20.9662093  0.0058825  3564.14   &lt;2e-16 ***\nDESTIN_SZQTSZ14   20.8944486  0.0067154  3111.42   &lt;2e-16 ***\nDESTIN_SZQTSZ15   21.7362310  0.0080957  2684.93   &lt;2e-16 ***\nDESTIN_SZRCSZ01   20.3486603  0.0071929  2829.01   &lt;2e-16 ***\nDESTIN_SZRCSZ06   19.6132187  0.0189618  1034.36   &lt;2e-16 ***\nDESTIN_SZRVSZ01   18.3911351  0.0162530  1131.55   &lt;2e-16 ***\nDESTIN_SZRVSZ02   18.2913339  0.0326496   560.23   &lt;2e-16 ***\nDESTIN_SZRVSZ03   18.2592035  0.0136378  1338.87   &lt;2e-16 ***\nDESTIN_SZRVSZ04   18.6470250  0.0155120  1202.10   &lt;2e-16 ***\nDESTIN_SZRVSZ05   17.1649094  0.0261496   656.41   &lt;2e-16 ***\nDESTIN_SZSBSZ01   19.9524234  0.0091540  2179.64   &lt;2e-16 ***\nDESTIN_SZSBSZ02   20.0804522  0.0077562  2588.95   &lt;2e-16 ***\nDESTIN_SZSBSZ03   21.7762933  0.0044476  4896.16   &lt;2e-16 ***\nDESTIN_SZSBSZ04   21.5453770  0.0053316  4041.07   &lt;2e-16 ***\nDESTIN_SZSBSZ05   20.0832389  0.0077331  2597.06   &lt;2e-16 ***\nDESTIN_SZSBSZ06   19.3437539  0.0222063   871.10   &lt;2e-16 ***\nDESTIN_SZSBSZ07   20.6325615  0.0182563  1130.16   &lt;2e-16 ***\nDESTIN_SZSBSZ08   22.3438417  0.0053594  4169.07   &lt;2e-16 ***\nDESTIN_SZSBSZ09   21.5837084  0.0049381  4370.81   &lt;2e-16 ***\nDESTIN_SZSESZ02   21.2641879  0.0050368  4221.80   &lt;2e-16 ***\nDESTIN_SZSESZ03   21.9405172  0.0040040  5479.67   &lt;2e-16 ***\nDESTIN_SZSESZ04   20.7374472  0.0058278  3558.39   &lt;2e-16 ***\nDESTIN_SZSESZ05   21.0590183  0.0049582  4247.31   &lt;2e-16 ***\nDESTIN_SZSESZ06   20.7934877  0.0065375  3180.65   &lt;2e-16 ***\nDESTIN_SZSESZ07   18.3637043  0.0227679   806.56   &lt;2e-16 ***\nDESTIN_SZSGSZ01   21.0394746  0.0059868  3514.30   &lt;2e-16 ***\nDESTIN_SZSGSZ02   21.1805071  0.0053614  3950.53   &lt;2e-16 ***\nDESTIN_SZSGSZ03   20.9721814  0.0049993  4195.04   &lt;2e-16 ***\nDESTIN_SZSGSZ04   21.0285751  0.0050875  4133.41   &lt;2e-16 ***\nDESTIN_SZSGSZ05   19.0692679  0.0101029  1887.51   &lt;2e-16 ***\nDESTIN_SZSGSZ06   21.5885066  0.0040745  5298.45   &lt;2e-16 ***\nDESTIN_SZSGSZ07   20.6135727  0.0053682  3839.94   &lt;2e-16 ***\nDESTIN_SZSISZ01   19.4840809  0.0258178   754.68   &lt;2e-16 ***\nDESTIN_SZSKSZ01   21.1160132  0.0074002  2853.45   &lt;2e-16 ***\nDESTIN_SZSKSZ02   22.4285006  0.0052520  4270.46   &lt;2e-16 ***\nDESTIN_SZSKSZ03   21.2694520  0.0061778  3442.86   &lt;2e-16 ***\nDESTIN_SZSKSZ04   20.2817912  0.0140934  1439.10   &lt;2e-16 ***\nDESTIN_SZSKSZ05   20.9139716  0.0105788  1976.97   &lt;2e-16 ***\nDESTIN_SZSLSZ01   20.9811738  0.0085002  2468.32   &lt;2e-16 ***\nDESTIN_SZSLSZ04   20.7897914  0.0072736  2858.27   &lt;2e-16 ***\nDESTIN_SZSRSZ01   18.1560788  0.0129426  1402.82   &lt;2e-16 ***\nDESTIN_SZTHSZ01   18.0575328  0.0366913   492.15   &lt;2e-16 ***\nDESTIN_SZTHSZ03   18.9557212  0.0251181   754.66   &lt;2e-16 ***\nDESTIN_SZTHSZ04   18.4163647  0.0213756   861.56   &lt;2e-16 ***\nDESTIN_SZTHSZ06   19.2168171  0.0153463  1252.21   &lt;2e-16 ***\nDESTIN_SZTMSZ01   21.6605069  0.0056838  3810.94   &lt;2e-16 ***\nDESTIN_SZTMSZ02   23.1658025  0.0037998  6096.59   &lt;2e-16 ***\nDESTIN_SZTMSZ03   22.5047015  0.0042697  5270.83   &lt;2e-16 ***\nDESTIN_SZTMSZ04   22.8299238  0.0042080  5425.40   &lt;2e-16 ***\nDESTIN_SZTMSZ05   22.2670551  0.0059075  3769.32   &lt;2e-16 ***\nDESTIN_SZTNSZ01   19.9496170  0.0072377  2756.33   &lt;2e-16 ***\nDESTIN_SZTNSZ02   18.8584745  0.0099329  1898.59   &lt;2e-16 ***\nDESTIN_SZTNSZ03   19.0841080  0.0117443  1624.97   &lt;2e-16 ***\nDESTIN_SZTNSZ04   20.0849427  0.0072932  2753.92   &lt;2e-16 ***\nDESTIN_SZTPSZ01   20.4571325  0.0060376  3388.31   &lt;2e-16 ***\nDESTIN_SZTPSZ02   21.4127909  0.0039938  5361.53   &lt;2e-16 ***\nDESTIN_SZTPSZ03   20.4177135  0.0056187  3633.90   &lt;2e-16 ***\nDESTIN_SZTPSZ04   19.4701362  0.0073588  2645.85   &lt;2e-16 ***\nDESTIN_SZTPSZ05   19.9396826  0.0058018  3436.83   &lt;2e-16 ***\nDESTIN_SZTPSZ06   20.3562902  0.0062100  3278.01   &lt;2e-16 ***\nDESTIN_SZTPSZ07   18.9046333  0.0116327  1625.12   &lt;2e-16 ***\nDESTIN_SZTPSZ08   19.4822072  0.0091265  2134.69   &lt;2e-16 ***\nDESTIN_SZTPSZ09   20.6065291  0.0068328  3015.82   &lt;2e-16 ***\nDESTIN_SZTPSZ10   19.6624868  0.0088534  2220.90   &lt;2e-16 ***\nDESTIN_SZTPSZ11   20.6123923  0.0054058  3813.03   &lt;2e-16 ***\nDESTIN_SZTPSZ12   20.2169628  0.0064485  3135.13   &lt;2e-16 ***\nDESTIN_SZTSSZ01   19.7256587  0.0208730   945.03   &lt;2e-16 ***\nDESTIN_SZTSSZ02   20.6955359  0.0133938  1545.16   &lt;2e-16 ***\nDESTIN_SZTSSZ03   21.8210021  0.0077056  2831.84   &lt;2e-16 ***\nDESTIN_SZTSSZ04   21.4553113  0.0080390  2668.92   &lt;2e-16 ***\nDESTIN_SZTSSZ05   22.3585141  0.0075087  2977.69   &lt;2e-16 ***\nDESTIN_SZTSSZ06   22.9040322  0.0142173  1611.00   &lt;2e-16 ***\nDESTIN_SZWCSZ01   23.7710323  0.0049990  4755.12   &lt;2e-16 ***\nDESTIN_SZWCSZ02   20.5168044  0.0123556  1660.52   &lt;2e-16 ***\nDESTIN_SZWCSZ03   19.3142780  0.0325485   593.40   &lt;2e-16 ***\nDESTIN_SZWDSZ01   22.5839489  0.0035977  6277.29   &lt;2e-16 ***\nDESTIN_SZWDSZ02   20.7102428  0.0059590  3475.43   &lt;2e-16 ***\nDESTIN_SZWDSZ03   21.8555263  0.0046044  4746.71   &lt;2e-16 ***\nDESTIN_SZWDSZ04   21.2543995  0.0067996  3125.82   &lt;2e-16 ***\nDESTIN_SZWDSZ05   21.2480643  0.0067031  3169.89   &lt;2e-16 ***\nDESTIN_SZWDSZ06   21.6227127  0.0046817  4618.52   &lt;2e-16 ***\nDESTIN_SZWDSZ07   20.7239019  0.0063296  3274.13   &lt;2e-16 ***\nDESTIN_SZWDSZ08   21.1141310  0.0062823  3360.88   &lt;2e-16 ***\nDESTIN_SZWDSZ09   21.7522185  0.0046206  4707.68   &lt;2e-16 ***\nDESTIN_SZYSSZ01   22.1696149  0.0039271  5645.27   &lt;2e-16 ***\nDESTIN_SZYSSZ02   21.5642593  0.0051636  4176.20   &lt;2e-16 ***\nDESTIN_SZYSSZ03   21.0827764  0.0062436  3376.70   &lt;2e-16 ***\nDESTIN_SZYSSZ04   21.1665869  0.0053325  3969.32   &lt;2e-16 ***\nDESTIN_SZYSSZ05   20.2131257  0.0109316  1849.06   &lt;2e-16 ***\nDESTIN_SZYSSZ06   19.7991046  0.0107159  1847.64   &lt;2e-16 ***\nDESTIN_SZYSSZ07   20.3189759  0.0143152  1419.39   &lt;2e-16 ***\nDESTIN_SZYSSZ08   22.2483268  0.0042169  5275.96   &lt;2e-16 ***\nDESTIN_SZYSSZ09   21.5401754  0.0043051  5003.39   &lt;2e-16 ***\nlog(SCHOOL_COUNT)         NA         NA       NA       NA    \nlog(BIZ_COUNT)            NA         NA       NA       NA    \nlog(DIST)         -1.7525619  0.0004141 -4231.93   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 189463537  on 14471  degrees of freedom\nResidual deviance:  18757606  on 14190  degrees of freedom\nAIC: 18847306\n\nNumber of Fisher Scoring iterations: 7\n\n\n\n\n\n\ndbcSIM_Poisson = glm(formula = TRIPS ~\n                       ORIGIN_SZ +\n                       DESTIN_SZ +\n                       log(DIST), # note: -1 not required for doubly constrained SIM\n                     family = poisson(link = \"log\"),\n                     data = inter_zonal_flow,\n                     na.action = na.exclude)\noptions(max.print=10000) \nsummary(dbcSIM_Poisson)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + DESTIN_SZ + log(DIST), family = poisson(link = \"log\"), \n    data = inter_zonal_flow, na.action = na.exclude)\n\nCoefficients:\n                  Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)     21.8312374  0.0059160  3690.190  &lt; 2e-16 ***\nORIGIN_SZAMSZ02  0.5263502  0.0048031   109.585  &lt; 2e-16 ***\nORIGIN_SZAMSZ03  0.3139982  0.0049254    63.751  &lt; 2e-16 ***\nORIGIN_SZAMSZ04 -0.2146257  0.0053639   -40.013  &lt; 2e-16 ***\nORIGIN_SZAMSZ05 -0.1890446  0.0060386   -31.306  &lt; 2e-16 ***\nORIGIN_SZAMSZ06  0.1539201  0.0054401    28.294  &lt; 2e-16 ***\nORIGIN_SZAMSZ07 -0.9826565  0.0098676   -99.584  &lt; 2e-16 ***\nORIGIN_SZAMSZ08 -0.4488417  0.0093070   -48.226  &lt; 2e-16 ***\nORIGIN_SZAMSZ09  0.0713474  0.0057402    12.429  &lt; 2e-16 ***\nORIGIN_SZAMSZ10  0.4313742  0.0050370    85.641  &lt; 2e-16 ***\nORIGIN_SZAMSZ11 -1.4712226  0.0131178  -112.154  &lt; 2e-16 ***\nORIGIN_SZAMSZ12 -1.7250733  0.0111603  -154.573  &lt; 2e-16 ***\nORIGIN_SZBDSZ01  0.8810576  0.0048168   182.914  &lt; 2e-16 ***\nORIGIN_SZBDSZ02  0.1100240  0.0055529    19.814  &lt; 2e-16 ***\nORIGIN_SZBDSZ03  0.3606166  0.0050672    71.167  &lt; 2e-16 ***\nORIGIN_SZBDSZ04  1.4624347  0.0044212   330.781  &lt; 2e-16 ***\nORIGIN_SZBDSZ05  0.6207557  0.0050843   122.092  &lt; 2e-16 ***\nORIGIN_SZBDSZ06  0.6712973  0.0051953   129.214  &lt; 2e-16 ***\nORIGIN_SZBDSZ07 -1.2338669  0.0100775  -122.437  &lt; 2e-16 ***\nORIGIN_SZBDSZ08 -1.0444562  0.0094555  -110.460  &lt; 2e-16 ***\nORIGIN_SZBKSZ01 -0.2838426  0.0071354   -39.780  &lt; 2e-16 ***\nORIGIN_SZBKSZ02  0.5550522  0.0059014    94.054  &lt; 2e-16 ***\nORIGIN_SZBKSZ03  0.7396640  0.0056796   130.231  &lt; 2e-16 ***\nORIGIN_SZBKSZ04 -0.2242451  0.0067482   -33.230  &lt; 2e-16 ***\nORIGIN_SZBKSZ05 -0.2371614  0.0069386   -34.180  &lt; 2e-16 ***\nORIGIN_SZBKSZ06 -0.1413812  0.0065035   -21.739  &lt; 2e-16 ***\nORIGIN_SZBKSZ07  0.7089989  0.0051843   136.758  &lt; 2e-16 ***\nORIGIN_SZBKSZ08 -0.0907065  0.0059157   -15.333  &lt; 2e-16 ***\nORIGIN_SZBKSZ09 -0.1775146  0.0063302   -28.042  &lt; 2e-16 ***\nORIGIN_SZBLSZ01 -2.3684539  0.0154280  -153.516  &lt; 2e-16 ***\nORIGIN_SZBLSZ02 -2.8078475  0.0197839  -141.926  &lt; 2e-16 ***\nORIGIN_SZBLSZ03 -3.3122763  0.0466091   -71.065  &lt; 2e-16 ***\nORIGIN_SZBLSZ04 -2.6770542  0.0241793  -110.717  &lt; 2e-16 ***\nORIGIN_SZBMSZ01  0.0618035  0.0059400    10.405  &lt; 2e-16 ***\nORIGIN_SZBMSZ02 -1.3535767  0.0073741  -183.557  &lt; 2e-16 ***\nORIGIN_SZBMSZ03 -0.7569095  0.0063187  -119.790  &lt; 2e-16 ***\nORIGIN_SZBMSZ04 -0.2949304  0.0059603   -49.483  &lt; 2e-16 ***\nORIGIN_SZBMSZ05 -2.6131992  0.0172376  -151.599  &lt; 2e-16 ***\nORIGIN_SZBMSZ06 -3.0315024  0.0185502  -163.422  &lt; 2e-16 ***\nORIGIN_SZBMSZ07 -0.6962524  0.0064068  -108.674  &lt; 2e-16 ***\nORIGIN_SZBMSZ08 -0.9310730  0.0064541  -144.261  &lt; 2e-16 ***\nORIGIN_SZBMSZ09 -1.2911253  0.0092047  -140.268  &lt; 2e-16 ***\nORIGIN_SZBMSZ10 -1.6687004  0.0095708  -174.353  &lt; 2e-16 ***\nORIGIN_SZBMSZ11 -1.1152794  0.0072027  -154.841  &lt; 2e-16 ***\nORIGIN_SZBMSZ12 -1.5323954  0.0099932  -153.344  &lt; 2e-16 ***\nORIGIN_SZBMSZ13 -0.6267376  0.0065863   -95.158  &lt; 2e-16 ***\nORIGIN_SZBMSZ14 -1.0475467  0.0072472  -144.544  &lt; 2e-16 ***\nORIGIN_SZBMSZ15 -0.5049444  0.0067390   -74.929  &lt; 2e-16 ***\nORIGIN_SZBMSZ16 -1.5282897  0.0099545  -153.527  &lt; 2e-16 ***\nORIGIN_SZBMSZ17 -1.5722349  0.0161533   -97.332  &lt; 2e-16 ***\nORIGIN_SZBPSZ01  0.5814175  0.0062904    92.429  &lt; 2e-16 ***\nORIGIN_SZBPSZ02  0.0875442  0.0072190    12.127  &lt; 2e-16 ***\nORIGIN_SZBPSZ03  0.3358227  0.0070460    47.662  &lt; 2e-16 ***\nORIGIN_SZBPSZ04  0.6507586  0.0057726   112.733  &lt; 2e-16 ***\nORIGIN_SZBPSZ05  0.9502124  0.0052971   179.384  &lt; 2e-16 ***\nORIGIN_SZBPSZ06 -1.0480314  0.0098191  -106.734  &lt; 2e-16 ***\nORIGIN_SZBPSZ07 -0.5467931  0.0091676   -59.644  &lt; 2e-16 ***\nORIGIN_SZBSSZ01  0.2998334  0.0059193    50.654  &lt; 2e-16 ***\nORIGIN_SZBSSZ02  0.2841036  0.0050863    55.856  &lt; 2e-16 ***\nORIGIN_SZBSSZ03 -0.2331505  0.0056565   -41.218  &lt; 2e-16 ***\nORIGIN_SZBTSZ01  0.0987284  0.0063715    15.495  &lt; 2e-16 ***\nORIGIN_SZBTSZ02 -0.6261229  0.0084604   -74.006  &lt; 2e-16 ***\nORIGIN_SZBTSZ03 -0.4326963  0.0073452   -58.909  &lt; 2e-16 ***\nORIGIN_SZBTSZ04 -1.4998668  0.0110013  -136.336  &lt; 2e-16 ***\nORIGIN_SZBTSZ05 -0.9564768  0.0122202   -78.270  &lt; 2e-16 ***\nORIGIN_SZBTSZ06 -1.2853131  0.0099328  -129.401  &lt; 2e-16 ***\nORIGIN_SZBTSZ07 -2.3870991  0.0144589  -165.096  &lt; 2e-16 ***\nORIGIN_SZBTSZ08 -1.3715855  0.0113825  -120.499  &lt; 2e-16 ***\nORIGIN_SZCBSZ01 -3.5940232  0.0548979   -65.467  &lt; 2e-16 ***\nORIGIN_SZCCSZ01 -0.7008220  0.0140373   -49.926  &lt; 2e-16 ***\nORIGIN_SZCHSZ01 -0.9109524  0.0122869   -74.140  &lt; 2e-16 ***\nORIGIN_SZCHSZ02 -0.8566547  0.0088749   -96.526  &lt; 2e-16 ***\nORIGIN_SZCHSZ03  1.1153731  0.0066136   168.650  &lt; 2e-16 ***\nORIGIN_SZCKSZ01  0.3001815  0.0058548    51.271  &lt; 2e-16 ***\nORIGIN_SZCKSZ02  0.7185711  0.0060595   118.585  &lt; 2e-16 ***\nORIGIN_SZCKSZ03  1.1389824  0.0053179   214.178  &lt; 2e-16 ***\nORIGIN_SZCKSZ04  1.6281772  0.0054761   297.324  &lt; 2e-16 ***\nORIGIN_SZCKSZ05  0.8338470  0.0064178   129.927  &lt; 2e-16 ***\nORIGIN_SZCKSZ06  0.6528993  0.0082375    79.259  &lt; 2e-16 ***\nORIGIN_SZCLSZ01 -0.7174758  0.0082123   -87.366  &lt; 2e-16 ***\nORIGIN_SZCLSZ02 -1.7513100  0.0139062  -125.938  &lt; 2e-16 ***\nORIGIN_SZCLSZ03 -1.0362873  0.0085485  -121.224  &lt; 2e-16 ***\nORIGIN_SZCLSZ04  0.6160017  0.0051276   120.136  &lt; 2e-16 ***\nORIGIN_SZCLSZ05 -2.1005122  0.0150228  -139.821  &lt; 2e-16 ***\nORIGIN_SZCLSZ06  0.7252108  0.0049447   146.665  &lt; 2e-16 ***\nORIGIN_SZCLSZ07 -0.5343482  0.0062500   -85.496  &lt; 2e-16 ***\nORIGIN_SZCLSZ08 -0.2153408  0.0067571   -31.869  &lt; 2e-16 ***\nORIGIN_SZCLSZ09 -1.8019961  0.0169078  -106.578  &lt; 2e-16 ***\nORIGIN_SZDTSZ02 -3.9057711  0.0834668   -46.794  &lt; 2e-16 ***\nORIGIN_SZDTSZ03 -3.4152419  0.0738650   -46.236  &lt; 2e-16 ***\nORIGIN_SZDTSZ13 -3.0183438  0.0315257   -95.742  &lt; 2e-16 ***\nORIGIN_SZGLSZ01 -1.7812384  0.0099367  -179.258  &lt; 2e-16 ***\nORIGIN_SZGLSZ02 -0.1074991  0.0054325   -19.788  &lt; 2e-16 ***\nORIGIN_SZGLSZ03 -0.2461106  0.0057176   -43.045  &lt; 2e-16 ***\nORIGIN_SZGLSZ04  0.8657186  0.0046413   186.524  &lt; 2e-16 ***\nORIGIN_SZGLSZ05  0.5871393  0.0047939   122.477  &lt; 2e-16 ***\nORIGIN_SZHGSZ01  0.3543819  0.0050461    70.229  &lt; 2e-16 ***\nORIGIN_SZHGSZ02  0.4218178  0.0050820    83.003  &lt; 2e-16 ***\nORIGIN_SZHGSZ03  0.2411309  0.0054241    44.456  &lt; 2e-16 ***\nORIGIN_SZHGSZ04  0.8180622  0.0046153   177.252  &lt; 2e-16 ***\nORIGIN_SZHGSZ05  1.2173687  0.0045655   266.647  &lt; 2e-16 ***\nORIGIN_SZHGSZ06 -0.1826300  0.0058214   -31.372  &lt; 2e-16 ***\nORIGIN_SZHGSZ07  0.3172839  0.0050733    62.540  &lt; 2e-16 ***\nORIGIN_SZHGSZ08 -0.1151369  0.0057067   -20.176  &lt; 2e-16 ***\nORIGIN_SZHGSZ09 -1.2873441  0.0091690  -140.401  &lt; 2e-16 ***\nORIGIN_SZHGSZ10 -3.3783178  0.0424682   -79.549  &lt; 2e-16 ***\nORIGIN_SZJESZ01  0.4859234  0.0055927    86.885  &lt; 2e-16 ***\nORIGIN_SZJESZ02  0.1766088  0.0055800    31.650  &lt; 2e-16 ***\nORIGIN_SZJESZ03 -0.2177441  0.0059535   -36.574  &lt; 2e-16 ***\nORIGIN_SZJESZ04 -1.5532182  0.0104526  -148.597  &lt; 2e-16 ***\nORIGIN_SZJESZ05 -2.3332926  0.0142701  -163.509  &lt; 2e-16 ***\nORIGIN_SZJESZ06  0.3007382  0.0055019    54.661  &lt; 2e-16 ***\nORIGIN_SZJESZ07 -1.9687994  0.0121092  -162.587  &lt; 2e-16 ***\nORIGIN_SZJESZ08 -1.3032070  0.0122024  -106.800  &lt; 2e-16 ***\nORIGIN_SZJESZ09  0.5762635  0.0058766    98.061  &lt; 2e-16 ***\nORIGIN_SZJESZ10 -1.4423113  0.0194773   -74.051  &lt; 2e-16 ***\nORIGIN_SZJESZ11 -1.9720897  0.0200811   -98.206  &lt; 2e-16 ***\nORIGIN_SZJWSZ01  0.3808627  0.0071357    53.374  &lt; 2e-16 ***\nORIGIN_SZJWSZ02  0.7963999  0.0053150   149.840  &lt; 2e-16 ***\nORIGIN_SZJWSZ03  1.5429636  0.0049961   308.834  &lt; 2e-16 ***\nORIGIN_SZJWSZ04  0.6410760  0.0056711   113.042  &lt; 2e-16 ***\nORIGIN_SZJWSZ05 -2.1571049  0.0133584  -161.479  &lt; 2e-16 ***\nORIGIN_SZJWSZ06 -1.5174532  0.0113384  -133.833  &lt; 2e-16 ***\nORIGIN_SZJWSZ07 -2.7089963  0.0280439   -96.598  &lt; 2e-16 ***\nORIGIN_SZJWSZ08  1.5343415  0.0051711   296.713  &lt; 2e-16 ***\nORIGIN_SZJWSZ09  1.8837410  0.0048845   385.656  &lt; 2e-16 ***\nORIGIN_SZKLSZ01  0.1081286  0.0053307    20.284  &lt; 2e-16 ***\nORIGIN_SZKLSZ02 -0.8844695  0.0067728  -130.591  &lt; 2e-16 ***\nORIGIN_SZKLSZ03 -0.6872640  0.0062857  -109.337  &lt; 2e-16 ***\nORIGIN_SZKLSZ04 -2.2090319  0.0122440  -180.418  &lt; 2e-16 ***\nORIGIN_SZKLSZ05 -1.1728726  0.0110765  -105.888  &lt; 2e-16 ***\nORIGIN_SZKLSZ06 -6.1162315  0.1857789   -32.922  &lt; 2e-16 ***\nORIGIN_SZKLSZ07 -1.4082749  0.0092299  -152.578  &lt; 2e-16 ***\nORIGIN_SZKLSZ08 -1.7781551  0.0104682  -169.862  &lt; 2e-16 ***\nORIGIN_SZLKSZ01 -2.0531568  0.0398803   -51.483  &lt; 2e-16 ***\nORIGIN_SZMDSZ01 -0.8825639  0.0287621   -30.685  &lt; 2e-16 ***\nORIGIN_SZMDSZ02 -0.6219993  0.0107388   -57.921  &lt; 2e-16 ***\nORIGIN_SZMDSZ03 -2.0840156  0.0173117  -120.382  &lt; 2e-16 ***\nORIGIN_SZMPSZ01 -0.9659093  0.0086972  -111.060  &lt; 2e-16 ***\nORIGIN_SZMPSZ02 -1.0411153  0.0073403  -141.836  &lt; 2e-16 ***\nORIGIN_SZMPSZ03  0.0001659  0.0059401     0.028 0.977719    \nORIGIN_SZMUSZ02 -3.7599031  0.1037937   -36.225  &lt; 2e-16 ***\nORIGIN_SZNTSZ01 -3.0388366  0.0355325   -85.523  &lt; 2e-16 ***\nORIGIN_SZNTSZ02 -3.4230640  0.0235902  -145.106  &lt; 2e-16 ***\nORIGIN_SZNTSZ03 -0.9094796  0.0082551  -110.172  &lt; 2e-16 ***\nORIGIN_SZNTSZ05 -4.0861681  0.0499630   -81.784  &lt; 2e-16 ***\nORIGIN_SZNTSZ06 -3.9497128  0.0565388   -69.858  &lt; 2e-16 ***\nORIGIN_SZNVSZ01  0.3235636  0.0049439    65.447  &lt; 2e-16 ***\nORIGIN_SZNVSZ02 -0.6946748  0.0070536   -98.485  &lt; 2e-16 ***\nORIGIN_SZNVSZ03 -1.0540196  0.0083781  -125.806  &lt; 2e-16 ***\nORIGIN_SZNVSZ04 -0.9897977  0.0093463  -105.903  &lt; 2e-16 ***\nORIGIN_SZNVSZ05 -2.2578432  0.0169180  -133.458  &lt; 2e-16 ***\nORIGIN_SZPGSZ01  0.2399827  0.0130436    18.398  &lt; 2e-16 ***\nORIGIN_SZPGSZ02 -0.3352342  0.0078451   -42.732  &lt; 2e-16 ***\nORIGIN_SZPGSZ03  0.9515148  0.0051376   185.207  &lt; 2e-16 ***\nORIGIN_SZPGSZ04  1.3998952  0.0047991   291.697  &lt; 2e-16 ***\nORIGIN_SZPGSZ05  0.4451629  0.0063423    70.189  &lt; 2e-16 ***\nORIGIN_SZPLSZ01 -0.9705918  0.0122781   -79.050  &lt; 2e-16 ***\nORIGIN_SZPLSZ02 -1.0670151  0.0153358   -69.577  &lt; 2e-16 ***\nORIGIN_SZPLSZ03 -2.1229124  0.0373527   -56.834  &lt; 2e-16 ***\nORIGIN_SZPLSZ04 -3.0911932  0.0371296   -83.254  &lt; 2e-16 ***\nORIGIN_SZPLSZ05 -2.1705708  0.0226085   -96.007  &lt; 2e-16 ***\nORIGIN_SZPNSZ01  0.9052637  0.0065952   137.262  &lt; 2e-16 ***\nORIGIN_SZPNSZ02 -0.1720425  0.0125658   -13.691  &lt; 2e-16 ***\nORIGIN_SZPNSZ03 -2.3973459  0.0201408  -119.029  &lt; 2e-16 ***\nORIGIN_SZPNSZ04 -3.4483689  0.0343741  -100.319  &lt; 2e-16 ***\nORIGIN_SZPNSZ05 -2.0588530  0.0282328   -72.924  &lt; 2e-16 ***\nORIGIN_SZPRSZ01 -0.6399015  0.0120470   -53.117  &lt; 2e-16 ***\nORIGIN_SZPRSZ02  0.8122270  0.0050886   159.617  &lt; 2e-16 ***\nORIGIN_SZPRSZ03  0.3990960  0.0051810    77.031  &lt; 2e-16 ***\nORIGIN_SZPRSZ04 -0.8485348  0.0079236  -107.089  &lt; 2e-16 ***\nORIGIN_SZPRSZ05  0.8008791  0.0048532   165.021  &lt; 2e-16 ***\nORIGIN_SZPRSZ06 -1.4498806  0.0121422  -119.408  &lt; 2e-16 ***\nORIGIN_SZPRSZ07 -3.2025045  0.0167118  -191.631  &lt; 2e-16 ***\nORIGIN_SZPRSZ08 -0.5862269  0.0067255   -87.165  &lt; 2e-16 ***\nORIGIN_SZQTSZ01 -0.1859270  0.0075531   -24.616  &lt; 2e-16 ***\nORIGIN_SZQTSZ02 -0.8715122  0.0068124  -127.929  &lt; 2e-16 ***\nORIGIN_SZQTSZ03 -0.1259816  0.0064796   -19.443  &lt; 2e-16 ***\nORIGIN_SZQTSZ04 -1.4620032  0.0079848  -183.098  &lt; 2e-16 ***\nORIGIN_SZQTSZ05 -0.6675643  0.0069616   -95.892  &lt; 2e-16 ***\nORIGIN_SZQTSZ06 -0.8190026  0.0072713  -112.634  &lt; 2e-16 ***\nORIGIN_SZQTSZ07 -1.5189403  0.0099864  -152.101  &lt; 2e-16 ***\nORIGIN_SZQTSZ08 -0.4976238  0.0067874   -73.316  &lt; 2e-16 ***\nORIGIN_SZQTSZ09 -0.9006162  0.0075978  -118.536  &lt; 2e-16 ***\nORIGIN_SZQTSZ10 -0.6690184  0.0071574   -93.473  &lt; 2e-16 ***\nORIGIN_SZQTSZ11 -2.5203437  0.0147000  -171.452  &lt; 2e-16 ***\nORIGIN_SZQTSZ12 -3.0461675  0.0190193  -160.162  &lt; 2e-16 ***\nORIGIN_SZQTSZ13 -0.7501068  0.0084481   -88.791  &lt; 2e-16 ***\nORIGIN_SZQTSZ14 -1.9321849  0.0126114  -153.209  &lt; 2e-16 ***\nORIGIN_SZQTSZ15 -0.9576828  0.0127157   -75.315  &lt; 2e-16 ***\nORIGIN_SZRCSZ01 -1.8167951  0.0129234  -140.582  &lt; 2e-16 ***\nORIGIN_SZRCSZ06 -0.5560563  0.0090507   -61.438  &lt; 2e-16 ***\nORIGIN_SZRVSZ01 -2.8862570  0.0325532   -88.663  &lt; 2e-16 ***\nORIGIN_SZRVSZ02 -3.1555662  0.0281279  -112.186  &lt; 2e-16 ***\nORIGIN_SZRVSZ03 -2.9836089  0.0248449  -120.089  &lt; 2e-16 ***\nORIGIN_SZRVSZ04 -3.5520422  0.0561371   -63.274  &lt; 2e-16 ***\nORIGIN_SZRVSZ05 -2.5866584  0.0180382  -143.399  &lt; 2e-16 ***\nORIGIN_SZSBSZ01  0.2867444  0.0071098    40.331  &lt; 2e-16 ***\nORIGIN_SZSBSZ02 -0.9012334  0.0087262  -103.278  &lt; 2e-16 ***\nORIGIN_SZSBSZ03  0.8311038  0.0055422   149.958  &lt; 2e-16 ***\nORIGIN_SZSBSZ04  0.4044170  0.0062047    65.179  &lt; 2e-16 ***\nORIGIN_SZSBSZ05 -0.2661845  0.0074162   -35.892  &lt; 2e-16 ***\nORIGIN_SZSBSZ06 -0.9023075  0.0175046   -51.547  &lt; 2e-16 ***\nORIGIN_SZSBSZ07  0.0505870  0.0131317     3.852 0.000117 ***\nORIGIN_SZSBSZ08 -1.1158011  0.0145416   -76.732  &lt; 2e-16 ***\nORIGIN_SZSBSZ09 -0.9682835  0.0095396  -101.501  &lt; 2e-16 ***\nORIGIN_SZSESZ02  1.1452735  0.0047810   239.548  &lt; 2e-16 ***\nORIGIN_SZSESZ03  1.2815277  0.0045677   280.564  &lt; 2e-16 ***\nORIGIN_SZSESZ04  0.8085857  0.0052756   153.269  &lt; 2e-16 ***\nORIGIN_SZSESZ05 -0.2329413  0.0063113   -36.909  &lt; 2e-16 ***\nORIGIN_SZSESZ06  1.0576879  0.0049909   211.925  &lt; 2e-16 ***\nORIGIN_SZSESZ07 -2.3165908  0.0196831  -117.695  &lt; 2e-16 ***\nORIGIN_SZSGSZ01 -0.6606350  0.0088079   -75.005  &lt; 2e-16 ***\nORIGIN_SZSGSZ02 -1.3638984  0.0104040  -131.094  &lt; 2e-16 ***\nORIGIN_SZSGSZ03  0.1152591  0.0054649    21.091  &lt; 2e-16 ***\nORIGIN_SZSGSZ04  0.2954067  0.0050865    58.077  &lt; 2e-16 ***\nORIGIN_SZSGSZ05 -2.0792678  0.0109882  -189.227  &lt; 2e-16 ***\nORIGIN_SZSGSZ06  0.4563227  0.0048880    93.356  &lt; 2e-16 ***\nORIGIN_SZSGSZ07 -0.8955254  0.0067100  -133.461  &lt; 2e-16 ***\nORIGIN_SZSKSZ01 -0.3184402  0.0093032   -34.229  &lt; 2e-16 ***\nORIGIN_SZSKSZ02  1.1160484  0.0063851   174.790  &lt; 2e-16 ***\nORIGIN_SZSKSZ03 -0.2566692  0.0086021   -29.838  &lt; 2e-16 ***\nORIGIN_SZSKSZ04 -1.5781827  0.0279394   -56.486  &lt; 2e-16 ***\nORIGIN_SZSKSZ05 -0.2724361  0.0163597   -16.653  &lt; 2e-16 ***\nORIGIN_SZSLSZ01 -2.4458625  0.0330301   -74.050  &lt; 2e-16 ***\nORIGIN_SZSLSZ04 -0.0987076  0.0079626   -12.396  &lt; 2e-16 ***\nORIGIN_SZSRSZ01 -2.2584977  0.0176647  -127.854  &lt; 2e-16 ***\nORIGIN_SZTHSZ01 -2.5878524  0.0489998   -52.814  &lt; 2e-16 ***\nORIGIN_SZTHSZ03 -0.8101746  0.0226814   -35.720  &lt; 2e-16 ***\nORIGIN_SZTHSZ04 -2.4186655  0.0288663   -83.789  &lt; 2e-16 ***\nORIGIN_SZTHSZ06 -1.7080541  0.0186353   -91.657  &lt; 2e-16 ***\nORIGIN_SZTMSZ01 -0.2193476  0.0061823   -35.480  &lt; 2e-16 ***\nORIGIN_SZTMSZ02  1.7772464  0.0043394   409.558  &lt; 2e-16 ***\nORIGIN_SZTMSZ03  1.0051343  0.0046055   218.249  &lt; 2e-16 ***\nORIGIN_SZTMSZ04  0.1642370  0.0055078    29.819  &lt; 2e-16 ***\nORIGIN_SZTMSZ05 -1.2878706  0.0114828  -112.157  &lt; 2e-16 ***\nORIGIN_SZTNSZ01 -1.7163504  0.0131268  -130.751  &lt; 2e-16 ***\nORIGIN_SZTNSZ02 -1.6508988  0.0103851  -158.968  &lt; 2e-16 ***\nORIGIN_SZTNSZ03 -2.1545577  0.0137947  -156.187  &lt; 2e-16 ***\nORIGIN_SZTNSZ04 -0.3949120  0.0078496   -50.310  &lt; 2e-16 ***\nORIGIN_SZTPSZ01 -0.8058100  0.0069916  -115.253  &lt; 2e-16 ***\nORIGIN_SZTPSZ02  0.5369060  0.0047272   113.577  &lt; 2e-16 ***\nORIGIN_SZTPSZ03 -0.7779333  0.0064278  -121.027  &lt; 2e-16 ***\nORIGIN_SZTPSZ04 -0.8153581  0.0061387  -132.823  &lt; 2e-16 ***\nORIGIN_SZTPSZ05 -0.5073676  0.0067771   -74.865  &lt; 2e-16 ***\nORIGIN_SZTPSZ06  0.0847301  0.0065717    12.893  &lt; 2e-16 ***\nORIGIN_SZTPSZ07 -0.5839519  0.0066148   -88.280  &lt; 2e-16 ***\nORIGIN_SZTPSZ08 -1.0577941  0.0098480  -107.412  &lt; 2e-16 ***\nORIGIN_SZTPSZ09 -0.9067707  0.0071367  -127.057  &lt; 2e-16 ***\nORIGIN_SZTPSZ10 -1.1362091  0.0080905  -140.438  &lt; 2e-16 ***\nORIGIN_SZTPSZ11 -0.2374621  0.0059472   -39.928  &lt; 2e-16 ***\nORIGIN_SZTPSZ12 -0.8028874  0.0069663  -115.253  &lt; 2e-16 ***\nORIGIN_SZTSSZ01 -2.7809271  0.0482843   -57.595  &lt; 2e-16 ***\nORIGIN_SZTSSZ02  0.0425804  0.0105088     4.052 5.08e-05 ***\nORIGIN_SZTSSZ03  0.1142369  0.0109412    10.441  &lt; 2e-16 ***\nORIGIN_SZTSSZ04 -0.6186261  0.0116324   -53.181  &lt; 2e-16 ***\nORIGIN_SZTSSZ05 -1.0846732  0.0173555   -62.497  &lt; 2e-16 ***\nORIGIN_SZTSSZ06  0.3980173  0.0198100    20.092  &lt; 2e-16 ***\nORIGIN_SZWCSZ01  1.3545143  0.0092002   147.227  &lt; 2e-16 ***\nORIGIN_SZWCSZ02 -2.9863278  0.0330906   -90.247  &lt; 2e-16 ***\nORIGIN_SZWCSZ03 -5.0504916  0.1241385   -40.684  &lt; 2e-16 ***\nORIGIN_SZWDSZ01  1.5238429  0.0049404   308.448  &lt; 2e-16 ***\nORIGIN_SZWDSZ02  0.2832576  0.0056218    50.386  &lt; 2e-16 ***\nORIGIN_SZWDSZ03  1.3702524  0.0053266   257.245  &lt; 2e-16 ***\nORIGIN_SZWDSZ04  1.0248225  0.0059272   172.903  &lt; 2e-16 ***\nORIGIN_SZWDSZ05  0.2356778  0.0060587    38.899  &lt; 2e-16 ***\nORIGIN_SZWDSZ06  0.3146925  0.0059919    52.520  &lt; 2e-16 ***\nORIGIN_SZWDSZ07 -1.4971897  0.0091243  -164.088  &lt; 2e-16 ***\nORIGIN_SZWDSZ08 -0.8894079  0.0087414  -101.747  &lt; 2e-16 ***\nORIGIN_SZWDSZ09  1.4437633  0.0053160   271.590  &lt; 2e-16 ***\nORIGIN_SZYSSZ01 -0.2519398  0.0064443   -39.095  &lt; 2e-16 ***\nORIGIN_SZYSSZ02  0.8726785  0.0057658   151.354  &lt; 2e-16 ***\nORIGIN_SZYSSZ03  1.7868139  0.0050674   352.611  &lt; 2e-16 ***\nORIGIN_SZYSSZ04  0.8418040  0.0051738   162.704  &lt; 2e-16 ***\nORIGIN_SZYSSZ05  0.4292096  0.0062520    68.652  &lt; 2e-16 ***\nORIGIN_SZYSSZ06 -0.7459961  0.0119123   -62.624  &lt; 2e-16 ***\nORIGIN_SZYSSZ07 -0.8422281  0.0144559   -58.262  &lt; 2e-16 ***\nORIGIN_SZYSSZ08  0.1829428  0.0067885    26.949  &lt; 2e-16 ***\nORIGIN_SZYSSZ09  1.1159712  0.0050760   219.853  &lt; 2e-16 ***\nDESTIN_SZAMSZ02  0.0694567  0.0045966    15.111  &lt; 2e-16 ***\nDESTIN_SZAMSZ03  0.0760100  0.0044639    17.028  &lt; 2e-16 ***\nDESTIN_SZAMSZ04 -1.1306391  0.0064373  -175.639  &lt; 2e-16 ***\nDESTIN_SZAMSZ05 -1.0751133  0.0065164  -164.985  &lt; 2e-16 ***\nDESTIN_SZAMSZ06 -0.9624298  0.0065937  -145.962  &lt; 2e-16 ***\nDESTIN_SZAMSZ07 -1.5060319  0.0097616  -154.281  &lt; 2e-16 ***\nDESTIN_SZAMSZ08 -0.4813202  0.0069794   -68.963  &lt; 2e-16 ***\nDESTIN_SZAMSZ09 -1.0220675  0.0066313  -154.129  &lt; 2e-16 ***\nDESTIN_SZAMSZ10  0.1235142  0.0047044    26.255  &lt; 2e-16 ***\nDESTIN_SZAMSZ11 -0.8917993  0.0088519  -100.746  &lt; 2e-16 ***\nDESTIN_SZAMSZ12  0.0195208  0.0051704     3.775 0.000160 ***\nDESTIN_SZBDSZ01  0.9736349  0.0042757   227.713  &lt; 2e-16 ***\nDESTIN_SZBDSZ02 -0.1969470  0.0055284   -35.625  &lt; 2e-16 ***\nDESTIN_SZBDSZ03  0.1266471  0.0050786    24.938  &lt; 2e-16 ***\nDESTIN_SZBDSZ04  1.1608485  0.0041956   276.684  &lt; 2e-16 ***\nDESTIN_SZBDSZ05  0.9293840  0.0044412   209.265  &lt; 2e-16 ***\nDESTIN_SZBDSZ06  0.4090567  0.0050300    81.323  &lt; 2e-16 ***\nDESTIN_SZBDSZ07 -0.8171478  0.0098945   -82.586  &lt; 2e-16 ***\nDESTIN_SZBDSZ08 -1.5895287  0.0111632  -142.391  &lt; 2e-16 ***\nDESTIN_SZBKSZ01 -1.3793311  0.0072145  -191.189  &lt; 2e-16 ***\nDESTIN_SZBKSZ02 -0.5253670  0.0061879   -84.903  &lt; 2e-16 ***\nDESTIN_SZBKSZ03 -1.0095362  0.0065426  -154.301  &lt; 2e-16 ***\nDESTIN_SZBKSZ04 -0.5662858  0.0056453  -100.311  &lt; 2e-16 ***\nDESTIN_SZBKSZ05 -0.9406607  0.0070597  -133.244  &lt; 2e-16 ***\nDESTIN_SZBKSZ06 -1.3129276  0.0067414  -194.755  &lt; 2e-16 ***\nDESTIN_SZBKSZ07  0.0120605  0.0049284     2.447 0.014400 *  \nDESTIN_SZBKSZ08 -1.3658471  0.0075109  -181.849  &lt; 2e-16 ***\nDESTIN_SZBKSZ09 -0.1771310  0.0055645   -31.832  &lt; 2e-16 ***\nDESTIN_SZBLSZ01 -0.8175223  0.0075645  -108.074  &lt; 2e-16 ***\nDESTIN_SZBLSZ02  0.1631280  0.0071753    22.735  &lt; 2e-16 ***\nDESTIN_SZBLSZ03  1.2598494  0.0081706   154.194  &lt; 2e-16 ***\nDESTIN_SZBLSZ04 -0.5642975  0.0137827   -40.943  &lt; 2e-16 ***\nDESTIN_SZBMSZ01  0.6921844  0.0054211   127.684  &lt; 2e-16 ***\nDESTIN_SZBMSZ02 -0.1209392  0.0055362   -21.845  &lt; 2e-16 ***\nDESTIN_SZBMSZ03 -0.2373881  0.0062427   -38.027  &lt; 2e-16 ***\nDESTIN_SZBMSZ04 -0.0407117  0.0058001    -7.019 2.23e-12 ***\nDESTIN_SZBMSZ05 -0.2363309  0.0075967   -31.110  &lt; 2e-16 ***\nDESTIN_SZBMSZ06 -1.1930710  0.0134761   -88.532  &lt; 2e-16 ***\nDESTIN_SZBMSZ07  0.4625103  0.0051864    89.178  &lt; 2e-16 ***\nDESTIN_SZBMSZ08 -0.8604731  0.0069899  -123.102  &lt; 2e-16 ***\nDESTIN_SZBMSZ09 -2.1290239  0.0154841  -137.498  &lt; 2e-16 ***\nDESTIN_SZBMSZ10 -1.4617153  0.0094014  -155.478  &lt; 2e-16 ***\nDESTIN_SZBMSZ11 -1.3234050  0.0085506  -154.773  &lt; 2e-16 ***\nDESTIN_SZBMSZ12 -0.8399230  0.0085361   -98.397  &lt; 2e-16 ***\nDESTIN_SZBMSZ13  0.1366529  0.0059697    22.891  &lt; 2e-16 ***\nDESTIN_SZBMSZ14 -1.0491968  0.0083021  -126.378  &lt; 2e-16 ***\nDESTIN_SZBMSZ15 -0.6726684  0.0076276   -88.189  &lt; 2e-16 ***\nDESTIN_SZBMSZ16 -1.4011734  0.0116569  -120.201  &lt; 2e-16 ***\nDESTIN_SZBMSZ17 -1.5682752  0.0167333   -93.722  &lt; 2e-16 ***\nDESTIN_SZBPSZ01 -1.1120017  0.0063197  -175.959  &lt; 2e-16 ***\nDESTIN_SZBPSZ02 -2.0833466  0.0091139  -228.590  &lt; 2e-16 ***\nDESTIN_SZBPSZ03 -1.6937265  0.0087437  -193.709  &lt; 2e-16 ***\nDESTIN_SZBPSZ04 -0.7964999  0.0066129  -120.447  &lt; 2e-16 ***\nDESTIN_SZBPSZ05  0.2109118  0.0048815    43.206  &lt; 2e-16 ***\nDESTIN_SZBPSZ06 -1.1808365  0.0083657  -141.152  &lt; 2e-16 ***\nDESTIN_SZBPSZ07 -0.2077428  0.0084543   -24.572  &lt; 2e-16 ***\nDESTIN_SZBSSZ01  0.3164175  0.0050682    62.431  &lt; 2e-16 ***\nDESTIN_SZBSSZ02 -0.4852688  0.0057001   -85.134  &lt; 2e-16 ***\nDESTIN_SZBSSZ03  0.4130432  0.0043061    95.921  &lt; 2e-16 ***\nDESTIN_SZBTSZ01  0.6215095  0.0048914   127.061  &lt; 2e-16 ***\nDESTIN_SZBTSZ02 -0.0145076  0.0071799    -2.021 0.043324 *  \nDESTIN_SZBTSZ03  0.4919981  0.0058498    84.105  &lt; 2e-16 ***\nDESTIN_SZBTSZ04 -0.6957555  0.0114078   -60.989  &lt; 2e-16 ***\nDESTIN_SZBTSZ05  0.3329814  0.0073568    45.262  &lt; 2e-16 ***\nDESTIN_SZBTSZ06 -0.1333295  0.0073965   -18.026  &lt; 2e-16 ***\nDESTIN_SZBTSZ07 -1.4449581  0.0113186  -127.663  &lt; 2e-16 ***\nDESTIN_SZBTSZ08 -0.7079056  0.0103797   -68.201  &lt; 2e-16 ***\nDESTIN_SZCBSZ01 -5.7344725  0.3162767   -18.131  &lt; 2e-16 ***\nDESTIN_SZCCSZ01 -0.0009541  0.0083381    -0.114 0.908900    \nDESTIN_SZCHSZ01 -0.2083016  0.0099054   -21.029  &lt; 2e-16 ***\nDESTIN_SZCHSZ02  0.5369606  0.0057531    93.334  &lt; 2e-16 ***\nDESTIN_SZCHSZ03  2.5530638  0.0043945   580.971  &lt; 2e-16 ***\nDESTIN_SZCKSZ01 -0.5725975  0.0056507  -101.333  &lt; 2e-16 ***\nDESTIN_SZCKSZ02 -1.1181852  0.0063287  -176.685  &lt; 2e-16 ***\nDESTIN_SZCKSZ03  0.1156680  0.0049440    23.396  &lt; 2e-16 ***\nDESTIN_SZCKSZ04 -0.8647725  0.0071003  -121.794  &lt; 2e-16 ***\nDESTIN_SZCKSZ05 -1.1641791  0.0076248  -152.684  &lt; 2e-16 ***\nDESTIN_SZCKSZ06 -0.4397612  0.0073040   -60.208  &lt; 2e-16 ***\nDESTIN_SZCLSZ01  0.1930552  0.0053752    35.916  &lt; 2e-16 ***\nDESTIN_SZCLSZ02 -2.0436501  0.0136039  -150.225  &lt; 2e-16 ***\nDESTIN_SZCLSZ03 -0.9338571  0.0082908  -112.638  &lt; 2e-16 ***\nDESTIN_SZCLSZ04  0.0532041  0.0053276     9.987  &lt; 2e-16 ***\nDESTIN_SZCLSZ05 -1.0782781  0.0088184  -122.276  &lt; 2e-16 ***\nDESTIN_SZCLSZ06  0.4068171  0.0049068    82.910  &lt; 2e-16 ***\nDESTIN_SZCLSZ07 -0.3579507  0.0060289   -59.373  &lt; 2e-16 ***\nDESTIN_SZCLSZ08 -0.2487993  0.0066588   -37.364  &lt; 2e-16 ***\nDESTIN_SZCLSZ09  0.1611080  0.0071178    22.635  &lt; 2e-16 ***\nDESTIN_SZDTSZ02 -1.7308348  0.0349466   -49.528  &lt; 2e-16 ***\nDESTIN_SZDTSZ03 -0.5994253  0.0146230   -40.992  &lt; 2e-16 ***\nDESTIN_SZDTSZ13 -1.3685031  0.0162803   -84.059  &lt; 2e-16 ***\nDESTIN_SZGLSZ01 -0.0910001  0.0055275   -16.463  &lt; 2e-16 ***\nDESTIN_SZGLSZ02 -0.0692224  0.0052840   -13.100  &lt; 2e-16 ***\nDESTIN_SZGLSZ03  0.6493421  0.0043446   149.459  &lt; 2e-16 ***\nDESTIN_SZGLSZ04  0.9327947  0.0043674   213.583  &lt; 2e-16 ***\nDESTIN_SZGLSZ05  0.8161728  0.0043625   187.087  &lt; 2e-16 ***\nDESTIN_SZHGSZ01  0.0658625  0.0042516    15.491  &lt; 2e-16 ***\nDESTIN_SZHGSZ02 -0.8134329  0.0056721  -143.409  &lt; 2e-16 ***\nDESTIN_SZHGSZ03 -1.3546132  0.0066257  -204.448  &lt; 2e-16 ***\nDESTIN_SZHGSZ04 -0.4500588  0.0048448   -92.895  &lt; 2e-16 ***\nDESTIN_SZHGSZ05 -0.5026431  0.0050996   -98.566  &lt; 2e-16 ***\nDESTIN_SZHGSZ06 -0.8673686  0.0059530  -145.704  &lt; 2e-16 ***\nDESTIN_SZHGSZ07  0.0560490  0.0047702    11.750  &lt; 2e-16 ***\nDESTIN_SZHGSZ08 -0.0443189  0.0052599    -8.426  &lt; 2e-16 ***\nDESTIN_SZHGSZ09 -0.0126355  0.0054966    -2.299 0.021518 *  \nDESTIN_SZHGSZ10 -3.5821793  0.0263281  -136.059  &lt; 2e-16 ***\nDESTIN_SZJESZ01 -0.3704281  0.0056684   -65.350  &lt; 2e-16 ***\nDESTIN_SZJESZ02 -0.7369159  0.0058686  -125.570  &lt; 2e-16 ***\nDESTIN_SZJESZ03 -0.8985484  0.0063627  -141.222  &lt; 2e-16 ***\nDESTIN_SZJESZ04 -1.0511995  0.0073996  -142.061  &lt; 2e-16 ***\nDESTIN_SZJESZ05 -1.5324974  0.0102612  -149.349  &lt; 2e-16 ***\nDESTIN_SZJESZ06  0.3105267  0.0048241    64.370  &lt; 2e-16 ***\nDESTIN_SZJESZ07 -1.3234483  0.0085497  -154.795  &lt; 2e-16 ***\nDESTIN_SZJESZ08 -0.6559742  0.0083174   -78.867  &lt; 2e-16 ***\nDESTIN_SZJESZ09  0.2663752  0.0063370    42.035  &lt; 2e-16 ***\nDESTIN_SZJESZ10  0.8529026  0.0076067   112.126  &lt; 2e-16 ***\nDESTIN_SZJESZ11  0.5559641  0.0074629    74.497  &lt; 2e-16 ***\nDESTIN_SZJWSZ01 -0.9790971  0.0071830  -136.308  &lt; 2e-16 ***\nDESTIN_SZJWSZ02 -0.8746590  0.0060179  -145.342  &lt; 2e-16 ***\nDESTIN_SZJWSZ03  0.5689062  0.0049105   115.855  &lt; 2e-16 ***\nDESTIN_SZJWSZ04  0.4520963  0.0050302    89.876  &lt; 2e-16 ***\nDESTIN_SZJWSZ05 -1.0249671  0.0067371  -152.137  &lt; 2e-16 ***\nDESTIN_SZJWSZ06 -0.7451483  0.0062189  -119.819  &lt; 2e-16 ***\nDESTIN_SZJWSZ07 -2.8453099  0.0287335   -99.024  &lt; 2e-16 ***\nDESTIN_SZJWSZ08 -0.3372309  0.0058003   -58.141  &lt; 2e-16 ***\nDESTIN_SZJWSZ09  1.0505330  0.0045908   228.832  &lt; 2e-16 ***\nDESTIN_SZKLSZ01 -0.2334836  0.0057970   -40.277  &lt; 2e-16 ***\nDESTIN_SZKLSZ02 -0.5416148  0.0061432   -88.164  &lt; 2e-16 ***\nDESTIN_SZKLSZ03 -0.8026495  0.0068745  -116.757  &lt; 2e-16 ***\nDESTIN_SZKLSZ04 -1.2918594  0.0090197  -143.227  &lt; 2e-16 ***\nDESTIN_SZKLSZ05 -0.4069101  0.0087812   -46.339  &lt; 2e-16 ***\nDESTIN_SZKLSZ06 -2.5333101  0.0363215   -69.747  &lt; 2e-16 ***\nDESTIN_SZKLSZ07 -0.6623343  0.0070761   -93.601  &lt; 2e-16 ***\nDESTIN_SZKLSZ08 -0.1408205  0.0054965   -25.620  &lt; 2e-16 ***\nDESTIN_SZLKSZ01 -1.2639235  0.0208254   -60.691  &lt; 2e-16 ***\nDESTIN_SZMDSZ01 -1.5655800  0.0202787   -77.203  &lt; 2e-16 ***\nDESTIN_SZMDSZ02 -0.9767682  0.0114687   -85.168  &lt; 2e-16 ***\nDESTIN_SZMDSZ03 -3.3328109  0.0254294  -131.061  &lt; 2e-16 ***\nDESTIN_SZMPSZ01 -0.4552859  0.0080666   -56.441  &lt; 2e-16 ***\nDESTIN_SZMPSZ02 -0.5386560  0.0064620   -83.358  &lt; 2e-16 ***\nDESTIN_SZMPSZ03  0.4952000  0.0052295    94.694  &lt; 2e-16 ***\nDESTIN_SZMUSZ02 -1.4434175  0.0202509   -71.277  &lt; 2e-16 ***\nDESTIN_SZNTSZ01 -2.9194067  0.0449654   -64.926  &lt; 2e-16 ***\nDESTIN_SZNTSZ02 -1.3780179  0.0112867  -122.092  &lt; 2e-16 ***\nDESTIN_SZNTSZ03 -0.5044699  0.0080449   -62.707  &lt; 2e-16 ***\nDESTIN_SZNTSZ05 -2.0017134  0.0258750   -77.361  &lt; 2e-16 ***\nDESTIN_SZNTSZ06 -3.8120537  0.0434271   -87.781  &lt; 2e-16 ***\nDESTIN_SZNVSZ01 -0.1071506  0.0051026   -20.999  &lt; 2e-16 ***\nDESTIN_SZNVSZ02 -0.0274710  0.0057611    -4.768 1.86e-06 ***\nDESTIN_SZNVSZ03  0.1076352  0.0057909    18.587  &lt; 2e-16 ***\nDESTIN_SZNVSZ04 -1.2087250  0.0110438  -109.448  &lt; 2e-16 ***\nDESTIN_SZNVSZ05 -1.0058290  0.0092167  -109.131  &lt; 2e-16 ***\nDESTIN_SZPGSZ01 -1.2029931  0.0163170   -73.726  &lt; 2e-16 ***\nDESTIN_SZPGSZ02 -1.2878671  0.0074139  -173.709  &lt; 2e-16 ***\nDESTIN_SZPGSZ03 -0.1520894  0.0048629   -31.275  &lt; 2e-16 ***\nDESTIN_SZPGSZ04 -0.1985959  0.0050374   -39.424  &lt; 2e-16 ***\nDESTIN_SZPGSZ05 -1.5290983  0.0082617  -185.083  &lt; 2e-16 ***\nDESTIN_SZPLSZ01 -0.3567934  0.0074298   -48.022  &lt; 2e-16 ***\nDESTIN_SZPLSZ02 -1.7114351  0.0134462  -127.280  &lt; 2e-16 ***\nDESTIN_SZPLSZ03 -0.3241427  0.0098895   -32.776  &lt; 2e-16 ***\nDESTIN_SZPLSZ04 -1.7117196  0.0119003  -143.838  &lt; 2e-16 ***\nDESTIN_SZPLSZ05 -0.5086379  0.0120051   -42.368  &lt; 2e-16 ***\nDESTIN_SZPNSZ01  0.2026781  0.0068977    29.383  &lt; 2e-16 ***\nDESTIN_SZPNSZ02  0.8313754  0.0078544   105.848  &lt; 2e-16 ***\nDESTIN_SZPNSZ03 -0.4041254  0.0086586   -46.673  &lt; 2e-16 ***\nDESTIN_SZPNSZ04  1.5814539  0.0093641   168.885  &lt; 2e-16 ***\nDESTIN_SZPNSZ05  1.1823430  0.0129843    91.059  &lt; 2e-16 ***\nDESTIN_SZPRSZ01 -1.1057553  0.0088197  -125.374  &lt; 2e-16 ***\nDESTIN_SZPRSZ02  0.0895099  0.0056308    15.897  &lt; 2e-16 ***\nDESTIN_SZPRSZ03  0.6921925  0.0043977   157.397  &lt; 2e-16 ***\nDESTIN_SZPRSZ04 -0.2848336  0.0084725   -33.619  &lt; 2e-16 ***\nDESTIN_SZPRSZ05  0.1744480  0.0053553    32.575  &lt; 2e-16 ***\nDESTIN_SZPRSZ06  0.4279206  0.0058735    72.856  &lt; 2e-16 ***\nDESTIN_SZPRSZ07 -1.5123108  0.0124303  -121.664  &lt; 2e-16 ***\nDESTIN_SZPRSZ08 -0.5650226  0.0068530   -82.449  &lt; 2e-16 ***\nDESTIN_SZQTSZ01 -0.5952360  0.0090505   -65.769  &lt; 2e-16 ***\nDESTIN_SZQTSZ02 -0.7728170  0.0078910   -97.937  &lt; 2e-16 ***\nDESTIN_SZQTSZ03 -0.5066812  0.0073996   -68.474  &lt; 2e-16 ***\nDESTIN_SZQTSZ04 -0.6398414  0.0075411   -84.847  &lt; 2e-16 ***\nDESTIN_SZQTSZ05 -0.4354527  0.0069345   -62.795  &lt; 2e-16 ***\nDESTIN_SZQTSZ06 -0.6597391  0.0071919   -91.733  &lt; 2e-16 ***\nDESTIN_SZQTSZ07 -0.9392696  0.0112518   -83.477  &lt; 2e-16 ***\nDESTIN_SZQTSZ08  0.4617774  0.0057011    80.998  &lt; 2e-16 ***\nDESTIN_SZQTSZ09 -0.3174497  0.0065890   -48.178  &lt; 2e-16 ***\nDESTIN_SZQTSZ10  0.1993449  0.0059923    33.267  &lt; 2e-16 ***\nDESTIN_SZQTSZ11  0.2551535  0.0061885    41.230  &lt; 2e-16 ***\nDESTIN_SZQTSZ12 -0.1662603  0.0086701   -19.176  &lt; 2e-16 ***\nDESTIN_SZQTSZ13  0.5500978  0.0063091    87.192  &lt; 2e-16 ***\nDESTIN_SZQTSZ14  0.5364435  0.0070157    76.463  &lt; 2e-16 ***\nDESTIN_SZQTSZ15  1.3611043  0.0081643   166.715  &lt; 2e-16 ***\nDESTIN_SZRCSZ01 -0.1034049  0.0076769   -13.470  &lt; 2e-16 ***\nDESTIN_SZRCSZ06 -1.0633902  0.0189846   -56.013  &lt; 2e-16 ***\nDESTIN_SZRVSZ01 -1.5486221  0.0165272   -93.701  &lt; 2e-16 ***\nDESTIN_SZRVSZ02 -2.4092611  0.0326906   -73.699  &lt; 2e-16 ***\nDESTIN_SZRVSZ03 -1.5172079  0.0139258  -108.950  &lt; 2e-16 ***\nDESTIN_SZRVSZ04 -1.1663615  0.0157430   -74.088  &lt; 2e-16 ***\nDESTIN_SZRVSZ05 -2.2404292  0.0281339   -79.634  &lt; 2e-16 ***\nDESTIN_SZSBSZ01 -1.3783780  0.0096022  -143.549  &lt; 2e-16 ***\nDESTIN_SZSBSZ02 -1.4445213  0.0081630  -176.959  &lt; 2e-16 ***\nDESTIN_SZSBSZ03  0.5149906  0.0051663    99.683  &lt; 2e-16 ***\nDESTIN_SZSBSZ04  0.2389086  0.0060765    39.317  &lt; 2e-16 ***\nDESTIN_SZSBSZ05 -1.2737442  0.0082818  -153.801  &lt; 2e-16 ***\nDESTIN_SZSBSZ06 -1.8683520  0.0227277   -82.206  &lt; 2e-16 ***\nDESTIN_SZSBSZ07 -0.5993154  0.0184895   -32.414  &lt; 2e-16 ***\nDESTIN_SZSBSZ08  0.8156302  0.0059840   136.302  &lt; 2e-16 ***\nDESTIN_SZSBSZ09  0.0900611  0.0057054    15.785  &lt; 2e-16 ***\nDESTIN_SZSESZ02 -0.6397704  0.0052491  -121.882  &lt; 2e-16 ***\nDESTIN_SZSESZ03  0.1714103  0.0042357    40.468  &lt; 2e-16 ***\nDESTIN_SZSESZ04 -1.0596175  0.0059865  -177.002  &lt; 2e-16 ***\nDESTIN_SZSESZ05 -0.8071891  0.0051229  -157.566  &lt; 2e-16 ***\nDESTIN_SZSESZ06 -0.5580934  0.0066216   -84.284  &lt; 2e-16 ***\nDESTIN_SZSESZ07 -3.1448863  0.0227788  -138.062  &lt; 2e-16 ***\nDESTIN_SZSGSZ01 -0.1795225  0.0060127   -29.857  &lt; 2e-16 ***\nDESTIN_SZSGSZ02 -0.2986570  0.0053561   -55.760  &lt; 2e-16 ***\nDESTIN_SZSGSZ03 -0.4074671  0.0050609   -80.513  &lt; 2e-16 ***\nDESTIN_SZSGSZ04 -0.1505164  0.0050931   -29.553  &lt; 2e-16 ***\nDESTIN_SZSGSZ05 -1.9908372  0.0101448  -196.242  &lt; 2e-16 ***\nDESTIN_SZSGSZ06  0.6715268  0.0041161   163.148  &lt; 2e-16 ***\nDESTIN_SZSGSZ07 -0.4494757  0.0055319   -81.252  &lt; 2e-16 ***\nDESTIN_SZSISZ01 -0.5517983  0.0261860   -21.072  &lt; 2e-16 ***\nDESTIN_SZSKSZ01 -0.4749154  0.0079257   -59.921  &lt; 2e-16 ***\nDESTIN_SZSKSZ02  0.9400302  0.0057218   164.290  &lt; 2e-16 ***\nDESTIN_SZSKSZ03 -0.2800377  0.0066081   -42.378  &lt; 2e-16 ***\nDESTIN_SZSKSZ04 -1.2570212  0.0145351   -86.482  &lt; 2e-16 ***\nDESTIN_SZSKSZ05 -0.2600474  0.0112800   -23.054  &lt; 2e-16 ***\nDESTIN_SZSLSZ01 -0.7775604  0.0085818   -90.606  &lt; 2e-16 ***\nDESTIN_SZSLSZ04 -0.8586515  0.0073142  -117.396  &lt; 2e-16 ***\nDESTIN_SZSRSZ01 -1.1370887  0.0142148   -79.993  &lt; 2e-16 ***\nDESTIN_SZTHSZ01 -4.3259988  0.0368554  -117.378  &lt; 2e-16 ***\nDESTIN_SZTHSZ03 -2.6632914  0.0252720  -105.385  &lt; 2e-16 ***\nDESTIN_SZTHSZ04 -3.1000906  0.0216372  -143.276  &lt; 2e-16 ***\nDESTIN_SZTHSZ06 -2.5952642  0.0156340  -166.001  &lt; 2e-16 ***\nDESTIN_SZTMSZ01 -0.2092828  0.0059257   -35.318  &lt; 2e-16 ***\nDESTIN_SZTMSZ02  1.8238139  0.0039155   465.798  &lt; 2e-16 ***\nDESTIN_SZTMSZ03  0.8518259  0.0043636   195.210  &lt; 2e-16 ***\nDESTIN_SZTMSZ04  1.0222812  0.0043466   235.191  &lt; 2e-16 ***\nDESTIN_SZTMSZ05  0.6323777  0.0060058   105.294  &lt; 2e-16 ***\nDESTIN_SZTNSZ01 -0.3336078  0.0074388   -44.847  &lt; 2e-16 ***\nDESTIN_SZTNSZ02 -1.0820469  0.0101689  -106.408  &lt; 2e-16 ***\nDESTIN_SZTNSZ03 -1.4186505  0.0119906  -118.313  &lt; 2e-16 ***\nDESTIN_SZTNSZ04 -0.3058199  0.0074743   -40.916  &lt; 2e-16 ***\nDESTIN_SZTPSZ01 -0.4872299  0.0061571   -79.133  &lt; 2e-16 ***\nDESTIN_SZTPSZ02  0.7158441  0.0041312   173.278  &lt; 2e-16 ***\nDESTIN_SZTPSZ03 -0.4314229  0.0059917   -72.004  &lt; 2e-16 ***\nDESTIN_SZTPSZ04 -1.5898245  0.0076083  -208.959  &lt; 2e-16 ***\nDESTIN_SZTPSZ05 -1.0445550  0.0062363  -167.497  &lt; 2e-16 ***\nDESTIN_SZTPSZ06 -0.4319582  0.0070100   -61.621  &lt; 2e-16 ***\nDESTIN_SZTPSZ07 -2.1602303  0.0120352  -179.493  &lt; 2e-16 ***\nDESTIN_SZTPSZ08 -1.1920493  0.0093083  -128.063  &lt; 2e-16 ***\nDESTIN_SZTPSZ09 -0.2022481  0.0071137   -28.431  &lt; 2e-16 ***\nDESTIN_SZTPSZ10 -1.2464793  0.0090124  -138.308  &lt; 2e-16 ***\nDESTIN_SZTPSZ11 -0.0808445  0.0056019   -14.432  &lt; 2e-16 ***\nDESTIN_SZTPSZ12 -0.6784376  0.0066340  -102.267  &lt; 2e-16 ***\nDESTIN_SZTSSZ01 -1.5845062  0.0222086   -71.346  &lt; 2e-16 ***\nDESTIN_SZTSSZ02 -0.1886010  0.0146338   -12.888  &lt; 2e-16 ***\nDESTIN_SZTSSZ03  0.6525526  0.0092450    70.585  &lt; 2e-16 ***\nDESTIN_SZTSSZ04  0.5285464  0.0100182    52.759  &lt; 2e-16 ***\nDESTIN_SZTSSZ05  1.4670106  0.0104357   140.577  &lt; 2e-16 ***\nDESTIN_SZTSSZ06  2.5043588  0.0167444   149.564  &lt; 2e-16 ***\nDESTIN_SZWCSZ01  1.9787931  0.0054306   364.375  &lt; 2e-16 ***\nDESTIN_SZWCSZ02 -2.2593108  0.0127916  -176.624  &lt; 2e-16 ***\nDESTIN_SZWCSZ03 -3.1897655  0.0326927   -97.568  &lt; 2e-16 ***\nDESTIN_SZWDSZ01  1.0476108  0.0044629   234.738  &lt; 2e-16 ***\nDESTIN_SZWDSZ02 -1.3176990  0.0065894  -199.973  &lt; 2e-16 ***\nDESTIN_SZWDSZ03  0.3432057  0.0052496    65.377  &lt; 2e-16 ***\nDESTIN_SZWDSZ04 -0.7895927  0.0073392  -107.586  &lt; 2e-16 ***\nDESTIN_SZWDSZ05 -0.8751665  0.0072946  -119.975  &lt; 2e-16 ***\nDESTIN_SZWDSZ06 -0.2106221  0.0053027   -39.720  &lt; 2e-16 ***\nDESTIN_SZWDSZ07 -1.6050834  0.0071754  -223.692  &lt; 2e-16 ***\nDESTIN_SZWDSZ08 -0.5124717  0.0069223   -74.032  &lt; 2e-16 ***\nDESTIN_SZWDSZ09  0.3813542  0.0054697    69.721  &lt; 2e-16 ***\nDESTIN_SZYSSZ01  0.0853753  0.0046572    18.332  &lt; 2e-16 ***\nDESTIN_SZYSSZ02 -0.3227172  0.0057351   -56.271  &lt; 2e-16 ***\nDESTIN_SZYSSZ03 -0.4151283  0.0066299   -62.615  &lt; 2e-16 ***\nDESTIN_SZYSSZ04 -0.4637327  0.0058206   -79.671  &lt; 2e-16 ***\nDESTIN_SZYSSZ05 -1.5888242  0.0111001  -143.136  &lt; 2e-16 ***\nDESTIN_SZYSSZ06 -1.4606209  0.0107759  -135.545  &lt; 2e-16 ***\nDESTIN_SZYSSZ07 -0.7839065  0.0144357   -54.304  &lt; 2e-16 ***\nDESTIN_SZYSSZ08  0.6265412  0.0045504   137.691  &lt; 2e-16 ***\nDESTIN_SZYSSZ09  0.1520067  0.0048092    31.607  &lt; 2e-16 ***\nlog(DIST)       -1.8468315  0.0004608 -4008.033  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 47094011  on 14470  degrees of freedom\nResidual deviance: 10420261  on 13912  degrees of freedom\nAIC: 10510518\n\nNumber of Fisher Scoring iterations: 7\n\n\n\n\n\n\nmodel_list = list(unconstrained = uncSIM_Poisson,\n                  originConstrained = orcSIM_Poisson,\n                  destinationConstrained = decSIM_Poisson,\n                  doublyconstrained = dbcSIM_Poisson)\n\n\ncompare_performance(model_list,\n                    metrics = \"RMSE\")\n\n# Comparison of Model Performance Indices\n\nName                   | Model |     RMSE\n-----------------------------------------\nunconstrained          |   glm | 2957.862\noriginConstrained      |   glm | 2613.236\ndestinationConstrained |   glm | 2754.902\ndoublyconstrained      |   glm | 1906.694\n\n\nThe print above reveals that doubly constrained SIM is the best model among all the four SIMs because it has the smallest RMSE value of 1906.694.\n~~~ End of In-class Exercise 4 ~~~"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#overview",
    "href": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#overview",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "A well calibrated Spatial Interaction Model (SIM) requires conceptually logical and well-prepared propulsiveness and attractiveness variables.\nIn this in-class exercise, the tasks are:\n\nPerform geocoding using SLA OneMap API;\nConvert an aspatial data set into a simple feature tibble data.frame;\nPerform point-in-polygon count analysis;\nAppend the propulsiveness and attractiveness variables onto a flow data set; and\nCalibrate Geographically Weighted Poisson Regression models."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#getting-started",
    "href": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#getting-started",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "The following packages are loaded into the R environment:\n\nsf for importing, managing, and processing geospatial data;\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data;\ntmap for thematic mapping; and\nhttr for making HTTP requests.\n\n\npacman::p_load(tidyverse, sf, httr, tmap)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#geocoding-with-sla-api",
    "href": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#geocoding-with-sla-api",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "The data set, Generalinformationofschools.csv, is downloaded from Data.gov.sg.\nGeocoding is the process of taking an aspatial description of a location, such as an address or postcode, and returning geographic coordinates, frequently latitude-longitude pair, to identify a location on the Earth’s surface.\nThe Singapore Land Authority (SLA) supports an online geocoding service called OneMap API. The Search API looks up the address data or 6-digit postal code for an entered value. It then returns both latitude, longitude and x,y coordinates of the searched location.\nThe code chunks below perform geocoding using SLA OneMap API. The input data is in csv file format, and imported into the R environment using the read_csv() function in the readr package. A collection of http call functions in the httr package is then used to pass the individual records to the geocoding server on OneMap.\nThe output is two tibble data.frames - found and not_found. The found data.frame contains all records that are geocoded correctly, and the not_found data.frame contains postal code(s) that fail to be geocoded.\nThe found data table is joined with the original csv data table using a unique identifier (i.e. POSTAL) that is common to both data tables. The output data table is saved as a csv file, found.\n\nurl = \"https://www.onemap.gov.sg/api/common/elastic/search\"\n\ncsv = read_csv(\"data/aspatial/Generalinformationofschools.csv\")\npostcodes = csv$`postal_code`\n\nfound = data.frame()\nnot_found = data.frame()\n\nfor(postcode in postcodes){\n  query = list('searchVal' = postcode, 'returnGeom' = 'Y', 'getAddrDetails' = 'Y', 'pageNum' = '1')\n  res = GET(url, query = query)\n  if((content(res)$found)!=0){\n  found = rbind(found, data.frame(content(res))[4:13])\n  } else{\n  not_found = data.frame(postcode)\n  }\n}\n\nNext, both the found and not_found data.frames are combined into a single tibble data.frame, merged. At the same time, merged and not_found tibble data.frames are written into two separate csv files, schools and not_found respectively.\n\nmerged = merge(csv, found, by.x = 'postal_code', by.y = 'results.POSTAL', all = TRUE)\nwrite.csv(merged, file = 'data/aspatial/schools.csv')\nwrite.csv(not_found, file = 'data/aspatial/not_found.csv')"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#converting-aspatial-data-into-simple-feature-tibble-data.frame",
    "href": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#converting-aspatial-data-into-simple-feature-tibble-data.frame",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "In this sub-section, the schools.csv is imported into the R environment and only the necessary fields are selected and renamed.\n\nschools = read_csv('data/aspatial/schools.csv') %&gt;%\n  rename(latitude = \"results.LATITUDE\", \n         longitude = \"results.LONGITUDE\") %&gt;%\n  select(postal_code, school_name, latitude, longitude)\n\n\nStudent Note: Using Google Map, the latitude and longitude of the school (Zhenghua Secondary School) that was not geocoded are 1.389279 and 103.7651 respectively. This is manually coded into the schools data frame.\n\n\nschools = schools %&gt;%\n  mutate(latitude = ifelse(school_name == \"ZHENGHUA SECONDARY SCHOOL\", 1.389279, latitude)) %&gt;%\n  mutate(longitude = ifelse(school_name == \"ZHENGHUA SECONDARY SCHOOL\", 103.7651, longitude))\n\n\n\n\nNext, the schools tibble data.frame is converted into a simple feature tibble data.frame, schools_sf, using the st_as_sf() function in the sf package and the values in the latitude and longitude fields.\n\nschools_sf = st_as_sf(schools,\n                      coords = c(\"longitude\", \"latitude\"),\n                      crs = 4326) %&gt;%\n  st_transform(crs = 3414)\n\n\n\n\nTo ensure that the schools sf tibble data.frame has been projected and converted correctly, the schools point data are plotted for visual inspection.\nFirst, the Master Plan Subzone Boundary shapefile is imported as the mpsz sf tibble data.frame.\n\nmpsz = st_read(dsn = \"data/geospatial/\",\n                layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\jmphosis\\ISSS624\\In-class_Ex\\In-class_Ex4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\nA point symbol map is then plotted to show the locations of the schools.\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz) +\n  tm_polygons() +\ntm_shape(schools_sf) +\n  tm_dots()\n\n\n\n\n\n\n\nThe number of schools in each planning subzone is then counted using the lengths() function in the base pacakge and the st_intersects() function in the sf package.\nThe summary statistics reveal that there are excessive 0 values in “SCHOOL_COUNT” field. If the log() function is used to transform this field, these 0 values would need to be replaced with a value between 0 and 1 (exclusive).\n\nmpsz$`SCHOOL_COUNT` = lengths(\n  st_intersects(mpsz, schools_sf)\n)\n\nsummary(mpsz$SCHOOL_COUNT)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   0.000   1.054   2.000  12.000"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#data-integration-and-final-touch-up",
    "href": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#data-integration-and-final-touch-up",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "The number of business locations are also counted for each planning subzone using the same steps earlier.\n\nbiz_sf = st_read(dsn = \"data/geospatial\",\n                 layer = \"Business\")\n\nReading layer `Business' from data source \n  `C:\\jmphosis\\ISSS624\\In-class_Ex\\In-class_Ex4\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 6550 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3669.148 ymin: 25408.41 xmax: 47034.83 ymax: 50148.54\nProjected CRS: SVY21 / Singapore TM\n\n\nThe points are visualised.\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz) +\n  tm_polygons() +\ntm_shape(biz_sf) +\n  tm_dots()\n\n\n\n\nAgain, the summary statistics show that there are 0 values.\n\nmpsz$`BIZ_COUNT` = lengths(\n  st_intersects(\n    mpsz, biz_sf))\n\nsummary(mpsz$BIZ_COUNT)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    2.00   19.73   13.00  307.00 \n\n\n\n\n\nThe origin-destination bus passengers flow data is imported\n\nflow_data = read_rds(\"data/rds/flow_data.rds\")\n\nThe derived fields of “SCHOOL_COUNT” and “BIZ_COUNT” are added to the flow_data sf tibble data.frame.\n\nStudent Note: The unique join fields are “DESTIN_SZ” of flow_data and SUBZONE_C of mpsz_tidy because the “SCHOOL_COUNT” and “BIZ_COUNT” values are pull factors that attract bus commuters to the destinations.\n\n\nmpsz_tidy = mpsz %&gt;%\n  st_drop_geometry() %&gt;%\n  select(SUBZONE_C, SCHOOL_COUNT, BIZ_COUNT)\n\n\nflow_data = flow_data %&gt;%\n  left_join(mpsz_tidy,\n            by = c(\"DESTIN_SZ\" = \"SUBZONE_C\")) %&gt;%\n  rename(TRIPS = MORNING_PEAK,\n         DIST = dist)\n\n\n\n\nSince the Poisson Regression is based off log, and log 0 is undefined, it is important to ensure that there are no 0 values in the explanatory variables.\nThe summary() function in the base package is used to compute the summary statistics of all variables. As mentioned earlier, the “SCHOOL_COUNT” and “BIZ_COUNT” variables consist of 0 values.\n\nsummary(flow_data)\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS             DIST      \n Length:14734       Length:14734       Min.   :     1   Min.   :   50  \n Class :character   Class :character   1st Qu.:    14   1st Qu.: 3346  \n Mode  :character   Mode  :character   Median :    76   Median : 6067  \n                                       Mean   :  1021   Mean   : 6880  \n                                       3rd Qu.:   426   3rd Qu.: 9729  \n                                       Max.   :232187   Max.   :26136  \n ORIGIN_AGE7_12    ORIGIN_AGE13_24    ORIGIN_AGE25_64    DESTIN_AGE7_12   \n Min.   :   0.99   Min.   :    0.99   Min.   :    0.99   Min.   :   0.99  \n 1st Qu.: 240.00   1st Qu.:  440.00   1st Qu.: 2200.00   1st Qu.: 240.00  \n Median : 700.00   Median : 1350.00   Median : 6810.00   Median : 720.00  \n Mean   :1031.86   Mean   : 2268.84   Mean   :10487.62   Mean   :1033.40  \n 3rd Qu.:1480.00   3rd Qu.: 3260.00   3rd Qu.:15770.00   3rd Qu.:1500.00  \n Max.   :6340.00   Max.   :16380.00   Max.   :74610.00   Max.   :6340.00  \n DESTIN_AGE13_24    DESTIN_AGE25_64     SCHOOL_COUNT      BIZ_COUNT     \n Min.   :    0.99   Min.   :    0.99   Min.   : 0.000   Min.   :  0.00  \n 1st Qu.:  460.00   1st Qu.: 2200.00   1st Qu.: 0.000   1st Qu.:  0.00  \n Median : 1420.00   Median : 7030.00   Median : 1.000   Median :  3.00  \n Mean   : 2290.35   Mean   :10574.46   Mean   : 1.583   Mean   : 16.17  \n 3rd Qu.: 3260.00   3rd Qu.:15830.00   3rd Qu.: 2.000   3rd Qu.: 12.00  \n Max.   :16380.00   Max.   :74610.00   Max.   :12.000   Max.   :307.00  \n          geometry    \n LINESTRING   :14734  \n epsg:3414    :    0  \n +proj=tmer...:    0  \n                      \n                      \n                      \n\n\nThe 0 values are replaced with 0.99.\n\nflow_data$SCHOOL_COUNT = ifelse(\n  flow_data$SCHOOL_COUNT == 0,\n  0.99, flow_data$SCHOOL_COUNT)\nflow_data$BIZ_COUNT = ifelse(\n  flow_data$BIZ_COUNT == 0,\n  0.99, flow_data$BIZ_COUNT)\n\nThe summary() function in the base package is used again to check that the replacements are been made.\n\nsummary(flow_data)\n\n  ORIGIN_SZ          DESTIN_SZ             TRIPS             DIST      \n Length:14734       Length:14734       Min.   :     1   Min.   :   50  \n Class :character   Class :character   1st Qu.:    14   1st Qu.: 3346  \n Mode  :character   Mode  :character   Median :    76   Median : 6067  \n                                       Mean   :  1021   Mean   : 6880  \n                                       3rd Qu.:   426   3rd Qu.: 9729  \n                                       Max.   :232187   Max.   :26136  \n ORIGIN_AGE7_12    ORIGIN_AGE13_24    ORIGIN_AGE25_64    DESTIN_AGE7_12   \n Min.   :   0.99   Min.   :    0.99   Min.   :    0.99   Min.   :   0.99  \n 1st Qu.: 240.00   1st Qu.:  440.00   1st Qu.: 2200.00   1st Qu.: 240.00  \n Median : 700.00   Median : 1350.00   Median : 6810.00   Median : 720.00  \n Mean   :1031.86   Mean   : 2268.84   Mean   :10487.62   Mean   :1033.40  \n 3rd Qu.:1480.00   3rd Qu.: 3260.00   3rd Qu.:15770.00   3rd Qu.:1500.00  \n Max.   :6340.00   Max.   :16380.00   Max.   :74610.00   Max.   :6340.00  \n DESTIN_AGE13_24    DESTIN_AGE25_64     SCHOOL_COUNT      BIZ_COUNT     \n Min.   :    0.99   Min.   :    0.99   Min.   : 0.990   Min.   :  0.99  \n 1st Qu.:  460.00   1st Qu.: 2200.00   1st Qu.: 0.990   1st Qu.:  0.99  \n Median : 1420.00   Median : 7030.00   Median : 1.000   Median :  3.00  \n Mean   : 2290.35   Mean   :10574.46   Mean   : 1.987   Mean   : 16.47  \n 3rd Qu.: 3260.00   3rd Qu.:15830.00   3rd Qu.: 2.000   3rd Qu.: 12.00  \n Max.   :16380.00   Max.   :74610.00   Max.   :12.000   Max.   :307.00  \n          geometry    \n LINESTRING   :14734  \n epsg:3414    :    0  \n +proj=tmer...:    0  \n                      \n                      \n                      \n\n\nThe tidied flow_data is then saved into an rds file, flow_data_tidy.\n\nwrite_rds(flow_data,\n          \"data/rds/flow_data_tidy.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#calibrating-spatial-interaction-models",
    "href": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#calibrating-spatial-interaction-models",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "The required packages are loaded.\n\npacman::p_load(tmap, sf, performance,\n               ggpubr, tidyverse)\n\nThe earlier prepared flow_data_tidy is imported.\n\nflow_data = read_rds(\"data/rds/flow_data_tidy.rds\")\n\n\nglimpse(flow_data)\n\nRows: 14,734\nColumns: 13\n$ ORIGIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMSZ01\", \"AMS…\n$ DESTIN_SZ       &lt;chr&gt; \"AMSZ01\", \"AMSZ02\", \"AMSZ03\", \"AMSZ04\", \"AMSZ05\", \"AMS…\n$ TRIPS           &lt;dbl&gt; 1998, 8289, 8971, 2252, 6136, 2148, 1620, 1925, 1773, …\n$ DIST            &lt;dbl&gt; 50.0000, 810.4491, 1360.9294, 840.4432, 1076.7916, 805…\n$ ORIGIN_AGE7_12  &lt;dbl&gt; 310, 310, 310, 310, 310, 310, 310, 310, 310, 310, 310,…\n$ ORIGIN_AGE13_24 &lt;dbl&gt; 710, 710, 710, 710, 710, 710, 710, 710, 710, 710, 710,…\n$ ORIGIN_AGE25_64 &lt;dbl&gt; 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, 2780, …\n$ DESTIN_AGE7_12  &lt;dbl&gt; 310.00, 1140.00, 1010.00, 980.00, 810.00, 1050.00, 420…\n$ DESTIN_AGE13_24 &lt;dbl&gt; 710.00, 2770.00, 2650.00, 2000.00, 1920.00, 2390.00, 1…\n$ DESTIN_AGE25_64 &lt;dbl&gt; 2780.00, 15700.00, 14240.00, 11320.00, 9650.00, 12460.…\n$ SCHOOL_COUNT    &lt;dbl&gt; 0.99, 2.00, 2.00, 1.00, 3.00, 2.00, 0.99, 0.99, 3.00, …\n$ BIZ_COUNT       &lt;dbl&gt; 1.00, 0.99, 6.00, 0.99, 0.99, 0.99, 1.00, 117.00, 0.99…\n$ geometry        &lt;LINESTRING [m]&gt; LINESTRING (29501.77 39419...., LINESTRING …\n\n\nThe intra-subzone flows are filtered away.\n\nflow_data$FlowNoIntra = ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ,\n  0, flow_data$TRIPS)\n\nflow_data$offset = ifelse(\n  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ,\n  0.000001, 1)\n\n\ninter_zonal_flow = flow_data %&gt;%\n  filter(FlowNoIntra &gt; 0)\n\n\n\n\n\nuncSIM_Poisson = glm(formula = TRIPS ~ \n               log(ORIGIN_AGE7_12) +\n               log(ORIGIN_AGE13_24) +\n               log(ORIGIN_AGE25_64) +\n               log(DESTIN_AGE7_12) +\n               log(DESTIN_AGE13_24) +\n               log(DESTIN_AGE25_64) +\n               log(SCHOOL_COUNT) +\n               log(BIZ_COUNT) + \n               log(DIST),\n             family = poisson(link = \"log\"),\n             data = inter_zonal_flow,\n             na.action = na.exclude)\n\nsummary(uncSIM_Poisson)\n\n\nCall:\nglm(formula = TRIPS ~ log(ORIGIN_AGE7_12) + log(ORIGIN_AGE13_24) + \n    log(ORIGIN_AGE25_64) + log(DESTIN_AGE7_12) + log(DESTIN_AGE13_24) + \n    log(DESTIN_AGE25_64) + log(SCHOOL_COUNT) + log(BIZ_COUNT) + \n    log(DIST), family = poisson(link = \"log\"), data = inter_zonal_flow, \n    na.action = na.exclude)\n\nCoefficients:\n                       Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept)          18.0512425  0.0031442  5741.2   &lt;2e-16 ***\nlog(ORIGIN_AGE7_12)   0.2923698  0.0007881   371.0   &lt;2e-16 ***\nlog(ORIGIN_AGE13_24)  0.9007953  0.0008286  1087.1   &lt;2e-16 ***\nlog(ORIGIN_AGE25_64) -0.8116432  0.0009538  -850.9   &lt;2e-16 ***\nlog(DESTIN_AGE7_12)  -0.0924800  0.0005717  -161.8   &lt;2e-16 ***\nlog(DESTIN_AGE13_24)  0.3457561  0.0008534   405.2   &lt;2e-16 ***\nlog(DESTIN_AGE25_64) -0.2252444  0.0007716  -291.9   &lt;2e-16 ***\nlog(SCHOOL_COUNT)     0.5799600  0.0005675  1022.0   &lt;2e-16 ***\nlog(BIZ_COUNT)        0.2072426  0.0001889  1096.9   &lt;2e-16 ***\nlog(DIST)            -1.6184787  0.0003752 -4313.1   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 47094011  on 14470  degrees of freedom\nResidual deviance: 21763889  on 14461  degrees of freedom\nAIC: 21853047\n\nNumber of Fisher Scoring iterations: 8\n\n\n\n\n\n\norcSIM_Poisson = glm(formula = TRIPS ~\n                       ORIGIN_SZ +\n                       log(SCHOOL_COUNT) +\n                       log(BIZ_COUNT) +\n                       log(DIST) -1, # no need for intercept for origin/dest constrained\n                     family = poisson(link = \"log\"),\n                     data = inter_zonal_flow,\n                     na.action = na.exclude)\n\noptions(max.print=10000) \nsummary(orcSIM_Poisson)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + log(SCHOOL_COUNT) + log(BIZ_COUNT) + \n    log(DIST) - 1, family = poisson(link = \"log\"), data = inter_zonal_flow, \n    na.action = na.exclude)\n\nCoefficients:\n                    Estimate Std. Error  z value Pr(&gt;|z|)    \nORIGIN_SZAMSZ01   19.8739840  0.0047627  4172.84   &lt;2e-16 ***\nORIGIN_SZAMSZ02   20.5902203  0.0042786  4812.33   &lt;2e-16 ***\nORIGIN_SZAMSZ03   20.2327026  0.0045531  4443.70   &lt;2e-16 ***\nORIGIN_SZAMSZ04   19.7744438  0.0049837  3967.79   &lt;2e-16 ***\nORIGIN_SZAMSZ05   19.6574529  0.0056396  3485.61   &lt;2e-16 ***\nORIGIN_SZAMSZ06   19.9659115  0.0048946  4079.16   &lt;2e-16 ***\nORIGIN_SZAMSZ07   18.6746164  0.0096316  1938.90   &lt;2e-16 ***\nORIGIN_SZAMSZ08   19.2701601  0.0090776  2122.82   &lt;2e-16 ***\nORIGIN_SZAMSZ09   19.9889467  0.0052858  3781.64   &lt;2e-16 ***\nORIGIN_SZAMSZ10   20.3422035  0.0045778  4443.62   &lt;2e-16 ***\nORIGIN_SZAMSZ11   18.3944113  0.0129212  1423.58   &lt;2e-16 ***\nORIGIN_SZAMSZ12   18.3484209  0.0109652  1673.33   &lt;2e-16 ***\nORIGIN_SZBDSZ01   20.9668587  0.0043388  4832.36   &lt;2e-16 ***\nORIGIN_SZBDSZ02   20.4059518  0.0050601  4032.75   &lt;2e-16 ***\nORIGIN_SZBDSZ03   20.6725514  0.0045276  4565.93   &lt;2e-16 ***\nORIGIN_SZBDSZ04   21.6703853  0.0038930  5566.44   &lt;2e-16 ***\nORIGIN_SZBDSZ05   20.7497445  0.0046085  4502.46   &lt;2e-16 ***\nORIGIN_SZBDSZ06   20.9119361  0.0046432  4503.77   &lt;2e-16 ***\nORIGIN_SZBDSZ07   18.9749815  0.0097896  1938.28   &lt;2e-16 ***\nORIGIN_SZBDSZ08   19.1933901  0.0091312  2101.95   &lt;2e-16 ***\nORIGIN_SZBKSZ01   19.5422606  0.0064732  3018.96   &lt;2e-16 ***\nORIGIN_SZBKSZ02   20.1748913  0.0050076  4028.89   &lt;2e-16 ***\nORIGIN_SZBKSZ03   20.3984624  0.0047226  4319.35   &lt;2e-16 ***\nORIGIN_SZBKSZ04   19.6182212  0.0059652  3288.76   &lt;2e-16 ***\nORIGIN_SZBKSZ05   19.6033818  0.0063181  3102.74   &lt;2e-16 ***\nORIGIN_SZBKSZ06   19.7145224  0.0056372  3497.20   &lt;2e-16 ***\nORIGIN_SZBKSZ07   20.4237448  0.0041912  4873.03   &lt;2e-16 ***\nORIGIN_SZBKSZ08   19.7992538  0.0050405  3928.02   &lt;2e-16 ***\nORIGIN_SZBKSZ09   19.7821586  0.0055558  3560.66   &lt;2e-16 ***\nORIGIN_SZBLSZ01   17.7977276  0.0149058  1194.01   &lt;2e-16 ***\nORIGIN_SZBLSZ02   17.4287491  0.0192364   906.03   &lt;2e-16 ***\nORIGIN_SZBLSZ03   16.5884288  0.0459848   360.74   &lt;2e-16 ***\nORIGIN_SZBLSZ04   17.7851626  0.0232823   763.89   &lt;2e-16 ***\nORIGIN_SZBMSZ01   20.0751840  0.0052887  3795.89   &lt;2e-16 ***\nORIGIN_SZBMSZ02   18.6956140  0.0066656  2804.80   &lt;2e-16 ***\nORIGIN_SZBMSZ03   19.3204425  0.0054755  3528.56   &lt;2e-16 ***\nORIGIN_SZBMSZ04   19.4724220  0.0049390  3942.59   &lt;2e-16 ***\nORIGIN_SZBMSZ05   16.9581801  0.0168804  1004.61   &lt;2e-16 ***\nORIGIN_SZBMSZ06   16.9898638  0.0181852   934.27   &lt;2e-16 ***\nORIGIN_SZBMSZ07   19.2868403  0.0056231  3429.91   &lt;2e-16 ***\nORIGIN_SZBMSZ08   19.1477543  0.0055918  3424.28   &lt;2e-16 ***\nORIGIN_SZBMSZ09   18.7564539  0.0086298  2173.46   &lt;2e-16 ***\nORIGIN_SZBMSZ10   18.3617854  0.0089250  2057.35   &lt;2e-16 ***\nORIGIN_SZBMSZ11   18.9167941  0.0063340  2986.54   &lt;2e-16 ***\nORIGIN_SZBMSZ12   18.7874661  0.0093024  2019.63   &lt;2e-16 ***\nORIGIN_SZBMSZ13   19.5654046  0.0057517  3401.70   &lt;2e-16 ***\nORIGIN_SZBMSZ14   19.0685619  0.0063346  3010.24   &lt;2e-16 ***\nORIGIN_SZBMSZ15   19.4403124  0.0058147  3343.30   &lt;2e-16 ***\nORIGIN_SZBMSZ16   18.4469203  0.0092638  1991.28   &lt;2e-16 ***\nORIGIN_SZBMSZ17   18.3430175  0.0157692  1163.22   &lt;2e-16 ***\nORIGIN_SZBPSZ01   20.1806714  0.0053660  3760.81   &lt;2e-16 ***\nORIGIN_SZBPSZ02   19.8116707  0.0061485  3222.19   &lt;2e-16 ***\nORIGIN_SZBPSZ03   19.8467602  0.0059769  3320.57   &lt;2e-16 ***\nORIGIN_SZBPSZ04   20.4613200  0.0048398  4227.72   &lt;2e-16 ***\nORIGIN_SZBPSZ05   20.5379711  0.0043769  4692.39   &lt;2e-16 ***\nORIGIN_SZBPSZ06   18.8948034  0.0093668  2017.21   &lt;2e-16 ***\nORIGIN_SZBPSZ07   19.4104568  0.0087961  2206.70   &lt;2e-16 ***\nORIGIN_SZBSSZ01   20.0139503  0.0056561  3538.45   &lt;2e-16 ***\nORIGIN_SZBSSZ02   20.2543885  0.0047198  4291.38   &lt;2e-16 ***\nORIGIN_SZBSSZ03   19.5428803  0.0052713  3707.41   &lt;2e-16 ***\nORIGIN_SZBTSZ01   20.0198045  0.0058541  3419.77   &lt;2e-16 ***\nORIGIN_SZBTSZ02   19.3618525  0.0081472  2376.51   &lt;2e-16 ***\nORIGIN_SZBTSZ03   19.5883853  0.0068935  2841.59   &lt;2e-16 ***\nORIGIN_SZBTSZ04   18.7720238  0.0103909  1806.58   &lt;2e-16 ***\nORIGIN_SZBTSZ05   18.8069026  0.0120628  1559.08   &lt;2e-16 ***\nORIGIN_SZBTSZ06   18.7068633  0.0094575  1978.00   &lt;2e-16 ***\nORIGIN_SZBTSZ07   17.6292257  0.0141551  1245.43   &lt;2e-16 ***\nORIGIN_SZBTSZ08   18.6989374  0.0109610  1705.94   &lt;2e-16 ***\nORIGIN_SZCBSZ01   18.2189868  0.0548317   332.27   &lt;2e-16 ***\nORIGIN_SZCCSZ01   18.9734563  0.0139450  1360.59   &lt;2e-16 ***\nORIGIN_SZCHSZ01   19.5955119  0.0121035  1619.00   &lt;2e-16 ***\nORIGIN_SZCHSZ02   19.3320960  0.0081620  2368.55   &lt;2e-16 ***\nORIGIN_SZCHSZ03   21.2164518  0.0063552  3338.43   &lt;2e-16 ***\nORIGIN_SZCKSZ01   20.1046845  0.0049333  4075.29   &lt;2e-16 ***\nORIGIN_SZCKSZ02   20.5371946  0.0050256  4086.53   &lt;2e-16 ***\nORIGIN_SZCKSZ03   20.7210560  0.0042184  4912.07   &lt;2e-16 ***\nORIGIN_SZCKSZ04   21.4013886  0.0042524  5032.80   &lt;2e-16 ***\nORIGIN_SZCKSZ05   20.9413146  0.0049434  4236.18   &lt;2e-16 ***\nORIGIN_SZCKSZ06   20.2557727  0.0071832  2819.88   &lt;2e-16 ***\nORIGIN_SZCLSZ01   19.3383703  0.0076634  2523.46   &lt;2e-16 ***\nORIGIN_SZCLSZ02   18.5226956  0.0135522  1366.77   &lt;2e-16 ***\nORIGIN_SZCLSZ03   19.0225512  0.0080145  2373.51   &lt;2e-16 ***\nORIGIN_SZCLSZ04   20.7981505  0.0042400  4905.22   &lt;2e-16 ***\nORIGIN_SZCLSZ05   18.3015625  0.0146815  1246.58   &lt;2e-16 ***\nORIGIN_SZCLSZ06   20.8207386  0.0039567  5262.09   &lt;2e-16 ***\nORIGIN_SZCLSZ07   19.6728958  0.0054199  3629.76   &lt;2e-16 ***\nORIGIN_SZCLSZ08   20.0851929  0.0056956  3526.43   &lt;2e-16 ***\nORIGIN_SZCLSZ09   18.5749589  0.0165415  1122.93   &lt;2e-16 ***\nORIGIN_SZDTSZ02   15.8276209  0.0833992   189.78   &lt;2e-16 ***\nORIGIN_SZDTSZ03   16.2512838  0.0737972   220.22   &lt;2e-16 ***\nORIGIN_SZDTSZ13   16.7744385  0.0312450   536.87   &lt;2e-16 ***\nORIGIN_SZGLSZ01   18.2368248  0.0096104  1897.62   &lt;2e-16 ***\nORIGIN_SZGLSZ02   19.8705255  0.0049014  4054.06   &lt;2e-16 ***\nORIGIN_SZGLSZ03   19.8249435  0.0053109  3732.85   &lt;2e-16 ***\nORIGIN_SZGLSZ04   20.7800335  0.0041261  5036.20   &lt;2e-16 ***\nORIGIN_SZGLSZ05   20.6040494  0.0043049  4786.23   &lt;2e-16 ***\nORIGIN_SZHGSZ01   20.0273475  0.0044824  4468.04   &lt;2e-16 ***\nORIGIN_SZHGSZ02   20.2480656  0.0044575  4542.47   &lt;2e-16 ***\nORIGIN_SZHGSZ03   20.0756442  0.0049003  4096.81   &lt;2e-16 ***\nORIGIN_SZHGSZ04   20.7577748  0.0040465  5129.84   &lt;2e-16 ***\nORIGIN_SZHGSZ05   20.9779992  0.0040123  5228.42   &lt;2e-16 ***\nORIGIN_SZHGSZ06   19.7403058  0.0054229  3640.20   &lt;2e-16 ***\nORIGIN_SZHGSZ07   20.1896268  0.0046051  4384.22   &lt;2e-16 ***\nORIGIN_SZHGSZ08   19.8646492  0.0052403  3790.72   &lt;2e-16 ***\nORIGIN_SZHGSZ09   18.3647736  0.0069196  2654.04   &lt;2e-16 ***\nORIGIN_SZHGSZ10   16.8720475  0.0421046   400.72   &lt;2e-16 ***\nORIGIN_SZJESZ01   20.2673794  0.0046723  4337.79   &lt;2e-16 ***\nORIGIN_SZJESZ02   20.0595982  0.0046503  4313.61   &lt;2e-16 ***\nORIGIN_SZJESZ03   19.9128778  0.0049848  3994.75   &lt;2e-16 ***\nORIGIN_SZJESZ04   18.5053667  0.0099227  1864.94   &lt;2e-16 ***\nORIGIN_SZJESZ05   17.8172930  0.0138840  1283.29   &lt;2e-16 ***\nORIGIN_SZJESZ06   20.0124157  0.0045009  4446.36   &lt;2e-16 ***\nORIGIN_SZJESZ07   18.1821423  0.0117267  1550.49   &lt;2e-16 ***\nORIGIN_SZJESZ08   18.8713046  0.0116456  1620.46   &lt;2e-16 ***\nORIGIN_SZJESZ09   20.5535527  0.0048456  4241.72   &lt;2e-16 ***\nORIGIN_SZJESZ10   18.4922322  0.0191243   966.95   &lt;2e-16 ***\nORIGIN_SZJESZ11   18.2891211  0.0197114   927.85   &lt;2e-16 ***\nORIGIN_SZJWSZ01   20.4912737  0.0063102  3247.35   &lt;2e-16 ***\nORIGIN_SZJWSZ02   20.8236694  0.0042249  4928.82   &lt;2e-16 ***\nORIGIN_SZJWSZ03   21.2587613  0.0039733  5350.40   &lt;2e-16 ***\nORIGIN_SZJWSZ04   20.3816464  0.0046199  4411.67   &lt;2e-16 ***\nORIGIN_SZJWSZ05   18.0607448  0.0128857  1401.61   &lt;2e-16 ***\nORIGIN_SZJWSZ06   18.7015202  0.0107614  1737.83   &lt;2e-16 ***\nORIGIN_SZJWSZ07   17.3991822  0.0277096   627.91   &lt;2e-16 ***\nORIGIN_SZJWSZ08   21.8044465  0.0037356  5836.95   &lt;2e-16 ***\nORIGIN_SZJWSZ09   21.5414930  0.0036033  5978.19   &lt;2e-16 ***\nORIGIN_SZKLSZ01   20.0307712  0.0047868  4184.59   &lt;2e-16 ***\nORIGIN_SZKLSZ02   19.0634769  0.0062318  3059.05   &lt;2e-16 ***\nORIGIN_SZKLSZ03   19.2685700  0.0057172  3370.25   &lt;2e-16 ***\nORIGIN_SZKLSZ04   17.7085067  0.0119809  1478.06   &lt;2e-16 ***\nORIGIN_SZKLSZ05   18.6384471  0.0107596  1732.26   &lt;2e-16 ***\nORIGIN_SZKLSZ06   13.7280296  0.1857160    73.92   &lt;2e-16 ***\nORIGIN_SZKLSZ07   18.6425146  0.0084952  2194.47   &lt;2e-16 ***\nORIGIN_SZKLSZ08   18.0928506  0.0101567  1781.37   &lt;2e-16 ***\nORIGIN_SZLKSZ01   17.8907138  0.0397083   450.55   &lt;2e-16 ***\nORIGIN_SZMDSZ01   18.7605188  0.0285455   657.22   &lt;2e-16 ***\nORIGIN_SZMDSZ02   19.1533927  0.0102815  1862.90   &lt;2e-16 ***\nORIGIN_SZMDSZ03   17.8404982  0.0169690  1051.36   &lt;2e-16 ***\nORIGIN_SZMPSZ01   19.0765941  0.0083937  2272.74   &lt;2e-16 ***\nORIGIN_SZMPSZ02   19.2162527  0.0068331  2812.24   &lt;2e-16 ***\nORIGIN_SZMPSZ03   19.9965344  0.0054569  3664.44   &lt;2e-16 ***\nORIGIN_SZMUSZ02   15.9130765  0.1037472   153.38   &lt;2e-16 ***\nORIGIN_SZNTSZ01   17.0840999  0.0352513   484.64   &lt;2e-16 ***\nORIGIN_SZNTSZ02   16.5792122  0.0233186   710.99   &lt;2e-16 ***\nORIGIN_SZNTSZ03   18.9506415  0.0075957  2494.93   &lt;2e-16 ***\nORIGIN_SZNTSZ05   15.8770261  0.0495825   320.21   &lt;2e-16 ***\nORIGIN_SZNTSZ06   15.3997415  0.0557029   276.46   &lt;2e-16 ***\nORIGIN_SZNVSZ01   20.2241694  0.0043487  4650.65   &lt;2e-16 ***\nORIGIN_SZNVSZ02   19.1897826  0.0065383  2934.97   &lt;2e-16 ***\nORIGIN_SZNVSZ03   18.8854268  0.0080459  2347.22   &lt;2e-16 ***\nORIGIN_SZNVSZ04   18.8940191  0.0090985  2076.61   &lt;2e-16 ***\nORIGIN_SZNVSZ05   17.6278585  0.0168107  1048.61   &lt;2e-16 ***\nORIGIN_SZPGSZ01   19.4825220  0.0122960  1584.46   &lt;2e-16 ***\nORIGIN_SZPGSZ02   19.4726761  0.0073116  2663.25   &lt;2e-16 ***\nORIGIN_SZPGSZ03   20.5515713  0.0045631  4503.86   &lt;2e-16 ***\nORIGIN_SZPGSZ04   21.0527131  0.0041500  5072.89   &lt;2e-16 ***\nORIGIN_SZPGSZ05   20.1436604  0.0057267  3517.48   &lt;2e-16 ***\nORIGIN_SZPLSZ01   19.1832002  0.0120006  1598.53   &lt;2e-16 ***\nORIGIN_SZPLSZ02   18.8752206  0.0149740  1260.53   &lt;2e-16 ***\nORIGIN_SZPLSZ03   18.1000818  0.0371769   486.86   &lt;2e-16 ***\nORIGIN_SZPLSZ04   17.1730559  0.0370280   463.79   &lt;2e-16 ***\nORIGIN_SZPLSZ05   17.9084439  0.0225031   795.82   &lt;2e-16 ***\nORIGIN_SZPNSZ01   21.0804425  0.0044829  4702.41   &lt;2e-16 ***\nORIGIN_SZPNSZ02   19.8822123  0.0111507  1783.05   &lt;2e-16 ***\nORIGIN_SZPNSZ03   17.9293289  0.0193571   926.24   &lt;2e-16 ***\nORIGIN_SZPNSZ04   17.1039594  0.0334954   510.64   &lt;2e-16 ***\nORIGIN_SZPNSZ05   18.2543864  0.0275554   662.46   &lt;2e-16 ***\nORIGIN_SZPRSZ01   19.8777935  0.0117586  1690.49   &lt;2e-16 ***\nORIGIN_SZPRSZ02   21.0751780  0.0044832  4700.88   &lt;2e-16 ***\nORIGIN_SZPRSZ03   20.6717019  0.0045577  4535.55   &lt;2e-16 ***\nORIGIN_SZPRSZ04   19.6365125  0.0074923  2620.90   &lt;2e-16 ***\nORIGIN_SZPRSZ05   21.3132151  0.0042119  5060.24   &lt;2e-16 ***\nORIGIN_SZPRSZ06   18.9314574  0.0117278  1614.24   &lt;2e-16 ***\nORIGIN_SZPRSZ07   17.2822918  0.0162430  1063.98   &lt;2e-16 ***\nORIGIN_SZPRSZ08   19.9267642  0.0062298  3198.62   &lt;2e-16 ***\nORIGIN_SZQTSZ01   19.7357175  0.0066359  2974.08   &lt;2e-16 ***\nORIGIN_SZQTSZ02   19.2082141  0.0061402  3128.26   &lt;2e-16 ***\nORIGIN_SZQTSZ03   19.7771883  0.0056220  3517.83   &lt;2e-16 ***\nORIGIN_SZQTSZ04   18.7114421  0.0072842  2568.76   &lt;2e-16 ***\nORIGIN_SZQTSZ05   19.3049324  0.0062401  3093.69   &lt;2e-16 ***\nORIGIN_SZQTSZ06   19.2643228  0.0065590  2937.09   &lt;2e-16 ***\nORIGIN_SZQTSZ07   18.5697347  0.0095373  1947.06   &lt;2e-16 ***\nORIGIN_SZQTSZ08   19.6147001  0.0061330  3198.21   &lt;2e-16 ***\nORIGIN_SZQTSZ09   19.2550793  0.0069947  2752.82   &lt;2e-16 ***\nORIGIN_SZQTSZ10   19.5801866  0.0064513  3035.07   &lt;2e-16 ***\nORIGIN_SZQTSZ11   17.7398366  0.0143648  1234.95   &lt;2e-16 ***\nORIGIN_SZQTSZ12   17.2420354  0.0186736   923.34   &lt;2e-16 ***\nORIGIN_SZQTSZ13   19.3857418  0.0078878  2457.69   &lt;2e-16 ***\nORIGIN_SZQTSZ14   18.1300753  0.0122096  1484.90   &lt;2e-16 ***\nORIGIN_SZQTSZ15   19.4222283  0.0120871  1606.86   &lt;2e-16 ***\nORIGIN_SZRCSZ01   18.1549045  0.0125108  1451.13   &lt;2e-16 ***\nORIGIN_SZRCSZ06   18.8836400  0.0082161  2298.38   &lt;2e-16 ***\nORIGIN_SZRVSZ01   16.7864438  0.0323796   518.43   &lt;2e-16 ***\nORIGIN_SZRVSZ02   16.4203244  0.0276836   593.14   &lt;2e-16 ***\nORIGIN_SZRVSZ03   16.6453738  0.0244992   679.42   &lt;2e-16 ***\nORIGIN_SZRVSZ04   15.9559213  0.0556344   286.80   &lt;2e-16 ***\nORIGIN_SZRVSZ05   17.0476331  0.0164122  1038.71   &lt;2e-16 ***\nORIGIN_SZSBSZ01   20.0417968  0.0062488  3207.29   &lt;2e-16 ***\nORIGIN_SZSBSZ02   19.1869565  0.0081051  2367.26   &lt;2e-16 ***\nORIGIN_SZSBSZ03   20.5769861  0.0045108  4561.70   &lt;2e-16 ***\nORIGIN_SZSBSZ04   20.5154199  0.0050548  4058.57   &lt;2e-16 ***\nORIGIN_SZSBSZ05   19.6250669  0.0065562  2993.35   &lt;2e-16 ***\nORIGIN_SZSBSZ06   18.8419757  0.0171135  1101.00   &lt;2e-16 ***\nORIGIN_SZSBSZ07   19.4897259  0.0124528  1565.09   &lt;2e-16 ***\nORIGIN_SZSBSZ08   18.7027917  0.0140545  1330.73   &lt;2e-16 ***\nORIGIN_SZSBSZ09   18.8893480  0.0088571  2132.67   &lt;2e-16 ***\nORIGIN_SZSESZ02   20.8962192  0.0041665  5015.34   &lt;2e-16 ***\nORIGIN_SZSESZ03   20.9452771  0.0039737  5270.94   &lt;2e-16 ***\nORIGIN_SZSESZ04   20.6576142  0.0046364  4455.55   &lt;2e-16 ***\nORIGIN_SZSESZ05   19.5170732  0.0058912  3312.92   &lt;2e-16 ***\nORIGIN_SZSESZ06   20.7595824  0.0045747  4537.89   &lt;2e-16 ***\nORIGIN_SZSESZ07   17.6888256  0.0195787   903.47   &lt;2e-16 ***\nORIGIN_SZSGSZ01   19.1359250  0.0085781  2230.79   &lt;2e-16 ***\nORIGIN_SZSGSZ02   18.5614369  0.0102037  1819.10   &lt;2e-16 ***\nORIGIN_SZSGSZ03   19.9933176  0.0050434  3964.23   &lt;2e-16 ***\nORIGIN_SZSGSZ04   20.2426871  0.0047211  4287.71   &lt;2e-16 ***\nORIGIN_SZSGSZ05   18.0114965  0.0107743  1671.70   &lt;2e-16 ***\nORIGIN_SZSGSZ06   20.2593194  0.0044538  4548.76   &lt;2e-16 ***\nORIGIN_SZSGSZ07   19.0763664  0.0062968  3029.54   &lt;2e-16 ***\nORIGIN_SZSKSZ01   19.9222451  0.0085136  2340.04   &lt;2e-16 ***\nORIGIN_SZSKSZ02   20.8633383  0.0055248  3776.33   &lt;2e-16 ***\nORIGIN_SZSKSZ03   19.6528148  0.0080534  2440.33   &lt;2e-16 ***\nORIGIN_SZSKSZ04   18.0754470  0.0275771   655.45   &lt;2e-16 ***\nORIGIN_SZSKSZ05   19.1192521  0.0155579  1228.91   &lt;2e-16 ***\nORIGIN_SZSLSZ01   17.1501034  0.0329384   520.67   &lt;2e-16 ***\nORIGIN_SZSLSZ04   19.5949774  0.0076753  2552.98   &lt;2e-16 ***\nORIGIN_SZSRSZ01   16.9761403  0.0162020  1047.78   &lt;2e-16 ***\nORIGIN_SZTHSZ01   17.9695687  0.0488559   367.81   &lt;2e-16 ***\nORIGIN_SZTHSZ03   18.5427522  0.0223617   829.22   &lt;2e-16 ***\nORIGIN_SZTHSZ04   17.4760374  0.0286247   610.52   &lt;2e-16 ***\nORIGIN_SZTHSZ06   17.8401186  0.0183322   973.16   &lt;2e-16 ***\nORIGIN_SZTMSZ01   20.3406361  0.0056607  3593.33   &lt;2e-16 ***\nORIGIN_SZTMSZ02   22.0307026  0.0037386  5892.85   &lt;2e-16 ***\nORIGIN_SZTMSZ03   21.3451920  0.0040606  5256.65   &lt;2e-16 ***\nORIGIN_SZTMSZ04   20.6611593  0.0049896  4140.87   &lt;2e-16 ***\nORIGIN_SZTMSZ05   19.3323133  0.0112868  1712.82   &lt;2e-16 ***\nORIGIN_SZTNSZ01   17.9513571  0.0128266  1399.54   &lt;2e-16 ***\nORIGIN_SZTNSZ02   18.0267387  0.0098372  1832.51   &lt;2e-16 ***\nORIGIN_SZTNSZ03   17.7253700  0.0134668  1316.23   &lt;2e-16 ***\nORIGIN_SZTNSZ04   19.4474075  0.0073760  2636.59   &lt;2e-16 ***\nORIGIN_SZTPSZ01   19.1078631  0.0065635  2911.25   &lt;2e-16 ***\nORIGIN_SZTPSZ02   20.2837634  0.0041411  4898.18   &lt;2e-16 ***\nORIGIN_SZTPSZ03   19.1838238  0.0059552  3221.37   &lt;2e-16 ***\nORIGIN_SZTPSZ04   19.1805388  0.0054778  3501.53   &lt;2e-16 ***\nORIGIN_SZTPSZ05   19.3718076  0.0058610  3305.18   &lt;2e-16 ***\nORIGIN_SZTPSZ06   19.6605723  0.0054968  3576.70   &lt;2e-16 ***\nORIGIN_SZTPSZ07   19.4499807  0.0060491  3215.36   &lt;2e-16 ***\nORIGIN_SZTPSZ08   18.7996538  0.0095757  1963.28   &lt;2e-16 ***\nORIGIN_SZTPSZ09   19.0025110  0.0067068  2833.31   &lt;2e-16 ***\nORIGIN_SZTPSZ10   18.8899657  0.0076094  2482.46   &lt;2e-16 ***\nORIGIN_SZTPSZ11   19.6277780  0.0053983  3635.93   &lt;2e-16 ***\nORIGIN_SZTPSZ12   19.1471104  0.0065742  2912.45   &lt;2e-16 ***\nORIGIN_SZTSSZ01   17.4901113  0.0478954   365.17   &lt;2e-16 ***\nORIGIN_SZTSSZ02   20.4997466  0.0081850  2504.55   &lt;2e-16 ***\nORIGIN_SZTSSZ03   20.1076553  0.0084728  2373.19   &lt;2e-16 ***\nORIGIN_SZTSSZ04   20.0646610  0.0089008  2254.26   &lt;2e-16 ***\nORIGIN_SZTSSZ05   19.3962067  0.0151392  1281.19   &lt;2e-16 ***\nORIGIN_SZTSSZ06   20.9235857  0.0178278  1173.65   &lt;2e-16 ***\nORIGIN_SZWCSZ01   20.8411600  0.0086519  2408.86   &lt;2e-16 ***\nORIGIN_SZWCSZ02   17.7355404  0.0328889   539.26   &lt;2e-16 ***\nORIGIN_SZWCSZ03   14.9380886  0.1240699   120.40   &lt;2e-16 ***\nORIGIN_SZWDSZ01   21.1969012  0.0037830  5603.23   &lt;2e-16 ***\nORIGIN_SZWDSZ02   20.5930001  0.0044572  4620.13   &lt;2e-16 ***\nORIGIN_SZWDSZ03   21.2521867  0.0041672  5099.85   &lt;2e-16 ***\nORIGIN_SZWDSZ04   21.0702687  0.0048648  4331.13   &lt;2e-16 ***\nORIGIN_SZWDSZ05   20.4008998  0.0051801  3938.35   &lt;2e-16 ***\nORIGIN_SZWDSZ06   20.6669176  0.0049280  4193.78   &lt;2e-16 ***\nORIGIN_SZWDSZ07   19.0500370  0.0082729  2302.71   &lt;2e-16 ***\nORIGIN_SZWDSZ08   19.0816252  0.0080667  2365.49   &lt;2e-16 ***\nORIGIN_SZWDSZ09   21.4182096  0.0040391  5302.73   &lt;2e-16 ***\nORIGIN_SZYSSZ01   19.5355157  0.0057540  3395.14   &lt;2e-16 ***\nORIGIN_SZYSSZ02   20.8737972  0.0048278  4323.64   &lt;2e-16 ***\nORIGIN_SZYSSZ03   21.6614437  0.0040011  5413.81   &lt;2e-16 ***\nORIGIN_SZYSSZ04   20.9305289  0.0043595  4801.10   &lt;2e-16 ***\nORIGIN_SZYSSZ05   20.1727678  0.0058466  3450.34   &lt;2e-16 ***\nORIGIN_SZYSSZ06   19.1481507  0.0116724  1640.47   &lt;2e-16 ***\nORIGIN_SZYSSZ07   18.7919074  0.0141636  1326.78   &lt;2e-16 ***\nORIGIN_SZYSSZ08   19.9733515  0.0061229  3262.07   &lt;2e-16 ***\nORIGIN_SZYSSZ09   20.9366181  0.0040347  5189.15   &lt;2e-16 ***\nlog(SCHOOL_COUNT)  0.4755516  0.0004701  1011.55   &lt;2e-16 ***\nlog(BIZ_COUNT)     0.1796905  0.0001856   968.12   &lt;2e-16 ***\nlog(DIST)         -1.6929522  0.0004093 -4136.01   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 189463537  on 14471  degrees of freedom\nResidual deviance:  15526121  on 14189  degrees of freedom\nAIC: 15615824\n\nNumber of Fisher Scoring iterations: 6\n\n\n\nCalcRSquared = function(observed, estimated){\n  r = cor(observed, estimated)\n  R2 = r^2\n  R2\n}\n\nThe calculated R-squared value shows how well the factors explain the flow.\n\nCalcRSquared(orcSIM_Poisson$data$TRIPS, orcSIM_Poisson$fitted.values)\n\n[1] 0.4362208\n\n\nThe RMSE (root mean square error) shows how much error the model typically makes in its predictions, with a higher weight for large errors. \n\nperformance_rmse(orcSIM_Poisson,\n                 normalized = FALSE) # use raw values (not normalised to mean = 0, sd = 1)\n\n[1] 2613.236\n\n\n\nperformance_rmse(orcSIM_Poisson,\n                 normalized = TRUE)\n\n[1] 0.01762449\n\n\n\n\n\n\ndecSIM_Poisson = glm(formula = TRIPS ~\n                       DESTIN_SZ +\n                       log(SCHOOL_COUNT) +\n                       log(BIZ_COUNT) +\n                       log(DIST) -1, # no need for intercept for origin/dest constrained\n                     family = poisson(link = \"log\"),\n                     data = inter_zonal_flow,\n                     na.action = na.exclude)\n\noptions(max.print=10000) \nsummary(decSIM_Poisson)\n\n\nCall:\nglm(formula = TRIPS ~ DESTIN_SZ + log(SCHOOL_COUNT) + log(BIZ_COUNT) + \n    log(DIST) - 1, family = poisson(link = \"log\"), data = inter_zonal_flow, \n    na.action = na.exclude)\n\nCoefficients: (2 not defined because of singularities)\n                    Estimate Std. Error  z value Pr(&gt;|z|)    \nDESTIN_SZAMSZ01   21.1707732  0.0043061  4916.50   &lt;2e-16 ***\nDESTIN_SZAMSZ02   21.2078744  0.0045468  4664.38   &lt;2e-16 ***\nDESTIN_SZAMSZ03   21.3013201  0.0044813  4753.42   &lt;2e-16 ***\nDESTIN_SZAMSZ04   20.1308111  0.0064133  3138.93   &lt;2e-16 ***\nDESTIN_SZAMSZ05   20.0506878  0.0065018  3083.86   &lt;2e-16 ***\nDESTIN_SZAMSZ06   20.0451017  0.0064487  3108.40   &lt;2e-16 ***\nDESTIN_SZAMSZ07   19.5826783  0.0097695  2004.47   &lt;2e-16 ***\nDESTIN_SZAMSZ08   20.5737364  0.0070282  2927.33   &lt;2e-16 ***\nDESTIN_SZAMSZ09   20.1033435  0.0066166  3038.33   &lt;2e-16 ***\nDESTIN_SZAMSZ10   21.1095528  0.0046595  4530.43   &lt;2e-16 ***\nDESTIN_SZAMSZ11   20.4752463  0.0086989  2353.77   &lt;2e-16 ***\nDESTIN_SZAMSZ12   21.3327820  0.0050851  4195.12   &lt;2e-16 ***\nDESTIN_SZBDSZ01   22.1599964  0.0042575  5204.92   &lt;2e-16 ***\nDESTIN_SZBDSZ02   21.5725622  0.0054426  3963.67   &lt;2e-16 ***\nDESTIN_SZBDSZ03   21.5623108  0.0050035  4309.49   &lt;2e-16 ***\nDESTIN_SZBDSZ04   22.5476678  0.0041405  5445.62   &lt;2e-16 ***\nDESTIN_SZBDSZ05   22.1161185  0.0043537  5079.89   &lt;2e-16 ***\nDESTIN_SZBDSZ06   21.8637442  0.0048487  4509.20   &lt;2e-16 ***\nDESTIN_SZBDSZ07   20.8019112  0.0096760  2149.85   &lt;2e-16 ***\nDESTIN_SZBDSZ08   20.1783209  0.0110094  1832.83   &lt;2e-16 ***\nDESTIN_SZBKSZ01   20.1613906  0.0068518  2942.48   &lt;2e-16 ***\nDESTIN_SZBKSZ02   21.0060781  0.0056719  3703.53   &lt;2e-16 ***\nDESTIN_SZBKSZ03   20.4005278  0.0060403  3377.42   &lt;2e-16 ***\nDESTIN_SZBKSZ04   20.9578866  0.0050213  4173.80   &lt;2e-16 ***\nDESTIN_SZBKSZ05   20.2484852  0.0067233  3011.70   &lt;2e-16 ***\nDESTIN_SZBKSZ06   20.1610445  0.0062458  3227.92   &lt;2e-16 ***\nDESTIN_SZBKSZ07   21.2226420  0.0043081  4926.25   &lt;2e-16 ***\nDESTIN_SZBKSZ08   19.9407082  0.0070515  2827.87   &lt;2e-16 ***\nDESTIN_SZBKSZ09   20.9449602  0.0050867  4117.62   &lt;2e-16 ***\nDESTIN_SZBLSZ01   20.3549866  0.0071063  2864.35   &lt;2e-16 ***\nDESTIN_SZBLSZ02   20.8680588  0.0065532  3184.41   &lt;2e-16 ***\nDESTIN_SZBLSZ03   21.9666123  0.0074494  2948.77   &lt;2e-16 ***\nDESTIN_SZBLSZ04   20.0608960  0.0132173  1517.77   &lt;2e-16 ***\nDESTIN_SZBMSZ01   21.0397725  0.0051030  4123.04   &lt;2e-16 ***\nDESTIN_SZBMSZ02   20.2136377  0.0049343  4096.57   &lt;2e-16 ***\nDESTIN_SZBMSZ03   19.8975077  0.0057018  3489.68   &lt;2e-16 ***\nDESTIN_SZBMSZ04   19.9672544  0.0050852  3926.55   &lt;2e-16 ***\nDESTIN_SZBMSZ05   20.0404560  0.0069267  2893.22   &lt;2e-16 ***\nDESTIN_SZBMSZ06   18.8757661  0.0131578  1434.57   &lt;2e-16 ***\nDESTIN_SZBMSZ07   20.7776286  0.0047459  4378.01   &lt;2e-16 ***\nDESTIN_SZBMSZ08   19.3422399  0.0064714  2988.87   &lt;2e-16 ***\nDESTIN_SZBMSZ09   17.8682028  0.0152416  1172.33   &lt;2e-16 ***\nDESTIN_SZBMSZ10   18.7038758  0.0088997  2101.62   &lt;2e-16 ***\nDESTIN_SZBMSZ11   18.9932471  0.0080602  2356.42   &lt;2e-16 ***\nDESTIN_SZBMSZ12   19.6174244  0.0079721  2460.76   &lt;2e-16 ***\nDESTIN_SZBMSZ13   20.4715383  0.0054480  3757.65   &lt;2e-16 ***\nDESTIN_SZBMSZ14   19.3024793  0.0077088  2503.95   &lt;2e-16 ***\nDESTIN_SZBMSZ15   19.5269009  0.0070893  2754.43   &lt;2e-16 ***\nDESTIN_SZBMSZ16   18.6388498  0.0114112  1633.38   &lt;2e-16 ***\nDESTIN_SZBMSZ17   18.7799088  0.0166345  1128.97   &lt;2e-16 ***\nDESTIN_SZBPSZ01   20.4774150  0.0056648  3614.85   &lt;2e-16 ***\nDESTIN_SZBPSZ02   19.6017581  0.0084527  2318.98   &lt;2e-16 ***\nDESTIN_SZBPSZ03   19.9321269  0.0080819  2466.27   &lt;2e-16 ***\nDESTIN_SZBPSZ04   20.6870481  0.0060202  3436.25   &lt;2e-16 ***\nDESTIN_SZBPSZ05   21.6162685  0.0041774  5174.53   &lt;2e-16 ***\nDESTIN_SZBPSZ06   20.4807757  0.0078844  2597.64   &lt;2e-16 ***\nDESTIN_SZBPSZ07   21.1369881  0.0081303  2599.77   &lt;2e-16 ***\nDESTIN_SZBSSZ01   21.1811139  0.0051948  4077.34   &lt;2e-16 ***\nDESTIN_SZBSSZ02   20.5179325  0.0057516  3567.33   &lt;2e-16 ***\nDESTIN_SZBSSZ03   21.3589852  0.0043402  4921.24   &lt;2e-16 ***\nDESTIN_SZBTSZ01   21.5090129  0.0045965  4679.39   &lt;2e-16 ***\nDESTIN_SZBTSZ02   20.9831852  0.0070245  2987.16   &lt;2e-16 ***\nDESTIN_SZBTSZ03   21.1683763  0.0056374  3754.97   &lt;2e-16 ***\nDESTIN_SZBTSZ04   19.7596396  0.0108950  1813.65   &lt;2e-16 ***\nDESTIN_SZBTSZ05   20.8687672  0.0070802  2947.49   &lt;2e-16 ***\nDESTIN_SZBTSZ06   20.2638437  0.0072195  2806.84   &lt;2e-16 ***\nDESTIN_SZBTSZ07   19.1141699  0.0111203  1718.86   &lt;2e-16 ***\nDESTIN_SZBTSZ08   19.5399477  0.0100763  1939.19   &lt;2e-16 ***\nDESTIN_SZCBSZ01   16.4813511  0.3162466    52.12   &lt;2e-16 ***\nDESTIN_SZCCSZ01   20.8532304  0.0083758  2489.71   &lt;2e-16 ***\nDESTIN_SZCHSZ01   20.9482470  0.0098587  2124.85   &lt;2e-16 ***\nDESTIN_SZCHSZ02   21.1179780  0.0052656  4010.56   &lt;2e-16 ***\nDESTIN_SZCHSZ03   23.7499643  0.0044918  5287.46   &lt;2e-16 ***\nDESTIN_SZCKSZ01   21.2088192  0.0050017  4240.34   &lt;2e-16 ***\nDESTIN_SZCKSZ02   20.6352040  0.0056894  3626.95   &lt;2e-16 ***\nDESTIN_SZCKSZ03   21.8987323  0.0039865  5493.28   &lt;2e-16 ***\nDESTIN_SZCKSZ04   20.7779858  0.0065557  3169.46   &lt;2e-16 ***\nDESTIN_SZCKSZ05   20.9442110  0.0067538  3101.12   &lt;2e-16 ***\nDESTIN_SZCKSZ06   21.5499768  0.0063637  3386.39   &lt;2e-16 ***\nDESTIN_SZCLSZ01   21.3693521  0.0048795  4379.39   &lt;2e-16 ***\nDESTIN_SZCLSZ02   18.9594111  0.0133951  1415.40   &lt;2e-16 ***\nDESTIN_SZCLSZ03   20.2451898  0.0079855  2535.24   &lt;2e-16 ***\nDESTIN_SZCLSZ04   20.9929209  0.0047947  4378.39   &lt;2e-16 ***\nDESTIN_SZCLSZ05   20.1542496  0.0084907  2373.68   &lt;2e-16 ***\nDESTIN_SZCLSZ06   21.2489954  0.0043420  4893.84   &lt;2e-16 ***\nDESTIN_SZCLSZ07   20.5420545  0.0054687  3756.29   &lt;2e-16 ***\nDESTIN_SZCLSZ08   20.7590701  0.0060710  3419.37   &lt;2e-16 ***\nDESTIN_SZCLSZ09   21.4620539  0.0064648  3319.83   &lt;2e-16 ***\nDESTIN_SZDTSZ02   18.3265114  0.0348776   525.45   &lt;2e-16 ***\nDESTIN_SZDTSZ03   19.8807574  0.0144511  1375.73   &lt;2e-16 ***\nDESTIN_SZDTSZ13   19.2457175  0.0162150  1186.91   &lt;2e-16 ***\nDESTIN_SZGLSZ01   20.8381283  0.0052220  3990.45   &lt;2e-16 ***\nDESTIN_SZGLSZ02   20.8283752  0.0051523  4042.54   &lt;2e-16 ***\nDESTIN_SZGLSZ03   21.8107533  0.0043031  5068.56   &lt;2e-16 ***\nDESTIN_SZGLSZ04   21.6548798  0.0042839  5054.94   &lt;2e-16 ***\nDESTIN_SZGLSZ05   21.8082295  0.0043324  5033.80   &lt;2e-16 ***\nDESTIN_SZHGSZ01   21.5895719  0.0040415  5341.91   &lt;2e-16 ***\nDESTIN_SZHGSZ02   20.7214803  0.0054830  3779.24   &lt;2e-16 ***\nDESTIN_SZHGSZ03   20.3047297  0.0064779  3134.48   &lt;2e-16 ***\nDESTIN_SZHGSZ04   21.0351882  0.0046895  4485.55   &lt;2e-16 ***\nDESTIN_SZHGSZ05   21.0004756  0.0049963  4203.24   &lt;2e-16 ***\nDESTIN_SZHGSZ06   20.4916323  0.0058980  3474.33   &lt;2e-16 ***\nDESTIN_SZHGSZ07   21.2827986  0.0046912  4536.76   &lt;2e-16 ***\nDESTIN_SZHGSZ08   21.0245579  0.0051943  4047.61   &lt;2e-16 ***\nDESTIN_SZHGSZ09   21.3185959  0.0054159  3936.31   &lt;2e-16 ***\nDESTIN_SZHGSZ10   18.0087281  0.0262120   687.04   &lt;2e-16 ***\nDESTIN_SZJESZ01   21.0913748  0.0051232  4116.83   &lt;2e-16 ***\nDESTIN_SZJESZ02   20.5641247  0.0053457  3846.88   &lt;2e-16 ***\nDESTIN_SZJESZ03   20.4197922  0.0058086  3515.45   &lt;2e-16 ***\nDESTIN_SZJESZ04   20.5754533  0.0068670  2996.28   &lt;2e-16 ***\nDESTIN_SZJESZ05   19.7451463  0.0098504  2004.51   &lt;2e-16 ***\nDESTIN_SZJESZ06   21.2459297  0.0041258  5149.59   &lt;2e-16 ***\nDESTIN_SZJESZ07   19.8436708  0.0082194  2414.25   &lt;2e-16 ***\nDESTIN_SZJESZ08   20.6605698  0.0080233  2575.07   &lt;2e-16 ***\nDESTIN_SZJESZ09   20.8393990  0.0059470  3504.21   &lt;2e-16 ***\nDESTIN_SZJESZ10   21.6399787  0.0070874  3053.32   &lt;2e-16 ***\nDESTIN_SZJESZ11   21.8820680  0.0066655  3282.90   &lt;2e-16 ***\nDESTIN_SZJWSZ01   20.8794884  0.0066662  3132.16   &lt;2e-16 ***\nDESTIN_SZJWSZ02   20.9782173  0.0054337  3860.75   &lt;2e-16 ***\nDESTIN_SZJWSZ03   22.0227195  0.0042783  5147.57   &lt;2e-16 ***\nDESTIN_SZJWSZ04   21.6461913  0.0043795  4942.61   &lt;2e-16 ***\nDESTIN_SZJWSZ05   20.6911372  0.0061907  3342.28   &lt;2e-16 ***\nDESTIN_SZJWSZ06   21.1878071  0.0055893  3790.79   &lt;2e-16 ***\nDESTIN_SZJWSZ07   19.0428169  0.0282705   673.59   &lt;2e-16 ***\nDESTIN_SZJWSZ08   21.8903544  0.0050012  4376.98   &lt;2e-16 ***\nDESTIN_SZJWSZ09   22.5424980  0.0036936  6103.06   &lt;2e-16 ***\nDESTIN_SZKLSZ01   20.4634268  0.0056420  3626.98   &lt;2e-16 ***\nDESTIN_SZKLSZ02   20.2478216  0.0059129  3424.34   &lt;2e-16 ***\nDESTIN_SZKLSZ03   19.8695026  0.0067009  2965.21   &lt;2e-16 ***\nDESTIN_SZKLSZ04   19.2897316  0.0088709  2174.49   &lt;2e-16 ***\nDESTIN_SZKLSZ05   20.4770370  0.0086509  2367.05   &lt;2e-16 ***\nDESTIN_SZKLSZ06   18.1276772  0.0362109   500.61   &lt;2e-16 ***\nDESTIN_SZKLSZ07   19.8374632  0.0067383  2943.99   &lt;2e-16 ***\nDESTIN_SZKLSZ08   20.4060780  0.0052667  3874.53   &lt;2e-16 ***\nDESTIN_SZLKSZ01   20.2059596  0.0206353   979.19   &lt;2e-16 ***\nDESTIN_SZMDSZ01   20.1278738  0.0200890  1001.94   &lt;2e-16 ***\nDESTIN_SZMDSZ02   20.1619389  0.0112827  1786.97   &lt;2e-16 ***\nDESTIN_SZMDSZ03   18.4522837  0.0252315   731.32   &lt;2e-16 ***\nDESTIN_SZMPSZ01   20.5799332  0.0079633  2584.35   &lt;2e-16 ***\nDESTIN_SZMPSZ02   20.6316833  0.0062508  3300.64   &lt;2e-16 ***\nDESTIN_SZMPSZ03   21.4621615  0.0050542  4246.37   &lt;2e-16 ***\nDESTIN_SZMUSZ02   18.2421629  0.0199779   913.12   &lt;2e-16 ***\nDESTIN_SZNTSZ01   17.0945488  0.0447827   381.72   &lt;2e-16 ***\nDESTIN_SZNTSZ02   18.8831776  0.0108934  1733.45   &lt;2e-16 ***\nDESTIN_SZNTSZ03   19.3791626  0.0076350  2538.21   &lt;2e-16 ***\nDESTIN_SZNTSZ05   17.6488863  0.0249157   708.35   &lt;2e-16 ***\nDESTIN_SZNTSZ06   16.9605339  0.0428385   395.92   &lt;2e-16 ***\nDESTIN_SZNVSZ01   20.6195831  0.0049645  4153.43   &lt;2e-16 ***\nDESTIN_SZNVSZ02   20.4864758  0.0055142  3715.19   &lt;2e-16 ***\nDESTIN_SZNVSZ03   20.6593888  0.0056869  3632.80   &lt;2e-16 ***\nDESTIN_SZNVSZ04   19.2098031  0.0109717  1750.86   &lt;2e-16 ***\nDESTIN_SZNVSZ05   19.5425604  0.0091838  2127.94   &lt;2e-16 ***\nDESTIN_SZPGSZ01   20.1114052  0.0158000  1272.87   &lt;2e-16 ***\nDESTIN_SZPGSZ02   20.5911926  0.0070070  2938.65   &lt;2e-16 ***\nDESTIN_SZPGSZ03   21.5617486  0.0046202  4666.81   &lt;2e-16 ***\nDESTIN_SZPGSZ04   21.6265975  0.0047271  4575.06   &lt;2e-16 ***\nDESTIN_SZPGSZ05   20.6582587  0.0079272  2606.00   &lt;2e-16 ***\nDESTIN_SZPLSZ01   21.0374316  0.0072946  2883.99   &lt;2e-16 ***\nDESTIN_SZPLSZ02   20.1998476  0.0133686  1510.99   &lt;2e-16 ***\nDESTIN_SZPLSZ03   20.5622087  0.0095875  2144.69   &lt;2e-16 ***\nDESTIN_SZPLSZ04   18.4282724  0.0091170  2021.31   &lt;2e-16 ***\nDESTIN_SZPLSZ05   20.3290145  0.0117543  1729.50   &lt;2e-16 ***\nDESTIN_SZPNSZ01   21.1585918  0.0061564  3436.84   &lt;2e-16 ***\nDESTIN_SZPNSZ02   21.9339216  0.0064986  3375.18   &lt;2e-16 ***\nDESTIN_SZPNSZ03   21.0664486  0.0077158  2730.30   &lt;2e-16 ***\nDESTIN_SZPNSZ04   22.2058965  0.0075647  2935.48   &lt;2e-16 ***\nDESTIN_SZPNSZ05   21.3979375  0.0116638  1834.56   &lt;2e-16 ***\nDESTIN_SZPRSZ01   20.5404495  0.0087571  2345.59   &lt;2e-16 ***\nDESTIN_SZPRSZ02   21.4350373  0.0054455  3936.25   &lt;2e-16 ***\nDESTIN_SZPRSZ03   22.1878608  0.0041362  5364.27   &lt;2e-16 ***\nDESTIN_SZPRSZ04   21.3787623  0.0081675  2617.53   &lt;2e-16 ***\nDESTIN_SZPRSZ05   21.5125691  0.0051256  4197.04   &lt;2e-16 ***\nDESTIN_SZPRSZ06   21.7098256  0.0056265  3858.50   &lt;2e-16 ***\nDESTIN_SZPRSZ07   19.2373819  0.0117872  1632.06   &lt;2e-16 ***\nDESTIN_SZPRSZ08   20.9797582  0.0066625  3148.94   &lt;2e-16 ***\nDESTIN_SZQTSZ01   19.8325026  0.0086624  2289.49   &lt;2e-16 ***\nDESTIN_SZQTSZ02   19.6742323  0.0075310  2612.42   &lt;2e-16 ***\nDESTIN_SZQTSZ03   19.7928367  0.0069200  2860.24   &lt;2e-16 ***\nDESTIN_SZQTSZ04   19.8934383  0.0068995  2883.31   &lt;2e-16 ***\nDESTIN_SZQTSZ05   19.8133562  0.0065317  3033.40   &lt;2e-16 ***\nDESTIN_SZQTSZ06   19.6444600  0.0067951  2890.97   &lt;2e-16 ***\nDESTIN_SZQTSZ07   19.2121502  0.0109930  1747.68   &lt;2e-16 ***\nDESTIN_SZQTSZ08   20.7404258  0.0052550  3946.79   &lt;2e-16 ***\nDESTIN_SZQTSZ09   20.3287578  0.0061674  3296.18   &lt;2e-16 ***\nDESTIN_SZQTSZ10   20.7150297  0.0056284  3680.41   &lt;2e-16 ***\nDESTIN_SZQTSZ11   20.8565966  0.0057354  3636.46   &lt;2e-16 ***\nDESTIN_SZQTSZ12   20.0673193  0.0083219  2411.39   &lt;2e-16 ***\nDESTIN_SZQTSZ13   20.9662093  0.0058825  3564.14   &lt;2e-16 ***\nDESTIN_SZQTSZ14   20.8944486  0.0067154  3111.42   &lt;2e-16 ***\nDESTIN_SZQTSZ15   21.7362310  0.0080957  2684.93   &lt;2e-16 ***\nDESTIN_SZRCSZ01   20.3486603  0.0071929  2829.01   &lt;2e-16 ***\nDESTIN_SZRCSZ06   19.6132187  0.0189618  1034.36   &lt;2e-16 ***\nDESTIN_SZRVSZ01   18.3911351  0.0162530  1131.55   &lt;2e-16 ***\nDESTIN_SZRVSZ02   18.2913339  0.0326496   560.23   &lt;2e-16 ***\nDESTIN_SZRVSZ03   18.2592035  0.0136378  1338.87   &lt;2e-16 ***\nDESTIN_SZRVSZ04   18.6470250  0.0155120  1202.10   &lt;2e-16 ***\nDESTIN_SZRVSZ05   17.1649094  0.0261496   656.41   &lt;2e-16 ***\nDESTIN_SZSBSZ01   19.9524234  0.0091540  2179.64   &lt;2e-16 ***\nDESTIN_SZSBSZ02   20.0804522  0.0077562  2588.95   &lt;2e-16 ***\nDESTIN_SZSBSZ03   21.7762933  0.0044476  4896.16   &lt;2e-16 ***\nDESTIN_SZSBSZ04   21.5453770  0.0053316  4041.07   &lt;2e-16 ***\nDESTIN_SZSBSZ05   20.0832389  0.0077331  2597.06   &lt;2e-16 ***\nDESTIN_SZSBSZ06   19.3437539  0.0222063   871.10   &lt;2e-16 ***\nDESTIN_SZSBSZ07   20.6325615  0.0182563  1130.16   &lt;2e-16 ***\nDESTIN_SZSBSZ08   22.3438417  0.0053594  4169.07   &lt;2e-16 ***\nDESTIN_SZSBSZ09   21.5837084  0.0049381  4370.81   &lt;2e-16 ***\nDESTIN_SZSESZ02   21.2641879  0.0050368  4221.80   &lt;2e-16 ***\nDESTIN_SZSESZ03   21.9405172  0.0040040  5479.67   &lt;2e-16 ***\nDESTIN_SZSESZ04   20.7374472  0.0058278  3558.39   &lt;2e-16 ***\nDESTIN_SZSESZ05   21.0590183  0.0049582  4247.31   &lt;2e-16 ***\nDESTIN_SZSESZ06   20.7934877  0.0065375  3180.65   &lt;2e-16 ***\nDESTIN_SZSESZ07   18.3637043  0.0227679   806.56   &lt;2e-16 ***\nDESTIN_SZSGSZ01   21.0394746  0.0059868  3514.30   &lt;2e-16 ***\nDESTIN_SZSGSZ02   21.1805071  0.0053614  3950.53   &lt;2e-16 ***\nDESTIN_SZSGSZ03   20.9721814  0.0049993  4195.04   &lt;2e-16 ***\nDESTIN_SZSGSZ04   21.0285751  0.0050875  4133.41   &lt;2e-16 ***\nDESTIN_SZSGSZ05   19.0692679  0.0101029  1887.51   &lt;2e-16 ***\nDESTIN_SZSGSZ06   21.5885066  0.0040745  5298.45   &lt;2e-16 ***\nDESTIN_SZSGSZ07   20.6135727  0.0053682  3839.94   &lt;2e-16 ***\nDESTIN_SZSISZ01   19.4840809  0.0258178   754.68   &lt;2e-16 ***\nDESTIN_SZSKSZ01   21.1160132  0.0074002  2853.45   &lt;2e-16 ***\nDESTIN_SZSKSZ02   22.4285006  0.0052520  4270.46   &lt;2e-16 ***\nDESTIN_SZSKSZ03   21.2694520  0.0061778  3442.86   &lt;2e-16 ***\nDESTIN_SZSKSZ04   20.2817912  0.0140934  1439.10   &lt;2e-16 ***\nDESTIN_SZSKSZ05   20.9139716  0.0105788  1976.97   &lt;2e-16 ***\nDESTIN_SZSLSZ01   20.9811738  0.0085002  2468.32   &lt;2e-16 ***\nDESTIN_SZSLSZ04   20.7897914  0.0072736  2858.27   &lt;2e-16 ***\nDESTIN_SZSRSZ01   18.1560788  0.0129426  1402.82   &lt;2e-16 ***\nDESTIN_SZTHSZ01   18.0575328  0.0366913   492.15   &lt;2e-16 ***\nDESTIN_SZTHSZ03   18.9557212  0.0251181   754.66   &lt;2e-16 ***\nDESTIN_SZTHSZ04   18.4163647  0.0213756   861.56   &lt;2e-16 ***\nDESTIN_SZTHSZ06   19.2168171  0.0153463  1252.21   &lt;2e-16 ***\nDESTIN_SZTMSZ01   21.6605069  0.0056838  3810.94   &lt;2e-16 ***\nDESTIN_SZTMSZ02   23.1658025  0.0037998  6096.59   &lt;2e-16 ***\nDESTIN_SZTMSZ03   22.5047015  0.0042697  5270.83   &lt;2e-16 ***\nDESTIN_SZTMSZ04   22.8299238  0.0042080  5425.40   &lt;2e-16 ***\nDESTIN_SZTMSZ05   22.2670551  0.0059075  3769.32   &lt;2e-16 ***\nDESTIN_SZTNSZ01   19.9496170  0.0072377  2756.33   &lt;2e-16 ***\nDESTIN_SZTNSZ02   18.8584745  0.0099329  1898.59   &lt;2e-16 ***\nDESTIN_SZTNSZ03   19.0841080  0.0117443  1624.97   &lt;2e-16 ***\nDESTIN_SZTNSZ04   20.0849427  0.0072932  2753.92   &lt;2e-16 ***\nDESTIN_SZTPSZ01   20.4571325  0.0060376  3388.31   &lt;2e-16 ***\nDESTIN_SZTPSZ02   21.4127909  0.0039938  5361.53   &lt;2e-16 ***\nDESTIN_SZTPSZ03   20.4177135  0.0056187  3633.90   &lt;2e-16 ***\nDESTIN_SZTPSZ04   19.4701362  0.0073588  2645.85   &lt;2e-16 ***\nDESTIN_SZTPSZ05   19.9396826  0.0058018  3436.83   &lt;2e-16 ***\nDESTIN_SZTPSZ06   20.3562902  0.0062100  3278.01   &lt;2e-16 ***\nDESTIN_SZTPSZ07   18.9046333  0.0116327  1625.12   &lt;2e-16 ***\nDESTIN_SZTPSZ08   19.4822072  0.0091265  2134.69   &lt;2e-16 ***\nDESTIN_SZTPSZ09   20.6065291  0.0068328  3015.82   &lt;2e-16 ***\nDESTIN_SZTPSZ10   19.6624868  0.0088534  2220.90   &lt;2e-16 ***\nDESTIN_SZTPSZ11   20.6123923  0.0054058  3813.03   &lt;2e-16 ***\nDESTIN_SZTPSZ12   20.2169628  0.0064485  3135.13   &lt;2e-16 ***\nDESTIN_SZTSSZ01   19.7256587  0.0208730   945.03   &lt;2e-16 ***\nDESTIN_SZTSSZ02   20.6955359  0.0133938  1545.16   &lt;2e-16 ***\nDESTIN_SZTSSZ03   21.8210021  0.0077056  2831.84   &lt;2e-16 ***\nDESTIN_SZTSSZ04   21.4553113  0.0080390  2668.92   &lt;2e-16 ***\nDESTIN_SZTSSZ05   22.3585141  0.0075087  2977.69   &lt;2e-16 ***\nDESTIN_SZTSSZ06   22.9040322  0.0142173  1611.00   &lt;2e-16 ***\nDESTIN_SZWCSZ01   23.7710323  0.0049990  4755.12   &lt;2e-16 ***\nDESTIN_SZWCSZ02   20.5168044  0.0123556  1660.52   &lt;2e-16 ***\nDESTIN_SZWCSZ03   19.3142780  0.0325485   593.40   &lt;2e-16 ***\nDESTIN_SZWDSZ01   22.5839489  0.0035977  6277.29   &lt;2e-16 ***\nDESTIN_SZWDSZ02   20.7102428  0.0059590  3475.43   &lt;2e-16 ***\nDESTIN_SZWDSZ03   21.8555263  0.0046044  4746.71   &lt;2e-16 ***\nDESTIN_SZWDSZ04   21.2543995  0.0067996  3125.82   &lt;2e-16 ***\nDESTIN_SZWDSZ05   21.2480643  0.0067031  3169.89   &lt;2e-16 ***\nDESTIN_SZWDSZ06   21.6227127  0.0046817  4618.52   &lt;2e-16 ***\nDESTIN_SZWDSZ07   20.7239019  0.0063296  3274.13   &lt;2e-16 ***\nDESTIN_SZWDSZ08   21.1141310  0.0062823  3360.88   &lt;2e-16 ***\nDESTIN_SZWDSZ09   21.7522185  0.0046206  4707.68   &lt;2e-16 ***\nDESTIN_SZYSSZ01   22.1696149  0.0039271  5645.27   &lt;2e-16 ***\nDESTIN_SZYSSZ02   21.5642593  0.0051636  4176.20   &lt;2e-16 ***\nDESTIN_SZYSSZ03   21.0827764  0.0062436  3376.70   &lt;2e-16 ***\nDESTIN_SZYSSZ04   21.1665869  0.0053325  3969.32   &lt;2e-16 ***\nDESTIN_SZYSSZ05   20.2131257  0.0109316  1849.06   &lt;2e-16 ***\nDESTIN_SZYSSZ06   19.7991046  0.0107159  1847.64   &lt;2e-16 ***\nDESTIN_SZYSSZ07   20.3189759  0.0143152  1419.39   &lt;2e-16 ***\nDESTIN_SZYSSZ08   22.2483268  0.0042169  5275.96   &lt;2e-16 ***\nDESTIN_SZYSSZ09   21.5401754  0.0043051  5003.39   &lt;2e-16 ***\nlog(SCHOOL_COUNT)         NA         NA       NA       NA    \nlog(BIZ_COUNT)            NA         NA       NA       NA    \nlog(DIST)         -1.7525619  0.0004141 -4231.93   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 189463537  on 14471  degrees of freedom\nResidual deviance:  18757606  on 14190  degrees of freedom\nAIC: 18847306\n\nNumber of Fisher Scoring iterations: 7\n\n\n\n\n\n\ndbcSIM_Poisson = glm(formula = TRIPS ~\n                       ORIGIN_SZ +\n                       DESTIN_SZ +\n                       log(DIST), # note: -1 not required for doubly constrained SIM\n                     family = poisson(link = \"log\"),\n                     data = inter_zonal_flow,\n                     na.action = na.exclude)\noptions(max.print=10000) \nsummary(dbcSIM_Poisson)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_SZ + DESTIN_SZ + log(DIST), family = poisson(link = \"log\"), \n    data = inter_zonal_flow, na.action = na.exclude)\n\nCoefficients:\n                  Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)     21.8312374  0.0059160  3690.190  &lt; 2e-16 ***\nORIGIN_SZAMSZ02  0.5263502  0.0048031   109.585  &lt; 2e-16 ***\nORIGIN_SZAMSZ03  0.3139982  0.0049254    63.751  &lt; 2e-16 ***\nORIGIN_SZAMSZ04 -0.2146257  0.0053639   -40.013  &lt; 2e-16 ***\nORIGIN_SZAMSZ05 -0.1890446  0.0060386   -31.306  &lt; 2e-16 ***\nORIGIN_SZAMSZ06  0.1539201  0.0054401    28.294  &lt; 2e-16 ***\nORIGIN_SZAMSZ07 -0.9826565  0.0098676   -99.584  &lt; 2e-16 ***\nORIGIN_SZAMSZ08 -0.4488417  0.0093070   -48.226  &lt; 2e-16 ***\nORIGIN_SZAMSZ09  0.0713474  0.0057402    12.429  &lt; 2e-16 ***\nORIGIN_SZAMSZ10  0.4313742  0.0050370    85.641  &lt; 2e-16 ***\nORIGIN_SZAMSZ11 -1.4712226  0.0131178  -112.154  &lt; 2e-16 ***\nORIGIN_SZAMSZ12 -1.7250733  0.0111603  -154.573  &lt; 2e-16 ***\nORIGIN_SZBDSZ01  0.8810576  0.0048168   182.914  &lt; 2e-16 ***\nORIGIN_SZBDSZ02  0.1100240  0.0055529    19.814  &lt; 2e-16 ***\nORIGIN_SZBDSZ03  0.3606166  0.0050672    71.167  &lt; 2e-16 ***\nORIGIN_SZBDSZ04  1.4624347  0.0044212   330.781  &lt; 2e-16 ***\nORIGIN_SZBDSZ05  0.6207557  0.0050843   122.092  &lt; 2e-16 ***\nORIGIN_SZBDSZ06  0.6712973  0.0051953   129.214  &lt; 2e-16 ***\nORIGIN_SZBDSZ07 -1.2338669  0.0100775  -122.437  &lt; 2e-16 ***\nORIGIN_SZBDSZ08 -1.0444562  0.0094555  -110.460  &lt; 2e-16 ***\nORIGIN_SZBKSZ01 -0.2838426  0.0071354   -39.780  &lt; 2e-16 ***\nORIGIN_SZBKSZ02  0.5550522  0.0059014    94.054  &lt; 2e-16 ***\nORIGIN_SZBKSZ03  0.7396640  0.0056796   130.231  &lt; 2e-16 ***\nORIGIN_SZBKSZ04 -0.2242451  0.0067482   -33.230  &lt; 2e-16 ***\nORIGIN_SZBKSZ05 -0.2371614  0.0069386   -34.180  &lt; 2e-16 ***\nORIGIN_SZBKSZ06 -0.1413812  0.0065035   -21.739  &lt; 2e-16 ***\nORIGIN_SZBKSZ07  0.7089989  0.0051843   136.758  &lt; 2e-16 ***\nORIGIN_SZBKSZ08 -0.0907065  0.0059157   -15.333  &lt; 2e-16 ***\nORIGIN_SZBKSZ09 -0.1775146  0.0063302   -28.042  &lt; 2e-16 ***\nORIGIN_SZBLSZ01 -2.3684539  0.0154280  -153.516  &lt; 2e-16 ***\nORIGIN_SZBLSZ02 -2.8078475  0.0197839  -141.926  &lt; 2e-16 ***\nORIGIN_SZBLSZ03 -3.3122763  0.0466091   -71.065  &lt; 2e-16 ***\nORIGIN_SZBLSZ04 -2.6770542  0.0241793  -110.717  &lt; 2e-16 ***\nORIGIN_SZBMSZ01  0.0618035  0.0059400    10.405  &lt; 2e-16 ***\nORIGIN_SZBMSZ02 -1.3535767  0.0073741  -183.557  &lt; 2e-16 ***\nORIGIN_SZBMSZ03 -0.7569095  0.0063187  -119.790  &lt; 2e-16 ***\nORIGIN_SZBMSZ04 -0.2949304  0.0059603   -49.483  &lt; 2e-16 ***\nORIGIN_SZBMSZ05 -2.6131992  0.0172376  -151.599  &lt; 2e-16 ***\nORIGIN_SZBMSZ06 -3.0315024  0.0185502  -163.422  &lt; 2e-16 ***\nORIGIN_SZBMSZ07 -0.6962524  0.0064068  -108.674  &lt; 2e-16 ***\nORIGIN_SZBMSZ08 -0.9310730  0.0064541  -144.261  &lt; 2e-16 ***\nORIGIN_SZBMSZ09 -1.2911253  0.0092047  -140.268  &lt; 2e-16 ***\nORIGIN_SZBMSZ10 -1.6687004  0.0095708  -174.353  &lt; 2e-16 ***\nORIGIN_SZBMSZ11 -1.1152794  0.0072027  -154.841  &lt; 2e-16 ***\nORIGIN_SZBMSZ12 -1.5323954  0.0099932  -153.344  &lt; 2e-16 ***\nORIGIN_SZBMSZ13 -0.6267376  0.0065863   -95.158  &lt; 2e-16 ***\nORIGIN_SZBMSZ14 -1.0475467  0.0072472  -144.544  &lt; 2e-16 ***\nORIGIN_SZBMSZ15 -0.5049444  0.0067390   -74.929  &lt; 2e-16 ***\nORIGIN_SZBMSZ16 -1.5282897  0.0099545  -153.527  &lt; 2e-16 ***\nORIGIN_SZBMSZ17 -1.5722349  0.0161533   -97.332  &lt; 2e-16 ***\nORIGIN_SZBPSZ01  0.5814175  0.0062904    92.429  &lt; 2e-16 ***\nORIGIN_SZBPSZ02  0.0875442  0.0072190    12.127  &lt; 2e-16 ***\nORIGIN_SZBPSZ03  0.3358227  0.0070460    47.662  &lt; 2e-16 ***\nORIGIN_SZBPSZ04  0.6507586  0.0057726   112.733  &lt; 2e-16 ***\nORIGIN_SZBPSZ05  0.9502124  0.0052971   179.384  &lt; 2e-16 ***\nORIGIN_SZBPSZ06 -1.0480314  0.0098191  -106.734  &lt; 2e-16 ***\nORIGIN_SZBPSZ07 -0.5467931  0.0091676   -59.644  &lt; 2e-16 ***\nORIGIN_SZBSSZ01  0.2998334  0.0059193    50.654  &lt; 2e-16 ***\nORIGIN_SZBSSZ02  0.2841036  0.0050863    55.856  &lt; 2e-16 ***\nORIGIN_SZBSSZ03 -0.2331505  0.0056565   -41.218  &lt; 2e-16 ***\nORIGIN_SZBTSZ01  0.0987284  0.0063715    15.495  &lt; 2e-16 ***\nORIGIN_SZBTSZ02 -0.6261229  0.0084604   -74.006  &lt; 2e-16 ***\nORIGIN_SZBTSZ03 -0.4326963  0.0073452   -58.909  &lt; 2e-16 ***\nORIGIN_SZBTSZ04 -1.4998668  0.0110013  -136.336  &lt; 2e-16 ***\nORIGIN_SZBTSZ05 -0.9564768  0.0122202   -78.270  &lt; 2e-16 ***\nORIGIN_SZBTSZ06 -1.2853131  0.0099328  -129.401  &lt; 2e-16 ***\nORIGIN_SZBTSZ07 -2.3870991  0.0144589  -165.096  &lt; 2e-16 ***\nORIGIN_SZBTSZ08 -1.3715855  0.0113825  -120.499  &lt; 2e-16 ***\nORIGIN_SZCBSZ01 -3.5940232  0.0548979   -65.467  &lt; 2e-16 ***\nORIGIN_SZCCSZ01 -0.7008220  0.0140373   -49.926  &lt; 2e-16 ***\nORIGIN_SZCHSZ01 -0.9109524  0.0122869   -74.140  &lt; 2e-16 ***\nORIGIN_SZCHSZ02 -0.8566547  0.0088749   -96.526  &lt; 2e-16 ***\nORIGIN_SZCHSZ03  1.1153731  0.0066136   168.650  &lt; 2e-16 ***\nORIGIN_SZCKSZ01  0.3001815  0.0058548    51.271  &lt; 2e-16 ***\nORIGIN_SZCKSZ02  0.7185711  0.0060595   118.585  &lt; 2e-16 ***\nORIGIN_SZCKSZ03  1.1389824  0.0053179   214.178  &lt; 2e-16 ***\nORIGIN_SZCKSZ04  1.6281772  0.0054761   297.324  &lt; 2e-16 ***\nORIGIN_SZCKSZ05  0.8338470  0.0064178   129.927  &lt; 2e-16 ***\nORIGIN_SZCKSZ06  0.6528993  0.0082375    79.259  &lt; 2e-16 ***\nORIGIN_SZCLSZ01 -0.7174758  0.0082123   -87.366  &lt; 2e-16 ***\nORIGIN_SZCLSZ02 -1.7513100  0.0139062  -125.938  &lt; 2e-16 ***\nORIGIN_SZCLSZ03 -1.0362873  0.0085485  -121.224  &lt; 2e-16 ***\nORIGIN_SZCLSZ04  0.6160017  0.0051276   120.136  &lt; 2e-16 ***\nORIGIN_SZCLSZ05 -2.1005122  0.0150228  -139.821  &lt; 2e-16 ***\nORIGIN_SZCLSZ06  0.7252108  0.0049447   146.665  &lt; 2e-16 ***\nORIGIN_SZCLSZ07 -0.5343482  0.0062500   -85.496  &lt; 2e-16 ***\nORIGIN_SZCLSZ08 -0.2153408  0.0067571   -31.869  &lt; 2e-16 ***\nORIGIN_SZCLSZ09 -1.8019961  0.0169078  -106.578  &lt; 2e-16 ***\nORIGIN_SZDTSZ02 -3.9057711  0.0834668   -46.794  &lt; 2e-16 ***\nORIGIN_SZDTSZ03 -3.4152419  0.0738650   -46.236  &lt; 2e-16 ***\nORIGIN_SZDTSZ13 -3.0183438  0.0315257   -95.742  &lt; 2e-16 ***\nORIGIN_SZGLSZ01 -1.7812384  0.0099367  -179.258  &lt; 2e-16 ***\nORIGIN_SZGLSZ02 -0.1074991  0.0054325   -19.788  &lt; 2e-16 ***\nORIGIN_SZGLSZ03 -0.2461106  0.0057176   -43.045  &lt; 2e-16 ***\nORIGIN_SZGLSZ04  0.8657186  0.0046413   186.524  &lt; 2e-16 ***\nORIGIN_SZGLSZ05  0.5871393  0.0047939   122.477  &lt; 2e-16 ***\nORIGIN_SZHGSZ01  0.3543819  0.0050461    70.229  &lt; 2e-16 ***\nORIGIN_SZHGSZ02  0.4218178  0.0050820    83.003  &lt; 2e-16 ***\nORIGIN_SZHGSZ03  0.2411309  0.0054241    44.456  &lt; 2e-16 ***\nORIGIN_SZHGSZ04  0.8180622  0.0046153   177.252  &lt; 2e-16 ***\nORIGIN_SZHGSZ05  1.2173687  0.0045655   266.647  &lt; 2e-16 ***\nORIGIN_SZHGSZ06 -0.1826300  0.0058214   -31.372  &lt; 2e-16 ***\nORIGIN_SZHGSZ07  0.3172839  0.0050733    62.540  &lt; 2e-16 ***\nORIGIN_SZHGSZ08 -0.1151369  0.0057067   -20.176  &lt; 2e-16 ***\nORIGIN_SZHGSZ09 -1.2873441  0.0091690  -140.401  &lt; 2e-16 ***\nORIGIN_SZHGSZ10 -3.3783178  0.0424682   -79.549  &lt; 2e-16 ***\nORIGIN_SZJESZ01  0.4859234  0.0055927    86.885  &lt; 2e-16 ***\nORIGIN_SZJESZ02  0.1766088  0.0055800    31.650  &lt; 2e-16 ***\nORIGIN_SZJESZ03 -0.2177441  0.0059535   -36.574  &lt; 2e-16 ***\nORIGIN_SZJESZ04 -1.5532182  0.0104526  -148.597  &lt; 2e-16 ***\nORIGIN_SZJESZ05 -2.3332926  0.0142701  -163.509  &lt; 2e-16 ***\nORIGIN_SZJESZ06  0.3007382  0.0055019    54.661  &lt; 2e-16 ***\nORIGIN_SZJESZ07 -1.9687994  0.0121092  -162.587  &lt; 2e-16 ***\nORIGIN_SZJESZ08 -1.3032070  0.0122024  -106.800  &lt; 2e-16 ***\nORIGIN_SZJESZ09  0.5762635  0.0058766    98.061  &lt; 2e-16 ***\nORIGIN_SZJESZ10 -1.4423113  0.0194773   -74.051  &lt; 2e-16 ***\nORIGIN_SZJESZ11 -1.9720897  0.0200811   -98.206  &lt; 2e-16 ***\nORIGIN_SZJWSZ01  0.3808627  0.0071357    53.374  &lt; 2e-16 ***\nORIGIN_SZJWSZ02  0.7963999  0.0053150   149.840  &lt; 2e-16 ***\nORIGIN_SZJWSZ03  1.5429636  0.0049961   308.834  &lt; 2e-16 ***\nORIGIN_SZJWSZ04  0.6410760  0.0056711   113.042  &lt; 2e-16 ***\nORIGIN_SZJWSZ05 -2.1571049  0.0133584  -161.479  &lt; 2e-16 ***\nORIGIN_SZJWSZ06 -1.5174532  0.0113384  -133.833  &lt; 2e-16 ***\nORIGIN_SZJWSZ07 -2.7089963  0.0280439   -96.598  &lt; 2e-16 ***\nORIGIN_SZJWSZ08  1.5343415  0.0051711   296.713  &lt; 2e-16 ***\nORIGIN_SZJWSZ09  1.8837410  0.0048845   385.656  &lt; 2e-16 ***\nORIGIN_SZKLSZ01  0.1081286  0.0053307    20.284  &lt; 2e-16 ***\nORIGIN_SZKLSZ02 -0.8844695  0.0067728  -130.591  &lt; 2e-16 ***\nORIGIN_SZKLSZ03 -0.6872640  0.0062857  -109.337  &lt; 2e-16 ***\nORIGIN_SZKLSZ04 -2.2090319  0.0122440  -180.418  &lt; 2e-16 ***\nORIGIN_SZKLSZ05 -1.1728726  0.0110765  -105.888  &lt; 2e-16 ***\nORIGIN_SZKLSZ06 -6.1162315  0.1857789   -32.922  &lt; 2e-16 ***\nORIGIN_SZKLSZ07 -1.4082749  0.0092299  -152.578  &lt; 2e-16 ***\nORIGIN_SZKLSZ08 -1.7781551  0.0104682  -169.862  &lt; 2e-16 ***\nORIGIN_SZLKSZ01 -2.0531568  0.0398803   -51.483  &lt; 2e-16 ***\nORIGIN_SZMDSZ01 -0.8825639  0.0287621   -30.685  &lt; 2e-16 ***\nORIGIN_SZMDSZ02 -0.6219993  0.0107388   -57.921  &lt; 2e-16 ***\nORIGIN_SZMDSZ03 -2.0840156  0.0173117  -120.382  &lt; 2e-16 ***\nORIGIN_SZMPSZ01 -0.9659093  0.0086972  -111.060  &lt; 2e-16 ***\nORIGIN_SZMPSZ02 -1.0411153  0.0073403  -141.836  &lt; 2e-16 ***\nORIGIN_SZMPSZ03  0.0001659  0.0059401     0.028 0.977719    \nORIGIN_SZMUSZ02 -3.7599031  0.1037937   -36.225  &lt; 2e-16 ***\nORIGIN_SZNTSZ01 -3.0388366  0.0355325   -85.523  &lt; 2e-16 ***\nORIGIN_SZNTSZ02 -3.4230640  0.0235902  -145.106  &lt; 2e-16 ***\nORIGIN_SZNTSZ03 -0.9094796  0.0082551  -110.172  &lt; 2e-16 ***\nORIGIN_SZNTSZ05 -4.0861681  0.0499630   -81.784  &lt; 2e-16 ***\nORIGIN_SZNTSZ06 -3.9497128  0.0565388   -69.858  &lt; 2e-16 ***\nORIGIN_SZNVSZ01  0.3235636  0.0049439    65.447  &lt; 2e-16 ***\nORIGIN_SZNVSZ02 -0.6946748  0.0070536   -98.485  &lt; 2e-16 ***\nORIGIN_SZNVSZ03 -1.0540196  0.0083781  -125.806  &lt; 2e-16 ***\nORIGIN_SZNVSZ04 -0.9897977  0.0093463  -105.903  &lt; 2e-16 ***\nORIGIN_SZNVSZ05 -2.2578432  0.0169180  -133.458  &lt; 2e-16 ***\nORIGIN_SZPGSZ01  0.2399827  0.0130436    18.398  &lt; 2e-16 ***\nORIGIN_SZPGSZ02 -0.3352342  0.0078451   -42.732  &lt; 2e-16 ***\nORIGIN_SZPGSZ03  0.9515148  0.0051376   185.207  &lt; 2e-16 ***\nORIGIN_SZPGSZ04  1.3998952  0.0047991   291.697  &lt; 2e-16 ***\nORIGIN_SZPGSZ05  0.4451629  0.0063423    70.189  &lt; 2e-16 ***\nORIGIN_SZPLSZ01 -0.9705918  0.0122781   -79.050  &lt; 2e-16 ***\nORIGIN_SZPLSZ02 -1.0670151  0.0153358   -69.577  &lt; 2e-16 ***\nORIGIN_SZPLSZ03 -2.1229124  0.0373527   -56.834  &lt; 2e-16 ***\nORIGIN_SZPLSZ04 -3.0911932  0.0371296   -83.254  &lt; 2e-16 ***\nORIGIN_SZPLSZ05 -2.1705708  0.0226085   -96.007  &lt; 2e-16 ***\nORIGIN_SZPNSZ01  0.9052637  0.0065952   137.262  &lt; 2e-16 ***\nORIGIN_SZPNSZ02 -0.1720425  0.0125658   -13.691  &lt; 2e-16 ***\nORIGIN_SZPNSZ03 -2.3973459  0.0201408  -119.029  &lt; 2e-16 ***\nORIGIN_SZPNSZ04 -3.4483689  0.0343741  -100.319  &lt; 2e-16 ***\nORIGIN_SZPNSZ05 -2.0588530  0.0282328   -72.924  &lt; 2e-16 ***\nORIGIN_SZPRSZ01 -0.6399015  0.0120470   -53.117  &lt; 2e-16 ***\nORIGIN_SZPRSZ02  0.8122270  0.0050886   159.617  &lt; 2e-16 ***\nORIGIN_SZPRSZ03  0.3990960  0.0051810    77.031  &lt; 2e-16 ***\nORIGIN_SZPRSZ04 -0.8485348  0.0079236  -107.089  &lt; 2e-16 ***\nORIGIN_SZPRSZ05  0.8008791  0.0048532   165.021  &lt; 2e-16 ***\nORIGIN_SZPRSZ06 -1.4498806  0.0121422  -119.408  &lt; 2e-16 ***\nORIGIN_SZPRSZ07 -3.2025045  0.0167118  -191.631  &lt; 2e-16 ***\nORIGIN_SZPRSZ08 -0.5862269  0.0067255   -87.165  &lt; 2e-16 ***\nORIGIN_SZQTSZ01 -0.1859270  0.0075531   -24.616  &lt; 2e-16 ***\nORIGIN_SZQTSZ02 -0.8715122  0.0068124  -127.929  &lt; 2e-16 ***\nORIGIN_SZQTSZ03 -0.1259816  0.0064796   -19.443  &lt; 2e-16 ***\nORIGIN_SZQTSZ04 -1.4620032  0.0079848  -183.098  &lt; 2e-16 ***\nORIGIN_SZQTSZ05 -0.6675643  0.0069616   -95.892  &lt; 2e-16 ***\nORIGIN_SZQTSZ06 -0.8190026  0.0072713  -112.634  &lt; 2e-16 ***\nORIGIN_SZQTSZ07 -1.5189403  0.0099864  -152.101  &lt; 2e-16 ***\nORIGIN_SZQTSZ08 -0.4976238  0.0067874   -73.316  &lt; 2e-16 ***\nORIGIN_SZQTSZ09 -0.9006162  0.0075978  -118.536  &lt; 2e-16 ***\nORIGIN_SZQTSZ10 -0.6690184  0.0071574   -93.473  &lt; 2e-16 ***\nORIGIN_SZQTSZ11 -2.5203437  0.0147000  -171.452  &lt; 2e-16 ***\nORIGIN_SZQTSZ12 -3.0461675  0.0190193  -160.162  &lt; 2e-16 ***\nORIGIN_SZQTSZ13 -0.7501068  0.0084481   -88.791  &lt; 2e-16 ***\nORIGIN_SZQTSZ14 -1.9321849  0.0126114  -153.209  &lt; 2e-16 ***\nORIGIN_SZQTSZ15 -0.9576828  0.0127157   -75.315  &lt; 2e-16 ***\nORIGIN_SZRCSZ01 -1.8167951  0.0129234  -140.582  &lt; 2e-16 ***\nORIGIN_SZRCSZ06 -0.5560563  0.0090507   -61.438  &lt; 2e-16 ***\nORIGIN_SZRVSZ01 -2.8862570  0.0325532   -88.663  &lt; 2e-16 ***\nORIGIN_SZRVSZ02 -3.1555662  0.0281279  -112.186  &lt; 2e-16 ***\nORIGIN_SZRVSZ03 -2.9836089  0.0248449  -120.089  &lt; 2e-16 ***\nORIGIN_SZRVSZ04 -3.5520422  0.0561371   -63.274  &lt; 2e-16 ***\nORIGIN_SZRVSZ05 -2.5866584  0.0180382  -143.399  &lt; 2e-16 ***\nORIGIN_SZSBSZ01  0.2867444  0.0071098    40.331  &lt; 2e-16 ***\nORIGIN_SZSBSZ02 -0.9012334  0.0087262  -103.278  &lt; 2e-16 ***\nORIGIN_SZSBSZ03  0.8311038  0.0055422   149.958  &lt; 2e-16 ***\nORIGIN_SZSBSZ04  0.4044170  0.0062047    65.179  &lt; 2e-16 ***\nORIGIN_SZSBSZ05 -0.2661845  0.0074162   -35.892  &lt; 2e-16 ***\nORIGIN_SZSBSZ06 -0.9023075  0.0175046   -51.547  &lt; 2e-16 ***\nORIGIN_SZSBSZ07  0.0505870  0.0131317     3.852 0.000117 ***\nORIGIN_SZSBSZ08 -1.1158011  0.0145416   -76.732  &lt; 2e-16 ***\nORIGIN_SZSBSZ09 -0.9682835  0.0095396  -101.501  &lt; 2e-16 ***\nORIGIN_SZSESZ02  1.1452735  0.0047810   239.548  &lt; 2e-16 ***\nORIGIN_SZSESZ03  1.2815277  0.0045677   280.564  &lt; 2e-16 ***\nORIGIN_SZSESZ04  0.8085857  0.0052756   153.269  &lt; 2e-16 ***\nORIGIN_SZSESZ05 -0.2329413  0.0063113   -36.909  &lt; 2e-16 ***\nORIGIN_SZSESZ06  1.0576879  0.0049909   211.925  &lt; 2e-16 ***\nORIGIN_SZSESZ07 -2.3165908  0.0196831  -117.695  &lt; 2e-16 ***\nORIGIN_SZSGSZ01 -0.6606350  0.0088079   -75.005  &lt; 2e-16 ***\nORIGIN_SZSGSZ02 -1.3638984  0.0104040  -131.094  &lt; 2e-16 ***\nORIGIN_SZSGSZ03  0.1152591  0.0054649    21.091  &lt; 2e-16 ***\nORIGIN_SZSGSZ04  0.2954067  0.0050865    58.077  &lt; 2e-16 ***\nORIGIN_SZSGSZ05 -2.0792678  0.0109882  -189.227  &lt; 2e-16 ***\nORIGIN_SZSGSZ06  0.4563227  0.0048880    93.356  &lt; 2e-16 ***\nORIGIN_SZSGSZ07 -0.8955254  0.0067100  -133.461  &lt; 2e-16 ***\nORIGIN_SZSKSZ01 -0.3184402  0.0093032   -34.229  &lt; 2e-16 ***\nORIGIN_SZSKSZ02  1.1160484  0.0063851   174.790  &lt; 2e-16 ***\nORIGIN_SZSKSZ03 -0.2566692  0.0086021   -29.838  &lt; 2e-16 ***\nORIGIN_SZSKSZ04 -1.5781827  0.0279394   -56.486  &lt; 2e-16 ***\nORIGIN_SZSKSZ05 -0.2724361  0.0163597   -16.653  &lt; 2e-16 ***\nORIGIN_SZSLSZ01 -2.4458625  0.0330301   -74.050  &lt; 2e-16 ***\nORIGIN_SZSLSZ04 -0.0987076  0.0079626   -12.396  &lt; 2e-16 ***\nORIGIN_SZSRSZ01 -2.2584977  0.0176647  -127.854  &lt; 2e-16 ***\nORIGIN_SZTHSZ01 -2.5878524  0.0489998   -52.814  &lt; 2e-16 ***\nORIGIN_SZTHSZ03 -0.8101746  0.0226814   -35.720  &lt; 2e-16 ***\nORIGIN_SZTHSZ04 -2.4186655  0.0288663   -83.789  &lt; 2e-16 ***\nORIGIN_SZTHSZ06 -1.7080541  0.0186353   -91.657  &lt; 2e-16 ***\nORIGIN_SZTMSZ01 -0.2193476  0.0061823   -35.480  &lt; 2e-16 ***\nORIGIN_SZTMSZ02  1.7772464  0.0043394   409.558  &lt; 2e-16 ***\nORIGIN_SZTMSZ03  1.0051343  0.0046055   218.249  &lt; 2e-16 ***\nORIGIN_SZTMSZ04  0.1642370  0.0055078    29.819  &lt; 2e-16 ***\nORIGIN_SZTMSZ05 -1.2878706  0.0114828  -112.157  &lt; 2e-16 ***\nORIGIN_SZTNSZ01 -1.7163504  0.0131268  -130.751  &lt; 2e-16 ***\nORIGIN_SZTNSZ02 -1.6508988  0.0103851  -158.968  &lt; 2e-16 ***\nORIGIN_SZTNSZ03 -2.1545577  0.0137947  -156.187  &lt; 2e-16 ***\nORIGIN_SZTNSZ04 -0.3949120  0.0078496   -50.310  &lt; 2e-16 ***\nORIGIN_SZTPSZ01 -0.8058100  0.0069916  -115.253  &lt; 2e-16 ***\nORIGIN_SZTPSZ02  0.5369060  0.0047272   113.577  &lt; 2e-16 ***\nORIGIN_SZTPSZ03 -0.7779333  0.0064278  -121.027  &lt; 2e-16 ***\nORIGIN_SZTPSZ04 -0.8153581  0.0061387  -132.823  &lt; 2e-16 ***\nORIGIN_SZTPSZ05 -0.5073676  0.0067771   -74.865  &lt; 2e-16 ***\nORIGIN_SZTPSZ06  0.0847301  0.0065717    12.893  &lt; 2e-16 ***\nORIGIN_SZTPSZ07 -0.5839519  0.0066148   -88.280  &lt; 2e-16 ***\nORIGIN_SZTPSZ08 -1.0577941  0.0098480  -107.412  &lt; 2e-16 ***\nORIGIN_SZTPSZ09 -0.9067707  0.0071367  -127.057  &lt; 2e-16 ***\nORIGIN_SZTPSZ10 -1.1362091  0.0080905  -140.438  &lt; 2e-16 ***\nORIGIN_SZTPSZ11 -0.2374621  0.0059472   -39.928  &lt; 2e-16 ***\nORIGIN_SZTPSZ12 -0.8028874  0.0069663  -115.253  &lt; 2e-16 ***\nORIGIN_SZTSSZ01 -2.7809271  0.0482843   -57.595  &lt; 2e-16 ***\nORIGIN_SZTSSZ02  0.0425804  0.0105088     4.052 5.08e-05 ***\nORIGIN_SZTSSZ03  0.1142369  0.0109412    10.441  &lt; 2e-16 ***\nORIGIN_SZTSSZ04 -0.6186261  0.0116324   -53.181  &lt; 2e-16 ***\nORIGIN_SZTSSZ05 -1.0846732  0.0173555   -62.497  &lt; 2e-16 ***\nORIGIN_SZTSSZ06  0.3980173  0.0198100    20.092  &lt; 2e-16 ***\nORIGIN_SZWCSZ01  1.3545143  0.0092002   147.227  &lt; 2e-16 ***\nORIGIN_SZWCSZ02 -2.9863278  0.0330906   -90.247  &lt; 2e-16 ***\nORIGIN_SZWCSZ03 -5.0504916  0.1241385   -40.684  &lt; 2e-16 ***\nORIGIN_SZWDSZ01  1.5238429  0.0049404   308.448  &lt; 2e-16 ***\nORIGIN_SZWDSZ02  0.2832576  0.0056218    50.386  &lt; 2e-16 ***\nORIGIN_SZWDSZ03  1.3702524  0.0053266   257.245  &lt; 2e-16 ***\nORIGIN_SZWDSZ04  1.0248225  0.0059272   172.903  &lt; 2e-16 ***\nORIGIN_SZWDSZ05  0.2356778  0.0060587    38.899  &lt; 2e-16 ***\nORIGIN_SZWDSZ06  0.3146925  0.0059919    52.520  &lt; 2e-16 ***\nORIGIN_SZWDSZ07 -1.4971897  0.0091243  -164.088  &lt; 2e-16 ***\nORIGIN_SZWDSZ08 -0.8894079  0.0087414  -101.747  &lt; 2e-16 ***\nORIGIN_SZWDSZ09  1.4437633  0.0053160   271.590  &lt; 2e-16 ***\nORIGIN_SZYSSZ01 -0.2519398  0.0064443   -39.095  &lt; 2e-16 ***\nORIGIN_SZYSSZ02  0.8726785  0.0057658   151.354  &lt; 2e-16 ***\nORIGIN_SZYSSZ03  1.7868139  0.0050674   352.611  &lt; 2e-16 ***\nORIGIN_SZYSSZ04  0.8418040  0.0051738   162.704  &lt; 2e-16 ***\nORIGIN_SZYSSZ05  0.4292096  0.0062520    68.652  &lt; 2e-16 ***\nORIGIN_SZYSSZ06 -0.7459961  0.0119123   -62.624  &lt; 2e-16 ***\nORIGIN_SZYSSZ07 -0.8422281  0.0144559   -58.262  &lt; 2e-16 ***\nORIGIN_SZYSSZ08  0.1829428  0.0067885    26.949  &lt; 2e-16 ***\nORIGIN_SZYSSZ09  1.1159712  0.0050760   219.853  &lt; 2e-16 ***\nDESTIN_SZAMSZ02  0.0694567  0.0045966    15.111  &lt; 2e-16 ***\nDESTIN_SZAMSZ03  0.0760100  0.0044639    17.028  &lt; 2e-16 ***\nDESTIN_SZAMSZ04 -1.1306391  0.0064373  -175.639  &lt; 2e-16 ***\nDESTIN_SZAMSZ05 -1.0751133  0.0065164  -164.985  &lt; 2e-16 ***\nDESTIN_SZAMSZ06 -0.9624298  0.0065937  -145.962  &lt; 2e-16 ***\nDESTIN_SZAMSZ07 -1.5060319  0.0097616  -154.281  &lt; 2e-16 ***\nDESTIN_SZAMSZ08 -0.4813202  0.0069794   -68.963  &lt; 2e-16 ***\nDESTIN_SZAMSZ09 -1.0220675  0.0066313  -154.129  &lt; 2e-16 ***\nDESTIN_SZAMSZ10  0.1235142  0.0047044    26.255  &lt; 2e-16 ***\nDESTIN_SZAMSZ11 -0.8917993  0.0088519  -100.746  &lt; 2e-16 ***\nDESTIN_SZAMSZ12  0.0195208  0.0051704     3.775 0.000160 ***\nDESTIN_SZBDSZ01  0.9736349  0.0042757   227.713  &lt; 2e-16 ***\nDESTIN_SZBDSZ02 -0.1969470  0.0055284   -35.625  &lt; 2e-16 ***\nDESTIN_SZBDSZ03  0.1266471  0.0050786    24.938  &lt; 2e-16 ***\nDESTIN_SZBDSZ04  1.1608485  0.0041956   276.684  &lt; 2e-16 ***\nDESTIN_SZBDSZ05  0.9293840  0.0044412   209.265  &lt; 2e-16 ***\nDESTIN_SZBDSZ06  0.4090567  0.0050300    81.323  &lt; 2e-16 ***\nDESTIN_SZBDSZ07 -0.8171478  0.0098945   -82.586  &lt; 2e-16 ***\nDESTIN_SZBDSZ08 -1.5895287  0.0111632  -142.391  &lt; 2e-16 ***\nDESTIN_SZBKSZ01 -1.3793311  0.0072145  -191.189  &lt; 2e-16 ***\nDESTIN_SZBKSZ02 -0.5253670  0.0061879   -84.903  &lt; 2e-16 ***\nDESTIN_SZBKSZ03 -1.0095362  0.0065426  -154.301  &lt; 2e-16 ***\nDESTIN_SZBKSZ04 -0.5662858  0.0056453  -100.311  &lt; 2e-16 ***\nDESTIN_SZBKSZ05 -0.9406607  0.0070597  -133.244  &lt; 2e-16 ***\nDESTIN_SZBKSZ06 -1.3129276  0.0067414  -194.755  &lt; 2e-16 ***\nDESTIN_SZBKSZ07  0.0120605  0.0049284     2.447 0.014400 *  \nDESTIN_SZBKSZ08 -1.3658471  0.0075109  -181.849  &lt; 2e-16 ***\nDESTIN_SZBKSZ09 -0.1771310  0.0055645   -31.832  &lt; 2e-16 ***\nDESTIN_SZBLSZ01 -0.8175223  0.0075645  -108.074  &lt; 2e-16 ***\nDESTIN_SZBLSZ02  0.1631280  0.0071753    22.735  &lt; 2e-16 ***\nDESTIN_SZBLSZ03  1.2598494  0.0081706   154.194  &lt; 2e-16 ***\nDESTIN_SZBLSZ04 -0.5642975  0.0137827   -40.943  &lt; 2e-16 ***\nDESTIN_SZBMSZ01  0.6921844  0.0054211   127.684  &lt; 2e-16 ***\nDESTIN_SZBMSZ02 -0.1209392  0.0055362   -21.845  &lt; 2e-16 ***\nDESTIN_SZBMSZ03 -0.2373881  0.0062427   -38.027  &lt; 2e-16 ***\nDESTIN_SZBMSZ04 -0.0407117  0.0058001    -7.019 2.23e-12 ***\nDESTIN_SZBMSZ05 -0.2363309  0.0075967   -31.110  &lt; 2e-16 ***\nDESTIN_SZBMSZ06 -1.1930710  0.0134761   -88.532  &lt; 2e-16 ***\nDESTIN_SZBMSZ07  0.4625103  0.0051864    89.178  &lt; 2e-16 ***\nDESTIN_SZBMSZ08 -0.8604731  0.0069899  -123.102  &lt; 2e-16 ***\nDESTIN_SZBMSZ09 -2.1290239  0.0154841  -137.498  &lt; 2e-16 ***\nDESTIN_SZBMSZ10 -1.4617153  0.0094014  -155.478  &lt; 2e-16 ***\nDESTIN_SZBMSZ11 -1.3234050  0.0085506  -154.773  &lt; 2e-16 ***\nDESTIN_SZBMSZ12 -0.8399230  0.0085361   -98.397  &lt; 2e-16 ***\nDESTIN_SZBMSZ13  0.1366529  0.0059697    22.891  &lt; 2e-16 ***\nDESTIN_SZBMSZ14 -1.0491968  0.0083021  -126.378  &lt; 2e-16 ***\nDESTIN_SZBMSZ15 -0.6726684  0.0076276   -88.189  &lt; 2e-16 ***\nDESTIN_SZBMSZ16 -1.4011734  0.0116569  -120.201  &lt; 2e-16 ***\nDESTIN_SZBMSZ17 -1.5682752  0.0167333   -93.722  &lt; 2e-16 ***\nDESTIN_SZBPSZ01 -1.1120017  0.0063197  -175.959  &lt; 2e-16 ***\nDESTIN_SZBPSZ02 -2.0833466  0.0091139  -228.590  &lt; 2e-16 ***\nDESTIN_SZBPSZ03 -1.6937265  0.0087437  -193.709  &lt; 2e-16 ***\nDESTIN_SZBPSZ04 -0.7964999  0.0066129  -120.447  &lt; 2e-16 ***\nDESTIN_SZBPSZ05  0.2109118  0.0048815    43.206  &lt; 2e-16 ***\nDESTIN_SZBPSZ06 -1.1808365  0.0083657  -141.152  &lt; 2e-16 ***\nDESTIN_SZBPSZ07 -0.2077428  0.0084543   -24.572  &lt; 2e-16 ***\nDESTIN_SZBSSZ01  0.3164175  0.0050682    62.431  &lt; 2e-16 ***\nDESTIN_SZBSSZ02 -0.4852688  0.0057001   -85.134  &lt; 2e-16 ***\nDESTIN_SZBSSZ03  0.4130432  0.0043061    95.921  &lt; 2e-16 ***\nDESTIN_SZBTSZ01  0.6215095  0.0048914   127.061  &lt; 2e-16 ***\nDESTIN_SZBTSZ02 -0.0145076  0.0071799    -2.021 0.043324 *  \nDESTIN_SZBTSZ03  0.4919981  0.0058498    84.105  &lt; 2e-16 ***\nDESTIN_SZBTSZ04 -0.6957555  0.0114078   -60.989  &lt; 2e-16 ***\nDESTIN_SZBTSZ05  0.3329814  0.0073568    45.262  &lt; 2e-16 ***\nDESTIN_SZBTSZ06 -0.1333295  0.0073965   -18.026  &lt; 2e-16 ***\nDESTIN_SZBTSZ07 -1.4449581  0.0113186  -127.663  &lt; 2e-16 ***\nDESTIN_SZBTSZ08 -0.7079056  0.0103797   -68.201  &lt; 2e-16 ***\nDESTIN_SZCBSZ01 -5.7344725  0.3162767   -18.131  &lt; 2e-16 ***\nDESTIN_SZCCSZ01 -0.0009541  0.0083381    -0.114 0.908900    \nDESTIN_SZCHSZ01 -0.2083016  0.0099054   -21.029  &lt; 2e-16 ***\nDESTIN_SZCHSZ02  0.5369606  0.0057531    93.334  &lt; 2e-16 ***\nDESTIN_SZCHSZ03  2.5530638  0.0043945   580.971  &lt; 2e-16 ***\nDESTIN_SZCKSZ01 -0.5725975  0.0056507  -101.333  &lt; 2e-16 ***\nDESTIN_SZCKSZ02 -1.1181852  0.0063287  -176.685  &lt; 2e-16 ***\nDESTIN_SZCKSZ03  0.1156680  0.0049440    23.396  &lt; 2e-16 ***\nDESTIN_SZCKSZ04 -0.8647725  0.0071003  -121.794  &lt; 2e-16 ***\nDESTIN_SZCKSZ05 -1.1641791  0.0076248  -152.684  &lt; 2e-16 ***\nDESTIN_SZCKSZ06 -0.4397612  0.0073040   -60.208  &lt; 2e-16 ***\nDESTIN_SZCLSZ01  0.1930552  0.0053752    35.916  &lt; 2e-16 ***\nDESTIN_SZCLSZ02 -2.0436501  0.0136039  -150.225  &lt; 2e-16 ***\nDESTIN_SZCLSZ03 -0.9338571  0.0082908  -112.638  &lt; 2e-16 ***\nDESTIN_SZCLSZ04  0.0532041  0.0053276     9.987  &lt; 2e-16 ***\nDESTIN_SZCLSZ05 -1.0782781  0.0088184  -122.276  &lt; 2e-16 ***\nDESTIN_SZCLSZ06  0.4068171  0.0049068    82.910  &lt; 2e-16 ***\nDESTIN_SZCLSZ07 -0.3579507  0.0060289   -59.373  &lt; 2e-16 ***\nDESTIN_SZCLSZ08 -0.2487993  0.0066588   -37.364  &lt; 2e-16 ***\nDESTIN_SZCLSZ09  0.1611080  0.0071178    22.635  &lt; 2e-16 ***\nDESTIN_SZDTSZ02 -1.7308348  0.0349466   -49.528  &lt; 2e-16 ***\nDESTIN_SZDTSZ03 -0.5994253  0.0146230   -40.992  &lt; 2e-16 ***\nDESTIN_SZDTSZ13 -1.3685031  0.0162803   -84.059  &lt; 2e-16 ***\nDESTIN_SZGLSZ01 -0.0910001  0.0055275   -16.463  &lt; 2e-16 ***\nDESTIN_SZGLSZ02 -0.0692224  0.0052840   -13.100  &lt; 2e-16 ***\nDESTIN_SZGLSZ03  0.6493421  0.0043446   149.459  &lt; 2e-16 ***\nDESTIN_SZGLSZ04  0.9327947  0.0043674   213.583  &lt; 2e-16 ***\nDESTIN_SZGLSZ05  0.8161728  0.0043625   187.087  &lt; 2e-16 ***\nDESTIN_SZHGSZ01  0.0658625  0.0042516    15.491  &lt; 2e-16 ***\nDESTIN_SZHGSZ02 -0.8134329  0.0056721  -143.409  &lt; 2e-16 ***\nDESTIN_SZHGSZ03 -1.3546132  0.0066257  -204.448  &lt; 2e-16 ***\nDESTIN_SZHGSZ04 -0.4500588  0.0048448   -92.895  &lt; 2e-16 ***\nDESTIN_SZHGSZ05 -0.5026431  0.0050996   -98.566  &lt; 2e-16 ***\nDESTIN_SZHGSZ06 -0.8673686  0.0059530  -145.704  &lt; 2e-16 ***\nDESTIN_SZHGSZ07  0.0560490  0.0047702    11.750  &lt; 2e-16 ***\nDESTIN_SZHGSZ08 -0.0443189  0.0052599    -8.426  &lt; 2e-16 ***\nDESTIN_SZHGSZ09 -0.0126355  0.0054966    -2.299 0.021518 *  \nDESTIN_SZHGSZ10 -3.5821793  0.0263281  -136.059  &lt; 2e-16 ***\nDESTIN_SZJESZ01 -0.3704281  0.0056684   -65.350  &lt; 2e-16 ***\nDESTIN_SZJESZ02 -0.7369159  0.0058686  -125.570  &lt; 2e-16 ***\nDESTIN_SZJESZ03 -0.8985484  0.0063627  -141.222  &lt; 2e-16 ***\nDESTIN_SZJESZ04 -1.0511995  0.0073996  -142.061  &lt; 2e-16 ***\nDESTIN_SZJESZ05 -1.5324974  0.0102612  -149.349  &lt; 2e-16 ***\nDESTIN_SZJESZ06  0.3105267  0.0048241    64.370  &lt; 2e-16 ***\nDESTIN_SZJESZ07 -1.3234483  0.0085497  -154.795  &lt; 2e-16 ***\nDESTIN_SZJESZ08 -0.6559742  0.0083174   -78.867  &lt; 2e-16 ***\nDESTIN_SZJESZ09  0.2663752  0.0063370    42.035  &lt; 2e-16 ***\nDESTIN_SZJESZ10  0.8529026  0.0076067   112.126  &lt; 2e-16 ***\nDESTIN_SZJESZ11  0.5559641  0.0074629    74.497  &lt; 2e-16 ***\nDESTIN_SZJWSZ01 -0.9790971  0.0071830  -136.308  &lt; 2e-16 ***\nDESTIN_SZJWSZ02 -0.8746590  0.0060179  -145.342  &lt; 2e-16 ***\nDESTIN_SZJWSZ03  0.5689062  0.0049105   115.855  &lt; 2e-16 ***\nDESTIN_SZJWSZ04  0.4520963  0.0050302    89.876  &lt; 2e-16 ***\nDESTIN_SZJWSZ05 -1.0249671  0.0067371  -152.137  &lt; 2e-16 ***\nDESTIN_SZJWSZ06 -0.7451483  0.0062189  -119.819  &lt; 2e-16 ***\nDESTIN_SZJWSZ07 -2.8453099  0.0287335   -99.024  &lt; 2e-16 ***\nDESTIN_SZJWSZ08 -0.3372309  0.0058003   -58.141  &lt; 2e-16 ***\nDESTIN_SZJWSZ09  1.0505330  0.0045908   228.832  &lt; 2e-16 ***\nDESTIN_SZKLSZ01 -0.2334836  0.0057970   -40.277  &lt; 2e-16 ***\nDESTIN_SZKLSZ02 -0.5416148  0.0061432   -88.164  &lt; 2e-16 ***\nDESTIN_SZKLSZ03 -0.8026495  0.0068745  -116.757  &lt; 2e-16 ***\nDESTIN_SZKLSZ04 -1.2918594  0.0090197  -143.227  &lt; 2e-16 ***\nDESTIN_SZKLSZ05 -0.4069101  0.0087812   -46.339  &lt; 2e-16 ***\nDESTIN_SZKLSZ06 -2.5333101  0.0363215   -69.747  &lt; 2e-16 ***\nDESTIN_SZKLSZ07 -0.6623343  0.0070761   -93.601  &lt; 2e-16 ***\nDESTIN_SZKLSZ08 -0.1408205  0.0054965   -25.620  &lt; 2e-16 ***\nDESTIN_SZLKSZ01 -1.2639235  0.0208254   -60.691  &lt; 2e-16 ***\nDESTIN_SZMDSZ01 -1.5655800  0.0202787   -77.203  &lt; 2e-16 ***\nDESTIN_SZMDSZ02 -0.9767682  0.0114687   -85.168  &lt; 2e-16 ***\nDESTIN_SZMDSZ03 -3.3328109  0.0254294  -131.061  &lt; 2e-16 ***\nDESTIN_SZMPSZ01 -0.4552859  0.0080666   -56.441  &lt; 2e-16 ***\nDESTIN_SZMPSZ02 -0.5386560  0.0064620   -83.358  &lt; 2e-16 ***\nDESTIN_SZMPSZ03  0.4952000  0.0052295    94.694  &lt; 2e-16 ***\nDESTIN_SZMUSZ02 -1.4434175  0.0202509   -71.277  &lt; 2e-16 ***\nDESTIN_SZNTSZ01 -2.9194067  0.0449654   -64.926  &lt; 2e-16 ***\nDESTIN_SZNTSZ02 -1.3780179  0.0112867  -122.092  &lt; 2e-16 ***\nDESTIN_SZNTSZ03 -0.5044699  0.0080449   -62.707  &lt; 2e-16 ***\nDESTIN_SZNTSZ05 -2.0017134  0.0258750   -77.361  &lt; 2e-16 ***\nDESTIN_SZNTSZ06 -3.8120537  0.0434271   -87.781  &lt; 2e-16 ***\nDESTIN_SZNVSZ01 -0.1071506  0.0051026   -20.999  &lt; 2e-16 ***\nDESTIN_SZNVSZ02 -0.0274710  0.0057611    -4.768 1.86e-06 ***\nDESTIN_SZNVSZ03  0.1076352  0.0057909    18.587  &lt; 2e-16 ***\nDESTIN_SZNVSZ04 -1.2087250  0.0110438  -109.448  &lt; 2e-16 ***\nDESTIN_SZNVSZ05 -1.0058290  0.0092167  -109.131  &lt; 2e-16 ***\nDESTIN_SZPGSZ01 -1.2029931  0.0163170   -73.726  &lt; 2e-16 ***\nDESTIN_SZPGSZ02 -1.2878671  0.0074139  -173.709  &lt; 2e-16 ***\nDESTIN_SZPGSZ03 -0.1520894  0.0048629   -31.275  &lt; 2e-16 ***\nDESTIN_SZPGSZ04 -0.1985959  0.0050374   -39.424  &lt; 2e-16 ***\nDESTIN_SZPGSZ05 -1.5290983  0.0082617  -185.083  &lt; 2e-16 ***\nDESTIN_SZPLSZ01 -0.3567934  0.0074298   -48.022  &lt; 2e-16 ***\nDESTIN_SZPLSZ02 -1.7114351  0.0134462  -127.280  &lt; 2e-16 ***\nDESTIN_SZPLSZ03 -0.3241427  0.0098895   -32.776  &lt; 2e-16 ***\nDESTIN_SZPLSZ04 -1.7117196  0.0119003  -143.838  &lt; 2e-16 ***\nDESTIN_SZPLSZ05 -0.5086379  0.0120051   -42.368  &lt; 2e-16 ***\nDESTIN_SZPNSZ01  0.2026781  0.0068977    29.383  &lt; 2e-16 ***\nDESTIN_SZPNSZ02  0.8313754  0.0078544   105.848  &lt; 2e-16 ***\nDESTIN_SZPNSZ03 -0.4041254  0.0086586   -46.673  &lt; 2e-16 ***\nDESTIN_SZPNSZ04  1.5814539  0.0093641   168.885  &lt; 2e-16 ***\nDESTIN_SZPNSZ05  1.1823430  0.0129843    91.059  &lt; 2e-16 ***\nDESTIN_SZPRSZ01 -1.1057553  0.0088197  -125.374  &lt; 2e-16 ***\nDESTIN_SZPRSZ02  0.0895099  0.0056308    15.897  &lt; 2e-16 ***\nDESTIN_SZPRSZ03  0.6921925  0.0043977   157.397  &lt; 2e-16 ***\nDESTIN_SZPRSZ04 -0.2848336  0.0084725   -33.619  &lt; 2e-16 ***\nDESTIN_SZPRSZ05  0.1744480  0.0053553    32.575  &lt; 2e-16 ***\nDESTIN_SZPRSZ06  0.4279206  0.0058735    72.856  &lt; 2e-16 ***\nDESTIN_SZPRSZ07 -1.5123108  0.0124303  -121.664  &lt; 2e-16 ***\nDESTIN_SZPRSZ08 -0.5650226  0.0068530   -82.449  &lt; 2e-16 ***\nDESTIN_SZQTSZ01 -0.5952360  0.0090505   -65.769  &lt; 2e-16 ***\nDESTIN_SZQTSZ02 -0.7728170  0.0078910   -97.937  &lt; 2e-16 ***\nDESTIN_SZQTSZ03 -0.5066812  0.0073996   -68.474  &lt; 2e-16 ***\nDESTIN_SZQTSZ04 -0.6398414  0.0075411   -84.847  &lt; 2e-16 ***\nDESTIN_SZQTSZ05 -0.4354527  0.0069345   -62.795  &lt; 2e-16 ***\nDESTIN_SZQTSZ06 -0.6597391  0.0071919   -91.733  &lt; 2e-16 ***\nDESTIN_SZQTSZ07 -0.9392696  0.0112518   -83.477  &lt; 2e-16 ***\nDESTIN_SZQTSZ08  0.4617774  0.0057011    80.998  &lt; 2e-16 ***\nDESTIN_SZQTSZ09 -0.3174497  0.0065890   -48.178  &lt; 2e-16 ***\nDESTIN_SZQTSZ10  0.1993449  0.0059923    33.267  &lt; 2e-16 ***\nDESTIN_SZQTSZ11  0.2551535  0.0061885    41.230  &lt; 2e-16 ***\nDESTIN_SZQTSZ12 -0.1662603  0.0086701   -19.176  &lt; 2e-16 ***\nDESTIN_SZQTSZ13  0.5500978  0.0063091    87.192  &lt; 2e-16 ***\nDESTIN_SZQTSZ14  0.5364435  0.0070157    76.463  &lt; 2e-16 ***\nDESTIN_SZQTSZ15  1.3611043  0.0081643   166.715  &lt; 2e-16 ***\nDESTIN_SZRCSZ01 -0.1034049  0.0076769   -13.470  &lt; 2e-16 ***\nDESTIN_SZRCSZ06 -1.0633902  0.0189846   -56.013  &lt; 2e-16 ***\nDESTIN_SZRVSZ01 -1.5486221  0.0165272   -93.701  &lt; 2e-16 ***\nDESTIN_SZRVSZ02 -2.4092611  0.0326906   -73.699  &lt; 2e-16 ***\nDESTIN_SZRVSZ03 -1.5172079  0.0139258  -108.950  &lt; 2e-16 ***\nDESTIN_SZRVSZ04 -1.1663615  0.0157430   -74.088  &lt; 2e-16 ***\nDESTIN_SZRVSZ05 -2.2404292  0.0281339   -79.634  &lt; 2e-16 ***\nDESTIN_SZSBSZ01 -1.3783780  0.0096022  -143.549  &lt; 2e-16 ***\nDESTIN_SZSBSZ02 -1.4445213  0.0081630  -176.959  &lt; 2e-16 ***\nDESTIN_SZSBSZ03  0.5149906  0.0051663    99.683  &lt; 2e-16 ***\nDESTIN_SZSBSZ04  0.2389086  0.0060765    39.317  &lt; 2e-16 ***\nDESTIN_SZSBSZ05 -1.2737442  0.0082818  -153.801  &lt; 2e-16 ***\nDESTIN_SZSBSZ06 -1.8683520  0.0227277   -82.206  &lt; 2e-16 ***\nDESTIN_SZSBSZ07 -0.5993154  0.0184895   -32.414  &lt; 2e-16 ***\nDESTIN_SZSBSZ08  0.8156302  0.0059840   136.302  &lt; 2e-16 ***\nDESTIN_SZSBSZ09  0.0900611  0.0057054    15.785  &lt; 2e-16 ***\nDESTIN_SZSESZ02 -0.6397704  0.0052491  -121.882  &lt; 2e-16 ***\nDESTIN_SZSESZ03  0.1714103  0.0042357    40.468  &lt; 2e-16 ***\nDESTIN_SZSESZ04 -1.0596175  0.0059865  -177.002  &lt; 2e-16 ***\nDESTIN_SZSESZ05 -0.8071891  0.0051229  -157.566  &lt; 2e-16 ***\nDESTIN_SZSESZ06 -0.5580934  0.0066216   -84.284  &lt; 2e-16 ***\nDESTIN_SZSESZ07 -3.1448863  0.0227788  -138.062  &lt; 2e-16 ***\nDESTIN_SZSGSZ01 -0.1795225  0.0060127   -29.857  &lt; 2e-16 ***\nDESTIN_SZSGSZ02 -0.2986570  0.0053561   -55.760  &lt; 2e-16 ***\nDESTIN_SZSGSZ03 -0.4074671  0.0050609   -80.513  &lt; 2e-16 ***\nDESTIN_SZSGSZ04 -0.1505164  0.0050931   -29.553  &lt; 2e-16 ***\nDESTIN_SZSGSZ05 -1.9908372  0.0101448  -196.242  &lt; 2e-16 ***\nDESTIN_SZSGSZ06  0.6715268  0.0041161   163.148  &lt; 2e-16 ***\nDESTIN_SZSGSZ07 -0.4494757  0.0055319   -81.252  &lt; 2e-16 ***\nDESTIN_SZSISZ01 -0.5517983  0.0261860   -21.072  &lt; 2e-16 ***\nDESTIN_SZSKSZ01 -0.4749154  0.0079257   -59.921  &lt; 2e-16 ***\nDESTIN_SZSKSZ02  0.9400302  0.0057218   164.290  &lt; 2e-16 ***\nDESTIN_SZSKSZ03 -0.2800377  0.0066081   -42.378  &lt; 2e-16 ***\nDESTIN_SZSKSZ04 -1.2570212  0.0145351   -86.482  &lt; 2e-16 ***\nDESTIN_SZSKSZ05 -0.2600474  0.0112800   -23.054  &lt; 2e-16 ***\nDESTIN_SZSLSZ01 -0.7775604  0.0085818   -90.606  &lt; 2e-16 ***\nDESTIN_SZSLSZ04 -0.8586515  0.0073142  -117.396  &lt; 2e-16 ***\nDESTIN_SZSRSZ01 -1.1370887  0.0142148   -79.993  &lt; 2e-16 ***\nDESTIN_SZTHSZ01 -4.3259988  0.0368554  -117.378  &lt; 2e-16 ***\nDESTIN_SZTHSZ03 -2.6632914  0.0252720  -105.385  &lt; 2e-16 ***\nDESTIN_SZTHSZ04 -3.1000906  0.0216372  -143.276  &lt; 2e-16 ***\nDESTIN_SZTHSZ06 -2.5952642  0.0156340  -166.001  &lt; 2e-16 ***\nDESTIN_SZTMSZ01 -0.2092828  0.0059257   -35.318  &lt; 2e-16 ***\nDESTIN_SZTMSZ02  1.8238139  0.0039155   465.798  &lt; 2e-16 ***\nDESTIN_SZTMSZ03  0.8518259  0.0043636   195.210  &lt; 2e-16 ***\nDESTIN_SZTMSZ04  1.0222812  0.0043466   235.191  &lt; 2e-16 ***\nDESTIN_SZTMSZ05  0.6323777  0.0060058   105.294  &lt; 2e-16 ***\nDESTIN_SZTNSZ01 -0.3336078  0.0074388   -44.847  &lt; 2e-16 ***\nDESTIN_SZTNSZ02 -1.0820469  0.0101689  -106.408  &lt; 2e-16 ***\nDESTIN_SZTNSZ03 -1.4186505  0.0119906  -118.313  &lt; 2e-16 ***\nDESTIN_SZTNSZ04 -0.3058199  0.0074743   -40.916  &lt; 2e-16 ***\nDESTIN_SZTPSZ01 -0.4872299  0.0061571   -79.133  &lt; 2e-16 ***\nDESTIN_SZTPSZ02  0.7158441  0.0041312   173.278  &lt; 2e-16 ***\nDESTIN_SZTPSZ03 -0.4314229  0.0059917   -72.004  &lt; 2e-16 ***\nDESTIN_SZTPSZ04 -1.5898245  0.0076083  -208.959  &lt; 2e-16 ***\nDESTIN_SZTPSZ05 -1.0445550  0.0062363  -167.497  &lt; 2e-16 ***\nDESTIN_SZTPSZ06 -0.4319582  0.0070100   -61.621  &lt; 2e-16 ***\nDESTIN_SZTPSZ07 -2.1602303  0.0120352  -179.493  &lt; 2e-16 ***\nDESTIN_SZTPSZ08 -1.1920493  0.0093083  -128.063  &lt; 2e-16 ***\nDESTIN_SZTPSZ09 -0.2022481  0.0071137   -28.431  &lt; 2e-16 ***\nDESTIN_SZTPSZ10 -1.2464793  0.0090124  -138.308  &lt; 2e-16 ***\nDESTIN_SZTPSZ11 -0.0808445  0.0056019   -14.432  &lt; 2e-16 ***\nDESTIN_SZTPSZ12 -0.6784376  0.0066340  -102.267  &lt; 2e-16 ***\nDESTIN_SZTSSZ01 -1.5845062  0.0222086   -71.346  &lt; 2e-16 ***\nDESTIN_SZTSSZ02 -0.1886010  0.0146338   -12.888  &lt; 2e-16 ***\nDESTIN_SZTSSZ03  0.6525526  0.0092450    70.585  &lt; 2e-16 ***\nDESTIN_SZTSSZ04  0.5285464  0.0100182    52.759  &lt; 2e-16 ***\nDESTIN_SZTSSZ05  1.4670106  0.0104357   140.577  &lt; 2e-16 ***\nDESTIN_SZTSSZ06  2.5043588  0.0167444   149.564  &lt; 2e-16 ***\nDESTIN_SZWCSZ01  1.9787931  0.0054306   364.375  &lt; 2e-16 ***\nDESTIN_SZWCSZ02 -2.2593108  0.0127916  -176.624  &lt; 2e-16 ***\nDESTIN_SZWCSZ03 -3.1897655  0.0326927   -97.568  &lt; 2e-16 ***\nDESTIN_SZWDSZ01  1.0476108  0.0044629   234.738  &lt; 2e-16 ***\nDESTIN_SZWDSZ02 -1.3176990  0.0065894  -199.973  &lt; 2e-16 ***\nDESTIN_SZWDSZ03  0.3432057  0.0052496    65.377  &lt; 2e-16 ***\nDESTIN_SZWDSZ04 -0.7895927  0.0073392  -107.586  &lt; 2e-16 ***\nDESTIN_SZWDSZ05 -0.8751665  0.0072946  -119.975  &lt; 2e-16 ***\nDESTIN_SZWDSZ06 -0.2106221  0.0053027   -39.720  &lt; 2e-16 ***\nDESTIN_SZWDSZ07 -1.6050834  0.0071754  -223.692  &lt; 2e-16 ***\nDESTIN_SZWDSZ08 -0.5124717  0.0069223   -74.032  &lt; 2e-16 ***\nDESTIN_SZWDSZ09  0.3813542  0.0054697    69.721  &lt; 2e-16 ***\nDESTIN_SZYSSZ01  0.0853753  0.0046572    18.332  &lt; 2e-16 ***\nDESTIN_SZYSSZ02 -0.3227172  0.0057351   -56.271  &lt; 2e-16 ***\nDESTIN_SZYSSZ03 -0.4151283  0.0066299   -62.615  &lt; 2e-16 ***\nDESTIN_SZYSSZ04 -0.4637327  0.0058206   -79.671  &lt; 2e-16 ***\nDESTIN_SZYSSZ05 -1.5888242  0.0111001  -143.136  &lt; 2e-16 ***\nDESTIN_SZYSSZ06 -1.4606209  0.0107759  -135.545  &lt; 2e-16 ***\nDESTIN_SZYSSZ07 -0.7839065  0.0144357   -54.304  &lt; 2e-16 ***\nDESTIN_SZYSSZ08  0.6265412  0.0045504   137.691  &lt; 2e-16 ***\nDESTIN_SZYSSZ09  0.1520067  0.0048092    31.607  &lt; 2e-16 ***\nlog(DIST)       -1.8468315  0.0004608 -4008.033  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 47094011  on 14470  degrees of freedom\nResidual deviance: 10420261  on 13912  degrees of freedom\nAIC: 10510518\n\nNumber of Fisher Scoring iterations: 7\n\n\n\n\n\n\nmodel_list = list(unconstrained = uncSIM_Poisson,\n                  originConstrained = orcSIM_Poisson,\n                  destinationConstrained = decSIM_Poisson,\n                  doublyconstrained = dbcSIM_Poisson)\n\n\ncompare_performance(model_list,\n                    metrics = \"RMSE\")\n\n# Comparison of Model Performance Indices\n\nName                   | Model |     RMSE\n-----------------------------------------\nunconstrained          |   glm | 2957.862\noriginConstrained      |   glm | 2613.236\ndestinationConstrained |   glm | 2754.902\ndoublyconstrained      |   glm | 1906.694\n\n\nThe print above reveals that doubly constrained SIM is the best model among all the four SIMs because it has the smallest RMSE value of 1906.694.\n~~~ End of In-class Exercise 4 ~~~"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/data/geospatial/entertn.html",
    "href": "In-class_Ex/In-class_Ex5/data/geospatial/entertn.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/data/geospatial/FinServ.html",
    "href": "In-class_Ex/In-class_Ex5/data/geospatial/FinServ.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex5/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "Spatial Interaction Models (SIMs) are often used to explain origin-destination (OD) flows that arise in fields such as public bus commuting. These models rely on a function of the distance between the origin and destination as well as explanatory variables pertaining to characteristics of both origin and destination locations.\nSIMs assume that the use of distance as an explanatory variable will eradicate the spatial dependence among the sample of OD flows between pairs of locations. The notion that the use of distance functions in conventional SIMs effectively captures spatial dependence in inter-regional flows has long been challenged. In view of the limitation of SIMs in accounting for spatial dependence, Spatial Econometric Interaction Models (SEIMs) have been introduce by James P. LeSage and R. Kelley Pace (2009).\nIn this in-class exercise, the spflow package (an R library specially developed for calibrating SEIMs) is used, alongside other relevant packages, to:\n\nExtract explanatory variables from secondary source;\nAssemble and derive explanatory variables from publicly available geospatial data;\nIntegrate these explanatory variable into a tidy variables tibble data frame; and\nCalibrate SEIMs.\n\n\n\n\nThe following packages are loaded into the R environment:\n\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data;\nsf for importing, managing, and processing geospatial data;\nsp for handling geospatial data;\nspdep for analysing spatial dependence and spatial relationships in data;\nspflow for efficient estimation of spatial econometric models of origin-destination flows;\n\nNote: The development version (0.1.0.9010) is used instead of the CRAN-released version (0.1.0).\n\ntmap for thematic mapping;\nreshape2 for handling matrix format;\nMatrix for handling matrices; and\nknitr for embedding R code in different document formats (e.g., HTML) to facilitate dynamic report generation.\n\nThe latest development version of the spflow package is installed first.\n\ndevtools::install_github(\"LukeCe/spflow\")\n\nThe spflow package and other packages mentioned above are loaded into the R environment.\n\npacman::p_load(tmap, sf, spdep, sp, Matrix, \n               spflow, reshape2, knitr,\n               tidyverse)\n\n\n\n\nThree data sets are required for this in-class exercise:\n\nSpatial weights;\nA tibble data frame consisting of the origins, destinations, flows and distances between the origins and destinations; and\nA tibble data frame consisting of the explanatory variables.\n\n\n\nThe 2019 URA Master Plan Subzone boundary shapefile is imported into the R environment as a simple feature data frame, mpsz, using the st_read() and st_transform() functions in the sf package.\n\nmpsz = st_read(dsn = \"data/geospatial\",\n               layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\jmphosis\\ISSS624\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\nSimilarly, the same functions are used to import the Bus Stop location shapefile into the R environment as a simple feature data frame, busstop.\n\nbusstop = st_read(dsn = \"data/geospatial\",\n               layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `C:\\jmphosis\\ISSS624\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5159 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48280.78 ymax: 52983.82\nProjected CRS: SVY21\n\n\nThe lengths() function in the base package and the st_intersects() function in the sf package are used to count the number of bus stops in each planning subzone.\n\nmpsz$`BUSSTOP_COUNT` = lengths(st_intersects(mpsz, busstop))\n\nThe filter() function in the dplyr package is then used to filter for subzones with at least one bus stop. There are 313 planning subzones left.\n\nmpsz_busstop = mpsz %&gt;% filter(BUSSTOP_COUNT &gt; 0)\n\nmpsz_busstop\n\nSimple feature collection with 313 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 21448.47 xmax: 50271.73 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n            SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1    INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n2      ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n3        FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n4    MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n5             SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n6      CITY TERMINALS    BMSZ17      BUKIT MERAH         BM CENTRAL REGION\n7               ANSON    DTSZ10    DOWNTOWN CORE         DT CENTRAL REGION\n8        STRAITS VIEW    SVSZ01     STRAITS VIEW         SV CENTRAL REGION\n9     MARITIME SQUARE    BMSZ01      BUKIT MERAH         BM CENTRAL REGION\n10 TELOK BLANGAH RISE    BMSZ15      BUKIT MERAH         BM CENTRAL REGION\n   REGION_C                       geometry BUSSTOP_COUNT\n1        CR MULTIPOLYGON (((28481.45 30...             2\n2        CR MULTIPOLYGON (((28087.34 30...            10\n3        CR MULTIPOLYGON (((29542.53 31...             6\n4        CR MULTIPOLYGON (((35279.55 30...             2\n5        CR MULTIPOLYGON (((26879.04 26...             1\n6        CR MULTIPOLYGON (((27891.15 28...            10\n7        CR MULTIPOLYGON (((29201.07 28...             5\n8        CR MULTIPOLYGON (((31269.21 28...             4\n9        CR MULTIPOLYGON (((26920.02 26...            21\n10       CR MULTIPOLYGON (((27483.57 28...            11\n\n\n\n\n\nThere are three different matrices that can be used to describe the connectivity between planning subzones. They are contiguity, fixed distance, and adaptive distance. All three types of spatial weights are computed using the st_point_on_surface() ad st_geometry() functions in the sf package.\n\ncentroids = suppressWarnings({st_point_on_surface(st_geometry(mpsz_busstop))})\n\nmpsz_nb = list(\n  \"by_contiguity\" = poly2nb(mpsz_busstop),\n  \"by_distance\" = dnearneigh(centroids, \n                             d1 = 0, d2 = 5000),\n  \"by_knn\" = knn2nb(knearneigh(centroids, 3)))\n\nThe list of three sets of weight values, mpsz_nb, is generated using functions in the spdep package for:\n\nNeighbours by contiguity: using the poly2nb() function to build a neighbours list based on regions with contiguous boundaries.\nNeighbours by fixed distance: using the dnearneigh() function to identify neighbours of region centroids by Euclidean distance between the lower and upper bounds (0 and 5000 m).\nNeighbours by adpative distance: using the knn2nb() and knearneigh() functions to build adaptive spatial weights.\n\nThe output reveals that for neighbours by fixed distance, there is one planning subzone with no neighbours.\n\nmpsz_nb\n\n$by_contiguity\nNeighbour list object:\nNumber of regions: 313 \nNumber of nonzero links: 1902 \nPercentage nonzero weights: 1.94143 \nAverage number of links: 6.076677 \n\n$by_distance\nNeighbour list object:\nNumber of regions: 313 \nNumber of nonzero links: 15422 \nPercentage nonzero weights: 15.74171 \nAverage number of links: 49.27157 \n1 region with no links:\n313\n2 disjoint connected subgraphs\n\n$by_knn\nNeighbour list object:\nNumber of regions: 313 \nNumber of nonzero links: 939 \nPercentage nonzero weights: 0.9584665 \nAverage number of links: 3 \nNon-symmetric neighbours list\n\n\nThe spatial weights are plotted for visual inspection.\nContiguity\n\nplot(st_geometry(mpsz))\nplot(mpsz_nb$by_contiguity, \n     centroids, \n     add = T, \n     col = rgb(0,0,0,\n               alpha=0.5))\ntitle(\"Contiguity\") \n\n\n\n\nFixed Distance\n\nplot(st_geometry(mpsz))\nplot(mpsz_nb$by_distance,\n     centroids, \n     add = T, \n     col = rgb(0,0,0,\n               alpha=0.5)) \ntitle(\"Distance\") \n\n\n\n\nAdaptive Distance (3 Nearest Neighbours)\n\nplot(st_geometry(mpsz))\nplot(mpsz_nb$by_knn, \n     centroids, \n     add = T, \n     col = rgb(0,0,0,\n               alpha=0.5))\ntitle(\"3 Nearest Neighbors\") \n\n\n\n\nThe list of three sets of spatial weights is then saved in the rds format.\n\nwrite_rds(mpsz_nb, \"data/rds/mpsz_nb.rds\")\n\n\n\n\nThe flow data at the planning subzone level is prepared.\nThe tibble data frame, odbus6_9, containing the origin-destination matrix and number of trips are imported into the R environment.\n\nodbus6_9 = read_rds(\"data/rds/odbus6_9.rds\")\n\nThe st_intersection() function in the sf package is used to match the match the bus stop numbers to the subzone codes via the intersections between the points representing the bus stop locations and the polygons representing the planning subzones. The bus stop number and subzone code variables are selected using the select() function in the dplyr package, and the geometry feature is dropped using the st_drop_geometry function() in the sf package.\n\nbusstop_mpsz = st_intersection(busstop, mpsz) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\nThe planning subzone codes in the busstop_mpsz data frame are matched with the origin bus stop numbers in the odbus6_9 tibble data frame.\n\nod_data = left_join(odbus6_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C,\n         DESTIN_BS = DESTINATION_PT_CODE)\n\nA check for duplicates is made. The unique records are retained, and a confirmatory check is made again.\n\nduplicate = od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nod_data = unique(od_data)\n\nduplicate = od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nThe above steps are repeated by matching the planning subzone codes in the busstop_mpsz data frame with the destination bus stop numbers in the odbus6_9 tibble data frame. The output tibble data frame is then grouped by the origin and destination subzones.\n\nod_data = left_join(od_data , busstop_mpsz,\n            by = c(\"DESTIN_BS\" = \"BUS_STOP_N\")) \n\n\nduplicate = od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nod_data = unique(od_data)\n\nduplicate = od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nod_data = od_data %&gt;%\n  rename(DESTIN_SZ = SUBZONE_C) %&gt;%\n  drop_na() %&gt;%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\nThe output tibble data frame, od_data, is obtained.\n\nkable(head(od_data, n = 5))\n\n\n\n\nORIGIN_SZ\nDESTIN_SZ\nTRIPS\n\n\n\n\nAMSZ01\nAMSZ01\n1998\n\n\nAMSZ01\nAMSZ02\n8289\n\n\nAMSZ01\nAMSZ03\n8971\n\n\nAMSZ01\nAMSZ04\n2252\n\n\nAMSZ01\nAMSZ05\n6136\n\n\n\n\n\nThe output is saved in the rds format.\n\nwrite_rds(od_data, \"data/rds/od_data.rds\")\n\n\n\n\nIn spatial interaction, a distance matrix is a table that shows the distance between pairs of locations. By definition, an location’s distance from itself is 0.\n\n\nThere are at least two ways to compute the required distance matrix. One is using the sf package and the other is using the sp package. Past experience show that computing the distance matrix using sf functions took relatively longer that sp functions, especially when the data set is large. In view of this, the sp functions are used.\nThe as.Spatial() function is used to convert mpsz from a simple feature tibble data frame to a SpatialPolygonsDataFrame of sp object.\n\nmpsz_sp = as(mpsz_busstop, \"Spatial\")\nmpsz_sp\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 313 \nextent      : 2667.538, 50271.73, 21448.47, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 7\nnames       : SUBZONE_N, SUBZONE_C, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C, BUSSTOP_COUNT \nmin values  : ADMIRALTY,    AMSZ01, ANG MO KIO,         AM, CENTRAL REGION,       CR,             1 \nmax values  :    YUNNAN,    YSSZ09,     YISHUN,         YS,    WEST REGION,       WR,            87 \n\n\n\n\n\nThe spDists() function is then used to compute the Euclidean distance between the centroids of the planning subzones.\nThe output is a matrix object class of R, DISTANCE. The column headers and row headers are not labelled with the planning subzone codes.\n\nDISTANCE = spDists(mpsz_sp, \n                    longlat = FALSE)\n\nhead(DISTANCE, n=c(10, 10))\n\n           [,1]     [,2]      [,3]     [,4]     [,5]     [,6]     [,7]     [,8]\n [1,]    0.0000  305.737  951.8314 5254.066 4975.002 3176.159 2345.174 3455.579\n [2,]  305.7370    0.000 1045.9088 5299.849 4669.295 2873.497 2074.691 3277.921\n [3,]  951.8314 1045.909    0.0000 4303.232 5226.873 3341.212 2264.201 2890.870\n [4,] 5254.0664 5299.849 4303.2323    0.000 7707.091 6103.071 5007.197 3699.242\n [5,] 4975.0021 4669.295 5226.8731 7707.091    0.000 1893.049 3068.627 4009.437\n [6,] 3176.1592 2873.497 3341.2116 6103.071 1893.049    0.000 1200.264 2532.383\n [7,] 2345.1741 2074.691 2264.2014 5007.197 3068.627 1200.264    0.000 1709.443\n [8,] 3455.5791 3277.921 2890.8696 3699.242 4009.437 2532.383 1709.443    0.000\n [9,] 3860.6063 3612.345 4570.3316 8324.615 2766.650 2606.583 3383.338 5032.870\n[10,] 2634.7332 2358.403 3255.0325 6981.431 2752.882 1666.022 2115.640 3815.333\n          [,9]    [,10]\n [1,] 3860.606 2634.733\n [2,] 3612.345 2358.403\n [3,] 4570.332 3255.033\n [4,] 8324.615 6981.431\n [5,] 2766.650 2752.882\n [6,] 2606.583 1666.022\n [7,] 3383.338 2115.640\n [8,] 5032.870 3815.333\n [9,]    0.000 1357.426\n[10,] 1357.426    0.000\n\n\n\n\n\nA list sorted according to the distance matrix by planning subzone codes is created using the “SUBZONE_C” variable in mpsz_busstop.\n\nsz_names = mpsz_busstop$SUBZONE_C\n\nThen, they are attached to the rows and columns of the distance matrix using the colnames(), rownames(), and paste0() functions in the base package.\n\ncolnames(DISTANCE) = paste0(sz_names)\nrownames(DISTANCE) = paste0(sz_names)\n\n\n\n\nThe melt() function in the reshape2 package is then used to pivot the distance matrix into a long table, distPair, using the row and column subzone codes. The rename() function in the dplyr package is used to rename the origin, destination, and distance variables.\n\ndistPair = melt(DISTANCE) %&gt;%\n  rename(DISTANCE = value) %&gt;%\n  rename(ORIGIN_SZ = Var1,\n         DESTIN_SZ = Var2)\n\nhead(distPair, 10)\n\n   ORIGIN_SZ DESTIN_SZ  DISTANCE\n1     RVSZ05    RVSZ05    0.0000\n2     SRSZ01    RVSZ05  305.7370\n3     MUSZ02    RVSZ05  951.8314\n4     MPSZ05    RVSZ05 5254.0664\n5     SISZ01    RVSZ05 4975.0021\n6     BMSZ17    RVSZ05 3176.1592\n7     DTSZ10    RVSZ05 2345.1741\n8     SVSZ01    RVSZ05 3455.5791\n9     BMSZ01    RVSZ05 3860.6063\n10    BMSZ15    RVSZ05 2634.7332\n\n\nThe left_join() function in the dplyr package is then used to join the od_data tibble data frame and the distPair data frame. The mutate() function in the dplyr package is used to replace NA values with 0. The output is the flow_data data frame.\n\nflow_data = distPair %&gt;%\n  left_join (od_data) %&gt;%\n  mutate(TRIPS = coalesce(TRIPS, 0))\n\nThe output data frame, flow_data, is obtained.\n\nkable(head(flow_data, n = 10))\n\n\n\n\nORIGIN_SZ\nDESTIN_SZ\nDISTANCE\nTRIPS\n\n\n\n\nRVSZ05\nRVSZ05\n0.0000\n67\n\n\nSRSZ01\nRVSZ05\n305.7370\n549\n\n\nMUSZ02\nRVSZ05\n951.8314\n0\n\n\nMPSZ05\nRVSZ05\n5254.0664\n0\n\n\nSISZ01\nRVSZ05\n4975.0021\n0\n\n\nBMSZ17\nRVSZ05\n3176.1592\n0\n\n\nDTSZ10\nRVSZ05\n2345.1741\n0\n\n\nSVSZ01\nRVSZ05\n3455.5791\n0\n\n\nBMSZ01\nRVSZ05\n3860.6063\n0\n\n\nBMSZ15\nRVSZ05\n2634.7332\n0\n\n\n\n\n\nThe output is saved in the rds format as mpsz_flow.\n\nwrite_rds(flow_data, \"data/rds/mpsz_flow.rds\")\n\n\n\n\n\n\n\nThree population age groups are included as explanatory variables in this in-class exercise. They are population ages 7-12, 13-24, and 25-64. The csv file containing these information imported into the R environment as a tibble data frame, pop.\n\npop = read_csv(\"data/aspatial/pop.csv\")\n\nThe left_join() function of the dplyr package is used to append the population by the three age groups with the mpsz_busstop simple feature data frame. The output is a simple feature data frame, mpsz_var.\n\nmpsz_var = mpsz_busstop %&gt;%\n  left_join(pop,\n            by = c(\"PLN_AREA_N\" = \"PA\",\n                   \"SUBZONE_N\" = \"SZ\")) %&gt;%\n  select(1:2, 7:11) %&gt;%\n  rename(SZ_NAME = SUBZONE_N,\n         SZ_CODE = SUBZONE_C)\n\n\nkable(head(mpsz_var[, 1:6], n = 6))\n\n\n\n\n\n\n\n\n\n\n\n\n\nSZ_NAME\nSZ_CODE\nBUSSTOP_COUNT\nAGE7_12\nAGE13_24\nAGE25_64\ngeometry\n\n\n\n\nINSTITUTION HILL\nRVSZ05\n2\n330\n360\n2260\nMULTIPOLYGON (((28481.45 30…\n\n\nROBERTSON QUAY\nSRSZ01\n10\n320\n350\n2200\nMULTIPOLYGON (((28087.34 30…\n\n\nFORT CANNING\nMUSZ02\n6\n0\n10\n30\nMULTIPOLYGON (((29542.53 31…\n\n\nMARINA EAST (MP)\nMPSZ05\n2\n0\n0\n0\nMULTIPOLYGON (((35279.55 30…\n\n\nSENTOSA\nSISZ01\n1\n200\n260\n1440\nMULTIPOLYGON (((26879.04 26…\n\n\nCITY TERMINALS\nBMSZ17\n10\n0\n0\n0\nMULTIPOLYGON (((27891.15 28…\n\n\n\n\n\n\n\n\nThe information on schools is imported into the R environment as a simple feature tibble data frame, schools.\n\nschools = read_rds(\"data/rds/schools.rds\")\n\nThe number of schools is counted using the lengths() function in the base package and the st_intersects() function in the sf package, and added to the mpsz_var simple feature data frame.\n\nmpsz_var$`SCHOOL_COUNT`= lengths(\n  st_intersects(mpsz_var, schools))\n\nThe shapefiles containing the locations of the various types of activities are then imported.\n\nbusiness = st_read(dsn = \"data/geospatial\",\n                    layer = \"Business\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `Business' from data source \n  `C:\\jmphosis\\ISSS624\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 6550 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3669.148 ymin: 25408.41 xmax: 47034.83 ymax: 50148.54\nProjected CRS: SVY21 / Singapore TM\n\nretails = st_read(dsn = \"data/geospatial\",\n                    layer = \"Retails\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `Retails' from data source \n  `C:\\jmphosis\\ISSS624\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 37635 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4737.982 ymin: 25171.88 xmax: 48265.04 ymax: 50135.28\nProjected CRS: SVY21 / Singapore TM\n\nfinserv = st_read(dsn = \"data/geospatial\",\n                    layer = \"FinServ\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `FinServ' from data source \n  `C:\\jmphosis\\ISSS624\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3320 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4881.527 ymin: 25171.88 xmax: 46526.16 ymax: 49338.02\nProjected CRS: SVY21 / Singapore TM\n\nentertn = st_read(dsn = \"data/geospatial\",\n                    layer = \"entertn\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `entertn' from data source \n  `C:\\jmphosis\\ISSS624\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 114 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 10809.34 ymin: 26528.63 xmax: 41600.62 ymax: 46375.77\nProjected CRS: SVY21 / Singapore TM\n\nfb = st_read(dsn = \"data/geospatial\",\n                    layer = \"F&B\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `F&B' from data source \n  `C:\\jmphosis\\ISSS624\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1919 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6010.495 ymin: 25343.27 xmax: 45462.43 ymax: 48796.21\nProjected CRS: SVY21 / Singapore TM\n\nlr = st_read(dsn = \"data/geospatial\",\n                    layer = \"Liesure&Recreation\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `Liesure&Recreation' from data source \n  `C:\\jmphosis\\ISSS624\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1217 features and 30 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6010.495 ymin: 25134.28 xmax: 48439.77 ymax: 50078.88\nProjected CRS: SVY21 / Singapore TM\n\n\nThe point-in-polygon analysis is then conducted for each of the simple feature data frames.\n\nmpsz_var$`BUSINESS_COUNT`= lengths(\n  st_intersects(\n    mpsz_var, business))\n\nmpsz_var$`RETAILS_COUNT`= lengths(\n  st_intersects(\n    mpsz_var, retails))\n\nmpsz_var$`FINSERV_COUNT`= lengths(\n  st_intersects(\n    mpsz_var, finserv))\n\nmpsz_var$`ENTERTN_COUNT`= lengths(\n  st_intersects(\n    mpsz_var, entertn))\n\nmpsz_var$`FB_COUNT`= lengths(\n  st_intersects(\n    mpsz_var, fb))\n\nmpsz_var$`LR_COUNT`= lengths(\n  st_intersects(\n    mpsz_var, lr))\n\nThe finalised set of explanatory variables, mpsz_var, is obtained.\n\nglimpse(mpsz_var)\n\nRows: 313\nColumns: 14\n$ SZ_NAME        &lt;chr&gt; \"INSTITUTION HILL\", \"ROBERTSON QUAY\", \"FORT CANNING\", \"…\n$ SZ_CODE        &lt;chr&gt; \"RVSZ05\", \"SRSZ01\", \"MUSZ02\", \"MPSZ05\", \"SISZ01\", \"BMSZ…\n$ BUSSTOP_COUNT  &lt;int&gt; 2, 10, 6, 2, 1, 10, 5, 4, 21, 11, 2, 9, 6, 1, 4, 7, 24,…\n$ AGE7_12        &lt;dbl&gt; 330, 320, 0, 0, 200, 0, 0, 0, 350, 470, 0, 300, 390, 0,…\n$ AGE13_24       &lt;dbl&gt; 360, 350, 10, 0, 260, 0, 0, 0, 460, 1160, 0, 760, 890, …\n$ AGE25_64       &lt;dbl&gt; 2260, 2200, 30, 0, 1440, 0, 0, 0, 2600, 6260, 630, 4350…\n$ geometry       &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((28481.45 30..., MULTIPOLYG…\n$ SCHOOL_COUNT   &lt;int&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 1, 0, 0…\n$ BUSINESS_COUNT &lt;int&gt; 6, 4, 7, 0, 1, 11, 15, 1, 10, 1, 17, 6, 0, 0, 51, 2, 3,…\n$ RETAILS_COUNT  &lt;int&gt; 26, 207, 17, 0, 84, 14, 52, 0, 460, 34, 263, 55, 37, 1,…\n$ FINSERV_COUNT  &lt;int&gt; 3, 18, 0, 0, 29, 4, 6, 0, 34, 4, 26, 4, 3, 6, 59, 3, 8,…\n$ ENTERTN_COUNT  &lt;int&gt; 0, 6, 3, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0…\n$ FB_COUNT       &lt;int&gt; 4, 38, 4, 0, 38, 15, 5, 0, 20, 0, 9, 25, 0, 0, 9, 1, 3,…\n$ LR_COUNT       &lt;int&gt; 3, 11, 7, 0, 20, 0, 0, 0, 19, 2, 4, 4, 1, 1, 13, 0, 17,…\n\n\nThe output is saved in the rds format.\n\nwrite_rds(mpsz_var, \"data/rds/mpsz_var.rds\")\n\n\n\n\n\n\nTo calibrate SEIMs, three spflow objects are required:\n\nspflow_network-class, an S4 class that contains all information on a spatial network which is composed by a set of nodes that are linked by some neighborhood relation.\nspflow_network_pair-class, an S4 class which holds information on origin-destination (OD) pairs. Each OD pair is composed of two nodes, each belonging to one network. All origin nodes must belong to the same origin network should be contained in one spflow_network-class, and likewise for the destinations.\nspflow_network_multi-class, an S4 class that gathers information on multiple objects of types spflow_network-class and spflow_network_pair-class. Its purpose is to ensure that the identification between the nodes that serve as origins or destinations, and the OD-pairs is consistent (similar to relational data bases).\n\nThey are imported into the R environment.\n\nmpsz_nb = read_rds(\"data/rds/mpsz_nb.rds\")\nmpsz_flow = read_rds(\"data/rds/mpsz_flow.rds\")\nmpsz_var = read_rds(\"data/rds/mpsz_var.rds\")\n\n\n\nThe spflow_network-class is an S4 class that contains all information on a spatial network which is composed by a set of nodes that are linked by some neighbourhood relation.\nIt can be created by using the spflow_network() function. For the model, the contiguity based neighbourhood structure is chosen.\n\nmpsz_net = spflow_network(\n  id_net = \"sg\",\n  node_neighborhood = \n    nb2mat(mpsz_nb$by_contiguity),\n  node_data = mpsz_var,\n  node_key_column = \"SZ_CODE\")\n\nmpsz_net\n\nSpatial network nodes with id: sg\n--------------------------------------------------\nNumber of nodes: 313\nAverage number of links per node: 6.077\nDensity of the neighborhood matrix: 1.94% (non-zero connections)\n\nData on nodes:\n                SZ_NAME SZ_CODE BUSSTOP_COUNT AGE7_12 AGE13_24 AGE25_64\n1      INSTITUTION HILL  RVSZ05             2     330      360     2260\n2        ROBERTSON QUAY  SRSZ01            10     320      350     2200\n3          FORT CANNING  MUSZ02             6       0       10       30\n4      MARINA EAST (MP)  MPSZ05             2       0        0        0\n5               SENTOSA  SISZ01             1     200      260     1440\n6        CITY TERMINALS  BMSZ17            10       0        0        0\n---                 ---     ---           ---     ---      ---      ---\n308            NEE SOON  YSSZ07            12      90      140      590\n309       UPPER THOMSON  BSSZ01            47    1590     3660    15980\n310          SHANGRI-LA  AMSZ05            12     810     1920     9650\n311          TOWNSVILLE  AMSZ04             9     980     2000    11320\n312           MARYMOUNT  BSSZ02            25    1610     4060    16860\n313 TUAS VIEW EXTENSION  TSSZ06            11       0        0        0\n    SCHOOL_COUNT BUSINESS_COUNT RETAILS_COUNT FINSERV_COUNT ENTERTN_COUNT\n1              1              6            26             3             0\n2              0              4           207            18             6\n3              0              7            17             0             3\n4              0              0             0             0             0\n5              0              1            84            29             2\n6              0             11            14             4             0\n---          ---            ---           ---           ---           ---\n308            0              0             7             0             0\n309            3             21           305            30             0\n310            3              0            53             9             0\n311            1              0            83            11             0\n312            3             19           135             8             0\n313            0             53             3             1             0\n    FB_COUNT LR_COUNT COORD_X COORD_Y\n1          4        3  103.84    1.29\n2         38       11  103.84    1.29\n3          4        7  103.85    1.29\n4          0        0  103.88    1.29\n5         38       20  103.83    1.25\n6         15        0  103.85    1.26\n---      ---      ---     ---     ---\n308        0        0  103.81     1.4\n309        5       11  103.83    1.36\n310        0        0  103.84    1.37\n311        1        1  103.85    1.36\n312        3       11  103.84    1.35\n313        0        0  103.61    1.26\n\n\n\n\n\nThe spflow_network_pair-class is an S4 class which holds information on origin-destination (OD) pairs. Each OD pair is composed of two nodes, each belonging to one network. All origin nodes must belong to the same origin network should be contained in one spflow_network-class, and likewise for the destinations.\nThe spflow_network_pair() function is used to create the OD pairs.\n\nmpsz_net_pairs = spflow_network_pair(\n  id_orig_net = \"sg\",\n  id_dest_net = \"sg\",\n  pair_data = mpsz_flow,\n  orig_key_column = \"ORIGIN_SZ\",\n  dest_key_column = \"DESTIN_SZ\")\n\nmpsz_net_pairs\n\nSpatial network pair with id: sg_sg\n--------------------------------------------------\nOrigin network id: sg (with 313 nodes)\nDestination network id: sg (with 313 nodes)\nNumber of pairs: 97969\nCompleteness of pairs: 100.00% (97969/97969)\n\nData on node-pairs:\n      DESTIN_SZ ORIGIN_SZ DISTANCE TRIPS\n1        RVSZ05    RVSZ05        0    67\n314      SRSZ01    RVSZ05   305.74   251\n627      MUSZ02    RVSZ05   951.83     0\n940      MPSZ05    RVSZ05  5254.07     0\n1253     SISZ01    RVSZ05     4975     0\n1566     BMSZ17    RVSZ05  3176.16     0\n---         ---       ---      ---   ---\n96404    YSSZ07    TSSZ06 26972.97     0\n96717    BSSZ01    TSSZ06 25582.48     0\n97030    AMSZ05    TSSZ06 26714.79     0\n97343    AMSZ04    TSSZ06 27572.74     0\n97656    BSSZ02    TSSZ06  26681.7     0\n97969    TSSZ06    TSSZ06        0   270\n\n\n\n\n\nThe spflow_network_multi-class is an S4 class that gathers information on multiple objects of types spflow_network-class and spflow_network_pair-class.\nIts purpose is to ensure that the identification between the nodes that serve as origins or destinations, and the OD-pairs is consistent (similar to relational data bases). For example, if some of the origins in the sp_network_pair-class are not identified with the nodes in the sp_network_nodes-class, an error will be raised.\nThe spflow_network_multi() function is used to create the object.\n\nStudent Note: Do not reverse the order of the two arguments in the function, i.e., the node (neighbours and variables) object comes first, then the pairs (flow) object.\n\n\nmpsz_multi_net = spflow_network_multi(mpsz_net,\n                                      mpsz_net_pairs)\n\nmpsz_multi_net\n\nCollection of spatial network nodes and pairs\n--------------------------------------------------\nContains 1 spatial network nodes  \n    With id :  sg\nContains 1 spatial network pairs  \n    With id :  sg_sg\n\nAvailability of origin-destination pair information:\n\n ID_ORIG_NET ID_DEST_NET ID_NET_PAIR COMPLETENESS     C_PAIRS  C_ORIG  C_DEST\n          sg          sg       sg_sg      100.00% 97969/97969 313/313 313/313\n\n\nThe spflow_map() function is used to plot a simple geographic representation of the largest flows.\n\nplot(mpsz$geometry)\nspflow_map(\n  mpsz_multi_net,\n  flow_var = \"TRIPS\",\n  add = TRUE, \n  legend_position = \"bottomleft\",\n  filter_lowest = .999, \n  remove_intra = TRUE,\n  cex = 1)\n\n\n\n\n\n\n\nMulticollinearity refers to a situation in which more than two explanatory variables in a multiple regression model are highly linearly related. In this situation, the coefficient estimates of the multiple regression may change erratically in response to small changes in the data or the procedure used to fit the model.\nIn order to avoid including explanatory variables that are highly correlated, spflow provides two functions:\n\npair_cor() function to create a correlation matrix, and\ncor_image() function to plot the correlation matrix as a correlogram.\n\n\ncor_formula = log(1+TRIPS) ~\n  BUSSTOP_COUNT +\n  AGE7_12 +\n  AGE13_24 +\n  AGE25_64 +\n  SCHOOL_COUNT +\n  BUSINESS_COUNT +\n  RETAILS_COUNT +\n  FINSERV_COUNT +\n  P_(log(DISTANCE + 1))\n\ncor_mat = pair_cor(mpsz_multi_net,\n                   spflow_formula = cor_formula,\n                   add_lags_x = FALSE)\n\ncolnames(cor_mat) = paste0(substr(colnames(cor_mat), 1, 3), \"...\")\n\ncor_image(cor_mat)\n\n\n\n\n\n\n\n\nThe core function of the spflow package is spflow(). It provides an interface to three different estimators of spatial econometric interaction models (Dargel 2021) that allow the user to estimate origin-destination flows with spatial autocorrelation.\nThe three different estimators currently supported by spflow are:\n\nMaximum Likelihood Estimation (MLE) which is the default estimation procedure. The matrix form estimation in the framework of this model was first developed by LeSage and Pace (2008) and then improved by Dargel (2021) . Spatial two-stage least squares (S2SLS)\nSpatial Two-stage Least Squares (S2SLS) estimator is an adaptation of the one proposed by Kelejian and Prucha (1998), to the case of origin-destination flows, with up to three neighborhood matrices Dargel (2021). A similar estimation is done by Tamesue and Tsutsumi (2016). The user can activate the S2SLS estimation via the estimation_control argument using the input spflow_control(estimation_method = “s2sls”).\nBayesian Markov Chain Monte Carlo (MCMC) estimator is based on the ideas of LeSage and Pace (2009) and incorporates the improvements proposed in Dargel (2021) . The estimation is based on a tuned Metropolis-Hastings sampler for the auto-regressive parameters, and for the remaining parameters it uses Gibbs sampling. The routine uses 5500 iterations of the sampling procedure and considers the first 2500 as burn-in period. The user can activate the S2SLS estimation via the estimation_control argument using the input spflow_control(estimation_method = “mcmc”).\n\nEstimation with default settings requires two arguments: an sp_multi_network-class and a flow_formula. The flow_formula specifies the model to estimate. The function offers a formula interface adapted to spatial interaction models, which has the following structure: Y ~ O_(X1) + D_(X2) + I_(X3) + P_(X4). This structure reflects the different data sources involved in such a model. On the left hand is the independent variable Y which corresponds to the vector of flows. On the right, are all the explanatory variables. The functions O_(…) and D_(…) indicate which variables are used as characteristics of the origins and destinations respectively. Similarly, I_(…) indicates variables that should be used for the intra-regional parameters. Finally, P_(…) declares which variables describe origin-destination pairs, which most frequently will include a measure of distance.\nAll the declared variables must be available in the provided spflow_network_multi-class object, which gathers information on the origins and destinations (inside spflow_network-class objects), as well as the information on the origin-destination pairs (inside a spflow_network_pair-class object).\nUsing the short notation Y ~ . is possible and will be interpreted as usual, in the sense that we use all variables that are available for each data source. Also mixed formulas, such as Y ~ . + P_(log(X4) + 1), are possible. When the dot (.) shortcut is combined with explicit declaration, it will only be used for the non-declared data sources.\n\n\nA base model is calibrated with the following configuration:\n\nExplanatory variables used as characteristics of the origins: “BUSSTOP_COUNT” and “AGE25_64”.\nExplanatory variables used as characteristics of the destinations: “SCHOOL_COUNT”, “BUSINESS_COUNT”, “RETAILS_COUNT”, “FINSERV_COUNT”.\nExplanatory variable describing origin-destination pairs: “DISTANCE”.\n\n\nbase_model = spflow(\n  spflow_formula = log(1 + TRIPS) ~\n    O_(BUSSTOP_COUNT + AGE25_64) +\n    D_(SCHOOL_COUNT +\n         BUSINESS_COUNT +\n         RETAILS_COUNT +\n         FINSERV_COUNT) +\n    P_(log(DISTANCE + 1)),\n  spflow_networks = mpsz_multi_net)\n\nbase_model\n\n--------------------------------------------------\nSpatial interaction model estimated by: MLE  \nSpatial correlation structure: SDM (model_9)\nDependent variable: log(1 + TRIPS)\n\n--------------------------------------------------\nCoefficients:\n                          est     sd   t.stat  p.val\nrho_d                   0.680  0.004  192.554  0.000\nrho_o                   0.678  0.004  187.732  0.000\nrho_w                  -0.396  0.006  -65.592  0.000\n(Intercept)             0.410  0.065    6.267  0.000\n(Intra)                 1.313  0.081   16.262  0.000\nD_SCHOOL_COUNT          0.017  0.002    7.885  0.000\nD_SCHOOL_COUNT.lag1     0.002  0.004    0.552  0.581\nD_BUSINESS_COUNT        0.000  0.000    3.015  0.003\nD_BUSINESS_COUNT.lag1   0.000  0.000   -0.249  0.804\nD_RETAILS_COUNT         0.000  0.000   -0.306  0.759\nD_RETAILS_COUNT.lag1    0.000  0.000    0.152  0.880\nD_FINSERV_COUNT         0.002  0.000    6.787  0.000\nD_FINSERV_COUNT.lag1   -0.002  0.001   -3.767  0.000\nO_BUSSTOP_COUNT         0.002  0.000    6.807  0.000\nO_BUSSTOP_COUNT.lag1   -0.001  0.000   -2.364  0.018\nO_AGE25_64              0.000  0.000    7.336  0.000\nO_AGE25_64.lag1         0.000  0.000   -2.797  0.005\nP_log(DISTANCE + 1)    -0.050  0.007   -6.793  0.000\n\n--------------------------------------------------\nR2_corr: 0.6942947  \nObservations: 97969  \nModel coherence: Validated\n\n\n\nStudent Note:\n\nrho_o represents origin constraints.\nrho_d represents destination constraints.\nrho_w represents the intra-zonal constraints.\nD_SCHOOL_COUNT - significant; key is having schools within the zone.\nD_SCHOOL_COUNT.lag1 - not significant; the schools in the neighbouring zones do not contribute to the attractiveness of the zone.\nD_FINSERV_COUNT and D_FINSERV.lag1 - both significant; the financial services in the neighbouring zones contribute to the attractiveness of the zone.\n\n\n\nplot(base_model)\n\n\n\n\nIn building explanatory models, it is important to check if the model calibrated conforms to the statistical assumption of the statistical methods used.\nThe spflow_moran_plots() function is used to support residual diagnostics.\n\nold_par = par(mfrow = c(1,3),\n              mar = c(2,2,2,2))\n\nspflow_moran_plots(base_model)\n\n\n\npar(old_par)\n\nThe pair_cor() function is used to inspect the relationship of the residual and the explanatory variables.\n\nStudent Note: Looking at RESID.d, RESID.o, and RESID.w, no multicollinearity is observed, and their contribution to the formula/model are confirmed.\n\n\ncorr_residual = pair_cor(base_model)\ncolnames(corr_residual) = substr(colnames(corr_residual), 1, 3)\ncor_image(corr_residual)\n\n\n\n\n\nmodel.df = as_tibble(base_model@spflow_indicators) %&gt;%\n  mutate(FITTED_Y = round(exp(FITTED),0))\n\n\nmpsz_flow1 = mpsz_flow %&gt;%\n  left_join(model.df) %&gt;%\n  select(1:4,8) %&gt;%\n  mutate(diff = (FITTED_Y-TRIPS))\n\n\nplot(mpsz_flow1$diff)\n\n\n\n\n\n\n\nModel 8\n\nTo see how intra-zonal affects the model.\nR2_corr value slightly higher than base model’s.\n\n\nspflow_formula = log(1 + TRIPS) ~\n    O_(BUSSTOP_COUNT + AGE25_64) +\n    D_(SCHOOL_COUNT +\n         BUSINESS_COUNT +\n         RETAILS_COUNT +\n         FINSERV_COUNT) +\n    P_(log(DISTANCE + 1))\n\nmodel_control = spflow_control(\n  estimation_method = \"mle\",\n  model = \"model_8\")\n\nmle_model8 = spflow(\n  spflow_formula,\n  spflow_networks = mpsz_multi_net,\n  estimation_control = model_control)\n\nmle_model8\n\n--------------------------------------------------\nSpatial interaction model estimated by: MLE  \nSpatial correlation structure: SDM (model_8)\nDependent variable: log(1 + TRIPS)\n\n--------------------------------------------------\nCoefficients:\n                          est     sd    t.stat  p.val\nrho_d                   0.689  0.003   196.834  0.000\nrho_o                   0.687  0.004   192.213  0.000\nrho_w                  -0.473  0.003  -142.469  0.000\n(Intercept)             1.086  0.049    22.274  0.000\n(Intra)                 0.840  0.075    11.255  0.000\nD_SCHOOL_COUNT          0.019  0.002     8.896  0.000\nD_SCHOOL_COUNT.lag1     0.019  0.004     5.130  0.000\nD_BUSINESS_COUNT        0.000  0.000     3.328  0.001\nD_BUSINESS_COUNT.lag1   0.000  0.000     1.664  0.096\nD_RETAILS_COUNT         0.000  0.000    -0.414  0.679\nD_RETAILS_COUNT.lag1    0.000  0.000    -0.171  0.864\nD_FINSERV_COUNT         0.002  0.000     6.150  0.000\nD_FINSERV_COUNT.lag1   -0.003  0.001    -4.601  0.000\nO_BUSSTOP_COUNT         0.003  0.000     7.676  0.000\nO_BUSSTOP_COUNT.lag1    0.000  0.000     0.552  0.581\nO_AGE25_64              0.000  0.000     6.870  0.000\nO_AGE25_64.lag1         0.000  0.000    -0.462  0.644\nP_log(DISTANCE + 1)    -0.125  0.005   -22.865  0.000\n\n--------------------------------------------------\nR2_corr: 0.6965976  \nObservations: 97969  \nModel coherence: Validated\n\n\n\nold_par = par(mfrow = c(1, 3), \n               mar = c(2,2,2,2))\n\nspflow_moran_plots(mle_model8)\n\n\n\npar(old_par)\n\nModel 2\n\nmodel_control = spflow_control(\n  estimation_method = \"mle\",\n  model = \"model_2\")\n\nmle_model2 = spflow(\n  spflow_formula,\n  spflow_networks = mpsz_multi_net,\n  estimation_control = model_control)\n\nmle_model2\n\n--------------------------------------------------\nSpatial interaction model estimated by: MLE  \nSpatial correlation structure: SDM (model_2)\nDependent variable: log(1 + TRIPS)\n\n--------------------------------------------------\nCoefficients:\n                          est     sd   t.stat  p.val\nrho_d                   0.731  0.003  218.603  0.000\n(Intercept)             3.068  0.067   45.899  0.000\n(Intra)                -0.398  0.093   -4.291  0.000\nD_SCHOOL_COUNT          0.063  0.003   24.291  0.000\nD_SCHOOL_COUNT.lag1     0.054  0.005   11.802  0.000\nD_BUSINESS_COUNT        0.001  0.000    8.790  0.000\nD_BUSINESS_COUNT.lag1   0.001  0.000    3.925  0.000\nD_RETAILS_COUNT         0.000  0.000   -1.076  0.282\nD_RETAILS_COUNT.lag1    0.000  0.000    0.251  0.802\nD_FINSERV_COUNT         0.007  0.000   18.054  0.000\nD_FINSERV_COUNT.lag1   -0.009  0.001  -12.691  0.000\nO_BUSSTOP_COUNT         0.003  0.000    8.269  0.000\nO_BUSSTOP_COUNT.lag1    0.004  0.001    7.808  0.000\nO_AGE25_64              0.000  0.000    3.918  0.000\nO_AGE25_64.lag1         0.000  0.000    4.421  0.000\nP_log(DISTANCE + 1)    -0.351  0.007  -47.000  0.000\n\n--------------------------------------------------\nR2_corr: 0.5527887  \nObservations: 97969  \nModel coherence: Validated\n\n\n\nold_par = par(mfrow = c(1, 3), \n               mar = c(2,2,2,2))\n\nspflow_moran_plots(mle_model2)\n\n\n\npar(old_par)\n\n~~~ End of In-class Exercise 5 ~~~"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#overview",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#overview",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "Spatial Interaction Models (SIMs) are often used to explain origin-destination (OD) flows that arise in fields such as public bus commuting. These models rely on a function of the distance between the origin and destination as well as explanatory variables pertaining to characteristics of both origin and destination locations.\nSIMs assume that the use of distance as an explanatory variable will eradicate the spatial dependence among the sample of OD flows between pairs of locations. The notion that the use of distance functions in conventional SIMs effectively captures spatial dependence in inter-regional flows has long been challenged. In view of the limitation of SIMs in accounting for spatial dependence, Spatial Econometric Interaction Models (SEIMs) have been introduce by James P. LeSage and R. Kelley Pace (2009).\nIn this in-class exercise, the spflow package (an R library specially developed for calibrating SEIMs) is used, alongside other relevant packages, to:\n\nExtract explanatory variables from secondary source;\nAssemble and derive explanatory variables from publicly available geospatial data;\nIntegrate these explanatory variable into a tidy variables tibble data frame; and\nCalibrate SEIMs."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#getting-started",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#getting-started",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "The following packages are loaded into the R environment:\n\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data;\nsf for importing, managing, and processing geospatial data;\nsp for handling geospatial data;\nspdep for analysing spatial dependence and spatial relationships in data;\nspflow for efficient estimation of spatial econometric models of origin-destination flows;\n\nNote: The development version (0.1.0.9010) is used instead of the CRAN-released version (0.1.0).\n\ntmap for thematic mapping;\nreshape2 for handling matrix format;\nMatrix for handling matrices; and\nknitr for embedding R code in different document formats (e.g., HTML) to facilitate dynamic report generation.\n\nThe latest development version of the spflow package is installed first.\n\ndevtools::install_github(\"LukeCe/spflow\")\n\nThe spflow package and other packages mentioned above are loaded into the R environment.\n\npacman::p_load(tmap, sf, spdep, sp, Matrix, \n               spflow, reshape2, knitr,\n               tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#data-preparation",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#data-preparation",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "Three data sets are required for this in-class exercise:\n\nSpatial weights;\nA tibble data frame consisting of the origins, destinations, flows and distances between the origins and destinations; and\nA tibble data frame consisting of the explanatory variables.\n\n\n\nThe 2019 URA Master Plan Subzone boundary shapefile is imported into the R environment as a simple feature data frame, mpsz, using the st_read() and st_transform() functions in the sf package.\n\nmpsz = st_read(dsn = \"data/geospatial\",\n               layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\jmphosis\\ISSS624\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\nSimilarly, the same functions are used to import the Bus Stop location shapefile into the R environment as a simple feature data frame, busstop.\n\nbusstop = st_read(dsn = \"data/geospatial\",\n               layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `C:\\jmphosis\\ISSS624\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5159 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48280.78 ymax: 52983.82\nProjected CRS: SVY21\n\n\nThe lengths() function in the base package and the st_intersects() function in the sf package are used to count the number of bus stops in each planning subzone.\n\nmpsz$`BUSSTOP_COUNT` = lengths(st_intersects(mpsz, busstop))\n\nThe filter() function in the dplyr package is then used to filter for subzones with at least one bus stop. There are 313 planning subzones left.\n\nmpsz_busstop = mpsz %&gt;% filter(BUSSTOP_COUNT &gt; 0)\n\nmpsz_busstop\n\nSimple feature collection with 313 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 21448.47 xmax: 50271.73 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n            SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1    INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n2      ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n3        FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n4    MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n5             SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n6      CITY TERMINALS    BMSZ17      BUKIT MERAH         BM CENTRAL REGION\n7               ANSON    DTSZ10    DOWNTOWN CORE         DT CENTRAL REGION\n8        STRAITS VIEW    SVSZ01     STRAITS VIEW         SV CENTRAL REGION\n9     MARITIME SQUARE    BMSZ01      BUKIT MERAH         BM CENTRAL REGION\n10 TELOK BLANGAH RISE    BMSZ15      BUKIT MERAH         BM CENTRAL REGION\n   REGION_C                       geometry BUSSTOP_COUNT\n1        CR MULTIPOLYGON (((28481.45 30...             2\n2        CR MULTIPOLYGON (((28087.34 30...            10\n3        CR MULTIPOLYGON (((29542.53 31...             6\n4        CR MULTIPOLYGON (((35279.55 30...             2\n5        CR MULTIPOLYGON (((26879.04 26...             1\n6        CR MULTIPOLYGON (((27891.15 28...            10\n7        CR MULTIPOLYGON (((29201.07 28...             5\n8        CR MULTIPOLYGON (((31269.21 28...             4\n9        CR MULTIPOLYGON (((26920.02 26...            21\n10       CR MULTIPOLYGON (((27483.57 28...            11\n\n\n\n\n\nThere are three different matrices that can be used to describe the connectivity between planning subzones. They are contiguity, fixed distance, and adaptive distance. All three types of spatial weights are computed using the st_point_on_surface() ad st_geometry() functions in the sf package.\n\ncentroids = suppressWarnings({st_point_on_surface(st_geometry(mpsz_busstop))})\n\nmpsz_nb = list(\n  \"by_contiguity\" = poly2nb(mpsz_busstop),\n  \"by_distance\" = dnearneigh(centroids, \n                             d1 = 0, d2 = 5000),\n  \"by_knn\" = knn2nb(knearneigh(centroids, 3)))\n\nThe list of three sets of weight values, mpsz_nb, is generated using functions in the spdep package for:\n\nNeighbours by contiguity: using the poly2nb() function to build a neighbours list based on regions with contiguous boundaries.\nNeighbours by fixed distance: using the dnearneigh() function to identify neighbours of region centroids by Euclidean distance between the lower and upper bounds (0 and 5000 m).\nNeighbours by adpative distance: using the knn2nb() and knearneigh() functions to build adaptive spatial weights.\n\nThe output reveals that for neighbours by fixed distance, there is one planning subzone with no neighbours.\n\nmpsz_nb\n\n$by_contiguity\nNeighbour list object:\nNumber of regions: 313 \nNumber of nonzero links: 1902 \nPercentage nonzero weights: 1.94143 \nAverage number of links: 6.076677 \n\n$by_distance\nNeighbour list object:\nNumber of regions: 313 \nNumber of nonzero links: 15422 \nPercentage nonzero weights: 15.74171 \nAverage number of links: 49.27157 \n1 region with no links:\n313\n2 disjoint connected subgraphs\n\n$by_knn\nNeighbour list object:\nNumber of regions: 313 \nNumber of nonzero links: 939 \nPercentage nonzero weights: 0.9584665 \nAverage number of links: 3 \nNon-symmetric neighbours list\n\n\nThe spatial weights are plotted for visual inspection.\nContiguity\n\nplot(st_geometry(mpsz))\nplot(mpsz_nb$by_contiguity, \n     centroids, \n     add = T, \n     col = rgb(0,0,0,\n               alpha=0.5))\ntitle(\"Contiguity\") \n\n\n\n\nFixed Distance\n\nplot(st_geometry(mpsz))\nplot(mpsz_nb$by_distance,\n     centroids, \n     add = T, \n     col = rgb(0,0,0,\n               alpha=0.5)) \ntitle(\"Distance\") \n\n\n\n\nAdaptive Distance (3 Nearest Neighbours)\n\nplot(st_geometry(mpsz))\nplot(mpsz_nb$by_knn, \n     centroids, \n     add = T, \n     col = rgb(0,0,0,\n               alpha=0.5))\ntitle(\"3 Nearest Neighbors\") \n\n\n\n\nThe list of three sets of spatial weights is then saved in the rds format.\n\nwrite_rds(mpsz_nb, \"data/rds/mpsz_nb.rds\")\n\n\n\n\nThe flow data at the planning subzone level is prepared.\nThe tibble data frame, odbus6_9, containing the origin-destination matrix and number of trips are imported into the R environment.\n\nodbus6_9 = read_rds(\"data/rds/odbus6_9.rds\")\n\nThe st_intersection() function in the sf package is used to match the match the bus stop numbers to the subzone codes via the intersections between the points representing the bus stop locations and the polygons representing the planning subzones. The bus stop number and subzone code variables are selected using the select() function in the dplyr package, and the geometry feature is dropped using the st_drop_geometry function() in the sf package.\n\nbusstop_mpsz = st_intersection(busstop, mpsz) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\nThe planning subzone codes in the busstop_mpsz data frame are matched with the origin bus stop numbers in the odbus6_9 tibble data frame.\n\nod_data = left_join(odbus6_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C,\n         DESTIN_BS = DESTINATION_PT_CODE)\n\nA check for duplicates is made. The unique records are retained, and a confirmatory check is made again.\n\nduplicate = od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nod_data = unique(od_data)\n\nduplicate = od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nThe above steps are repeated by matching the planning subzone codes in the busstop_mpsz data frame with the destination bus stop numbers in the odbus6_9 tibble data frame. The output tibble data frame is then grouped by the origin and destination subzones.\n\nod_data = left_join(od_data , busstop_mpsz,\n            by = c(\"DESTIN_BS\" = \"BUS_STOP_N\")) \n\n\nduplicate = od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nod_data = unique(od_data)\n\nduplicate = od_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\nod_data = od_data %&gt;%\n  rename(DESTIN_SZ = SUBZONE_C) %&gt;%\n  drop_na() %&gt;%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\nThe output tibble data frame, od_data, is obtained.\n\nkable(head(od_data, n = 5))\n\n\n\n\nORIGIN_SZ\nDESTIN_SZ\nTRIPS\n\n\n\n\nAMSZ01\nAMSZ01\n1998\n\n\nAMSZ01\nAMSZ02\n8289\n\n\nAMSZ01\nAMSZ03\n8971\n\n\nAMSZ01\nAMSZ04\n2252\n\n\nAMSZ01\nAMSZ05\n6136\n\n\n\n\n\nThe output is saved in the rds format.\n\nwrite_rds(od_data, \"data/rds/od_data.rds\")\n\n\n\n\nIn spatial interaction, a distance matrix is a table that shows the distance between pairs of locations. By definition, an location’s distance from itself is 0.\n\n\nThere are at least two ways to compute the required distance matrix. One is using the sf package and the other is using the sp package. Past experience show that computing the distance matrix using sf functions took relatively longer that sp functions, especially when the data set is large. In view of this, the sp functions are used.\nThe as.Spatial() function is used to convert mpsz from a simple feature tibble data frame to a SpatialPolygonsDataFrame of sp object.\n\nmpsz_sp = as(mpsz_busstop, \"Spatial\")\nmpsz_sp\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 313 \nextent      : 2667.538, 50271.73, 21448.47, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 7\nnames       : SUBZONE_N, SUBZONE_C, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C, BUSSTOP_COUNT \nmin values  : ADMIRALTY,    AMSZ01, ANG MO KIO,         AM, CENTRAL REGION,       CR,             1 \nmax values  :    YUNNAN,    YSSZ09,     YISHUN,         YS,    WEST REGION,       WR,            87 \n\n\n\n\n\nThe spDists() function is then used to compute the Euclidean distance between the centroids of the planning subzones.\nThe output is a matrix object class of R, DISTANCE. The column headers and row headers are not labelled with the planning subzone codes.\n\nDISTANCE = spDists(mpsz_sp, \n                    longlat = FALSE)\n\nhead(DISTANCE, n=c(10, 10))\n\n           [,1]     [,2]      [,3]     [,4]     [,5]     [,6]     [,7]     [,8]\n [1,]    0.0000  305.737  951.8314 5254.066 4975.002 3176.159 2345.174 3455.579\n [2,]  305.7370    0.000 1045.9088 5299.849 4669.295 2873.497 2074.691 3277.921\n [3,]  951.8314 1045.909    0.0000 4303.232 5226.873 3341.212 2264.201 2890.870\n [4,] 5254.0664 5299.849 4303.2323    0.000 7707.091 6103.071 5007.197 3699.242\n [5,] 4975.0021 4669.295 5226.8731 7707.091    0.000 1893.049 3068.627 4009.437\n [6,] 3176.1592 2873.497 3341.2116 6103.071 1893.049    0.000 1200.264 2532.383\n [7,] 2345.1741 2074.691 2264.2014 5007.197 3068.627 1200.264    0.000 1709.443\n [8,] 3455.5791 3277.921 2890.8696 3699.242 4009.437 2532.383 1709.443    0.000\n [9,] 3860.6063 3612.345 4570.3316 8324.615 2766.650 2606.583 3383.338 5032.870\n[10,] 2634.7332 2358.403 3255.0325 6981.431 2752.882 1666.022 2115.640 3815.333\n          [,9]    [,10]\n [1,] 3860.606 2634.733\n [2,] 3612.345 2358.403\n [3,] 4570.332 3255.033\n [4,] 8324.615 6981.431\n [5,] 2766.650 2752.882\n [6,] 2606.583 1666.022\n [7,] 3383.338 2115.640\n [8,] 5032.870 3815.333\n [9,]    0.000 1357.426\n[10,] 1357.426    0.000\n\n\n\n\n\nA list sorted according to the distance matrix by planning subzone codes is created using the “SUBZONE_C” variable in mpsz_busstop.\n\nsz_names = mpsz_busstop$SUBZONE_C\n\nThen, they are attached to the rows and columns of the distance matrix using the colnames(), rownames(), and paste0() functions in the base package.\n\ncolnames(DISTANCE) = paste0(sz_names)\nrownames(DISTANCE) = paste0(sz_names)\n\n\n\n\nThe melt() function in the reshape2 package is then used to pivot the distance matrix into a long table, distPair, using the row and column subzone codes. The rename() function in the dplyr package is used to rename the origin, destination, and distance variables.\n\ndistPair = melt(DISTANCE) %&gt;%\n  rename(DISTANCE = value) %&gt;%\n  rename(ORIGIN_SZ = Var1,\n         DESTIN_SZ = Var2)\n\nhead(distPair, 10)\n\n   ORIGIN_SZ DESTIN_SZ  DISTANCE\n1     RVSZ05    RVSZ05    0.0000\n2     SRSZ01    RVSZ05  305.7370\n3     MUSZ02    RVSZ05  951.8314\n4     MPSZ05    RVSZ05 5254.0664\n5     SISZ01    RVSZ05 4975.0021\n6     BMSZ17    RVSZ05 3176.1592\n7     DTSZ10    RVSZ05 2345.1741\n8     SVSZ01    RVSZ05 3455.5791\n9     BMSZ01    RVSZ05 3860.6063\n10    BMSZ15    RVSZ05 2634.7332\n\n\nThe left_join() function in the dplyr package is then used to join the od_data tibble data frame and the distPair data frame. The mutate() function in the dplyr package is used to replace NA values with 0. The output is the flow_data data frame.\n\nflow_data = distPair %&gt;%\n  left_join (od_data) %&gt;%\n  mutate(TRIPS = coalesce(TRIPS, 0))\n\nThe output data frame, flow_data, is obtained.\n\nkable(head(flow_data, n = 10))\n\n\n\n\nORIGIN_SZ\nDESTIN_SZ\nDISTANCE\nTRIPS\n\n\n\n\nRVSZ05\nRVSZ05\n0.0000\n67\n\n\nSRSZ01\nRVSZ05\n305.7370\n549\n\n\nMUSZ02\nRVSZ05\n951.8314\n0\n\n\nMPSZ05\nRVSZ05\n5254.0664\n0\n\n\nSISZ01\nRVSZ05\n4975.0021\n0\n\n\nBMSZ17\nRVSZ05\n3176.1592\n0\n\n\nDTSZ10\nRVSZ05\n2345.1741\n0\n\n\nSVSZ01\nRVSZ05\n3455.5791\n0\n\n\nBMSZ01\nRVSZ05\n3860.6063\n0\n\n\nBMSZ15\nRVSZ05\n2634.7332\n0\n\n\n\n\n\nThe output is saved in the rds format as mpsz_flow.\n\nwrite_rds(flow_data, \"data/rds/mpsz_flow.rds\")\n\n\n\n\n\n\n\nThree population age groups are included as explanatory variables in this in-class exercise. They are population ages 7-12, 13-24, and 25-64. The csv file containing these information imported into the R environment as a tibble data frame, pop.\n\npop = read_csv(\"data/aspatial/pop.csv\")\n\nThe left_join() function of the dplyr package is used to append the population by the three age groups with the mpsz_busstop simple feature data frame. The output is a simple feature data frame, mpsz_var.\n\nmpsz_var = mpsz_busstop %&gt;%\n  left_join(pop,\n            by = c(\"PLN_AREA_N\" = \"PA\",\n                   \"SUBZONE_N\" = \"SZ\")) %&gt;%\n  select(1:2, 7:11) %&gt;%\n  rename(SZ_NAME = SUBZONE_N,\n         SZ_CODE = SUBZONE_C)\n\n\nkable(head(mpsz_var[, 1:6], n = 6))\n\n\n\n\n\n\n\n\n\n\n\n\n\nSZ_NAME\nSZ_CODE\nBUSSTOP_COUNT\nAGE7_12\nAGE13_24\nAGE25_64\ngeometry\n\n\n\n\nINSTITUTION HILL\nRVSZ05\n2\n330\n360\n2260\nMULTIPOLYGON (((28481.45 30…\n\n\nROBERTSON QUAY\nSRSZ01\n10\n320\n350\n2200\nMULTIPOLYGON (((28087.34 30…\n\n\nFORT CANNING\nMUSZ02\n6\n0\n10\n30\nMULTIPOLYGON (((29542.53 31…\n\n\nMARINA EAST (MP)\nMPSZ05\n2\n0\n0\n0\nMULTIPOLYGON (((35279.55 30…\n\n\nSENTOSA\nSISZ01\n1\n200\n260\n1440\nMULTIPOLYGON (((26879.04 26…\n\n\nCITY TERMINALS\nBMSZ17\n10\n0\n0\n0\nMULTIPOLYGON (((27891.15 28…\n\n\n\n\n\n\n\n\nThe information on schools is imported into the R environment as a simple feature tibble data frame, schools.\n\nschools = read_rds(\"data/rds/schools.rds\")\n\nThe number of schools is counted using the lengths() function in the base package and the st_intersects() function in the sf package, and added to the mpsz_var simple feature data frame.\n\nmpsz_var$`SCHOOL_COUNT`= lengths(\n  st_intersects(mpsz_var, schools))\n\nThe shapefiles containing the locations of the various types of activities are then imported.\n\nbusiness = st_read(dsn = \"data/geospatial\",\n                    layer = \"Business\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `Business' from data source \n  `C:\\jmphosis\\ISSS624\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 6550 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3669.148 ymin: 25408.41 xmax: 47034.83 ymax: 50148.54\nProjected CRS: SVY21 / Singapore TM\n\nretails = st_read(dsn = \"data/geospatial\",\n                    layer = \"Retails\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `Retails' from data source \n  `C:\\jmphosis\\ISSS624\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 37635 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4737.982 ymin: 25171.88 xmax: 48265.04 ymax: 50135.28\nProjected CRS: SVY21 / Singapore TM\n\nfinserv = st_read(dsn = \"data/geospatial\",\n                    layer = \"FinServ\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `FinServ' from data source \n  `C:\\jmphosis\\ISSS624\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3320 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4881.527 ymin: 25171.88 xmax: 46526.16 ymax: 49338.02\nProjected CRS: SVY21 / Singapore TM\n\nentertn = st_read(dsn = \"data/geospatial\",\n                    layer = \"entertn\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `entertn' from data source \n  `C:\\jmphosis\\ISSS624\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 114 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 10809.34 ymin: 26528.63 xmax: 41600.62 ymax: 46375.77\nProjected CRS: SVY21 / Singapore TM\n\nfb = st_read(dsn = \"data/geospatial\",\n                    layer = \"F&B\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `F&B' from data source \n  `C:\\jmphosis\\ISSS624\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1919 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6010.495 ymin: 25343.27 xmax: 45462.43 ymax: 48796.21\nProjected CRS: SVY21 / Singapore TM\n\nlr = st_read(dsn = \"data/geospatial\",\n                    layer = \"Liesure&Recreation\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `Liesure&Recreation' from data source \n  `C:\\jmphosis\\ISSS624\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1217 features and 30 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6010.495 ymin: 25134.28 xmax: 48439.77 ymax: 50078.88\nProjected CRS: SVY21 / Singapore TM\n\n\nThe point-in-polygon analysis is then conducted for each of the simple feature data frames.\n\nmpsz_var$`BUSINESS_COUNT`= lengths(\n  st_intersects(\n    mpsz_var, business))\n\nmpsz_var$`RETAILS_COUNT`= lengths(\n  st_intersects(\n    mpsz_var, retails))\n\nmpsz_var$`FINSERV_COUNT`= lengths(\n  st_intersects(\n    mpsz_var, finserv))\n\nmpsz_var$`ENTERTN_COUNT`= lengths(\n  st_intersects(\n    mpsz_var, entertn))\n\nmpsz_var$`FB_COUNT`= lengths(\n  st_intersects(\n    mpsz_var, fb))\n\nmpsz_var$`LR_COUNT`= lengths(\n  st_intersects(\n    mpsz_var, lr))\n\nThe finalised set of explanatory variables, mpsz_var, is obtained.\n\nglimpse(mpsz_var)\n\nRows: 313\nColumns: 14\n$ SZ_NAME        &lt;chr&gt; \"INSTITUTION HILL\", \"ROBERTSON QUAY\", \"FORT CANNING\", \"…\n$ SZ_CODE        &lt;chr&gt; \"RVSZ05\", \"SRSZ01\", \"MUSZ02\", \"MPSZ05\", \"SISZ01\", \"BMSZ…\n$ BUSSTOP_COUNT  &lt;int&gt; 2, 10, 6, 2, 1, 10, 5, 4, 21, 11, 2, 9, 6, 1, 4, 7, 24,…\n$ AGE7_12        &lt;dbl&gt; 330, 320, 0, 0, 200, 0, 0, 0, 350, 470, 0, 300, 390, 0,…\n$ AGE13_24       &lt;dbl&gt; 360, 350, 10, 0, 260, 0, 0, 0, 460, 1160, 0, 760, 890, …\n$ AGE25_64       &lt;dbl&gt; 2260, 2200, 30, 0, 1440, 0, 0, 0, 2600, 6260, 630, 4350…\n$ geometry       &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((28481.45 30..., MULTIPOLYG…\n$ SCHOOL_COUNT   &lt;int&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 1, 0, 0…\n$ BUSINESS_COUNT &lt;int&gt; 6, 4, 7, 0, 1, 11, 15, 1, 10, 1, 17, 6, 0, 0, 51, 2, 3,…\n$ RETAILS_COUNT  &lt;int&gt; 26, 207, 17, 0, 84, 14, 52, 0, 460, 34, 263, 55, 37, 1,…\n$ FINSERV_COUNT  &lt;int&gt; 3, 18, 0, 0, 29, 4, 6, 0, 34, 4, 26, 4, 3, 6, 59, 3, 8,…\n$ ENTERTN_COUNT  &lt;int&gt; 0, 6, 3, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0…\n$ FB_COUNT       &lt;int&gt; 4, 38, 4, 0, 38, 15, 5, 0, 20, 0, 9, 25, 0, 0, 9, 1, 3,…\n$ LR_COUNT       &lt;int&gt; 3, 11, 7, 0, 20, 0, 0, 0, 19, 2, 4, 4, 1, 1, 13, 0, 17,…\n\n\nThe output is saved in the rds format.\n\nwrite_rds(mpsz_var, \"data/rds/mpsz_var.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#preparing-spflow-objects",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#preparing-spflow-objects",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "To calibrate SEIMs, three spflow objects are required:\n\nspflow_network-class, an S4 class that contains all information on a spatial network which is composed by a set of nodes that are linked by some neighborhood relation.\nspflow_network_pair-class, an S4 class which holds information on origin-destination (OD) pairs. Each OD pair is composed of two nodes, each belonging to one network. All origin nodes must belong to the same origin network should be contained in one spflow_network-class, and likewise for the destinations.\nspflow_network_multi-class, an S4 class that gathers information on multiple objects of types spflow_network-class and spflow_network_pair-class. Its purpose is to ensure that the identification between the nodes that serve as origins or destinations, and the OD-pairs is consistent (similar to relational data bases).\n\nThey are imported into the R environment.\n\nmpsz_nb = read_rds(\"data/rds/mpsz_nb.rds\")\nmpsz_flow = read_rds(\"data/rds/mpsz_flow.rds\")\nmpsz_var = read_rds(\"data/rds/mpsz_var.rds\")\n\n\n\nThe spflow_network-class is an S4 class that contains all information on a spatial network which is composed by a set of nodes that are linked by some neighbourhood relation.\nIt can be created by using the spflow_network() function. For the model, the contiguity based neighbourhood structure is chosen.\n\nmpsz_net = spflow_network(\n  id_net = \"sg\",\n  node_neighborhood = \n    nb2mat(mpsz_nb$by_contiguity),\n  node_data = mpsz_var,\n  node_key_column = \"SZ_CODE\")\n\nmpsz_net\n\nSpatial network nodes with id: sg\n--------------------------------------------------\nNumber of nodes: 313\nAverage number of links per node: 6.077\nDensity of the neighborhood matrix: 1.94% (non-zero connections)\n\nData on nodes:\n                SZ_NAME SZ_CODE BUSSTOP_COUNT AGE7_12 AGE13_24 AGE25_64\n1      INSTITUTION HILL  RVSZ05             2     330      360     2260\n2        ROBERTSON QUAY  SRSZ01            10     320      350     2200\n3          FORT CANNING  MUSZ02             6       0       10       30\n4      MARINA EAST (MP)  MPSZ05             2       0        0        0\n5               SENTOSA  SISZ01             1     200      260     1440\n6        CITY TERMINALS  BMSZ17            10       0        0        0\n---                 ---     ---           ---     ---      ---      ---\n308            NEE SOON  YSSZ07            12      90      140      590\n309       UPPER THOMSON  BSSZ01            47    1590     3660    15980\n310          SHANGRI-LA  AMSZ05            12     810     1920     9650\n311          TOWNSVILLE  AMSZ04             9     980     2000    11320\n312           MARYMOUNT  BSSZ02            25    1610     4060    16860\n313 TUAS VIEW EXTENSION  TSSZ06            11       0        0        0\n    SCHOOL_COUNT BUSINESS_COUNT RETAILS_COUNT FINSERV_COUNT ENTERTN_COUNT\n1              1              6            26             3             0\n2              0              4           207            18             6\n3              0              7            17             0             3\n4              0              0             0             0             0\n5              0              1            84            29             2\n6              0             11            14             4             0\n---          ---            ---           ---           ---           ---\n308            0              0             7             0             0\n309            3             21           305            30             0\n310            3              0            53             9             0\n311            1              0            83            11             0\n312            3             19           135             8             0\n313            0             53             3             1             0\n    FB_COUNT LR_COUNT COORD_X COORD_Y\n1          4        3  103.84    1.29\n2         38       11  103.84    1.29\n3          4        7  103.85    1.29\n4          0        0  103.88    1.29\n5         38       20  103.83    1.25\n6         15        0  103.85    1.26\n---      ---      ---     ---     ---\n308        0        0  103.81     1.4\n309        5       11  103.83    1.36\n310        0        0  103.84    1.37\n311        1        1  103.85    1.36\n312        3       11  103.84    1.35\n313        0        0  103.61    1.26\n\n\n\n\n\nThe spflow_network_pair-class is an S4 class which holds information on origin-destination (OD) pairs. Each OD pair is composed of two nodes, each belonging to one network. All origin nodes must belong to the same origin network should be contained in one spflow_network-class, and likewise for the destinations.\nThe spflow_network_pair() function is used to create the OD pairs.\n\nmpsz_net_pairs = spflow_network_pair(\n  id_orig_net = \"sg\",\n  id_dest_net = \"sg\",\n  pair_data = mpsz_flow,\n  orig_key_column = \"ORIGIN_SZ\",\n  dest_key_column = \"DESTIN_SZ\")\n\nmpsz_net_pairs\n\nSpatial network pair with id: sg_sg\n--------------------------------------------------\nOrigin network id: sg (with 313 nodes)\nDestination network id: sg (with 313 nodes)\nNumber of pairs: 97969\nCompleteness of pairs: 100.00% (97969/97969)\n\nData on node-pairs:\n      DESTIN_SZ ORIGIN_SZ DISTANCE TRIPS\n1        RVSZ05    RVSZ05        0    67\n314      SRSZ01    RVSZ05   305.74   251\n627      MUSZ02    RVSZ05   951.83     0\n940      MPSZ05    RVSZ05  5254.07     0\n1253     SISZ01    RVSZ05     4975     0\n1566     BMSZ17    RVSZ05  3176.16     0\n---         ---       ---      ---   ---\n96404    YSSZ07    TSSZ06 26972.97     0\n96717    BSSZ01    TSSZ06 25582.48     0\n97030    AMSZ05    TSSZ06 26714.79     0\n97343    AMSZ04    TSSZ06 27572.74     0\n97656    BSSZ02    TSSZ06  26681.7     0\n97969    TSSZ06    TSSZ06        0   270\n\n\n\n\n\nThe spflow_network_multi-class is an S4 class that gathers information on multiple objects of types spflow_network-class and spflow_network_pair-class.\nIts purpose is to ensure that the identification between the nodes that serve as origins or destinations, and the OD-pairs is consistent (similar to relational data bases). For example, if some of the origins in the sp_network_pair-class are not identified with the nodes in the sp_network_nodes-class, an error will be raised.\nThe spflow_network_multi() function is used to create the object.\n\nStudent Note: Do not reverse the order of the two arguments in the function, i.e., the node (neighbours and variables) object comes first, then the pairs (flow) object.\n\n\nmpsz_multi_net = spflow_network_multi(mpsz_net,\n                                      mpsz_net_pairs)\n\nmpsz_multi_net\n\nCollection of spatial network nodes and pairs\n--------------------------------------------------\nContains 1 spatial network nodes  \n    With id :  sg\nContains 1 spatial network pairs  \n    With id :  sg_sg\n\nAvailability of origin-destination pair information:\n\n ID_ORIG_NET ID_DEST_NET ID_NET_PAIR COMPLETENESS     C_PAIRS  C_ORIG  C_DEST\n          sg          sg       sg_sg      100.00% 97969/97969 313/313 313/313\n\n\nThe spflow_map() function is used to plot a simple geographic representation of the largest flows.\n\nplot(mpsz$geometry)\nspflow_map(\n  mpsz_multi_net,\n  flow_var = \"TRIPS\",\n  add = TRUE, \n  legend_position = \"bottomleft\",\n  filter_lowest = .999, \n  remove_intra = TRUE,\n  cex = 1)\n\n\n\n\n\n\n\nMulticollinearity refers to a situation in which more than two explanatory variables in a multiple regression model are highly linearly related. In this situation, the coefficient estimates of the multiple regression may change erratically in response to small changes in the data or the procedure used to fit the model.\nIn order to avoid including explanatory variables that are highly correlated, spflow provides two functions:\n\npair_cor() function to create a correlation matrix, and\ncor_image() function to plot the correlation matrix as a correlogram.\n\n\ncor_formula = log(1+TRIPS) ~\n  BUSSTOP_COUNT +\n  AGE7_12 +\n  AGE13_24 +\n  AGE25_64 +\n  SCHOOL_COUNT +\n  BUSINESS_COUNT +\n  RETAILS_COUNT +\n  FINSERV_COUNT +\n  P_(log(DISTANCE + 1))\n\ncor_mat = pair_cor(mpsz_multi_net,\n                   spflow_formula = cor_formula,\n                   add_lags_x = FALSE)\n\ncolnames(cor_mat) = paste0(substr(colnames(cor_mat), 1, 3), \"...\")\n\ncor_image(cor_mat)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#model-calibration",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#model-calibration",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "The core function of the spflow package is spflow(). It provides an interface to three different estimators of spatial econometric interaction models (Dargel 2021) that allow the user to estimate origin-destination flows with spatial autocorrelation.\nThe three different estimators currently supported by spflow are:\n\nMaximum Likelihood Estimation (MLE) which is the default estimation procedure. The matrix form estimation in the framework of this model was first developed by LeSage and Pace (2008) and then improved by Dargel (2021) . Spatial two-stage least squares (S2SLS)\nSpatial Two-stage Least Squares (S2SLS) estimator is an adaptation of the one proposed by Kelejian and Prucha (1998), to the case of origin-destination flows, with up to three neighborhood matrices Dargel (2021). A similar estimation is done by Tamesue and Tsutsumi (2016). The user can activate the S2SLS estimation via the estimation_control argument using the input spflow_control(estimation_method = “s2sls”).\nBayesian Markov Chain Monte Carlo (MCMC) estimator is based on the ideas of LeSage and Pace (2009) and incorporates the improvements proposed in Dargel (2021) . The estimation is based on a tuned Metropolis-Hastings sampler for the auto-regressive parameters, and for the remaining parameters it uses Gibbs sampling. The routine uses 5500 iterations of the sampling procedure and considers the first 2500 as burn-in period. The user can activate the S2SLS estimation via the estimation_control argument using the input spflow_control(estimation_method = “mcmc”).\n\nEstimation with default settings requires two arguments: an sp_multi_network-class and a flow_formula. The flow_formula specifies the model to estimate. The function offers a formula interface adapted to spatial interaction models, which has the following structure: Y ~ O_(X1) + D_(X2) + I_(X3) + P_(X4). This structure reflects the different data sources involved in such a model. On the left hand is the independent variable Y which corresponds to the vector of flows. On the right, are all the explanatory variables. The functions O_(…) and D_(…) indicate which variables are used as characteristics of the origins and destinations respectively. Similarly, I_(…) indicates variables that should be used for the intra-regional parameters. Finally, P_(…) declares which variables describe origin-destination pairs, which most frequently will include a measure of distance.\nAll the declared variables must be available in the provided spflow_network_multi-class object, which gathers information on the origins and destinations (inside spflow_network-class objects), as well as the information on the origin-destination pairs (inside a spflow_network_pair-class object).\nUsing the short notation Y ~ . is possible and will be interpreted as usual, in the sense that we use all variables that are available for each data source. Also mixed formulas, such as Y ~ . + P_(log(X4) + 1), are possible. When the dot (.) shortcut is combined with explicit declaration, it will only be used for the non-declared data sources.\n\n\nA base model is calibrated with the following configuration:\n\nExplanatory variables used as characteristics of the origins: “BUSSTOP_COUNT” and “AGE25_64”.\nExplanatory variables used as characteristics of the destinations: “SCHOOL_COUNT”, “BUSINESS_COUNT”, “RETAILS_COUNT”, “FINSERV_COUNT”.\nExplanatory variable describing origin-destination pairs: “DISTANCE”.\n\n\nbase_model = spflow(\n  spflow_formula = log(1 + TRIPS) ~\n    O_(BUSSTOP_COUNT + AGE25_64) +\n    D_(SCHOOL_COUNT +\n         BUSINESS_COUNT +\n         RETAILS_COUNT +\n         FINSERV_COUNT) +\n    P_(log(DISTANCE + 1)),\n  spflow_networks = mpsz_multi_net)\n\nbase_model\n\n--------------------------------------------------\nSpatial interaction model estimated by: MLE  \nSpatial correlation structure: SDM (model_9)\nDependent variable: log(1 + TRIPS)\n\n--------------------------------------------------\nCoefficients:\n                          est     sd   t.stat  p.val\nrho_d                   0.680  0.004  192.554  0.000\nrho_o                   0.678  0.004  187.732  0.000\nrho_w                  -0.396  0.006  -65.592  0.000\n(Intercept)             0.410  0.065    6.267  0.000\n(Intra)                 1.313  0.081   16.262  0.000\nD_SCHOOL_COUNT          0.017  0.002    7.885  0.000\nD_SCHOOL_COUNT.lag1     0.002  0.004    0.552  0.581\nD_BUSINESS_COUNT        0.000  0.000    3.015  0.003\nD_BUSINESS_COUNT.lag1   0.000  0.000   -0.249  0.804\nD_RETAILS_COUNT         0.000  0.000   -0.306  0.759\nD_RETAILS_COUNT.lag1    0.000  0.000    0.152  0.880\nD_FINSERV_COUNT         0.002  0.000    6.787  0.000\nD_FINSERV_COUNT.lag1   -0.002  0.001   -3.767  0.000\nO_BUSSTOP_COUNT         0.002  0.000    6.807  0.000\nO_BUSSTOP_COUNT.lag1   -0.001  0.000   -2.364  0.018\nO_AGE25_64              0.000  0.000    7.336  0.000\nO_AGE25_64.lag1         0.000  0.000   -2.797  0.005\nP_log(DISTANCE + 1)    -0.050  0.007   -6.793  0.000\n\n--------------------------------------------------\nR2_corr: 0.6942947  \nObservations: 97969  \nModel coherence: Validated\n\n\n\nStudent Note:\n\nrho_o represents origin constraints.\nrho_d represents destination constraints.\nrho_w represents the intra-zonal constraints.\nD_SCHOOL_COUNT - significant; key is having schools within the zone.\nD_SCHOOL_COUNT.lag1 - not significant; the schools in the neighbouring zones do not contribute to the attractiveness of the zone.\nD_FINSERV_COUNT and D_FINSERV.lag1 - both significant; the financial services in the neighbouring zones contribute to the attractiveness of the zone.\n\n\n\nplot(base_model)\n\n\n\n\nIn building explanatory models, it is important to check if the model calibrated conforms to the statistical assumption of the statistical methods used.\nThe spflow_moran_plots() function is used to support residual diagnostics.\n\nold_par = par(mfrow = c(1,3),\n              mar = c(2,2,2,2))\n\nspflow_moran_plots(base_model)\n\n\n\npar(old_par)\n\nThe pair_cor() function is used to inspect the relationship of the residual and the explanatory variables.\n\nStudent Note: Looking at RESID.d, RESID.o, and RESID.w, no multicollinearity is observed, and their contribution to the formula/model are confirmed.\n\n\ncorr_residual = pair_cor(base_model)\ncolnames(corr_residual) = substr(colnames(corr_residual), 1, 3)\ncor_image(corr_residual)\n\n\n\n\n\nmodel.df = as_tibble(base_model@spflow_indicators) %&gt;%\n  mutate(FITTED_Y = round(exp(FITTED),0))\n\n\nmpsz_flow1 = mpsz_flow %&gt;%\n  left_join(model.df) %&gt;%\n  select(1:4,8) %&gt;%\n  mutate(diff = (FITTED_Y-TRIPS))\n\n\nplot(mpsz_flow1$diff)\n\n\n\n\n\n\n\nModel 8\n\nTo see how intra-zonal affects the model.\nR2_corr value slightly higher than base model’s.\n\n\nspflow_formula = log(1 + TRIPS) ~\n    O_(BUSSTOP_COUNT + AGE25_64) +\n    D_(SCHOOL_COUNT +\n         BUSINESS_COUNT +\n         RETAILS_COUNT +\n         FINSERV_COUNT) +\n    P_(log(DISTANCE + 1))\n\nmodel_control = spflow_control(\n  estimation_method = \"mle\",\n  model = \"model_8\")\n\nmle_model8 = spflow(\n  spflow_formula,\n  spflow_networks = mpsz_multi_net,\n  estimation_control = model_control)\n\nmle_model8\n\n--------------------------------------------------\nSpatial interaction model estimated by: MLE  \nSpatial correlation structure: SDM (model_8)\nDependent variable: log(1 + TRIPS)\n\n--------------------------------------------------\nCoefficients:\n                          est     sd    t.stat  p.val\nrho_d                   0.689  0.003   196.834  0.000\nrho_o                   0.687  0.004   192.213  0.000\nrho_w                  -0.473  0.003  -142.469  0.000\n(Intercept)             1.086  0.049    22.274  0.000\n(Intra)                 0.840  0.075    11.255  0.000\nD_SCHOOL_COUNT          0.019  0.002     8.896  0.000\nD_SCHOOL_COUNT.lag1     0.019  0.004     5.130  0.000\nD_BUSINESS_COUNT        0.000  0.000     3.328  0.001\nD_BUSINESS_COUNT.lag1   0.000  0.000     1.664  0.096\nD_RETAILS_COUNT         0.000  0.000    -0.414  0.679\nD_RETAILS_COUNT.lag1    0.000  0.000    -0.171  0.864\nD_FINSERV_COUNT         0.002  0.000     6.150  0.000\nD_FINSERV_COUNT.lag1   -0.003  0.001    -4.601  0.000\nO_BUSSTOP_COUNT         0.003  0.000     7.676  0.000\nO_BUSSTOP_COUNT.lag1    0.000  0.000     0.552  0.581\nO_AGE25_64              0.000  0.000     6.870  0.000\nO_AGE25_64.lag1         0.000  0.000    -0.462  0.644\nP_log(DISTANCE + 1)    -0.125  0.005   -22.865  0.000\n\n--------------------------------------------------\nR2_corr: 0.6965976  \nObservations: 97969  \nModel coherence: Validated\n\n\n\nold_par = par(mfrow = c(1, 3), \n               mar = c(2,2,2,2))\n\nspflow_moran_plots(mle_model8)\n\n\n\npar(old_par)\n\nModel 2\n\nmodel_control = spflow_control(\n  estimation_method = \"mle\",\n  model = \"model_2\")\n\nmle_model2 = spflow(\n  spflow_formula,\n  spflow_networks = mpsz_multi_net,\n  estimation_control = model_control)\n\nmle_model2\n\n--------------------------------------------------\nSpatial interaction model estimated by: MLE  \nSpatial correlation structure: SDM (model_2)\nDependent variable: log(1 + TRIPS)\n\n--------------------------------------------------\nCoefficients:\n                          est     sd   t.stat  p.val\nrho_d                   0.731  0.003  218.603  0.000\n(Intercept)             3.068  0.067   45.899  0.000\n(Intra)                -0.398  0.093   -4.291  0.000\nD_SCHOOL_COUNT          0.063  0.003   24.291  0.000\nD_SCHOOL_COUNT.lag1     0.054  0.005   11.802  0.000\nD_BUSINESS_COUNT        0.001  0.000    8.790  0.000\nD_BUSINESS_COUNT.lag1   0.001  0.000    3.925  0.000\nD_RETAILS_COUNT         0.000  0.000   -1.076  0.282\nD_RETAILS_COUNT.lag1    0.000  0.000    0.251  0.802\nD_FINSERV_COUNT         0.007  0.000   18.054  0.000\nD_FINSERV_COUNT.lag1   -0.009  0.001  -12.691  0.000\nO_BUSSTOP_COUNT         0.003  0.000    8.269  0.000\nO_BUSSTOP_COUNT.lag1    0.004  0.001    7.808  0.000\nO_AGE25_64              0.000  0.000    3.918  0.000\nO_AGE25_64.lag1         0.000  0.000    4.421  0.000\nP_log(DISTANCE + 1)    -0.351  0.007  -47.000  0.000\n\n--------------------------------------------------\nR2_corr: 0.5527887  \nObservations: 97969  \nModel coherence: Validated\n\n\n\nold_par = par(mfrow = c(1, 3), \n               mar = c(2,2,2,2))\n\nspflow_moran_plots(mle_model2)\n\n\n\npar(old_par)\n\n~~~ End of In-class Exercise 5 ~~~"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html",
    "title": "Take-home Exercise 1: Geospatial Analytics for Public Good",
    "section": "",
    "text": "Buses and the Mass Rapid Transit (MRT) system are the main modes of transport used by Singaporeans for their daily commutes. With an ever increasing population, the key challenge for public bus operators is balancing supply against demand by optimising its services, fleets, and manpower for different bus routes.\nHence, the identification and analysis of the movement patterns of public buses can provide insights on commuting in Singapore, allowing for the development of better urban management strategies by both the public and private sectors.\n\n\n\nThe study area is Singapore, a city-state in Southeast Asia, with a total land area of about 730 square kilometres and a total population of 5.92 million (as at June 2023).\nCommuting by public bus is the most common mode of transport in Singapore, with an average daily ridership of about 3.461 million in 2022, according to the LTA. The public bus fleet is approximately 5,800, plying more than 300 routes and 5,000 bus stops.\n\n\n\nIn this take-home exercise, I aim to answer the following analytical questions:\n\nIs the demand for public bus transport evenly distributed geographically?\nIf no, are there signs of spatial clustering?\nIf yes, where are these clusters, and what kind of clusters are they?\nBased on the analysis, what are the insights that can be derived for urban transport planning?\n\n\n\n\nHence, the objectives of this take-home exercise are to:\n\nApply Exploratory Spatial Data Analysis (ESDA) to obtain a preliminary understanding of public bus movements in Singapore; and\nApply appropriate Local Indicators of Spatial Association (LISA) Analysis or Emerging Hot Spot Analysis (EHSA) to undercover the spatial and/or spatio-temporal mobility patterns of public bus passengers in Singapore.\n\nThe detailed tasks are:\n\nGeovisualisation and Analysis:\n\nCompute passenger trips generated by origin at the hexagon level for:\n\n\n\nPeak Hour Period\nBus Tap On Time\n\n\n\n\nWeekday Morning Peak\n6am to 9am\n\n\nWeekday Afternoon Peak\n5pm to 8pm\n\n\nWeekend/Holiday Morning Peak\n11am to 2pm\n\n\nWeekend/Holiday Evening Peak\n4pm to 7pm\n\n\n\nDisplay the geographical distribution of the passenger trips using appropriate geovisualisation method.\nDescribe the spatial patterns revealed by the geovisualisation.\n\n\nEITHER:\n\nLocal Indicators of Spatial Association (LISA) Analysis:\n\nCompute LISA of the passengers trips generated by origin at the hexagon level.\nDisplay the LISA maps of the passengers trips generated by origin at the hexagon level - for those that are statistically significant.\nDraw statistical conclusions from the analysis results.\n\n\nOR:\n\nEmerging Hot Spot Analysis (EHSA) with reference to the passenger trips generated by origin at the hexagon level for the four time intervals explored in 1. above:\n\nPerform Mann-Kendall Test using the spatio-temporal local Gi* values.\nPrepare EHSA maps of the Gi* values of the passenger trips generated by origin at the hexagon level - for those that are statistically significant.\nDescribe the spatial patterns revealed with reference to the EHSA maps and data visualisation prepared.\n\n\nEither 2. or 3. is required to be completed. I have completed 2. for this take-home exercise."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#introduction",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#introduction",
    "title": "Take-home Exercise 1: Geospatial Analytics for Public Good",
    "section": "",
    "text": "Buses and the Mass Rapid Transit (MRT) system are the main modes of transport used by Singaporeans for their daily commutes. With an ever increasing population, the key challenge for public bus operators is balancing supply against demand by optimising its services, fleets, and manpower for different bus routes.\nHence, the identification and analysis of the movement patterns of public buses can provide insights on commuting in Singapore, allowing for the development of better urban management strategies by both the public and private sectors.\n\n\n\nThe study area is Singapore, a city-state in Southeast Asia, with a total land area of about 730 square kilometres and a total population of 5.92 million (as at June 2023).\nCommuting by public bus is the most common mode of transport in Singapore, with an average daily ridership of about 3.461 million in 2022, according to the LTA. The public bus fleet is approximately 5,800, plying more than 300 routes and 5,000 bus stops.\n\n\n\nIn this take-home exercise, I aim to answer the following analytical questions:\n\nIs the demand for public bus transport evenly distributed geographically?\nIf no, are there signs of spatial clustering?\nIf yes, where are these clusters, and what kind of clusters are they?\nBased on the analysis, what are the insights that can be derived for urban transport planning?\n\n\n\n\nHence, the objectives of this take-home exercise are to:\n\nApply Exploratory Spatial Data Analysis (ESDA) to obtain a preliminary understanding of public bus movements in Singapore; and\nApply appropriate Local Indicators of Spatial Association (LISA) Analysis or Emerging Hot Spot Analysis (EHSA) to undercover the spatial and/or spatio-temporal mobility patterns of public bus passengers in Singapore.\n\nThe detailed tasks are:\n\nGeovisualisation and Analysis:\n\nCompute passenger trips generated by origin at the hexagon level for:\n\n\n\nPeak Hour Period\nBus Tap On Time\n\n\n\n\nWeekday Morning Peak\n6am to 9am\n\n\nWeekday Afternoon Peak\n5pm to 8pm\n\n\nWeekend/Holiday Morning Peak\n11am to 2pm\n\n\nWeekend/Holiday Evening Peak\n4pm to 7pm\n\n\n\nDisplay the geographical distribution of the passenger trips using appropriate geovisualisation method.\nDescribe the spatial patterns revealed by the geovisualisation.\n\n\nEITHER:\n\nLocal Indicators of Spatial Association (LISA) Analysis:\n\nCompute LISA of the passengers trips generated by origin at the hexagon level.\nDisplay the LISA maps of the passengers trips generated by origin at the hexagon level - for those that are statistically significant.\nDraw statistical conclusions from the analysis results.\n\n\nOR:\n\nEmerging Hot Spot Analysis (EHSA) with reference to the passenger trips generated by origin at the hexagon level for the four time intervals explored in 1. above:\n\nPerform Mann-Kendall Test using the spatio-temporal local Gi* values.\nPrepare EHSA maps of the Gi* values of the passenger trips generated by origin at the hexagon level - for those that are statistically significant.\nDescribe the spatial patterns revealed with reference to the EHSA maps and data visualisation prepared.\n\n\nEither 2. or 3. is required to be completed. I have completed 2. for this take-home exercise."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#getting-started",
    "title": "Take-home Exercise 1: Geospatial Analytics for Public Good",
    "section": "2 Getting Started",
    "text": "2 Getting Started\n\n2.1 Setting the Analytical Tools\nThe R packages used in this take-home exercise are:\n\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data;\nsf for importing, managing, and processing geospatial data;\nsfdep for analysing spatial dependence and spatial relationships in data (building on spdep);\ntmap for thematic mapping;\nmapview for interactive viewing of spatial objects;\nplotly for making interactive plots; and\nknitr for embedding R code in different document formats (e.g., HTML) to facilitate dynamic report generation.\n\nThey are loaded into the R environment:\n\npacman::p_load(tidyverse, sf, sfdep, tmap, mapview, plotly, knitr)\n\n\n\n2.2 Data Sources\nThe Land Transport Authority (LTA) studies commuter movements using the data collected from the use of smart cards and the Global Positioning System (GPS) devices on public buses. The LTA DataMall shares some of these data publicly, which helps to speed up the development of practical solutions to enhance reliability and efficiency of the transport system by other stakeholders, such as the private sector and individuals.\nThe data sets used in this take-home exercise are:\n\nPassenger Volume by Origin Destination Bus Stops from the LTA DataMall for the period of August 2023 to October 2023. There are three aspatial data sets (one for each month) in csv format. It contains data on the number of trips by weekdays and weekends from origin to destination bus stops.\nBus Stop Location from the LTA DataMall. This is a geospatial data set in ESRI shapefile format. It contains a point representation that indicates the position of each bus stop where buses stop to pick up or drop off passengers.\n\nThe data sets are placed under two sub-folders:\n\ngeospatial (Bus Stop Location), and\naspatial (Passenger Volume by Origin Destination Bus Stops).\n\nThese two sub-folders are within the data folder of my Take-home_Ex1 folder."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#data-wrangling",
    "title": "Take-home Exercise 1: Geospatial Analytics for Public Good",
    "section": "3 Data Wrangling",
    "text": "3 Data Wrangling\n\n3.1 Preparing the Aspatial Data - Passenger Volume\n\n3.1.1 Importing and Merging Data\nThe three csv files are imported and combined into a tibble data frame, odbus, using functions from the base package as shown in the following codes:\n\nGenerate list of file names of csv files using the list.files() function in the base package.\n\n\n\nShow the code\nfilenames = list.files(path=\"data/aspatial/\", pattern=\"*.csv\")\n\nfilenames\n\n\n[1] \"origin_destination_bus_202308.csv\" \"origin_destination_bus_202309.csv\"\n[3] \"origin_destination_bus_202310.csv\"\n\n\n\nGenerate path to csv files using the file.path() function in the base package.\n\n\n\nShow the code\npath = file.path(\"data/aspatial\", filenames)\n\npath\n\n\n[1] \"data/aspatial/origin_destination_bus_202308.csv\"\n[2] \"data/aspatial/origin_destination_bus_202309.csv\"\n[3] \"data/aspatial/origin_destination_bus_202310.csv\"\n\n\n\nMerge the three csv files using the do.call() and lapply() functions in the base package and the read.csv() function from the readr package.\n\n\nodbus = do.call(\"rbind\", lapply(path, FUN=function(files){ read.csv(files)}))\n\n\nCheck using the unique() function in the base package to confirm that the data sets for each of the three months have been incorporated. [Note: Although the three data sets have been merged into a single data frame, the observations would be analysed month by month, instead of aggregating all observations.]\n\n\n\nShow the code\nunique(odbus$YEAR_MONTH)\n\n\n[1] \"2023-08\" \"2023-09\" \"2023-10\"\n\n\nOnce the combined data set has been obtained, the n_distinct() function in the dplyr package and the sum() function in the base package are applied to uncover the following observations regarding odbus:\n\nOverall, there are 17,118,005 rows (observations) and 7 columns. 5,709,512, 5,714,196, and 5,694,297 rows (observations) from August, September, and October 2023 respectively, reflecting a generally stable total ridership over the three-month period.\nThe “YEAR_MONTH” column has three unique values, reflecting the observations from August, September, and October 2023.\nThe “DAY_TYPE” column has two unique values, reflecting observations from weekday or weekends/holiday.\nThe “TIME_PER_HOUR” has 24 unique values, reflecting that the observations are broken down into each of the 24 hours of a day.\nThe “PT_TYPE” column refers only has the value of “BUS” as the public transport type. Hence, it may be dropped.\nThe “ORIGIN_PT_CODE” and “DESTINATION_PT_CODE” columns have 5,075 and 5,079 unique values respectively, reflecting the number of bus stops with bus routes passing through them.\nThe “TOTAL_TRIPS” column contains values that reflect the number of passengers for each unique month, type of day, origin bus stop, destination bus stop. The minimum value is 1, i.e., there are no rows with zero values.\n\n\nsapply(odbus, function(x) n_distinct(x))\n\n         YEAR_MONTH            DAY_TYPE       TIME_PER_HOUR             PT_TYPE \n                  3                   2                  24                   1 \n     ORIGIN_PT_CODE DESTINATION_PT_CODE         TOTAL_TRIPS \n               5075                5079                4854 \n\n\n\n\nShow the code\nsum(odbus$YEAR_MONTH == \"2023-08\")\n\n\n[1] 5709512\n\n\nShow the code\nsum(odbus$YEAR_MONTH == \"2023-09\")\n\n\n[1] 5714196\n\n\nShow the code\nsum(odbus$YEAR_MONTH == \"2023-10\")\n\n\n[1] 5694297\n\n\n\n\n3.1.2 Checking for Duplicates and Missing Values\nThe data sets from the LTA DataMall are expected to be relatively clean. Nevertheless, due diligence checks for duplicates and missing values are still made to confirm the assumptions.\nThe duplicated() function in the base package is used to check for duplicates in odbus. There are no duplicates in the tibble data frame.\n\nodbus[duplicated(odbus), ]\n\n[1] YEAR_MONTH          DAY_TYPE            TIME_PER_HOUR      \n[4] PT_TYPE             ORIGIN_PT_CODE      DESTINATION_PT_CODE\n[7] TOTAL_TRIPS        \n&lt;0 rows&gt; (or 0-length row.names)\n\n\nThe colSums() function in the base package is used to check for missing values in odbus. There are no missing values in the tibble data frame, odbus.\n\ncolSums(is.na(odbus))\n\n         YEAR_MONTH            DAY_TYPE       TIME_PER_HOUR             PT_TYPE \n                  0                   0                   0                   0 \n     ORIGIN_PT_CODE DESTINATION_PT_CODE         TOTAL_TRIPS \n                  0                   0                   0 \n\n\n\n\n3.1.3 Filtering for Peak Period Hours and Selecting Columns\nThe filter() and select() functions in the dplyr package are used to filter for the rows with the “DAY_TYPE” and “TIME_PER_HOUR” that are studied in this take-home exercise (i.e., “TIME_PER_HOUR” = 6-9am, and 5-8pm on weekdays; and 11-2pm, and 4-7pm on weekends), as well as remove the columns are that not required (i.e., “PT_TYPE” and “DESTINATION_PT_CODE”).\n\nodbus = odbus %&gt;%   \n  filter((DAY_TYPE == \"WEEKDAY\" & TIME_PER_HOUR %in% c(6, 7, 8, 9, 17, 18, 19, 20))|(DAY_TYPE == \"WEEKENDS/HOLIDAY\" & TIME_PER_HOUR %in% c(11, 12, 13, 14, 16, 17, 18, 19))) %&gt;%   \n  select(-c(PT_TYPE, DESTINATION_PT_CODE))\n\nThe output is saved in rds file format and imported into the R environment.\n\n\nShow the code\nwrite_rds(odbus, \"data/rds/bus.rds\")\nodbus = read_rds(\"data/rds/bus.rds\")\n\n\n\n\n\n3.2 Preparing the Geospatial Data - Bus Stop Location\n\n3.2.1 Importing and Transforming the Geospatial Data - Bus Stop Location\nThe Bus Stop Location shapefile is imported using st_read() in the sf package. The output is a simple feature data frame, busstop, which is in the SVY21 projected coordinates systems. It has 5,161 features and 3 fields, which include the geometry points indicating the bus stop locations.\n\nbusstop = st_read(dsn = \"data/geospatial\",\n                  layer = \"BusStop\")\n\nReading layer `BusStop' from data source \n  `C:\\jmphosis\\ISSS624\\Take-home_Ex\\Take-home_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\nglimpse(busstop)\n\nRows: 5,161\nColumns: 4\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\nThe st_crs() function in the sf package is then used to check the coordinate system of the busstop simple feature data frame. The output shows that although it is projected in SVY21, the EPSG is indicated as 9001, which is incorrect given that it should be 3414 instead.\n\nst_crs(busstop)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"WGS 84\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nTo correct the EPSG, the st_set_crs() function in the sf package is applied. A check to confirm that the projection transformation has been applied is then made using the st_crs() function again.\n\nbusstop = st_set_crs(busstop, 3414)\nst_crs(busstop)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n3.2.2 Checking for Duplicates and Missing Values\nThe data sets from the LTA DataMall are expected to be relatively clean. Nevertheless, due diligence checks for duplicates and missing values are still made to confirm the assumptions.\nThe duplicated() function in the base package and st_geometry() function in the sf package are used to check for duplicates in busstop. The output returned Bus Stop No. 96319 at row 3265. On closer inspection of the simple feature data frame, rows 3264 and 3265 are found to be duplicates. Hence, the row 3264 is removed using the row_number() function in the dplyr package. The same check is conducted again to confirm that there are no more duplicates.\n\nbusstop[duplicated(st_geometry(busstop)), ]\n\nSimple feature collection with 1 feature and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 42187.23 ymin: 34995.78 xmax: 42187.23 ymax: 34995.78\nProjected CRS: SVY21 / Singapore TM\n     BUS_STOP_N BUS_ROOF_N        LOC_DESC                  geometry\n3265      96319        NIL YUSEN LOGISTICS POINT (42187.23 34995.78)\n\n\n\nbusstop = busstop %&gt;%\n  filter(row_number() != 3264)\n\nbusstop[duplicated(st_geometry(busstop)), ]\n\nSimple feature collection with 0 features and 3 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: SVY21 / Singapore TM\n[1] BUS_STOP_N BUS_ROOF_N LOC_DESC   geometry  \n&lt;0 rows&gt; (or 0-length row.names)\n\n\nThe colSums() function in the base package is used to check for missing values in busstop. There are no missing values in the simple feature data frame, busstop for all columns except “LOC_DESC”. On closer inspection, there are several bus stops without descriptions but they are retained because they have “BUS_STOP_N” values.\n\ncolSums(is.na(busstop))\n\nBUS_STOP_N BUS_ROOF_N   LOC_DESC   geometry \n         0          0          8          0 \n\n\n\n\n3.2.3 Selecting Columns and Removing Bus Stops in Malaysia\nThe select() function in dplyr package is used to drop the “BUS_ROOF_N” column in busstop since it is not required. As there are bus stops situated in Johor Bahru, Malaysia, they are removed using the filter() function in the dplyr package.\n\nbusstop = busstop %&gt;%\n  select(-BUS_ROOF_N) %&gt;% \n  filter(LOC_DESC != \"JOHOR BAHRU CHECKPT\" & LOC_DESC != \"LARKIN TER\")\n\nThe output is saved in rds file format and imported into the R environment.\n\n\nShow the code\nwrite_rds(busstop, \"data/rds/busstop.rds\")\nbusstop = read_rds(\"data/rds/busstop.rds\")\n\n\n\n\n\n3.3 Performing Relational Join\nThe simple feature data frame, busstop, and the tibble data frame, odbus, are combined using the left_join() function in the dplyr package, by matching the “BUS_STOP_N” column in busstop with the “ORIGIN_PT_CODE” in odbus. However, as the “BUS_STOP_N” values are character values, they would need to be converted to integer values first before the join, so that values such as “01012” in busstop can be matched to values such as “1012” in odbus.\nUpon joining the two data frames, the output is the simple feature data frame (since busstop was placed as the first argument in the left_join() function), bus. The number of rows (observations), based on odbus, was reduced from 7,903,394 to 7,848,515. This is likely because some newer bus stops such as Bus Stop No. 3549 (Shenton Way Stn Exit 3) and Bus Stop No. 96461 (Bef Aviation Pk Rd) were not included in the Bus Stop Location shapefile that was last updated in July 2023. This means that the analysis in this take-home exercise is limited in this aspect.\n\nbusstop = busstop %&gt;%\n  mutate(BUS_STOP_N = as.integer(BUS_STOP_N))\n\nbus = left_join(busstop, odbus, \n                by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\"))\n\nThe output is saved in rds file format and imported into the R environment.\n\n\nShow the code\nwrite_rds(bus, \"data/rds/bus.rds\")\nbus = read_rds(\"data/rds/bus.rds\")\n\nrm(odbus, busstop)\n\n\n\n\n3.4 Creating Spatial Hexagon Grid\nSpatial grids are commonly used in spatial analysis. Regularly shaped grids may comprise of equilateral triangles, squares, or hexagons. The hexagon is the most circular-shaped polygon that can tessellate to form an evenly spaced grid, providing a low perimeter-to-area ratio that reduces sampling bias due to edge effects of the grid shape.\nA more circular polygon means that points near the border are closer to the centroid. Hexagons are often used when the analysis involves aspects of connectivity or movement paths. Locating neighbours is simpler using a hexagon grid because the contact edge or length is consistent on each side, resulting in equidistant centroids for each neighbour.\nA spatial hexagon grid, hgrid, for the study area of Singapore is created using the following codes:\n\ngeo = st_make_grid(bus, c(500, 500), what = \"polygons\", square = FALSE)\n\nhgrid = st_sf(geo) %&gt;%\n  mutate(grid_id = 1:length(lengths(geo)))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#exploratory-data-analysis---computing-visualising-and-deriving-insights-on-passenger-trips-by-origin",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#exploratory-data-analysis---computing-visualising-and-deriving-insights-on-passenger-trips-by-origin",
    "title": "Take-home Exercise 1: Geospatial Analytics for Public Good",
    "section": "4 Exploratory Data Analysis - Computing, Visualising, and Deriving Insights on Passenger Trips by Origin",
    "text": "4 Exploratory Data Analysis - Computing, Visualising, and Deriving Insights on Passenger Trips by Origin\n\n4.1 Computing Passenger Trips by Origin\nThe filter() function in the dplyr package is used to obtain subsets of the simple feature data frame, bus for each of the three months and each of the four peak periods.\n\nwdAMAug = bus %&gt;%\n  filter(YEAR_MONTH == \"2023-08\") %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 & TIME_PER_HOUR &lt;= 9)\n\n\n\nShow the code for other subsets\nwdPMAug = bus %&gt;%\n  filter(YEAR_MONTH == \"2023-08\") %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 17 & TIME_PER_HOUR &lt;= 20)\n\nweAMAug = bus %&gt;%\n  filter(YEAR_MONTH == \"2023-08\") %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 11 & TIME_PER_HOUR &lt;= 14)\n\nwePMAug = bus %&gt;%\n  filter(YEAR_MONTH == \"2023-08\") %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 16 & TIME_PER_HOUR &lt;= 19)\n\nwdAMSep = bus %&gt;%\n  filter(YEAR_MONTH == \"2023-09\") %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 & TIME_PER_HOUR &lt;= 9)\n\nwdPMSep = bus %&gt;%\n  filter(YEAR_MONTH == \"2023-09\") %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 17 & TIME_PER_HOUR &lt;= 20)\n\nweAMSep = bus %&gt;%\n  filter(YEAR_MONTH == \"2023-09\") %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 11 & TIME_PER_HOUR &lt;= 14)\n\nwePMSep = bus %&gt;%\n  filter(YEAR_MONTH == \"2023-09\") %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 16 & TIME_PER_HOUR &lt;= 19)\n\nwdAMOct = bus %&gt;%\n  filter(YEAR_MONTH == \"2023-10\") %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 6 & TIME_PER_HOUR &lt;= 9)\n\nwdPMOct = bus %&gt;%\n  filter(YEAR_MONTH == \"2023-10\") %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 17 & TIME_PER_HOUR &lt;= 20)\n\nweAMOct = bus %&gt;%\n  filter(YEAR_MONTH == \"2023-10\") %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 11 & TIME_PER_HOUR &lt;= 14)\n\nwePMOct = bus %&gt;%\n  filter(YEAR_MONTH == \"2023-10\") %&gt;%\n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 16 & TIME_PER_HOUR &lt;= 19)\n\n\nThe st_join() function in the sf package and the drop.na() function in the tidyr package are used to match the bus stops points with the hexagons in the grid. The group_by() and summarise() functions in the dplyr package are used to sum the “TOTAL_TRIPS” values (i.e., total passengers) for each hexagon in the grid.\n\nwdAMAug_ct = st_join(hgrid, wdAMAug) %&gt;%\n  drop_na() %&gt;%\n  group_by(grid_id) %&gt;%\n  summarise(TOTAL_TRIPS = sum(TOTAL_TRIPS))\n\n\n\nShow the code for other subsets\nwdPMAug_ct = st_join(hgrid, wdPMAug) %&gt;%\n  drop_na() %&gt;%\n  group_by(grid_id) %&gt;%\n  summarise(TOTAL_TRIPS = sum(TOTAL_TRIPS))\n\nweAMAug_ct = st_join(hgrid, weAMAug) %&gt;%\n  drop_na() %&gt;%\n  group_by(grid_id) %&gt;%\n  summarise(TOTAL_TRIPS = sum(TOTAL_TRIPS))\n\nwePMAug_ct = st_join(hgrid, wePMAug) %&gt;%\n  drop_na() %&gt;%\n  group_by(grid_id) %&gt;%\n  summarise(TOTAL_TRIPS = sum(TOTAL_TRIPS))\n\nwdAMSep_ct = st_join(hgrid, wdAMSep) %&gt;%\n  drop_na() %&gt;%\n  group_by(grid_id) %&gt;%\n  summarise(TOTAL_TRIPS = sum(TOTAL_TRIPS))\n\nwdPMSep_ct = st_join(hgrid, wdPMSep) %&gt;%\n  drop_na() %&gt;%\n  group_by(grid_id) %&gt;%\n  summarise(TOTAL_TRIPS = sum(TOTAL_TRIPS))\n\nweAMSep_ct = st_join(hgrid, weAMSep) %&gt;%\n  drop_na() %&gt;%\n  group_by(grid_id) %&gt;%\n  summarise(TOTAL_TRIPS = sum(TOTAL_TRIPS))\n\nwePMSep_ct = st_join(hgrid, wePMSep) %&gt;%\n  drop_na() %&gt;%\n  group_by(grid_id) %&gt;%\n  summarise(TOTAL_TRIPS = sum(TOTAL_TRIPS))\n\nwdAMOct_ct = st_join(hgrid, wdAMOct) %&gt;%\n  drop_na() %&gt;%\n  group_by(grid_id) %&gt;%\n  summarise(TOTAL_TRIPS = sum(TOTAL_TRIPS))\n\nwdPMOct_ct = st_join(hgrid, wdPMOct) %&gt;%\n  drop_na() %&gt;%\n  group_by(grid_id) %&gt;%\n  summarise(TOTAL_TRIPS = sum(TOTAL_TRIPS))\n\nweAMOct_ct = st_join(hgrid, weAMOct) %&gt;%\n  drop_na() %&gt;%\n  group_by(grid_id) %&gt;%\n  summarise(TOTAL_TRIPS = sum(TOTAL_TRIPS))\n\nwePMOct_ct = st_join(hgrid, wePMOct) %&gt;%\n  drop_na() %&gt;%\n  group_by(grid_id) %&gt;%\n  summarise(TOTAL_TRIPS = sum(TOTAL_TRIPS))\n\n\n\n\n4.2 Preliminary Visualising Passenger Trips by Origin Bus Stops\nThe various subsets can then be plotted using functions in the tmap package. For illustration purposes, three common types of inputs for the “style” argument and custom breaks are tried out below for Aug 2023 weekday morning peak period.\n\nstyle = “quantile” - the number of categories is taken from the “n” argument, which has a default value of 5.\n\n\n\nShow the code\ntmap_mode(\"plot\")\ntm_shape(wdAMAug_ct) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    style = \"quantile\",\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekday Morning Peak in Aug 2023: style = quantile\")\n\n\n\n\n\n\nstyle = “jenks” - this produces a map based on natural breaks.\n\n\n\nShow the code\ntmap_mode(\"plot\")\ntm_shape(wdAMAug_ct) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    style = \"jenks\",\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekday Morning Peak in Aug 2023: style = jenks\")\n\n\n\n\n\n\nstyle = “equal” - which produces a map with equal intervals for each category.\n\n\n\nShow the code\ntmap_mode(\"plot\")\ntm_shape(wdAMAug_ct) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    style = \"equal\",\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekday Morning Peak in Aug 2023: style = equal\")\n\n\n\n\n\n\nCustom breaks set at fixed intervals of 100,000 passengers.\n\n\n\nShow the code\nbrk = c(1, 100000, 200000, 300000, 400000, 500000, 600000)\ntmap_mode(\"plot\")\ntm_shape(wdAMAug_ct) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekday Morning Peak in Aug 2023: custom breaks\")\n\n\n\n\n\n\n\n4.3 Weekday Morning Peak (6am to 9.59am)\nThe custom breaks approach for mapping the passenger trips by origin bus stops are used for descriptive analysis.\nThe plots from the three months for the weekday morning peak period are visualised using functions from the tmap package:\n\nAug 2023Sep 2023Oct 2023\n\n\n\ntmap_mode(\"view\")\ntm_shape(wdAMAug_ct) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekday Morning Peak in Aug 2023\")\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"view\")\ntm_shape(wdAMSep_ct) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekday Morning Peak in Sep 2023\")\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"view\")\ntm_shape(wdAMOct_ct) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekday Morning Peak in Oct 2023\")\n\n\n\n\n\n\n\n\n\n\nThe passenger trips by origin bus stops for the weekday morning peak period shows that the largest numbers of passenger trips originate from bus interchanges in the heartland areas, namely:\n\nWest: Boon Lay Bus Interchange (409,412 passenger trips in Aug 2023; Grid ID: 1251) and Clementi Bus Interchange (202,467 passenger trips in Aug 2023; Grid ID: 2054).\nNorth: Woodlands Bus Interchange (313,192 passenger trips in Aug 2023; Grid ID: 2411).\nCentral: Ang Mo Kio Bus Interchange (212,340 passenger trips in Aug 2023; Grid ID: 3239).\nEast: Tampines Bus Interchange (202,366 passenger trips in Aug 2023; Grid ID: 4539).\n\nThe only non-bus interchange bus stop is the one in the north-east region at “After Punggol Road” leading to Tampines Expressway (TPE), with 207,583 passenger trips in Aug 2023. This is possibly due to the large number of commuters heading to work at Changi Airport in the east.\nThe above observation underscores the importance of bus interchanges in the weekday morning peak period as major transportation hubs for commuters to get to work. This is given that they are the first bus stop for a large number of bus routes. This provides useful information for urban planners and transport authorities in that they could examine whether the existing bus interchanges need to be expanded or improved to accommodate such high demands.\n\n\n4.4 Weekday Afternoon Peak (5pm to 8.59pm)\nThe plots from the three months for the weekday afternoon peak period are visualised using functions from the tmap package:\n\nAug 2023Sep 2023Oct 2023\n\n\n\n\nShow the code\ntmap_mode(\"view\")\ntm_shape(wdPMAug_ct) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekday Afternoon Peak in Aug 2023\")\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"view\")\ntm_shape(wdPMSep_ct) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekday Afternoon Peak in Sep 2023\")\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"view\")\ntm_shape(wdPMOct_ct) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekday Afternoon Peak in Oct 2023\")\n\n\n\n\n\n\n\n\n\n\nThe passenger trips by origin bus stops for the weekday afternoon peak period also shows that the largest numbers of passenger trips originate from bus interchanges in the heartland areas, namely:\n\nWest: Boon Lay Bus Interchange (554,436 passenger trips in Aug 2023).\nNorth: Woodlands Bus Interchange (474,311 passenger trips in Aug 2023).\nCentral: Ang Mo Kio Bus Interchange (325,858 passenger trips in Aug 2023).\nEast: Tampines Bus Interchange (446,207 passenger trips in Aug 2023).\n\nAgain, the above observation underscores the importance of bus interchanges in the weekday afternoon peak period as major transportation hubs for commuters to get home from work. This is likely because of commuters returning from work who take buses from these bus interchanges which are beside MRT stations, i.e., the different bus routes are like the spoke of a bicycle wheel, with the MRT station as the hub. This provides useful information for urban planners and transport authorities in that they could examine whether the existing bus interchanges need to be expanded or improved to accommodate such high demands.\nThe observation could also reflect that these various towns are not just heartland areas where people live but are economic hubs with offices nearby where people work. This indicates that the Government’s efforts to decentralise economic activities away may have some effect.\n\n\n4.5 Weekend/Holiday Morning Peak (11am to 2.59pm)\nThe plots from the three months for the weekend/holiday morning peak period are visualised using functions from the tmap package:\n\nAug 2023Sep 2023Oct 2023\n\n\n\n\nShow the code\ntmap_mode(\"view\")\ntm_shape(weAMAug_ct) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekend/Holiday Morning Peak in Aug 2023\")\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"view\")\ntm_shape(weAMSep_ct) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekend/Holiday Morning Peak in Sep 2023\")\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"view\")\ntm_shape(weAMOct_ct) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekend/Holiday Morning Peak in Oct 2023\")\n\n\n\n\n\n\n\n\n\n\nThe passenger trips by origin bus stops for the weekend/holiday morning peak period shows that the numbers are generally lower. The bus stops (which are interchanges) with the highest numbers of passenger trips are:\n\nWest: Boon Lay Bus Interchange (121,029 passenger trips in Sep 2023).\nNorth: Woodlands Bus Interchange (108,572 passenger trips in Sep 2023).\nEast: Bedok Bus Interchange (111,194 passenger trips in Sep 2023) and Tampines Bus Interchange (107,719 passenger trips in Sep 2023).\n\nThis shows that the bus interchanges in the north, east and west play a very important role in serving as origin hubs for commuters who may be heading to the town area (or other areas in Singapore) to enjoy their time off. This also indicates that these towns are likely to have large populations.\nThe overall lower numbers on the weekend/holiday, even during the morning peak period shows that bus deployment can be kept relatively lean. Again, this is useful information for urban planners and transport authorities to understand and plan for the needs of bus commuters.\n\n\n4.6 Weekend/Holiday Evening Peak (4pm to 7.59pm)\nThe plots from the three months for the weekend/holiday evening peak period are visualised using functions from the tmap package:\n\nAug 2023Sep 2023Oct 2023\n\n\n\n\nShow the code\ntmap_mode(\"view\")\ntm_shape(wePMAug_ct) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekend/Holiday Evening Peak in Aug 2023\")\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"view\")\ntm_shape(wePMSep_ct) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekend/Holiday Evening Peak in Sep 2023\")\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"view\")\ntm_shape(wePMOct_ct) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekend/Holiday Evening Peak in Oct 2023\")\n\n\n\n\n\n\n\n\n\n\nThe passenger trips by origin bus stops for the weekend/holiday evening peak period shows that the numbers are generally lower. The bus stops (which are interchanges) with the highest numbers of passenger trips are:\n\nWest: Boon Lay Bus Interchange (165,722 passenger trips in Sep 2023).\nNorth: Woodlands Bus Interchange (136,163 passenger trips in Sep 2023).\nCentral: Ang Mo Kio Bus Interchange (105,693 passenger trips in Aug 2023).\nEast: Bedok Bus Interchange (129,365 passenger trips in Sep 2023).and Tampines Bus Interchange (137,526 passenger trips in Aug 2023).\n\nThis shows that the various bus interchanges in the play a very important role in serving as origin hubs for commuters who may be heading to the town area (or other areas in Singapore) to enjoy their time off, or heading home after visiting another heartland area in Singapore.\nThe overall lower numbers on the weekend/holiday, even during the evening peak period shows that bus deployment can be kept relatively lean. Again, this is useful information for urban planners and transport authorities to understand and plan for the needs of bus commuters.\n\n\n4.7 Comparing Between Different Peak Periods\n\n4.7.1 Weekday Morning versus Afternoon\nThe plots from the three months for the weekday morning peak period versus weekday afternoon period are visualised using functions from the tmap package.\nThe filter() function is applied so that only the hexagons with more than 50,000 passenger trips by origin bus stops are shown.\n\nAug 2023Sep 2023Oct 2023\n\n\n\ntmap_mode(\"view\")\ntmap_arrange(tm_shape(wdAMAug_ct %&gt;% filter(TOTAL_TRIPS &gt;= 50000)) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekday Morning Peak in Aug 2023\"),\n             tm_shape(wdPMAug_ct %&gt;% filter(TOTAL_TRIPS &gt;= 50000)) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekday Afternoon Peak in Aug 2023\"),\n             ncol = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_arrange(tm_shape(wdAMSep_ct %&gt;% filter(TOTAL_TRIPS &gt;= 50000)) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekday Morning Peak in Sep 2023\"),\n             tm_shape(wdPMSep_ct %&gt;% filter(TOTAL_TRIPS &gt;= 50000)) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekday Afternoon Peak in Sep 2023\"),\n             ncol = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"view\")\ntmap_arrange(tm_shape(wdAMOct_ct %&gt;% filter(TOTAL_TRIPS &gt;= 50000)) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekday Morning Peak in Oct 2023\"),\n             tm_shape(wdPMAug_ct %&gt;% filter(TOTAL_TRIPS &gt;= 50000)) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekday Afternoon Peak in Oct 2023\"),\n             ncol = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe key difference between the weekday morning versus afternoon peak period is that the latter has busy bus stops in the central region, such as Bras Besah, Bugis, Tanjong Pagar.\nAnother important difference is that the key bus interchanges highlighted previously for weekday morning and afternoon peak periods generally face higher volumes in the afternoon than morning. This could mean that more commuters head home in that 4-hour afternoon peak period as compared to the morning peak period. This could mean that the morning peak hour commuter crowd is more spread out (i.e., beyond the 4-hour period), possibly due to more flexible work arrangements (e.g., telecommuting from home in the morning and heading into office after the morning peak period).\n\n\n4.7.2 Weekend/Holiday Morning versus Evening\nThe plots from the three months for the weekend/holiday morning peak period versus weekend/holiday evening period are visualised using functions from the tmap package:\n\nAug 2023Sep 2023Oct 2023\n\n\n\n\nShow the code\ntmap_mode(\"view\")\ntmap_arrange(tm_shape(weAMAug_ct %&gt;% filter(TOTAL_TRIPS &gt;= 50000)) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekend/Holiday Morning Peak in Aug 2023\"),\n             tm_shape(wePMAug_ct %&gt;% filter(TOTAL_TRIPS &gt;= 50000)) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekend/Holiday Evening Peak in Aug 2023\"),\n             ncol = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"view\")\ntmap_arrange(tm_shape(weAMSep_ct %&gt;% filter(TOTAL_TRIPS &gt;= 50000)) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekend/Holiday Morning Peak in Sep 2023\"),\n             tm_shape(wePMSep_ct %&gt;% filter(TOTAL_TRIPS &gt;= 50000)) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekend/Holiday Evening Peak in Sep 2023\"),\n             ncol = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"view\")\ntmap_arrange(tm_shape(weAMOct_ct %&gt;% filter(TOTAL_TRIPS &gt;= 50000)) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekend/Holiday Morning Peak in Oct 2023\"),\n             tm_shape(wePMOct_ct %&gt;% filter(TOTAL_TRIPS &gt;= 50000)) +\n  tm_fill(col = \"TOTAL_TRIPS\",\n    palette = \"Reds\",\n    breaks = brk,\n    title = \"No. of Passenger Trips\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"No. of Passenger Trips: \" = \"TOTAL_TRIPS\"),\n    popup.format = list(TOTAL_TRIPS = list(format = \"f\", digits = 0))) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"Weekend/Holiday Evening Peak in Oct 2023\"),\n             ncol = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe key difference between the weekend/holiday morning versus evening peak period is that the latter has busy bus stops in the central region, such as at Orchard and Chinatown, as well as the north-east region, such as Punggol and Sengkang.\nSimilarly, another important difference is that the key bus interchanges highlighted previously for weekend morning and evening peak periods generally face higher volumes in the evening than morning. This could mean that more commuters head home in that 4-hour evening peak period as compared to the morning peak period. This could mean that the morning peak hour commuter crowd is more spread out (i.e., beyond the 4-hour period)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#local-indicators-of-spatial-association-lisa-analysis",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#local-indicators-of-spatial-association-lisa-analysis",
    "title": "Take-home Exercise 1: Geospatial Analytics for Public Good",
    "section": "5 Local Indicators of Spatial Association (LISA) Analysis",
    "text": "5 Local Indicators of Spatial Association (LISA) Analysis\nLocal Indicators of Spatial Association (LISA) are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable. The appropriate LISA, including local Moran’s I, are applied to detect cluster(s) and/or outlier(s) for the Bus Passenger Trips in the bus simple feature data frame, month by month.\n\n5.1 Computing Distance-based Weights\nDistance-based weights are used in this take-home exercise. Distance-based weights are more appropriate than contiguity spatial weights in this context given that the hexagons are spread out across Singapore, and some hexagons may not have immediate neighbours (i.e., contiguous) due to reasons such as being separated by reservoirs or waterways.\nThere are three popularly used distance-based spatial weights, they are: fixed distance weights, adaptive distance weights, and inverse distance weights (IDW). For this take-home exercise, a combination of IDW and adaptive distance weights are used. IDW assigns higher weights to neighbours that are closer and lower weights to neighbours that are further away, while adaptive distance weights balances out the number of neighbours for each hexagon regardless of how densely populated its surrounding areas is (i.e., density of nearby bus stops).\n\nThe st_knn() function in the sfdep package is used to identify neighbors based on k (i.e. k = 8 indicates the nearest eight neighbours). The output is a list of neighbours (i.e. nb).\nThe st_inverse_distance() function in the sfdep package is then used to calculate inverse distance weights of neighbours in the nb.\n\n\nwdAMAug_wt = wdAMAug_ct %&gt;% \n  mutate(nb = st_knn(geo,\n                     k=8),\n         wt = st_inverse_distance(nb, \n                                   geo, \n                                   scale = 1, \n                                   alpha = 1), \n         .before = 1)\n\n\n\nShow the code for other subsets\nwdPMAug_wt = wdPMAug_ct %&gt;% \n  mutate(nb = st_knn(geo,\n                     k=8),\n         wt = st_inverse_distance(nb, \n                                   geo, \n                                   scale = 1, \n                                   alpha = 1), \n         .before = 1)\n\nweAMAug_wt = weAMAug_ct %&gt;% \n  mutate(nb = st_knn(geo,\n                     k=8),\n         wt = st_inverse_distance(nb, \n                                   geo, \n                                   scale = 1, \n                                   alpha = 1), \n         .before = 1)\n\nwePMAug_wt = wePMAug_ct %&gt;% \n  mutate(nb = st_knn(geo,\n                     k=8),\n         wt = st_inverse_distance(nb, \n                                   geo, \n                                   scale = 1, \n                                   alpha = 1), \n         .before = 1)\n\nwdAMSep_wt = wdAMSep_ct %&gt;% \n  mutate(nb = st_knn(geo,\n                     k=8),\n         wt = st_inverse_distance(nb, \n                                   geo, \n                                   scale = 1, \n                                   alpha = 1), \n         .before = 1)\n\nwdPMSep_wt = wdPMSep_ct %&gt;% \n  mutate(nb = st_knn(geo,\n                     k=8),\n         wt = st_inverse_distance(nb, \n                                   geo, \n                                   scale = 1, \n                                   alpha = 1), \n         .before = 1)\n\nweAMSep_wt = weAMSep_ct %&gt;% \n  mutate(nb = st_knn(geo,\n                     k=8),\n         wt = st_inverse_distance(nb, \n                                   geo, \n                                   scale = 1, \n                                   alpha = 1), \n         .before = 1)\n\nwePMSep_wt = wePMSep_ct %&gt;% \n  mutate(nb = st_knn(geo,\n                     k=8),\n         wt = st_inverse_distance(nb, \n                                   geo, \n                                   scale = 1, \n                                   alpha = 1), \n         .before = 1)\n\nwdAMOct_wt = wdAMOct_ct %&gt;% \n  mutate(nb = st_knn(geo,\n                     k=8),\n         wt = st_inverse_distance(nb, \n                                   geo, \n                                   scale = 1, \n                                   alpha = 1), \n         .before = 1)\n\nwdPMOct_wt = wdPMOct_ct %&gt;% \n  mutate(nb = st_knn(geo,\n                     k=8),\n         wt = st_inverse_distance(nb, \n                                   geo, \n                                   scale = 1, \n                                   alpha = 1), \n         .before = 1)\n\nweAMOct_wt = weAMOct_ct %&gt;% \n  mutate(nb = st_knn(geo,\n                     k=8),\n         wt = st_inverse_distance(nb, \n                                   geo, \n                                   scale = 1, \n                                   alpha = 1), \n         .before = 1)\n\nwePMOct_wt = wePMOct_ct %&gt;% \n  mutate(nb = st_knn(geo,\n                     k=8),\n         wt = st_inverse_distance(nb, \n                                   geo, \n                                   scale = 1, \n                                   alpha = 1), \n         .before = 1)\n\n\n\n\n5.2 Computing Local Indicators of Spatial Association (LISA) of Passenger Trips by Origin\nThe local_moran() function in the sfdep package is used to compute the local Moran’s I value of “TOTAL_TRIPS” at the hexagon level. The output is a tibble data frame, lisa.\n\nThe output is a simple feature data frame containing the columns ii, eii, var_ii, z_ii, p_ii, p_ii_sim, and p_folded_sim.\n\nii: Local moran statistic.\neii: Expectation of local moran statistic; for local_moran_perm(), the permutation sample means.\nvar_ii: Variance of local moran statistic; for local_moran_perm(), the permutation sample standard deviations.\nz_ii: Standard deviation of local moran statistic; for local_moran_perm(), based on permutation of sample means and standard deviations\np_ii: p-value of local moran statistic using pnorm(); for local_moran_perm(), using standard deviation based on permutation of sample means and standard deviations\np_ii_sim: For local_moran_perm(), rank() and punif() of observed statistic rank for [0, 1] p-values using “alternative=”\np_folded_sim: The simulation folded [0, 0.5] range ranked p-value.\nskewness: For local_moran_perm(), the output of e1071::skewness() for the permutation samples underlying the standard deviates\nkurtosis: For local_moran_perm(), the output of e1071::kurtosis() for the permutation samples underlying the standard deviates.\n\nThe unnest() function in the tidyr package is used to expand a list-column containing data frames into rows and columns.\nIn terms of interpretation:\n\nA positive local Moran’s I value indicates a hexagon close to similar values (High-High or Low-Low);\nA negative value indicates a hexagon close to dissimilar values (High-Low or Low-High); and\nA value near zero suggests no significant local spatial autocorrelation.\n\n\n\nwdAMAug_lisa = wdAMAug_wt %&gt;%\n  mutate(local_moran = local_moran(TOTAL_TRIPS, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\n\n\nShow the code for other subsets\nwdAMSep_lisa = wdAMSep_wt %&gt;%\n  mutate(local_moran = local_moran(\n    TOTAL_TRIPS, nb, wt, nsim = 99),\n    .before = 1) %&gt;%\n  unnest(local_moran)\n\nwdAMOct_lisa = wdAMOct_wt %&gt;%\n  mutate(local_moran = local_moran(\n    TOTAL_TRIPS, nb, wt, nsim = 99),\n    .before = 1) %&gt;%\n  unnest(local_moran)\n\nwdPMAug_lisa = wdPMAug_wt %&gt;%\n  mutate(local_moran = local_moran(\n    TOTAL_TRIPS, nb, wt, nsim = 99),\n    .before = 1) %&gt;%\n  unnest(local_moran)\n\nwdPMSep_lisa = wdPMSep_wt %&gt;%\n  mutate(local_moran = local_moran(\n    TOTAL_TRIPS, nb, wt, nsim = 99),\n    .before = 1) %&gt;%\n  unnest(local_moran)\n\nwdPMOct_lisa = wdPMOct_wt %&gt;%\n  mutate(local_moran = local_moran(\n    TOTAL_TRIPS, nb, wt, nsim = 99),\n    .before = 1) %&gt;%\n  unnest(local_moran)\n\nweAMAug_lisa = weAMAug_wt %&gt;%\n  mutate(local_moran = local_moran(\n    TOTAL_TRIPS, nb, wt, nsim = 99),\n    .before = 1) %&gt;%\n  unnest(local_moran)\n\nweAMSep_lisa = weAMSep_wt %&gt;%\n  mutate(local_moran = local_moran(\n    TOTAL_TRIPS, nb, wt, nsim = 99),\n    .before = 1) %&gt;%\n  unnest(local_moran)\n\nweAMOct_lisa = weAMOct_wt %&gt;%\n  mutate(local_moran = local_moran(\n    TOTAL_TRIPS, nb, wt, nsim = 99),\n    .before = 1) %&gt;%\n  unnest(local_moran)\n\nwePMAug_lisa = wePMAug_wt %&gt;%\n  mutate(local_moran = local_moran(\n    TOTAL_TRIPS, nb, wt, nsim = 99),\n    .before = 1) %&gt;%\n  unnest(local_moran)\n\nwePMSep_lisa = wePMSep_wt %&gt;%\n  mutate(local_moran = local_moran(\n    TOTAL_TRIPS, nb, wt, nsim = 99),\n    .before = 1) %&gt;%\n  unnest(local_moran)\n\nwePMOct_lisa = wePMOct_wt %&gt;%\n  mutate(local_moran = local_moran(\n    TOTAL_TRIPS, nb, wt, nsim = 99),\n    .before = 1) %&gt;%\n  unnest(local_moran)\n\n\n\n\n5.3 Creating Local Indicators of Spatial Association (LISA) Maps of Passenger Trips by Origin\nThe LISA map is a categorical map showing outliers and clusters. There are two types of outliers namely: High-Low and Low-High outliers. Likewise, there are two type of clusters namely: High-High and Low-Low clusters. The LISA map is an interpreted map combining local Moran’s I of geographical areas and their respective p-values.\n\nwdAMAug_lisasig = wdAMAug_lisa  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\n\nwdAMAug_lisamap = tm_shape(wdAMAug_lisasig) +\n  tm_fill(col = \"mean\",\n    title = \"Cluster/Outlier\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"Cluster/Outlier: \" = \"mean\")) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"LISA Map of Weekday Morning Peak in Aug 2023\")\n\n\n\nShow the code for other subsets\nwdAMSep_lisasig = wdAMSep_lisa  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\n\nwdAMSep_lisamap = tm_shape(wdAMSep_lisasig) +\n  tm_fill(col = \"mean\",\n    title = \"Cluster/Outlier\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"Cluster/Outlier: \" = \"mean\")) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"LISA Map of Weekday Morning Peak in Sep 2023\")\n\nwdAMOct_lisasig = wdAMOct_lisa  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\n\nwdAMOct_lisamap = tm_shape(wdAMOct_lisasig) +\n  tm_fill(col = \"mean\",\n    title = \"Cluster/Outlier\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"Cluster/Outlier: \" = \"mean\")) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"LISA Map of Weekday Morning Peak in Oct 2023\")\n\n\nwdPMAug_lisasig = wdPMAug_lisa  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\n\nwdPMAug_lisamap = tm_shape(wdPMAug_lisasig) +\n  tm_fill(col = \"mean\",\n    title = \"Cluster/Outlier\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"Cluster/Outlier: \" = \"mean\")) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"LISA Map of Weekday Afternoon Peak in Aug 2023\")\n\nwdPMSep_lisasig = wdPMSep_lisa  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\n\nwdPMSep_lisamap = tm_shape(wdPMSep_lisasig) +\n  tm_fill(col = \"mean\",\n    title = \"Cluster/Outlier\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"Cluster/Outlier: \" = \"mean\")) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"LISA Map of Weekday Afternoon Peak in Sep 2023\")\n\nwdPMOct_lisasig = wdPMOct_lisa  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\n\nwdPMOct_lisamap = tm_shape(wdPMOct_lisasig) +\n  tm_fill(col = \"mean\",\n    title = \"Cluster/Outlier\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"Cluster/Outlier: \" = \"mean\")) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"LISA Map of Weekday Afternoon Peak in Oct 2023\")\n\nweAMAug_lisasig = weAMAug_lisa  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\n\nweAMAug_lisamap = tm_shape(weAMAug_lisasig) +\n  tm_fill(col = \"mean\",\n    title = \"Cluster/Outlier\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"Cluster/Outlier: \" = \"mean\")) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"LISA Map of Weekend/Holiday Morning Peak in Aug 2023\")\n\nweAMSep_lisasig = weAMSep_lisa  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\n\nweAMSep_lisamap = tm_shape(weAMSep_lisasig) +\n  tm_fill(col = \"mean\",\n    title = \"Cluster/Outlier\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"Cluster/Outlier: \" = \"mean\")) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"LISA Map of Weekend/Holiday Morning Peak in Sep 2023\")\n\nweAMOct_lisasig = weAMOct_lisa  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\n\nweAMOct_lisamap = tm_shape(weAMOct_lisasig) +\n  tm_fill(col = \"mean\",\n    title = \"Cluster/Outlier\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"Cluster/Outlier: \" = \"mean\")) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"LISA Map of Weekend/Holiday Morning Peak in Oct 2023\")\n\nwePMAug_lisasig = wePMAug_lisa  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\n\nwePMAug_lisamap = tm_shape(wePMAug_lisasig) +\n  tm_fill(col = \"mean\",\n    title = \"Cluster/Outlier\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"Cluster/Outlier: \" = \"mean\")) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"LISA Map of Weekend/Holiday Evening Peak in Aug 2023\")\n\nwePMSep_lisasig = wePMSep_lisa  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\n\nwePMSep_lisamap = tm_shape(wePMSep_lisasig) +\n  tm_fill(col = \"mean\",\n    title = \"Cluster/Outlier\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"Cluster/Outlier: \" = \"mean\")) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"LISA Map of Weekend/Holiday Evening Peak in Sep 2023\")\n\nwePMOct_lisasig = wePMOct_lisa  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\n\nwePMOct_lisamap = tm_shape(wePMOct_lisasig) +\n  tm_fill(col = \"mean\",\n    title = \"Cluster/Outlier\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.5,\n    popup.vars = c(\"Cluster/Outlier: \" = \"mean\")) +\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(title = \"LISA Map of Weekend/Holiday Evening Peak in Oct 2023\")\n\n\n\n\n5.4 Weekday Morning Peak (6am to 9.59am)\nThe LISA plots from the three months for the weekday morning peak period are visualised using functions from the tmap package:\n\nAug 2023Sep 2023Oct 2023\n\n\n\n\nShow the code for other subsets\ntmap_mode(\"view\")\nwdAMAug_lisamap\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"view\")\nwdAMSep_lisamap\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"view\")\nwdAMOct_lisamap\n\n\n\n\n\n\n\n\n\n\nThere are hexagons with statistically significant high-high values surrounding the hexagons highlighted previously for the weekday morning peak period - bus interchanges in Boon Lay, Clementi, Woodlands, Ang Mo Kio, and Tampines, as well as the “After Punggol Road” bus stop leading to the TPE. The hexagons with the bus interchanges themselves are not shown to be statistically significant but their surrounding hexagons are found to have high-high values (i.e., they also have high numbers of passenger trips) or low-high values (i.e., they have low numbers of passenger trips and are outliers).\nThe presence of the hexagons with high-high values highlights the congestion areas in these various towns and provides useful information for urban planners and transport authorities in that they could examine whether the bus stops around these bus interchanges need to be expanded or improved to accommodate such high demands.\nSeparately, the hexagons with statistically significant low-low values in the west and north regions reflect that these areas are unlikely to have congestion problems. This is because they are industrial areas and not housing estates.\n\n\n5.5 Weekday Afternoon Peak (5pm to 8.59pm)\nThe LISA plots from the three months for the weekday afternoon peak period are visualised using functions from the tmap package:\n\nAug 2023Sep 2023Oct 2023\n\n\n\n\nShow the code\ntmap_mode(\"view\")\nwdPMAug_lisamap\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"view\")\nwdPMSep_lisamap\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"view\")\nwdPMOct_lisamap\n\n\n\n\n\n\n\n\n\n\nThere are few hexagons with statistically significant high-high values for the weekday afternoon peak period even though several bus interchanges were highlighted to have high numbers of passenger trips. This meant that the congestion issue is not severe in the weekday afternoon peak period.\nThe hexagons with statistically significant low-low values reflect that the industrial areas in the west and north regions do not face congestion problems in the weekday afternoon peak period.\n\n\n5.6 Weekend/Holiday Morning Peak (11am to 2.59pm)\nThe LISA plots from the three months for the weekend/holiday morning peak period are visualised using functions from the tmap package:\n\nAug 2023Sep 2023Oct 2023\n\n\n\n\nShow the code\ntmap_mode(\"view\")\nweAMAug_lisamap\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"view\")\nweAMSep_lisamap\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"view\")\nweAMOct_lisamap\n\n\n\n\n\n\n\n\n\n\nThere are hexagons with statistically significant high-high values surrounding the hexagons highlighted previously for the weekend/holiday morning peak period - bus interchanges in Woodlands, Bedok, and Tampines. Interestingly, they are also surrounded by some hexagons with low-high values (i.e., they have low numbers of passenger trips and are outliers).\nOn the other hand, the Boon Lay bus interchange is surrounded by hexagons with statistically significant low-high values, showing that they have low numbers of passenger trips and are outliers. This could also mean that there are no other bus stops in the area that is sharing the load of passenger trips with the bus interchange.\nOverall, the presence of the hexagons with high-high values and low-high values highlights the congested and non-congested areas in these various towns and provides useful information for urban planners and transport authorities in that they could examine whether the bus stops around these bus interchanges need to be expanded or improved to accommodate such high demands, and divert human traffic away from the bus interchanges during the weekend/holiday morning peak period.\nSeparately, the hexagons with statistically significant low-low values in the west, north, and east regions reflect that these areas are unlikely to have congestion problems during the weekend/holiday morning peak period. This is because they are industrial areas and not housing estates.\n\n\n5.7 Weekend/Holiday Evening Peak (4pm to 7.59pm)\nThe LISA plots from the three months for the weekend/holiday evening peak period are visualised using functions from the tmap package:\n\nAug 2023Sep 2023Oct 2023\n\n\n\n\nShow the code\ntmap_mode(\"view\")\nwePMAug_lisamap\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"view\")\nwePMSep_lisamap\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"view\")\nwePMOct_lisamap\n\n\n\n\n\n\n\n\n\n\nThere are hexagons with statistically significant high-high values in the central region at Bras Basah, Bugis, and Toa Payon for the weekend/holiday evening peak period. This highlights the areas that urban planners and transport authorities can focus on in terms of deploying sufficient buses during the peak period to reduce congestion.\nThe bus interchanges (Boon Lay, Woodlands, Ang Mo Kio, Bedok, and Tampines) that were highlighted previously for the weekend/holiday evening peak period are mostly surrounded by hexagons with statistically significant low-high values, showing that they have low numbers of passenger trips and are outliers. This could also mean that there are no other bus stops in the area that is sharing the load of passenger trips with the bus interchanges.\nSeparately, the hexagons with statistically significant low-low values in the west, and north regions reflect that these areas are unlikely to have congestion problems during the weekend/holiday evening peak period. This is because they are industrial areas and not housing estates."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#conclusion",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#conclusion",
    "title": "Take-home Exercise 1: Geospatial Analytics for Public Good",
    "section": "6 Conclusion",
    "text": "6 Conclusion\nThe take-home exercise has highlighted the bus commuting patterns of Singapore commuters for the four different peak periods, based on number of passenger trips from the origin bus stops. Overall, the LISA maps have highlighted the key problem areas for urban planners and transport authorities to focus their attention on. The analyses in this take-home exercise is limited in that it does not analyse MRT commuter patterns (which is another major public transport mode) alongside bus commuter patterns given that commuters often take a combination of these two transport modes in a single journey. Hence, some of the observations made throughout the take-home exercise cannot be ascertained more accurately and the statistically significant clusters highlighted should be further studied.\n~~~ End of Take-home Exercise 1 ~~~"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/data/geospatial/entertn.html",
    "href": "Take-home_Ex/Take-home_Ex2/data/geospatial/entertn.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/data/geospatial/FinServ.html",
    "href": "Take-home_Ex/Take-home_Ex2/data/geospatial/FinServ.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/data/geospatial/MPSZ-2019.html",
    "href": "Take-home_Ex/Take-home_Ex2/data/geospatial/MPSZ-2019.html",
    "title": "ISSS624",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2(backup).html",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2(backup).html",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models: A Case Study of Singapore Public Bus Commuter Flows",
    "section": "",
    "text": "Buses and the Mass Rapid Transit (MRT) system are the main modes of transport used by Singaporeans for their daily commutes. With an ever increasing population, the key challenge for public bus operators is balancing supply against demand by optimising its services, fleets, and manpower for different bus routes.\nHence, the identification and analysis of the movement patterns of public buses can provide insights on commuting in Singapore, allowing for the development of better urban management strategies by both the public and private sectors.\n\n\n\nThe study area is Singapore, a city-state in Southeast Asia, with a total land area of about 730 square kilometres and a total population of 5.92 million (as at June 2023).\nCommuting by public bus is the most common mode of transport in Singapore, with an average daily ridership of about 3.461 million in 2022, according to the LTA. The public bus fleet is approximately 5,800, plying more than 300 routes and 5,000 bus stops.\n\n\n\nIn this take-home exercise, I aim to answer the following analytical questions:\n\nIs the flow of public bus commuters evenly distributed geographically (between different origins and destinations)?\nWhich type of spatial interaction models is best suited for modelling public bus commuter flows?\nWhat factors affect the public bus commuter flows?\nBased on the analysis, what are the insights that can be derived for urban transport planning?\n\n\n\n\nHence, the objectives of this take-home exercise are to:\n\nConduct practice research on public bus commuter flows to show how disparate publicly available data can be integrated, analysed, and modelled to support policy making; and\nApply techniques in geospatial data science and analysis (GDSA) and demonstrate the potential value of GDSA in integrating publicly available data from multiple sources for building spatial interaction models to determine the factors affecting urban mobility patterns of public bus commuters.\n\nThe detailed tasks are:\n\nGeospatial Data Science:\n\nDerive an analytical hexagon data of 375m (i.e., perpendicular distance between the centre of the hexagon and its edges) to represent the traffic analysis zone (TAZ).\nConstruct an origin-destination (O-D) matrix of commuter flows aggregated at the analytics hexagon level for one of the following time intervals by integrating Passenger Volume by Origin Destination Bus Stops and Bus Stop Location from the LTA DataMall:\n\n\n\nPeak Hour Period\nBus Tap On Time\n\n\n\n\nWeekday Morning Peak\n6am to 9am\n\n\nWeekday Afternoon Peak\n5pm to 8pm\n\n\nWeekend/Holiday Morning Peak\n11am to 2pm\n\n\nWeekend/Holiday Evening Peak\n4pm to 7pm\n\n\n\nNote: The selected peak hour period for this take-home exercise is the Weekday Morning Peak.\nDisplay the O-D flows of the passenger trips using the appropriate geovisualisation methods.\nDescribe the spatial patterns revealed by the geovisualisation.\nAssemble at least three propulsive and three attractiveness variables using the aspatial and geospatial data from publicly available sources.\nCompute a distance matrix using the analytical hexagon data derived.\n\nSpatial Interaction Modelling (SIM):\n\nCalibrate spatial interactive models to determine factors affecting urban commuting flows during the selected time interval.\nPresent the modelling results using the appropriate geovisualisation and graphical visualisation methods.\nDescribe the modelling results based on the spatial interaction model output tables, maps, and data visualisations prepared."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2(backup).html#introduction",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2(backup).html#introduction",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models: A Case Study of Singapore Public Bus Commuter Flows",
    "section": "",
    "text": "Buses and the Mass Rapid Transit (MRT) system are the main modes of transport used by Singaporeans for their daily commutes. With an ever increasing population, the key challenge for public bus operators is balancing supply against demand by optimising its services, fleets, and manpower for different bus routes.\nHence, the identification and analysis of the movement patterns of public buses can provide insights on commuting in Singapore, allowing for the development of better urban management strategies by both the public and private sectors.\n\n\n\nThe study area is Singapore, a city-state in Southeast Asia, with a total land area of about 730 square kilometres and a total population of 5.92 million (as at June 2023).\nCommuting by public bus is the most common mode of transport in Singapore, with an average daily ridership of about 3.461 million in 2022, according to the LTA. The public bus fleet is approximately 5,800, plying more than 300 routes and 5,000 bus stops.\n\n\n\nIn this take-home exercise, I aim to answer the following analytical questions:\n\nIs the flow of public bus commuters evenly distributed geographically (between different origins and destinations)?\nWhich type of spatial interaction models is best suited for modelling public bus commuter flows?\nWhat factors affect the public bus commuter flows?\nBased on the analysis, what are the insights that can be derived for urban transport planning?\n\n\n\n\nHence, the objectives of this take-home exercise are to:\n\nConduct practice research on public bus commuter flows to show how disparate publicly available data can be integrated, analysed, and modelled to support policy making; and\nApply techniques in geospatial data science and analysis (GDSA) and demonstrate the potential value of GDSA in integrating publicly available data from multiple sources for building spatial interaction models to determine the factors affecting urban mobility patterns of public bus commuters.\n\nThe detailed tasks are:\n\nGeospatial Data Science:\n\nDerive an analytical hexagon data of 375m (i.e., perpendicular distance between the centre of the hexagon and its edges) to represent the traffic analysis zone (TAZ).\nConstruct an origin-destination (O-D) matrix of commuter flows aggregated at the analytics hexagon level for one of the following time intervals by integrating Passenger Volume by Origin Destination Bus Stops and Bus Stop Location from the LTA DataMall:\n\n\n\nPeak Hour Period\nBus Tap On Time\n\n\n\n\nWeekday Morning Peak\n6am to 9am\n\n\nWeekday Afternoon Peak\n5pm to 8pm\n\n\nWeekend/Holiday Morning Peak\n11am to 2pm\n\n\nWeekend/Holiday Evening Peak\n4pm to 7pm\n\n\n\nNote: The selected peak hour period for this take-home exercise is the Weekday Morning Peak.\nDisplay the O-D flows of the passenger trips using the appropriate geovisualisation methods.\nDescribe the spatial patterns revealed by the geovisualisation.\nAssemble at least three propulsive and three attractiveness variables using the aspatial and geospatial data from publicly available sources.\nCompute a distance matrix using the analytical hexagon data derived.\n\nSpatial Interaction Modelling (SIM):\n\nCalibrate spatial interactive models to determine factors affecting urban commuting flows during the selected time interval.\nPresent the modelling results using the appropriate geovisualisation and graphical visualisation methods.\nDescribe the modelling results based on the spatial interaction model output tables, maps, and data visualisations prepared."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2(backup).html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2(backup).html#getting-started",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models: A Case Study of Singapore Public Bus Commuter Flows",
    "section": "2 Getting Started",
    "text": "2 Getting Started\n\n2.1 Setting the Analytical Tools\nThe R packages used in this hands-on exercise are:\n\nsf for importing, managing, and processing geospatial data;\nsp for handling spatial data in computationally efficient ways;\ntidyverse (i.e. readr, tidyr, dplyr) for performing data science tasks such as importing, tidying, and wrangling data;\nfuture.apply for applying functions to elements in parallel;\nrvest for handling information from web pages;\nhttr for making HTTP requests;\ntmap for thematic mapping;\nreshape2 for handling matrix format;\nDT a wrapper of the JavaScript Library ‘DataTables’ for creating interactive and dynamic data tables;\nstplanr for working with spatial data related to transportation and urban planning;\nperformance for the assessment of regression models performance; and\nggpubr for creating customised and annotated ggplot2 plots for better visualisation.\n\nThey are loaded into the R environment:\n\npacman::p_load(sf, sp, tidyverse, future.apply, \n               rvest, httr, tmap, \n               reshape2, stplanr,\n               performance, ggpubr)\n\n\n\n2.2 Data Sources\nThe Land Transport Authority (LTA) studies commuter movements using the data collected from the use of smart cards and the Global Positioning System (GPS) devices on public buses. The LTA DataMall shares some of these data publicly, which helps to speed up the development of practical solutions to enhance reliability and efficiency of the transport system by other stakeholders, such as the private sector and individuals.\nThe data sets used in this take-home exercise are:\nOpen Government Data\n\nPassenger Volume by Origin Destination Bus Stops from the LTA DataMall for August 2023 in csv format. It contains data on the number of trips by weekdays and weekends from origin to destination bus stops.\nBus Stop Location from the LTA DataMall that was last updated in July 2023. This is a geospatial data set in ESRI shapefile format. It contains point representations that indicate the position of each bus stop where buses stop to pick up or drop off passengers.\nMRT/LRT Station Exits Location by the LTA from Data.gov.sg that was last updated in July 2019. This is a geospatial data set in GEOJSON format. It contains point representations that indicate the position of each MRT/LRT exit.\nHDB Property Information by the Housing Development Board from Data.gov.sg that was last updated in October 2023. The data set is in csv format and has been geocoded with the longitude and latitude of the addresses.\nSchool Directory and Information by the Ministry of Education that was last updated in March 2021. The data set is in csv format and contains the list of school names.\nMaster Plan 2019 Subzone Boundary by the Urban Redevelopment Authority (URA) from Data.gov.sg. This is a geospatial data set in ESRI shapefile format. It contains polygon representations that outline the URA’s planning subzones.\n\nSpecially Collected Data\n\nLocations of Activities for the following six categories:\n\nBusinesses,\nEntertainment,\nFood & Beverage,\nFinancial Services,\nLeisure & Recreation, and\nRetail.\n\n\nThe data sets are placed under two sub-folders:\n\ngeospatial (Bus Stop Location, MRT/LRT Exits Location, HDB Property Information, School Directory and Information, Master Plan Subzone Boundary, and Locations of Activities), and\naspatial (Passenger Volume by Origin Destination Bus Stops, and Property Information).\n\nThese two sub-folders are within the data folder of my Take-home_Ex2 folder."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2(backup).html#data-wrangling---bus-passengers-flow",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2(backup).html#data-wrangling---bus-passengers-flow",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models: A Case Study of Singapore Public Bus Commuter Flows",
    "section": "3 Data Wrangling - Bus Passengers Flow",
    "text": "3 Data Wrangling - Bus Passengers Flow\n\n3.1 Preparing the Geospatial Data - Bus Stop Location\n\n3.1.1 Importing and Transforming Data\nThe Bus Stop Location shapefile is imported using st_read() in the sf package. The output is a simple feature data frame, busstop, which is in the SVY21 projected coordinates systems. It has 5,161 observations and 4 fields, including the geometry points indicating the bus stop locations.\n\nbusstop = st_read(dsn = \"data/geospatial\",\n                  layer = \"BusStop\")\n\nReading layer `BusStop' from data source \n  `C:\\jmphosis\\ISSS624\\Take-home_Ex\\Take-home_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\nglimpse(busstop)\n\nRows: 5,161\nColumns: 4\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\nThe st_crs() function in the sf package is then used to check the coordinate system of the busstop simple feature data frame. The output shows that although it is projected in SVY21, the EPSG is indicated as 9001, which is incorrect given that it should be 3414 instead.\n\nst_crs(busstop)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"WGS 84\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nTo correct the EPSG, the st_set_crs() function in the sf package is applied. A check to confirm that the projection transformation has been applied is then made using the st_crs() function again.\n\nbusstop = st_set_crs(busstop, 3414)  \n\nst_crs(busstop)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n3.1.2 Checking for Duplicates and Missing Values\nThe data sets from the LTA DataMall are expected to be relatively clean. Nevertheless, due diligence checks for duplicates and missing values are still made to confirm the assumptions.\nThe duplicated() function in the base R and st_geometry() function in the sf package are used to check for duplicates in busstop. The output returned Bus Stop No. 96319 at row 3265. On closer inspection, rows 3264 and 3265 are found to be duplicates. Hence, the row 3264 is removed using the filter() and row_number() functions in the dplyr package. The same check is conducted again to confirm that there are no more duplicates.\n\nbusstop[duplicated(st_geometry(busstop)), ]\n\nSimple feature collection with 1 feature and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 42187.23 ymin: 34995.78 xmax: 42187.23 ymax: 34995.78\nProjected CRS: SVY21 / Singapore TM\n     BUS_STOP_N BUS_ROOF_N        LOC_DESC                  geometry\n3265      96319        NIL YUSEN LOGISTICS POINT (42187.23 34995.78)\n\n\n\nbusstop = busstop %&gt;%   \n  filter(row_number() != 3264)    \n\nbusstop[duplicated(st_geometry(busstop)), ]\n\nSimple feature collection with 0 features and 3 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: SVY21 / Singapore TM\n[1] BUS_STOP_N BUS_ROOF_N LOC_DESC   geometry  \n&lt;0 rows&gt; (or 0-length row.names)\n\n\nThe colSums() function in base R is used to check for missing values in busstop. There are no missing values in the simple feature data frame for all columns except “LOC_DESC”. On closer inspection, there are several bus stops without location descriptions but they are retained because they have “BUS_STOP_N” values.\n\ncolSums(is.na(busstop))\n\nBUS_STOP_N BUS_ROOF_N   LOC_DESC   geometry \n         0          0          8          0 \n\n\n\n\n3.1.3 Selecting Columns and Removing Bus Stops in Malaysia\nThe select() function in dplyr package is used to drop the “BUS_ROOF_N” column in busstop since it is not required. As there are bus stops situated in Johor Bahru, Malaysia, they are removed using the filter() function in the dplyr package.\n\nbusstop = busstop %&gt;%   \n  select(-BUS_ROOF_N) %&gt;%   \n  filter(LOC_DESC != \"JOHOR BAHRU CHECKPT\" & LOC_DESC != \"LARKIN TER\")\n\nThe “BUS_STOP_N” is then converted to integer data type to facilitate matching later on.\n\nbusstop$BUS_STOP_N = as.integer(busstop$BUS_STOP_N)\n\nThere are a total of 5,149 bus stops. The output is saved in rds file format and imported into the R environment.\n\n\nShow the code\nwrite_rds(busstop, \"data/rds/busstop.rds\")  \nbusstop = read_rds(\"data/rds/busstop.rds\")\n\n\n\n\n\n3.2 Preparing the Aspatial Data - Bus Passenger Volume\n\n3.2.1 Importing and Exploring Data\nThe csv file for bus passenger volume is imported using the read.csv() function in the readr package. The output is a data frame, odbus.\n\nodbus = read.csv(\"data/aspatial/origin_destination_bus_202308.csv\")\n\nThe n_distinct() function in the dplyr package and the sapply() function in the base R are applied to uncover the following observations regarding odbus:\n\nOverall, there are 5,709,512 rows (observations) and 7 columns.\nThe “YEAR_MONTH” column has one unique value, reflecting the observations from August 2023. Hence, it may be dropped.\nThe “DAY_TYPE” column has two unique values, reflecting observations from weekday or weekends/holiday.\nThe “TIME_PER_HOUR” has 24 unique values, reflecting that the observations are broken down into each of the 24 hours of a day.\nThe “PT_TYPE” column refers only has the value of “BUS” as the public transport type. Hence, it may be dropped.\nThe “ORIGIN_PT_CODE” and “DESTINATION_PT_CODE” columns have 5,067 and 5,071 unique values respectively, reflecting the number of bus stops with bus routes passing through them.\nThe “TOTAL_TRIPS” column contains values that reflect the number of passengers for each unique type of day, origin bus stop, destination bus stop. The minimum value is 1, i.e., there are no rows with zero values.\n\n\nsapply(odbus, function(x) n_distinct(x))\n\n         YEAR_MONTH            DAY_TYPE       TIME_PER_HOUR             PT_TYPE \n                  1                   2                  24                   1 \n     ORIGIN_PT_CODE DESTINATION_PT_CODE         TOTAL_TRIPS \n               5067                5071                3544 \n\n\n\n\n3.2.2 Checking for Duplicates and Missing Values\nThe data sets from the LTA DataMall are expected to be relatively clean. Nevertheless, due diligence checks for duplicates and missing values are still made to confirm the assumptions.\nThe duplicated() function in the base R is used to check for duplicates in odbus. There are no duplicates in the tibble data frame.\n\nodbus[duplicated(odbus), ]\n\n[1] YEAR_MONTH          DAY_TYPE            TIME_PER_HOUR      \n[4] PT_TYPE             ORIGIN_PT_CODE      DESTINATION_PT_CODE\n[7] TOTAL_TRIPS        \n&lt;0 rows&gt; (or 0-length row.names)\n\n\nThe colSums() function in the base R is used to check for missing values in odbus. There are no missing values in the tibble data frame, odbus.\n\ncolSums(is.na(odbus))\n\n         YEAR_MONTH            DAY_TYPE       TIME_PER_HOUR             PT_TYPE \n                  0                   0                   0                   0 \n     ORIGIN_PT_CODE DESTINATION_PT_CODE         TOTAL_TRIPS \n                  0                   0                   0 \n\n\n\n\n3.2.3 Filtering for Peak Hours Period and Selecting Columns\nThe filter() and select() functions in the dplyr package are used to filter for the rows with the “DAY_TYPE” (i.e., weekdays) and “TIME_PER_HOUR” (i.e., 6-9am) that are studied in this take-home exercise, and select the columns required (i.e., “ORIGIN_PT_CODE”, “DESTINATION_PT_CODE”, and “TOTAL_TRIPS”). The group_by() and summarise() functions in the dplyr package and the sum() function in the base R are used to total up the number of bus passenger trips by unique origin-destination combinations (241,503 pairs).\n\nodbus = odbus %&gt;%      \n  filter(DAY_TYPE == \"WEEKDAY\" & TIME_PER_HOUR %in% c(6, 7, 8, 9)) %&gt;%\n  select(ORIGIN_PT_CODE, DESTINATION_PT_CODE, TOTAL_TRIPS) %&gt;%\n  group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\nThe “ORIGIN_PT_CODE” and “DESTINATION_PT_CODE” are converted to integer data type to facilitate matching later on.\n\nodbus$ORIGIN_PT_CODE = as.integer(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE = as.integer(odbus$DESTINATION_PT_CODE)\n\nThe output is saved in rds file format and imported into the R environment.\n\n\nCode\nwrite_rds(odbus, \"data/rds/odbus.rds\") \nodbus = read_rds(\"data/rds/odbus.rds\")\n\n\n\n\n\n3.3 Preparing Analytical Hexagon Data\n\n3.3.1 Filtering for List of Unique Bus Stops and Performing Join for List of Relevant Bus Stops for Spatial Grid\nA list of unique bus stops that appeared in either the “ORIGIN_PT_CODE” column or the “DESTINATION_PT_CODE” column, or both, is obtained. This is in preparation for creating the spatial hexagon grid. There are 5,046 unique bus stops with passenger trips during the weekday peak hour period.\n\nbusstop_o = odbus %&gt;% \n  select(ORIGIN_PT_CODE) %&gt;%\n  rename(busstop = ORIGIN_PT_CODE)\n\nbusstop_d = odbus %&gt;%\n  select(DESTINATION_PT_CODE) %&gt;%\n  rename(busstop = DESTINATION_PT_CODE) %&gt;%\n  select(busstop)\n\nbusstop_list = rbind(busstop_o, busstop_d) %&gt;%\n  select(busstop) %&gt;%\n  unique()\n\nrm(busstop_o, busstop_d)\n\nThe simple feature data frame, busstop, and the tibble data frame, busstop_list, are combined using the inner_join() function in the dplyr package, by matching the “BUS_STOP_N” column in busstop with the “busstop” in busstop_list. The geographical locations of 4,998 bus stops are matched. Some bus stop locations were not included in the busstop that was last updated in July 2023. This means that the analysis in this take-home exercise is limited in this aspect.\n\nbusstop_grid = inner_join(busstop, busstop_list,\n                       by = c(\"BUS_STOP_N\" = \"busstop\"))\n\n\n\n3.3.2 Creating Spatial Hexagon Grid\nSpatial grids are commonly used in spatial analysis. Regularly shaped grids may comprise of equilateral triangles, squares, or hexagons. The hexagon is the most circular-shaped polygon that can tessellate to form an evenly spaced grid, providing a low perimeter-to-area ratio that reduces sampling bias due to edge effects of the grid shape.\nA more circular polygon means that points near the border are closer to the centroid. Hexagons are often used when the analysis involves aspects of connectivity or movement paths. Locating neighbours is simpler using a hexagon grid because the contact edge or length is consistent on each side, resulting in equidistant centroids for each neighbour.\nA spatial hexagon grid, hgrid, for the study area of Singapore based on the busstop_grid simple feature data frame is created using the st_make_grid() and st_sf() functions in the sf package, the mutate() function in the dplyr package, and the lengths() function in the base package.\n\ngeo = st_make_grid(busstop_grid, c(750, 750), what = \"polygons\", square = FALSE)\n\nhgrid = st_sf(geo) %&gt;%\n  mutate(grid_id = 1:length(lengths(geo)))\n\nrm(geo, busstop, busstop_list)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2(backup).html#geospatial-data-science",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2(backup).html#geospatial-data-science",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models: A Case Study of Singapore Public Bus Commuter Flows",
    "section": "4 Geospatial Data Science",
    "text": "4 Geospatial Data Science\n\n4.1 Computing Origin-Destination Matrix of Bus Commuter Flows\nThe grid_id of the hgrid simple feature data frame are populated into the busstop_grid simple feature data frame using st_intersection() function in the sf package. The output of the st_intersection() function contains the geometry spatial objects that intersect between hgrid and busstop_grid. Since one contains points, and the other contains polygons, the output will contain points (as the points are the common overlapping spatial objects).\nThe select() function in the dplyr package is then used to retain only the “BUS_STOP_N” and “grid_id” columns in the combined simple feature data frame, busstop_hgrid.\nThe st_drop_geometry() function is used to remove the geometry column from busstop_hgrid. The output is a regular data frame with only information of attributes.\n\nbusstop_hgrid = st_intersection(busstop_grid, hgrid) %&gt;%\n  select(BUS_STOP_N, grid_id) %&gt;%\n  st_drop_geometry()\n\nBoth outputs (with and without the geometry column) are saved in rds file format and imported into the R environment.\n\n\nCode\nwrite_rds(busstop_hgrid, \"data/rds/busstop_hgrid.rds\")\nbusstop_hgrid = read_rds(\"data/rds/busstop_hgrid.rds\")\n\n\nNext, the grid_id from the busstop_hgrid are matched to the odbus tibble data frame’s origin bus stops. The columns are renamed accordingly.\n\nodbus = left_join(odbus, busstop_hgrid,\n                       by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_GRID = grid_id)\n\nA check for duplicates is conducted. Since 754 records are found to be duplicates, they are removed and a confirmatory check is conducted.\n\nduplicate1 = odbus %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()  \n\nduplicate1\n\n# A tibble: 754 × 4\n   ORIGIN_BS DESTINATION_PT_CODE TRIPS ORIGIN_GRID\n       &lt;int&gt;               &lt;int&gt; &lt;int&gt;       &lt;int&gt;\n 1     11009                1411     7         993\n 2     11009                1411     7         993\n 3     11009                1421    17         993\n 4     11009                1421    17         993\n 5     11009                1511    18         993\n 6     11009                1511    18         993\n 7     11009                1521     6         993\n 8     11009                1521     6         993\n 9     11009                1611     2         993\n10     11009                1611     2         993\n# ℹ 744 more rows\n\n\n\nodbus = unique(odbus)\n\nduplicate2 = odbus %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nduplicate2\n\n# A tibble: 0 × 4\n# ℹ 4 variables: ORIGIN_BS &lt;int&gt;, DESTINATION_PT_CODE &lt;int&gt;, TRIPS &lt;int&gt;,\n#   ORIGIN_GRID &lt;int&gt;\n\n\nThe grid_id from the busstop_hgrid are then matched to the odbus tibble data frame’s destination bus stops. The columns are renamed accordingly.\n\nodbus = left_join(odbus, busstop_hgrid,\n                       by = c(\"DESTINATION_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(DESTIN_BS = DESTINATION_PT_CODE,\n         DESTIN_GRID = grid_id)\n\nAnother check for duplicates is then conducted. Since 828 records are found to be duplicates, they are removed and a confirmatory check is conducted.\n\nduplicate3 = odbus %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()  \n\nduplicate3\n\n# A tibble: 828 × 5\n   ORIGIN_BS DESTIN_BS TRIPS ORIGIN_GRID DESTIN_GRID\n       &lt;int&gt;     &lt;int&gt; &lt;int&gt;       &lt;int&gt;       &lt;int&gt;\n 1      1013     51071     1        1334        1262\n 2      1013     51071     1        1334        1262\n 3      1112     51071    65        1354        1262\n 4      1112     51071    65        1354        1262\n 5      1121     51071     3        1392        1262\n 6      1121     51071     3        1392        1262\n 7      1239     51071    22        1392        1262\n 8      1239     51071    22        1392        1262\n 9      1329     51071    30        1411        1262\n10      1329     51071    30        1411        1262\n# ℹ 818 more rows\n\n\n\nodbus = unique(odbus)\n\nduplicate4 = odbus %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nduplicate4\n\n# A tibble: 0 × 5\n# ℹ 5 variables: ORIGIN_BS &lt;int&gt;, DESTIN_BS &lt;int&gt;, TRIPS &lt;int&gt;,\n#   ORIGIN_GRID &lt;int&gt;, DESTIN_GRID &lt;int&gt;\n\n\nThe data frame is then tidied up, saved in rds format, and imported into the R environment.\n\n\nShow the code\nrm(duplicate1, duplicate2, duplicate3, duplicate4)\n\nodbus = odbus %&gt;%   \n  drop_na() %&gt;%\n  group_by(ORIGIN_GRID, DESTIN_GRID) %&gt;%\n  summarise(TRIPS = sum(TRIPS))\n\nwrite_rds(odbus, \"data/rds/odbus.rds\")  \nodbus = read_rds(\"data/rds/odbus.rds\")\n\n\n\n\n4.2 Visualising Origin-Destination Bus Commuter Flows\n\n4.2.1 Separating Intra- and Inter-zonal Flows\nThe intra- and inter-zonal flows are separated into two data sets, odbus_intraflow and odbus_interflow, respectively. There 633 observations of intra-zonal flows, and 64,888 observations of inter-zonal flows.\n\nodbus_interflow = odbus[odbus$ORIGIN_GRID!=odbus$DESTIN_GRID,]\nodbus_intraflow = odbus[odbus$ORIGIN_GRID==odbus$DESTIN_GRID,]\n\n\n\n4.2.2 Creating Inter-zonal Desire Lines\nThe od2line() function in the stplanr package is used to create the desire lines. The function is specifically used to convert origin-destination flow data into lines, typically referred to as desire lines. Desire lines represent the flow of movement between different zones or locations.\n\nThe “flow” argument represents the origin-destination flow data. It could be a data frame or a matrix containing information about the number of trips (flow) between pairs of zones or locations.\nThe “zone” argument represents the spatial information of the zones. It is usually a spatial dataset (e.g., points, polygons) that defines the zones involved in the OD flow.\nThe “zone_code” argument specifies the column in the zone data set that contains the zone or location codes.\n\nThe output is a simple feature data frame, representing the desire lines - stored as linestrings under the geometry column.\n\ninterflowLine = od2line(flow = odbus_interflow,                      \n                   zones = hgrid,                     \n                   zone_code = \"grid_id\")\n\n\n\n4.2.3 Visualising and Deriving Insights on Origin-Destination Bus Commuter Flows\nThe inner_join() and select() functions in the dplyr package, and the unique() function in the base package are used to join the earlier prepared hgrid and busstop_hgrid to produce a hexagon grid with the unique bus stops of relevance, busstop_hgrid_geo.\n\nbusstop_hgrid_geo = inner_join(hgrid, busstop_hgrid) %&gt;%\n  select(grid_id) %&gt;%\n  unique()\n\nThe inter-zonal desire lines are then visualised using functions in the tmap package.\n\nThe “lwd” argument means that the values in the “TRIPS” column are used to determine the line width.\nThe “scale” argument serve as thresholds that define the ranges of quantiles (six in total, corresponding to “n” argument). The first and last values mean:\n\n0.1: Lines with values up to 0.1 (10% quantile).\n10: Lines with values between 7 and 10 (90-100% quantile).\n\n\n\ntmap_mode(\"plot\")\n\ntm_shape(busstop_hgrid_geo) +\n  tm_polygons(alpha = 0.1) +\ninterflowLine %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"TRIPS\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3)\n\n\n\n\nThe map above is not particularly useful given that it shows all the desire lines for the morning peak hour period. Due to overcrowding of the lines, no clear pattern is observed.\nIn order to gather better insights, a quick summary of the distribution of the desire lines by number of trips is obtained using the summary() function in the base package. We can see that the number of trips is highly skewed given that the median and mean values are 38.0 and 379.8 respectively.\n\nsummary(interflowLine$TRIPS)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    1.0     7.0    38.0   379.8   179.0 79622.0 \n\n\nThe cut-off value of 179.0 (third quartile) is then used to map the desire lines.\n\ntmap_mode(\"plot\")\n\ntm_shape(busstop_hgrid_geo) +\n  tm_polygons(alpha = 0.1) +\ninterflowLine %&gt;%\n  filter(TRIPS &gt; 179.0) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"TRIPS\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3)\n\n\n\n\nA slightly improved map was obtained, revealing that the west and northwest regions do not have high flows relative to the rest of Singapore. Nevertheless, the hexagons with Joo Koon MRT and Boon Lay MRT emerge as the hubs in the west region.\nAnother round of filtering is done to visualise the desire lines with at least 5,000 trips.\n\ntmap_mode(\"plot\")\n\ntm_shape(busstop_hgrid_geo) +\n  tm_polygons(alpha = 0.1) +\ninterflowLine %&gt;%\n  filter(TRIPS &gt;= 5000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"TRIPS\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3)\n\n\n\n\nBased on the map above, a few regional hubs are identified:\n\nWest: Boon Lay MRT, Choa Chu Kang MRT;\nNorth: Woodlands MRT, Yishun MRT, Khatib MRT;\nCentral: Ang Mo Kio MRT, Toa Payoh MRT, Serangoon MRT; and\nEast: Bedok MRT, Pasir Ris MRT, Tampines MRT.\n\nThe lack of high bus commuter flows in the city area indicates that travel to/fro the city are likely to be effectively serviced by the MRT system during the morning peak hour period.\nInterestingly, the bus commuter flows in the towns of Punggol and Sengkang are not as high despite having a young adult population. This is likely because the LRT systems in the two towns (instead of buses) are used to commute to the MRT hubs.\nAlso, the “longest” desire line by absolute distance (not commuting distance) is between Woodlands and Tampines. This indicates that buses are likely to be preferred to MRT when travelling between the north and east regions in the morning peak hour period. This is likely because commuting by MRT is deemed less convenient as it requires commuters to make several transfers (e.g., at Bishan and Paya Lebar or MacPherson MRT interchanges). This may be one of the underlying considerations for the development of the Cross-Island MRT line that would link Ang Mo Kio (on the North-South MRT line) to Pasir Ris (on the East-West MRT line) to improve public transport commuting for those travelling between Woodlands and Tampines.\nA final round of filtering is done to visualise the desire lines with at least 30,000 trips to identify areas with potential overcrowding during the morning peak hour period.\n\nThe argument “set.zoom.limits = c(11, 16)” allows for the zoom out limit to show the entire Singapore, and the zoom in limit to show the street names.\n\n\ntmap_mode(\"view\")\n\ntm_shape(busstop_hgrid_geo) +\n  tm_polygons(alpha = 0.1) +\ninterflowLine %&gt;%\n  filter(TRIPS &gt;= 30000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"TRIPS\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3) +\n  tm_view(set.zoom.limits = c(11, 16))\n\n\n\n\n\n\nBased on the map above, some of the problem areas that are especially overcrowded during the morning peak hour period are:\n\nWest: Boon Lay MRT, Lakeside MRT, Choa Chu Kang MRT;\nNorth: Woodlands MRT, Kranji MRT, Yishun MRT;\nCentral: Ang Mo Kio MRT, Bishan MRT, Serangoon MRT; and\nEast: Pasir Ris MRT, Bedok MRT.\n\nIn particular, the large flows to/fro Kranji MRT is likely due to bus commuters from Johor Bahru, Malaysia who enter into Singapore during the morning peak hour period and commute to Kranji MRT in order to take the MRT to their workplaces or schools.\nThere are two important implications based on the observations above:\n\nBus deployments in these overcrowded areas during the morning peak hour periods would need to be maintained at high levels to service the large numbers of commuters.\nFor commuter flows between hexagons that are next to each other, the Government may wish to consider if the provision of more sheltered walkways or cycling paths may encourage people to walk or cycle to the MRT hubs instead of relying on buses for the short commutes.\n\nTo better visualise the direction of flows (origin to destination), the destination hexagons are plotted as dots on the map, with the intensity of the colour reflecting the number of trips. The st_centroid() function in the sf package is used to find the centroids of the hexagons to form the dots on the map.\n\ndestin_dots = odbus_interflow %&gt;% \n  filter(TRIPS &gt;= 30000) %&gt;%\n  select(DESTIN_GRID, TRIPS) %&gt;%\n  left_join(., busstop_hgrid_geo, by = c(\"DESTIN_GRID\" = \"grid_id\")) %&gt;%\n  st_as_sf(.) %&gt;%\n  st_centroid(.)\n\ntmap_mode(\"view\")\n\ntm_shape(busstop_hgrid_geo) +\n  tm_polygons(alpha = 0.1) +\ntm_shape(destin_dots) +\n  tm_dots(size = 0.5,\n          col = \"TRIPS\",\n          style = \"jenks\",\n          alpha = 0.3) +\ninterflowLine %&gt;%\n  filter(TRIPS &gt;= 30000) %&gt;%\ntm_shape() +\n  tm_lines(lwd = \"TRIPS\",\n           style = \"jenks\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6,\n           alpha = 0.3) +\n  tm_view(set.zoom.limits = c(11, 16))\n\n\n\n\n\n\nBased on the map above, the earlier observations that the MRT hubs are attractions (destinations) for the bus commuters are confirmed.\n\n\n\n4.3 Visualising Intra-zonal Bus Commuter Flows\nThe intra-zonal bus commuter flows is visualised to gather insights on short-distance bus commuting trips during the morning peak hour period. The left_join() function in the dplyr package is used to join the odbus_intraflow tibble data frame with the busstop_hgrid_geo simple feature data frame. The output is a tibble data frame, intraflowPt, which matches the grids to the hexagons.\nThe select() and rename() functions in the dplyr package are used to clean up intraflowPt.\n\nintraflowPt =  left_join(odbus_intraflow, busstop_hgrid_geo,\n                         by = c(\"ORIGIN_GRID\" = \"grid_id\"))\n\n\nintraflowPt = intraflowPt %&gt;%\n  select(-DESTIN_GRID) %&gt;%\n  rename(GRID = ORIGIN_GRID)\n\nThe tibble data frame is then converted to a simple feature data frame using the st_as_sf() function in the sf package.\n\nintraflowPt = st_as_sf(intraflowPt)\n\nThe number of trips for each intra-zonal flow is then visualised using functions in the tmap package.\n\nThe argument style = “jenks” produces a map based on natural breaks.\nThe intensity of the colour corresponds to the number of trips, i.e., dark red means higher number of trips.\n\n\ntmap_mode(\"view\")\n\ntm_shape(busstop_hgrid_geo) +\n  tm_polygons(alpha = 0.1) +\ntm_shape(intraflowPt) +\n  tm_fill(col = \"TRIPS\",\n          palette = \"Reds\",\n           style = \"jenks\",\n           alpha = 0.3) +\n  tm_view(set.zoom.limits = c(11, 16))\n\n\n\n\n\n\nBased on the map above, one hexagon stood out as the only one in the last category (22,925 to 63,219 trips): Woodlands Avenue 6/Admiralty MRT. Similar to the suggestion for commuter flows between hexagons that are next to each other, the Government may wish to consider if the Woodlands Avenue 6/Admiralty MRT hexagon should have more sheltered walkways or cycling paths to encourage people to walk or cycle within the hexagon instead of relying on buses for the short commutes.\nThere are other hexagons with large numbers of trips, in the category of 12,005 to 22925 trips, that may also be considered for the abovementioned suggestion:\n\nWest: Bukit Batok MRT (22,102 trips);\nNorth/North-east: Woodlands MRT (20,038 trips), Punggol MRT (20,877 trips); and\nCentral: Tiong Bahru MRT (22,925 trips)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2(backup).html#computing-distance-matrix-using-analytical-hexagon-data",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2(backup).html#computing-distance-matrix-using-analytical-hexagon-data",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models: A Case Study of Singapore Public Bus Commuter Flows",
    "section": "5 Computing Distance Matrix Using Analytical Hexagon Data",
    "text": "5 Computing Distance Matrix Using Analytical Hexagon Data\nThe earlier prepared simple feature data frame, busstop_hgrid_geo, containing the “grid_id” and “geometry” of the hexagons with relevant bus stops, is used to compute the distance matrix at the analytical hexagon level.\n\n5.1 Converting from Simple Feature Data Frame to Spatial Polygons Data Frame\nThere are at least two ways to compute the required distance matrix. One is based on sf and the other is based on sp. Past experience shown that computing distance matrix by using sf function took a relatively longer time than the sp method, especially when the data set is large. In view of this, the sp method is used in the code chunks below.\nThe as() function with “Class” argument set as “Spatial” is used to convert busstop_hgrid_geo from simple feature data frame to SpatialPolygonsDataFrame of sp object.\n\nbusstop_hgrid_geosp = as(busstop_hgrid_geo, \"Spatial\")   \nbusstop_hgrid_geosp\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 817 \nextent      : 3595.122, 48595.12, 26049.09, 50297.8  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 1\nnames       : grid_id \nmin values  :      21 \nmax values  :    2267 \n\n\n\n\n5.2 Computing the Distance Matrix\nThe spDists() function in the sp package is then used to compute the Euclidean distance between the centroids of the hexagons.\n\nThe argument “longlat = FALSE” means that longitude and latitude are not used to calculate the distance.\n\n\nNote: Calculating the distance between centroids is computationally less intensive compared to more detailed spatial analyses. However, using centroid-to-centroid distance is a simplification and may not always capture the full complexity of spatial relationships.\n\nThe output dist is a matrix object (817 by 817), and the column and row headers are not labeled with the “grid_id”.\n\ndist = spDists(busstop_hgrid_geosp,                \n               longlat = FALSE)   \n\nhead(dist, n=c(10, 10))\n\n          [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     [,7]     [,8]\n [1,]    0.000  750.000 3269.174 1500.000 2704.163 3968.627 1299.038 2250.000\n [2,]  750.000    0.000 2598.076  750.000 1984.313 3269.174  750.000 1500.000\n [3,] 3269.174 2598.076    0.000 1984.313  750.000  750.000 2704.163 1500.000\n [4,] 1500.000  750.000 1984.313    0.000 1299.038 2598.076  750.000  750.000\n [5,] 2704.163 1984.313  750.000 1299.038    0.000 1299.038 1984.313  750.000\n [6,] 3968.627 3269.174  750.000 2598.076 1299.038    0.000 3269.174 1984.313\n [7,] 1299.038  750.000 2704.163  750.000 1984.313 3269.174    0.000 1299.038\n [8,] 2250.000 1500.000 1500.000  750.000  750.000 1984.313 1299.038    0.000\n [9,] 3436.932 2704.163  750.000 1984.313  750.000  750.000 2598.076 1299.038\n[10,] 4683.748 3968.627 1500.000 3269.174 1984.313  750.000 3897.114 2598.076\n          [,9]    [,10]\n [1,] 3436.932 4683.748\n [2,] 2704.163 3968.627\n [3,]  750.000 1500.000\n [4,] 1984.313 3269.174\n [5,]  750.000 1984.313\n [6,]  750.000  750.000\n [7,] 2598.076 3897.114\n [8,] 1299.038 2598.076\n [9,]    0.000 1299.038\n[10,] 1299.038    0.000\n\n\n\n\n5.3 Labelling Column and Row Headers of a Distance Matrix\nA list sorted according to the the distance matrix by hexagon is created to hold the “grid_id”.\n\ngridID = busstop_hgrid_geo$grid_id\n\nNext, the “grid_id” are attached to row and column to facilitate distance matrix matching later on.\n\ncolnames(dist) = paste0(gridID)  \nrownames(dist) = paste0(gridID)\n\n\n\n5.4 Pivoting Distance Value by Grid ID\nThe distance matrix is then pivoted into a long table using the row and column “grid_id” using the melt() function in the reshape2 package. Within the same zone (i.e., when Var1 and Var2 are the same) distance is 0.\n\ndistPair = melt(dist) %&gt;%\n  rename(dist = value)   \n\nhead(distPair, 10)\n\n   Var1 Var2     dist\n1    21   21    0.000\n2    40   21  750.000\n3    42   21 3269.174\n4    60   21 1500.000\n5    61   21 2704.163\n6    62   21 3968.627\n7    78   21 1299.038\n8    79   21 2250.000\n9    80   21 3436.932\n10   81   21 4683.748\n\n\n\n\n5.5 Updating Intra-zonal Distances\nA constant value is then used to replace the intra-zonal distance of 0.\nThe minimum value of the inter-zonal distance is derived using the filter() function in the dplyr package and the summary() function in the base package. The value is 750. Hence, by quick estimation, an intra-zonal distance proxy value of less than half of 750 would be appropriate.\n\ndistPair %&gt;%   \n  filter(dist &gt; 0) %&gt;%   \n  summary()\n\n      Var1           Var2           dist      \n Min.   :  21   Min.   :  21   Min.   :  750  \n 1st Qu.: 791   1st Qu.: 791   1st Qu.: 8250  \n Median :1201   Median :1201   Median :13269  \n Mean   :1151   Mean   :1151   Mean   :14122  \n 3rd Qu.:1527   3rd Qu.:1527   3rd Qu.:18929  \n Max.   :2267   Max.   :2267   Max.   :44680  \n\n\nHence, a constant distance value of 100m is added as the intra-zonal distance. The resulting data frame is checked using the summary() function, showing that the minimum distance is now 100m.\n\ndistPair$dist = ifelse(distPair$dist == 0,\n                       100, distPair$dist)    \n\nsummary(distPair)\n\n      Var1           Var2           dist      \n Min.   :  21   Min.   :  21   Min.   :  100  \n 1st Qu.: 791   1st Qu.: 791   1st Qu.: 8250  \n Median :1201   Median :1201   Median :13269  \n Mean   :1151   Mean   :1151   Mean   :14105  \n 3rd Qu.:1527   3rd Qu.:1527   3rd Qu.:18870  \n Max.   :2267   Max.   :2267   Max.   :44680  \n\n\nThe origin (Var1) and destination (Var2) fields are renamed. The output is saved in rds file format and imported into the R environment.\n\ndistPair = distPair %&gt;%\n  rename(orig = Var1,           \n         dest = Var2)\n\n\n\nShow the code\nwrite_rds(distPair, \"data/rds/distPair.rds\")    \ndistPair = read_rds(\"data/rds/distPair.rds\")\n\n\n\n\n5.6 Distinguishing Intra-zonal and Inter-zonal Flows\nA new field, “FlowNoIntra”, is created to differentiate between inter- and intra-zonal flows in the odbus tibble data frame containing the origin-destination flows. The value of 0 denotes intra-zonal flows, while the value of the number of trips denotes inter-zonal flows.\nAnother new field, “offset”, is created to hold the value of 0.000001 if there was intra-zonal flow, or hold the value of 1 if there was no inter-zonal flow.\n\nodbus$FlowNoIntra = ifelse(odbus$ORIGIN_GRID == odbus$DESTIN_GRID,\n                           0, odbus$TRIPS)    \n\nodbus$offset = ifelse(odbus$ORIGIN_GRID == odbus$DESTIN_GRID,\n                      0.000001, 1)\n\n\n\n5.7 Combining Passenger Volume Data with Distance Values\nThe left_join() function in the dplyr package is used to combine the odbus tibble data frame and the distPair data frame. The output is odbus_dist.\n\nodbus_dist = odbus %&gt;%   \n  left_join(distPair,             \n            by = c(\"ORIGIN_GRID\" = \"orig\",\n                   \"DESTIN_GRID\" = \"dest\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2(backup).html#preparing-propulsive-and-attractiveness-variables",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2(backup).html#preparing-propulsive-and-attractiveness-variables",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models: A Case Study of Singapore Public Bus Commuter Flows",
    "section": "6 Preparing Propulsive and Attractiveness Variables",
    "text": "6 Preparing Propulsive and Attractiveness Variables\n\n6.1 Preparing the Geospatial Data - MRT/LRT Exits Location\n\n6.1.1 Importing and Transforming Data\nThe MRT/LRT Exits Location geojson file are imported using st_read() in the sf package. The output is a simple feature data frame, mrtlrtexits, which is in WGS84 geographic coordinate system. It has 563 observations and 3 fields, including the geometry points indicating the MRT/LRT exits locations.\n\nmrtlrtexits = st_read(\"data/geospatial/LTAMRTStationExitGEOJSON.geojson\")\n\nReading layer `LTAMRTStationExitGEOJSON' from data source \n  `C:\\jmphosis\\ISSS624\\Take-home_Ex\\Take-home_Ex2\\data\\geospatial\\LTAMRTStationExitGEOJSON.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 563 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6368 ymin: 1.264972 xmax: 103.9893 ymax: 1.449157\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nglimpse(mrtlrtexits)\n\nRows: 563\nColumns: 3\n$ Name        &lt;chr&gt; \"kml_1\", \"kml_2\", \"kml_3\", \"kml_4\", \"kml_5\", \"kml_6\", \"kml…\n$ Description &lt;chr&gt; \"&lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Att…\n$ geometry    &lt;POINT [°]&gt; POINT Z (103.9091 1.334922 0), POINT Z (103.9335 1.3…\n\n\nThe st_crs() function in the sf package is then used to check the coordinate system of the mrtlrtexits simple feature data frame. The output shows that it is projected in WGS84, with EPSG as 4326, which is incorrect.\n\nst_crs(mrtlrtexits)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nThe st_transform() function in the sf package is used to transform the geographic coordinate system to the projected coordinate system. This facilitates analysis based on measurements such as distance and area. A check to confirm that the projection transformation has been applied is then made using the st_crs() function again.\n\nmrtlrtexits = st_transform(mrtlrtexits,\n                           crs = 3414)  \n\nst_crs(mrtlrtexits)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n6.1.2 Checking for Duplicates and Missing Values\nThe data sets from the LTA DataMall are expected to be relatively clean. Nevertheless, due diligence checks for duplicates and missing values are still made to confirm the assumptions.\nThe duplicated() function in the base package and st_geometry() function in the sf package are used to check for duplicates in mrtlrtexits. There are no duplicates in the simple feature data frame.\n\nmrtlrtexits[duplicated(st_geometry(mrtlrtexits)), ]\n\nSimple feature collection with 0 features and 2 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: SVY21 / Singapore TM\n[1] Name        Description geometry   \n&lt;0 rows&gt; (or 0-length row.names)\n\n\nThe colSums() function in the base package is used to check for missing values in mrtlrtexits. There are no missing values in the simple feature data frame.\n\ncolSums(is.na(mrtlrtexits))\n\n       Name Description    geometry \n          0           0           0 \n\n\n\n\n6.1.3 Extracting Attributes and Selecting Columns\nThe future_lapply() function in the future.apply package, the slice(), pull() and as.tibble() functions in the dplyr package, the read_html(), html_node() and html_table() functions in the rvest package, and the pivot_wider() function in the tidyr package are used to extract the attributes (e.g., station name, exit code) from the “Description” column of mrtlrtexits.\nThe bind_cols(), mutate() and select() functions in the dplyr package are then used to bind the required attributes to the mrtlrtexits, combine the station name and exit code, and select the required column.\n\nattributes = future_lapply(X = 1:nrow(mrtlrtexits), \n                           FUN = function(x) {\n                             mrtlrtexits %&gt;% \n                               slice(x) %&gt;%\n                               pull(Description) %&gt;%\n                               read_html() %&gt;%\n                               html_node(\"table\") %&gt;%\n                               html_table(header = TRUE, trim = TRUE, dec = \".\", fill = TRUE) %&gt;% as_tibble(.name_repair = ~ make.names(c(\"Attribute\", \"Value\"))) %&gt;% pivot_wider(names_from = Attribute, values_from = Value)})\n\nmrtlrtexits = \n  mrtlrtexits %&gt;%\n  bind_cols(bind_rows(attributes)) %&gt;%\n  mutate(STATION_EXIT = paste(STATION_NA, EXIT_CODE, sep = \" \")) %&gt;%\n  select(STATION_EXIT)\n\nrm(attributes)\n\nThe output is saved in rds file format and imported into the R environment.\n\n\nShow the code\nwrite_rds(mrtlrtexits, \"data/rds/mrtlrtexits.rds\")  \nmrtlrtexits = read_rds(\"data/rds/mrtlrtexits.rds\")\n\n\n\n\n6.1.4 Performing Point in Hexagon Grid Count\nThe number of MRT/LRT exits in each hexagon is then counted using the lengths() function in the base package and the st_intersects() function in the sf package. As the analysis is concerned with whether the bus stop locations are near to MRT/LRT exits or not (i.e., binary), the values are converted to 0 (no exit) and 1 (at least one exit) using the mutate() in the dplyr package and the ifelse() function in the base package. The output is a data frame, vars_attract, with the first attractiveness variable - MRT/LRT exits.\n\nvars_attract = busstop_hgrid_geo\n\nvars_attract$`MRTLRTEXITS` = lengths(st_intersects(busstop_hgrid_geo, mrtlrtexits))\n\nvars_attract = vars_attract %&gt;%\n  mutate(MRTLRTEXITS = ifelse(MRTLRTEXITS == 0, 0, 1))\n\n\n\n\n6.2 Preparing the Geospatial Data - Business Activities Location\n\n6.2.1 Importing Data and Selecting Columns\nThe Business geospatial data set is imported the using st_read() function in the sf package. There are 6,550 features and 4 fields, including the geometry points indicating business activities locations. The select() function is then used to select only the points of interest, since the street numbers and street names are not required. The output is a simple feature data frame, biz.\n\nbiz = st_read(dsn = \"data/geospatial\",\n              layer = \"Business\") %&gt;%\n  select(POI_NAME)\n\nReading layer `Business' from data source \n  `C:\\jmphosis\\ISSS624\\Take-home_Ex\\Take-home_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 6550 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3669.148 ymin: 25408.41 xmax: 47034.83 ymax: 50148.54\nProjected CRS: SVY21 / Singapore TM\n\n\n\n\n6.2.2 Checking for Duplicates and Missing Values\nThe duplicated() function in the base package is used to check for duplicates in biz. The output returned Keppel Distripark at row 5019. On closer inspection of the simple feature data frame, rows 3886 and 5019 are found to be duplicates. Hence, the row 5019 is removed using the row_number() function in the dplyr package. The same check is conducted again to confirm that there are no more duplicates.\n\nbiz[duplicated(biz), ]\n\nSimple feature collection with 1 feature and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 27455.94 ymin: 28233.69 xmax: 27455.94 ymax: 28233.69\nProjected CRS: SVY21 / Singapore TM\n              POI_NAME                  geometry\n5019 KEPPEL DISTRIPARK POINT (27455.94 28233.69)\n\n\n\nbiz = biz %&gt;%   \n  filter(row_number() != 5019)    \n\nbiz[duplicated(biz), ]\n\nSimple feature collection with 0 features and 1 field\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: SVY21 / Singapore TM\n[1] POI_NAME geometry\n&lt;0 rows&gt; (or 0-length row.names)\n\n\nThe colSums() function in the base package is used to check for missing values in biz. There are no missing values in the simple feature data frame.\n\ncolSums(is.na(biz))\n\nPOI_NAME geometry \n       0        0 \n\n\nThe output is saved in rds file format and imported into the R environment.\n\n\nShow the code\nwrite_rds(biz, \"data/rds/biz.rds\")   \nbiz = read_rds(\"data/rds/biz.rds\")\n\n\n\n\n6.2.3 Performing Point in Hexagon Grid Count\nThe number of business activities locations in each hexagon is then counted using the lengths() function in the base package and the st_intersects() function in the sf package. The output is a simple feature data frame, vars_attract, with the second attractiveness variable - business activities.\n\nvars_attract$`BIZ` = lengths(st_intersects(busstop_hgrid_geo, biz))\n\n\n\n\n6.3 Preparing the Aspatial Data - Number of Schools\n\n6.3.1 Importing and Geocoding with OneMap API\nGeocoding is the process of taking an aspatial description of a location, such as an address or postcode, and returning geographic coordinates, frequently latitude-longitude pair, to identify a location on the Earth’s surface. The Singapore Land Authority (SLA) supports an online geocoding service called OneMap API. The Search API looks up the address data or 6-digit postal code for an entered value. It then returns both latitude, longitude and x,y coordinates of the searched location.\nThe School Directory and Information csv is imported using the read_csv() function in the readr package. A collection of http call functions in the httr package is then used to pass the individual records to the geocoding server on OneMap. The output is two tibble data frames - found and not_found. The found data frame contains all records that are geocoded correctly, and the not_found data frame contains postal code(s) that fail to be geocoded.\nThe found data table is joined with the original csv data table using a unique identifier (i.e. “POSTAL”) that is common to both data tables. The output data table is saved as a csv file, found.\n\nurl = \"https://www.onemap.gov.sg/api/common/elastic/search\"\n\ncsv = read_csv(\"data/aspatial/Generalinformationofschools.csv\")\npostcodes = csv$`postal_code`\n\nfound = data.frame()\nnot_found = data.frame()\n\nfor(postcode in postcodes){\n  query = list('searchVal' = postcode, 'returnGeom' = 'Y', 'getAddrDetails' = 'Y', 'pageNum' = '1')\n  res = GET(url, query = query)\n  if((content(res)$found)!=0){\n  found = rbind(found, data.frame(content(res))[4:13])\n  } else{\n  not_found = data.frame(postcode)\n  }\n}\n\nNext, both the found and not_found data frames are combined into a single tibble data.frame, merged and saved as a csv file, schools.\n\nmerged = merge(csv, found, by.x = 'postal_code', by.y = 'results.POSTAL', all = TRUE)\nwrite.csv(merged, file = 'data/aspatial/schools.csv')\n\nThe schools.csv is then imported into the R environment and only the necessary fields are selected and renamed.\n\nschools = read_csv('data/aspatial/schools.csv') %&gt;%\n  rename(LATITUDE = \"results.LATITUDE\", \n         LONGITUDE = \"results.LONGITUDE\",\n         POSTAL_CODE = \"postal_code\",\n         SCHOOL = \"school_name\") %&gt;%\n  select(POSTAL_CODE, SCHOOL, LATITUDE, LONGITUDE)\n\nUsing Google Maps, the latitude and longitude of the school (Zhenghua Secondary School) that was not geocoded successfully are 1.389279 and 103.7651 respectively. This is manually coded into the schools data frame using the mutate() function in the dplyr package.\n\nschools = schools %&gt;%\n  mutate(LATITUDE = ifelse(SCHOOL == \"ZHENGHUA SECONDARY SCHOOL\", 1.389279, LATITUDE)) %&gt;%\n  mutate(LONGITUDE = ifelse(SCHOOL == \"ZHENGHUA SECONDARY SCHOOL\", 103.7651, LONGITUDE))\n\nrm(csv, query, res, found, not_found, merged)\n\n\n\n6.3.2 Converting into Simple Feature Tibble Data Frame\nNext, the schools tibble data frame is converted into a simple feature tibble data frame using the st_as_sf() function in the sf package and the values in the latitude and longitude fields. The st_transform() function in the sf package is then used to set the CRS value as 3414.\n\nschools = st_as_sf(schools,\n                      coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                      crs = 4326) %&gt;%\n  st_transform(crs = 3414)\n\nThe output is saved in rds file format and imported into the R environment.\n\n\nShow the code\nwrite_rds(schools, \"data/rds/schools.rds\")    \nschools = read_rds(\"data/rds/schools.rds\")\n\n\n\n\n6.3.3 Performing Point in Hexagon Grid Count\nThe number of schools in each planning subzone is then counted using the lengths() function in the base package and the st_intersects() function in the sf package. The output is a simple feature data frame, vars_attract, with the third attractiveness variable - schools.\n\nvars_attract$`SCHOOLS` = lengths(st_intersects(busstop_hgrid_geo, schools))\n\nThe geometry feature of vars_attract is then dropped, giving a data frame.\n\nvars_attract = vars_attract %&gt;% st_drop_geometry()\n\nThe output is saved in rds file format and imported into the R environment.\n\n\nShow the code\nwrite_rds(vars_attract, \"data/rds/vars_attract.rds\")     \nvars_attract = read_rds(\"data/rds/vars_attract.rds\")\n\n\n\n\n\n6.4 Preparing the Aspatial Data - Number of Residents\n\n6.4.1 Importing and Geocoding with OneMap API\nSimilar to the schools dataset, geocoding is conducted for the residential dataset. The HDB Property Information csv is imported using the read_csv() function in the readr package.\n\nresidents = read_csv(\"data/aspatial/HDBPropertyInformation.csv\")\n\nA collection of http call functions in the httr package is then used to pass the individual records to the geocoding server on OneMap.\n\ngeocode = function(blk_no, street) {\n  url = \"https://www.onemap.gov.sg/api/common/elastic/search\"\n  address = paste(blk_no, street, sep = \" \")\n  query = list(\"searchVal\" = address, \n                \"returnGeom\" = \"Y\",\n                \"getAddrDetails\" = \"N\",\n                \"pageNum\" = \"1\")\n  \n  res = GET(url, query = query)\n  restext = content(res, as=\"text\")\n  \n  output = fromJSON(restext) %&gt;%\n    as.data.frame %&gt;%\n    select(results.LATITUDE, results.LONGITUDE)\n\n  return(output)\n}\n\n\nresidents$LATITUDE = 0\nresidents$LONGITUDE = 0\n\nfor (i in 0:nrow(residents)+1){\n  temp_output = geocode(residents[i, 1], residents[i, 2])\n  \n  residents$LATITUDE[i] = temp_output$results.LATITUDE\n  residents$LONGITUDE[i] = temp_output$results.LONGITUDE\n}\n\nThe output is a tibble data frame, residents and is saved as a csv file, residents.\n\nwrite.csv(residents, file = 'data/aspatial/residents.csv')\n\nThe residents.csv is then imported into the R environment and only the necessary fields are selected and renamed.\n\nresidents = read_csv('data/aspatial/residents.csv')\n\n\nresidents = residents %&gt;%\n  select(\"blk_no\", \"street\", \"total_dwelling_units\", \"1room_sold\", \"2room_sold\", \n  \"3room_sold\", \"4room_sold\", \"5room_sold\", \"exec_sold\", \n  \"multigen_sold\", \"studio_apartment_sold\", \"1room_rental\",\n  \"2room_rental\", \"3room_rental\", \"other_room_rental\", \n  \"LATITUDE\", \"LONGITUDE\") %&gt;%\n  rename(HDB1R = \"1room_sold\",\n         HDB2R = \"2room_sold\",\n         HDB3R = \"3room_sold\",\n         HDB4R = \"4room_sold\",\n         HDB5R = \"5room_sold\",\n         HDBExec = \"exec_sold\",\n         HDBMultiGen = \"multigen_sold\",\n         HDBStudio = \"studio_apartment_sold\",\n         HDB1R_rent = \"1room_rental\",\n         HDB2R_rent = \"2room_rental\",\n         HDB3R_rent = \"3room_rental\",\n         HDBOther_rent = \"other_room_rental\")\n\n\n\n6.4.2 Deriving Number of Residents for Different Types of HDB Units\nGiven that the number of household members for different types of HDB properties differ, the number of HDB units for each type is multiplied by the average household size for the specific type based on information from the Department of Statistics on Resident Households by Household Size, Annual.\n\nresidents = residents %&gt;%\n  mutate(HDB1R = (HDB1R)*2.05,\n         HDB2R = (HDB2R)*2.05,\n         HDB3R = (HDB3R)*2.46,\n         HDB4R = (HDB4R)*3.15,\n         HDB5R = (HDB5R)*3.56,\n         HDBExec = (HDBExec)*3.56,\n         HDBMultiGen = (HDBMultiGen)*3.56,\n         HDBStudio = (HDBStudio)*2.05,\n         HDB1R_rent = (HDB1R_rent)*2.05,\n         HDB2R_rent = (HDB2R_rent)*2.05,\n         HDB3R_rent = (HDB3R_rent)*2.46,\n         HDBOther_rent = (HDBOther_rent)*3.02)\n\nThe mutate() function in the dplyr package are then used to consolidate the various categories to obtain a selection of five propulsive variables:\n\nNumber of dwelling units;\nNumber of residents in 1- or 2-room HDB units;\nNumber of residents in 3- or 4-room HDB units;\nNumber of residents in 5-room, executive or multi-generation HDB units; and\nNumber of residents in HDB rental units.\n\nThe relevant columns are selected using the select() function in the dplyr package.\n\nresidents = residents %&gt;%\n  mutate(HDB12R = HDB1R+HDB2R+HDBStudio,\n         HDB34R = HDB3R+HDB4R,\n         HDB5RMore = HDB5R+HDBExec+HDBMultiGen,\n         HDBRent = HDB1R_rent+HDB2R_rent+HDB3R_rent+HDBOther_rent) %&gt;%\n  select(blk_no, street, total_dwelling_units,\n         HDB12R, HDB34R, HDB5RMore, HDBRent,\n         LATITUDE, LONGITUDE)\n\nThe output is saved in rds file format and imported into the R environment.\n\nwrite_rds(residents, \"data/rds/residents.rds\")  \nresidents = read_rds(\"data/rds/residents.rds\")\n\n\n\n6.4.3 Converting into Simple Feature Tibble Data Frame\nNext, the residents tibble data frame is converted into a simple feature tibble data frame using the st_as_sf() function in the sf package and the values in the latitude and longitude fields. The st_transform() function in the sf package is then used to set the CRS value as 3414.\n\nresidents = st_as_sf(residents,\n                      coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                      crs = 4326) %&gt;%\n  st_transform(crs = 3414)\n\nThe residents simple feature tibble data frame is then matched to the “grid_id” in busstop_hgrid_geo using the st_intersection() function in the sf package. The output is a data frame, residents_grid.\n\nresidents_grid = st_intersection(busstop_hgrid_geo, residents) %&gt;%\n  select(-c(...1, blk_no, street)) %&gt;%\n  st_drop_geometry() %&gt;%\n  group_by(grid_id) %&gt;%\n  summarise(DU = sum(total_dwelling_units),\n            HDB12R = sum(HDB12R),\n            HDB34R = sum(HDB34R),\n            HDB5RMore = sum(HDB5RMore),\n            HDBRent = sum(HDBRent))\n\n\n\n\n6.5 Preparing Origin and Destination Attributes\nThe origin attributes (i.e., number of residents of different groups) in the residents_grid data frame are then added to the odbus_dist tibble data frame by matching to the “ORIGIN_GRID”.\n\nSIM = odbus_dist %&gt;%\n  left_join(residents_grid,\n            by = c(ORIGIN_GRID = \"grid_id\"))\n\nThe destination attributes (i.e., existence of MRT/LRT exits, number of business activities, and number of schools) in the vars_attract data frame are then added to the SIM tibble data frame by matching to the “DESTIN_GRID”.\n\nSIM = SIM %&gt;%\n  left_join(vars_attract,\n            by = c(DESTIN_GRID = \"grid_id\"))\n\nThe “ORIGIN_GRID” and “DESTIN_GRID” variables are converted to character data type.\n\nSIM$ORIGIN_GRID = as.character(SIM$ORIGIN_GRID)\nSIM$DESTIN_GRID = as.character(SIM$DESTIN_GRID)\n\nThe output is saved in rds file format and imported into the R environment.\n\n\nShow the code\nwrite_rds(SIM, \"data/rds/SIM.rds\")     \nSIM = read_rds(\"data/rds/SIM.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2(backup).html#spatial-interaction-modelling",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2(backup).html#spatial-interaction-modelling",
    "title": "Take-home Exercise 2: Applied Spatial Interaction Models: A Case Study of Singapore Public Bus Commuter Flows",
    "section": "7 Spatial Interaction Modelling",
    "text": "7 Spatial Interaction Modelling\nThe spatial interaction models (SIMs) are calibrated by applying the Poisson Regression methods on the SIM tibble data frame.\n\n7.1 Visualising the Dependent Variable\nThe distribution of the dependent variable (i.e. “TRIPS”) is plotted by using the histogram method. The histogram shows that the distribution is highly skewed and does not resemble normal distribution.\n\nggplot(data = SIM,\n       aes(x = TRIPS)) +\n  geom_histogram()\n\n\n\n\nThe relation between the dependent variable and one of the key independent variable in SIM, namely distance is then visualised using the scatterplot method. The scatterplot shows that their relationship does not appear to be a linear one.\n\nggplot(data = SIM,\n       aes(x = dist,\n           y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\nHowever, if the log transformed version of both variables are plotted, the result better resembles a linear relationship.\n\nggplot(data = SIM,\n       aes(x = log(dist),\n           y = log(TRIPS))) +   \n  geom_point() +   \n  geom_smooth(method = lm)\n\n\n\n\n\n\n7.2 Checking for Variables with Zero or Missing Values\nSince Poisson Regression is based on log transformation, and log 0 is undefined, it is important to ensure that there are no zero values in the explanatory variables.\nThe summary() function in the base package revealed that both propulsive and attractiveness variables have zero values.\n\nsummary(SIM)\n\n ORIGIN_GRID        DESTIN_GRID            TRIPS          FlowNoIntra     \n Length:65521       Length:65521       Min.   :    1.0   Min.   :    0.0  \n Class :character   Class :character   1st Qu.:    7.0   1st Qu.:    7.0  \n Mode  :character   Mode  :character   Median :   39.0   Median :   37.0  \n                                       Mean   :  392.3   Mean   :  376.1  \n                                       3rd Qu.:  182.0   3rd Qu.:  176.0  \n                                       Max.   :79622.0   Max.   :79622.0  \n                                                                          \n     offset              dist             DU            HDB12R      \n Min.   :0.000001   Min.   :  100   Min.   :   0    Min.   :   0.0  \n 1st Qu.:1.000000   1st Qu.: 2704   1st Qu.: 992    1st Qu.:   0.0  \n Median :1.000000   Median : 5408   Median :2635    Median :   0.0  \n Mean   :0.990339   Mean   : 6272   Mean   :2854    Mean   : 187.0  \n 3rd Qu.:1.000000   3rd Qu.: 8842   3rd Qu.:4302    3rd Qu.: 266.5  \n Max.   :1.000000   Max.   :24784   Max.   :7946    Max.   :4268.1  \n                                    NA's   :22066   NA's   :22066   \n     HDB34R        HDB5RMore          HDBRent          MRTLRTEXITS    \n Min.   :    0   Min.   :    0.0   Min.   :   0.000   Min.   :0.0000  \n 1st Qu.: 1745   1st Qu.:  694.2   1st Qu.:   0.000   1st Qu.:0.0000  \n Median : 4517   Median : 1872.6   Median :   2.404   Median :0.0000  \n Mean   : 5237   Mean   : 2671.1   Mean   : 382.616   Mean   :0.3716  \n 3rd Qu.: 8061   3rd Qu.: 3634.8   3rd Qu.: 595.057   3rd Qu.:1.0000  \n Max.   :17602   Max.   :20025.0   Max.   :4227.511   Max.   :1.0000  \n NA's   :22066   NA's   :22066     NA's   :22066                      \n      BIZ            SCHOOLS     \n Min.   : 0.000   Min.   :0.000  \n 1st Qu.: 0.000   1st Qu.:0.000  \n Median : 1.000   Median :0.000  \n Mean   : 7.303   Mean   :0.529  \n 3rd Qu.: 6.000   3rd Qu.:1.000  \n Max.   :97.000   Max.   :4.000  \n                                 \n\n\nHence, the ifelse() function in the base package is used to replace the zero values with 0.99.\n\nSIM$DU = ifelse(SIM$DU == 0, 0.99, SIM$DU)\nSIM$HDB12R = ifelse(SIM$HDB12R == 0, 0.99, SIM$HDB12R)\nSIM$HDB34R = ifelse(SIM$HDB34R == 0, 0.99, SIM$HDB34R)\nSIM$HDB5RMore = ifelse(SIM$HDB5RMore == 0, 0.99, SIM$HDB5RMore)\nSIM$HDBRent = ifelse(SIM$HDBRent == 0, 0.99, SIM$HDBRent)\nSIM$MRTLRTEXITS = ifelse(SIM$MRTLRTEXITS == 0, 0.99, SIM$MRTLRTEXITS)\nSIM$BIZ = ifelse(SIM$BIZ == 0, 0.99, SIM$BIZ)\nSIM$SCHOOLS = ifelse(SIM$SCHOOLS == 0, 0.99, SIM$SCHOOLS)\n\nA confirmatory check is then made to ensure that the replacements have been made.\n\nsummary(SIM)\n\n ORIGIN_GRID        DESTIN_GRID            TRIPS          FlowNoIntra     \n Length:65521       Length:65521       Min.   :    1.0   Min.   :    0.0  \n Class :character   Class :character   1st Qu.:    7.0   1st Qu.:    7.0  \n Mode  :character   Mode  :character   Median :   39.0   Median :   37.0  \n                                       Mean   :  392.3   Mean   :  376.1  \n                                       3rd Qu.:  182.0   3rd Qu.:  176.0  \n                                       Max.   :79622.0   Max.   :79622.0  \n                                                                          \n     offset              dist             DU              HDB12R       \n Min.   :0.000001   Min.   :  100   Min.   :   0.99   Min.   :   0.99  \n 1st Qu.:1.000000   1st Qu.: 2704   1st Qu.: 992.00   1st Qu.:   0.99  \n Median :1.000000   Median : 5408   Median :2635.00   Median :   0.99  \n Mean   :0.990339   Mean   : 6272   Mean   :2853.60   Mean   : 187.54  \n 3rd Qu.:1.000000   3rd Qu.: 8842   3rd Qu.:4302.00   3rd Qu.: 266.50  \n Max.   :1.000000   Max.   :24784   Max.   :7946.00   Max.   :4268.10  \n                                    NA's   :22066     NA's   :22066    \n     HDB34R           HDB5RMore           HDBRent          MRTLRTEXITS    \n Min.   :    0.99   Min.   :    0.99   Min.   :   0.990   Min.   :0.9900  \n 1st Qu.: 1745.10   1st Qu.:  694.20   1st Qu.:   0.990   1st Qu.:0.9900  \n Median : 4517.34   Median : 1872.56   Median :   2.404   Median :0.9900  \n Mean   : 5236.62   Mean   : 2671.14   Mean   : 383.076   Mean   :0.9937  \n 3rd Qu.: 8061.27   3rd Qu.: 3634.76   3rd Qu.: 595.057   3rd Qu.:1.0000  \n Max.   :17602.44   Max.   :20025.00   Max.   :4227.511   Max.   :1.0000  \n NA's   :22066      NA's   :22066      NA's   :22066                      \n      BIZ            SCHOOLS     \n Min.   : 0.990   Min.   :0.990  \n 1st Qu.: 0.990   1st Qu.:0.990  \n Median : 1.000   Median :0.990  \n Mean   : 7.731   Mean   :1.171  \n 3rd Qu.: 6.000   3rd Qu.:1.000  \n Max.   :97.000   Max.   :4.000  \n                                 \n\n\nA check for missing values using the colSums() and is.na() functions in the base package revealed that the variables containing the number of residents in the different HDB housing types have NA values.\n\ncolSums(is.na(SIM))\n\nORIGIN_GRID DESTIN_GRID       TRIPS FlowNoIntra      offset        dist \n          0           0           0           0           0           0 \n         DU      HDB12R      HDB34R   HDB5RMore     HDBRent MRTLRTEXITS \n      22066       22066       22066       22066       22066           0 \n        BIZ     SCHOOLS \n          0           0 \n\n\nHence, the ifelse() function in the base package is used to replace the missing values with 0.99.\n\nSIM$DU = ifelse(is.na(SIM$DU), 0.99, SIM$DU)\nSIM$HDB12R = ifelse(is.na(SIM$HDB12R), 0.99, SIM$HDB12R)\nSIM$HDB34R = ifelse(is.na(SIM$HDB34R), 0.99, SIM$HDB34R)\nSIM$HDB5RMore = ifelse(is.na(SIM$HDB5RMore), 0.99, SIM$HDB5RMore)\nSIM$HDBRent = ifelse(is.na(SIM$HDBRent), 0.99, SIM$HDBRent)\n\nA confirmatory check is then made to ensure that the replacements have been made.\n\ncolSums(is.na(SIM))\n\nORIGIN_GRID DESTIN_GRID       TRIPS FlowNoIntra      offset        dist \n          0           0           0           0           0           0 \n         DU      HDB12R      HDB34R   HDB5RMore     HDBRent MRTLRTEXITS \n          0           0           0           0           0           0 \n        BIZ     SCHOOLS \n          0           0 \n\n\n\n\n7.3 Unconstrained Spatial Interaction Model\nAn unconstrained SIM, uncSIM, is calibrated below by using the glm() function of the stats package. The explanatory variables are origin populations by different HDB housing types, the existence of MRT/LRT exits, the counts of business activities and schools, and the distance between the origin and destination.\nBased on the output below, the number of trips is more positively correlated to the existence of MRT/LRT exits (attractiveness variable), and most negatively correlated to distance (i.e., the greater the distance between origin and destination, the lower the number of trips). Between the number of business activities and the number of schools, the latter is more correlated to the number of trips than the latter.\n\nuncSIM = glm(formula = TRIPS ~ \n               log(DU) + \n               log(HDB12R) +\n               log(HDB34R) +\n               log(HDB5RMore) +\n               log(HDBRent) +\n               log(MRTLRTEXITS) +\n               log(BIZ) +\n               log(SCHOOLS) +\n               log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM,\n              na.action = na.exclude)\n\nuncSIM\n\n\nCall:  glm(formula = TRIPS ~ log(DU) + log(HDB12R) + log(HDB34R) + log(HDB5RMore) + \n    log(HDBRent) + log(MRTLRTEXITS) + log(BIZ) + log(SCHOOLS) + \n    log(dist), family = poisson(link = \"log\"), data = SIM, na.action = na.exclude)\n\nCoefficients:\n     (Intercept)           log(DU)       log(HDB12R)       log(HDB34R)  \n       11.942825         -0.005806          0.008040          0.038142  \n  log(HDB5RMore)      log(HDBRent)  log(MRTLRTEXITS)          log(BIZ)  \n        0.165827         -0.003235         75.778100          0.051285  \n    log(SCHOOLS)         log(dist)  \n        0.350831         -0.848891  \n\nDegrees of Freedom: 65520 Total (i.e. Null);  65511 Residual\nNull Deviance:      103200000 \nResidual Deviance: 61540000     AIC: 61910000\n\n\nThe R-squared values are calculated to measure how much variation of the trips can be accounted for by the unconstrained SIM.\n\nBased on the outcome from the cor() function in the stats package, the R-squared value is 0.09206193. This means that about 9.25% of the variation in the number of trips can be accounted for by the unconstrained SIM.\nBased on the performance package, the R-squared values for generalised linear models are computed using the r2_kullback() and r2_mcfadden() functions. The results are 0.4032871 and 0.402 respectively, i.e., that about 39.9% or 50.6% of the variation in the number of trips can be accounted for by the unconstrained SIM.\n\n\nCalcRSquared = function(observed, estimated){\n  r = cor(observed, estimated)\n  R2 = r^2\n  R2\n}\n\nCalcRSquared(uncSIM$data$TRIPS, uncSIM$fitted.values)\n\n[1] 0.09206193\n\nr2_kullback(uncSIM)\n\nKullback-Leibler R2 \n          0.4032871 \n\nr2_mcfadden(uncSIM)\n\n# R2 for Generalized Linear Regression\n       R2: 0.402\n  adj. R2: 0.402\n\n\n\n\n7.4 Origin (Production) Constrained Spatial Interaction Model\nAn origin constrained SIM, orcSIM, is calibrated below by using the glm() function of the stats package. The explanatory variables are the existence of MRT/LRT exits, the counts of business activities and schools, and the distance between the origin and destination.\nSimilar to the unconstrained SIM, based on the output below, the number of trips is more positively correlated to the existence of MRT/LRT exits (attractiveness variable), and most negatively correlated to distance (i.e., the greater the distance between origin and destination, the lower the number of trips). Between the number of business activities and the number of schools, the latter is more correlated to the number of trips than the latter.\n\norcSIM = glm(formula = TRIPS ~ \n               ORIGIN_GRID +\n               log(MRTLRTEXITS) +\n               log(BIZ) +\n               log(SCHOOLS) +\n               log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM,\n              na.action = na.exclude)\n\nsummary(orcSIM)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_GRID + log(MRTLRTEXITS) + log(BIZ) + \n    log(SCHOOLS) + log(dist), family = poisson(link = \"log\"), \n    data = SIM, na.action = na.exclude)\n\nCoefficients:\n                   Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)      10.1323499  0.0762583   132.869  &lt; 2e-16 ***\nORIGIN_GRID1001  -0.0187213  0.0988267    -0.189 0.849751    \nORIGIN_GRID1002  -1.4849073  0.1234834   -12.025  &lt; 2e-16 ***\nORIGIN_GRID1003   1.7184882  0.0813476    21.125  &lt; 2e-16 ***\nORIGIN_GRID1004   4.7926476  0.0762696    62.838  &lt; 2e-16 ***\nORIGIN_GRID1005   2.9085347  0.0769104    37.817  &lt; 2e-16 ***\nORIGIN_GRID101    2.3912603  0.0770796    31.023  &lt; 2e-16 ***\nORIGIN_GRID1010   1.9150163  0.0766927    24.970  &lt; 2e-16 ***\nORIGIN_GRID1011   0.3003584  0.0788089     3.811 0.000138 ***\nORIGIN_GRID1012   1.0097050  0.0783742    12.883  &lt; 2e-16 ***\nORIGIN_GRID1013   1.6226907  0.0768354    21.119  &lt; 2e-16 ***\nORIGIN_GRID1014   1.4086826  0.0773478    18.212  &lt; 2e-16 ***\nORIGIN_GRID102   -0.7895281  0.1025124    -7.702 1.34e-14 ***\nORIGIN_GRID1023   4.0834474  0.0763632    53.474  &lt; 2e-16 ***\nORIGIN_GRID1024   4.1768143  0.0763237    54.725  &lt; 2e-16 ***\nORIGIN_GRID1025   2.6867445  0.0768322    34.969  &lt; 2e-16 ***\nORIGIN_GRID1028   0.9864389  0.0774830    12.731  &lt; 2e-16 ***\nORIGIN_GRID1030  -0.3165880  0.0837961    -3.778 0.000158 ***\nORIGIN_GRID1031   2.5537053  0.0763962    33.427  &lt; 2e-16 ***\nORIGIN_GRID1033   2.2096805  0.0764902    28.888  &lt; 2e-16 ***\nORIGIN_GRID1040   0.2484320  0.0921691     2.695 0.007031 ** \nORIGIN_GRID1041   1.0852037  0.0782999    13.860  &lt; 2e-16 ***\nORIGIN_GRID1042   4.2948692  0.0763113    56.281  &lt; 2e-16 ***\nORIGIN_GRID1043   3.1043730  0.0764911    40.585  &lt; 2e-16 ***\nORIGIN_GRID1048   1.3396782  0.0770554    17.386  &lt; 2e-16 ***\nORIGIN_GRID1049   2.4395273  0.0764325    31.917  &lt; 2e-16 ***\nORIGIN_GRID1050   3.2863135  0.0763160    43.062  &lt; 2e-16 ***\nORIGIN_GRID1061   4.4206712  0.0763232    57.920  &lt; 2e-16 ***\nORIGIN_GRID1062   4.6637690  0.0762917    61.131  &lt; 2e-16 ***\nORIGIN_GRID1063   1.7049145  0.0772711    22.064  &lt; 2e-16 ***\nORIGIN_GRID1064  -1.8838834  0.2613695    -7.208 5.69e-13 ***\nORIGIN_GRID1066   1.4889030  0.0767516    19.399  &lt; 2e-16 ***\nORIGIN_GRID1067   2.1342344  0.0765267    27.889  &lt; 2e-16 ***\nORIGIN_GRID1068   2.9995195  0.0763385    39.292  &lt; 2e-16 ***\nORIGIN_GRID1069   2.1088206  0.0765051    27.564  &lt; 2e-16 ***\nORIGIN_GRID1071   0.8814233  0.0772974    11.403  &lt; 2e-16 ***\nORIGIN_GRID1078   0.1891141  0.0897570     2.107 0.035121 *  \nORIGIN_GRID1080   3.1774057  0.0764377    41.569  &lt; 2e-16 ***\nORIGIN_GRID1081   3.3831418  0.0764049    44.279  &lt; 2e-16 ***\nORIGIN_GRID1082   1.5720703  0.0774891    20.288  &lt; 2e-16 ***\nORIGIN_GRID1086   2.5267400  0.0765206    33.020  &lt; 2e-16 ***\nORIGIN_GRID1087   2.0251646  0.0765505    26.455  &lt; 2e-16 ***\nORIGIN_GRID1089   2.4478469  0.0764387    32.024  &lt; 2e-16 ***\nORIGIN_GRID1090   2.0946812  0.0765151    27.376  &lt; 2e-16 ***\nORIGIN_GRID1097  -0.6815436  0.1291654    -5.277 1.32e-07 ***\nORIGIN_GRID1100   4.1750257  0.0763333    54.695  &lt; 2e-16 ***\nORIGIN_GRID1101   1.1255111  0.0861346    13.067  &lt; 2e-16 ***\nORIGIN_GRID1102  -0.1699923  0.0862555    -1.971 0.048747 *  \nORIGIN_GRID1104   3.1518902  0.0763399    41.288  &lt; 2e-16 ***\nORIGIN_GRID1105   2.8456660  0.0763673    37.263  &lt; 2e-16 ***\nORIGIN_GRID1106   2.4650265  0.0768114    32.092  &lt; 2e-16 ***\nORIGIN_GRID1107   0.5834072  0.0780406     7.476 7.68e-14 ***\nORIGIN_GRID1108   1.4735077  0.0767458    19.200  &lt; 2e-16 ***\nORIGIN_GRID1115  -1.4048478  0.1632407    -8.606  &lt; 2e-16 ***\nORIGIN_GRID1116  -0.2987753  0.1192372    -2.506 0.012220 *  \nORIGIN_GRID1119   1.7083666  0.0772705    22.109  &lt; 2e-16 ***\nORIGIN_GRID1120   1.5632728  0.0776282    20.138  &lt; 2e-16 ***\nORIGIN_GRID1123   1.4745705  0.0769255    19.169  &lt; 2e-16 ***\nORIGIN_GRID1124   2.4700301  0.0765225    32.278  &lt; 2e-16 ***\nORIGIN_GRID1125   2.7936377  0.0763836    36.574  &lt; 2e-16 ***\nORIGIN_GRID1128   1.4052412  0.0767680    18.305  &lt; 2e-16 ***\nORIGIN_GRID1138   2.9471561  0.0765695    38.490  &lt; 2e-16 ***\nORIGIN_GRID1139   3.8214325  0.0764002    50.019  &lt; 2e-16 ***\nORIGIN_GRID1140   1.6416838  0.0774032    21.210  &lt; 2e-16 ***\nORIGIN_GRID1142   2.1799280  0.0766665    28.434  &lt; 2e-16 ***\nORIGIN_GRID1143   2.5340621  0.0763916    33.172  &lt; 2e-16 ***\nORIGIN_GRID1144   1.5208821  0.0771309    19.718  &lt; 2e-16 ***\nORIGIN_GRID1145   0.7347810  0.0775813     9.471  &lt; 2e-16 ***\nORIGIN_GRID1146   1.9402521  0.0766000    25.330  &lt; 2e-16 ***\nORIGIN_GRID1147  -0.0671217  0.0808919    -0.830 0.406669    \nORIGIN_GRID1152  -1.8847451  0.1455979   -12.945  &lt; 2e-16 ***\nORIGIN_GRID1153   1.6998287  0.0771099    22.044  &lt; 2e-16 ***\nORIGIN_GRID1157   4.0059683  0.0763200    52.489  &lt; 2e-16 ***\nORIGIN_GRID1158   1.4446564  0.0773895    18.667  &lt; 2e-16 ***\nORIGIN_GRID116    2.3280725  0.0797005    29.210  &lt; 2e-16 ***\nORIGIN_GRID1161   3.2542296  0.0763267    42.636  &lt; 2e-16 ***\nORIGIN_GRID1162   3.0991770  0.0763757    40.578  &lt; 2e-16 ***\nORIGIN_GRID1163   3.5647739  0.0763061    46.717  &lt; 2e-16 ***\nORIGIN_GRID1164   1.5794689  0.0768706    20.547  &lt; 2e-16 ***\nORIGIN_GRID1167  -0.6484539  0.0891167    -7.276 3.43e-13 ***\nORIGIN_GRID117   -0.8045623  0.1925200    -4.179 2.93e-05 ***\nORIGIN_GRID1171  -0.8818416  0.1060607    -8.314  &lt; 2e-16 ***\nORIGIN_GRID1172   3.3640285  0.0764630    43.995  &lt; 2e-16 ***\nORIGIN_GRID1173   0.7417785  0.0789385     9.397  &lt; 2e-16 ***\nORIGIN_GRID1176   2.9429219  0.0764948    38.472  &lt; 2e-16 ***\nORIGIN_GRID1177   3.4955737  0.0764520    45.722  &lt; 2e-16 ***\nORIGIN_GRID118   -0.3328263  0.0926504    -3.592 0.000328 ***\nORIGIN_GRID1180   3.6810017  0.0763267    48.227  &lt; 2e-16 ***\nORIGIN_GRID1181   2.9575233  0.0763444    38.739  &lt; 2e-16 ***\nORIGIN_GRID1183  -0.2935817  0.0841420    -3.489 0.000485 ***\nORIGIN_GRID1184   2.1523449  0.0764817    28.142  &lt; 2e-16 ***\nORIGIN_GRID1186  -2.5147807  0.2037852   -12.340  &lt; 2e-16 ***\nORIGIN_GRID119    0.7563840  0.0825225     9.166  &lt; 2e-16 ***\nORIGIN_GRID1192  -0.0432550  0.0837965    -0.516 0.605721    \nORIGIN_GRID1193   1.9186410  0.0770541    24.900  &lt; 2e-16 ***\nORIGIN_GRID1194   1.3145441  0.0777964    16.897  &lt; 2e-16 ***\nORIGIN_GRID1195   3.9510982  0.0763141    51.774  &lt; 2e-16 ***\nORIGIN_GRID1196   2.5066851  0.0767621    32.655  &lt; 2e-16 ***\nORIGIN_GRID1199   1.2053340  0.0771679    15.620  &lt; 2e-16 ***\nORIGIN_GRID120   -0.8686127  0.0929454    -9.345  &lt; 2e-16 ***\nORIGIN_GRID1200   3.1375104  0.0763415    41.098  &lt; 2e-16 ***\nORIGIN_GRID1201   2.8744998  0.0763657    37.641  &lt; 2e-16 ***\nORIGIN_GRID1202   1.4094241  0.0767923    18.354  &lt; 2e-16 ***\nORIGIN_GRID1203   1.6333565  0.0770638    21.195  &lt; 2e-16 ***\nORIGIN_GRID1204   2.1981521  0.0766623    28.673  &lt; 2e-16 ***\nORIGIN_GRID1205  -2.3846063  0.2692226    -8.857  &lt; 2e-16 ***\nORIGIN_GRID1207   1.3387213  0.0771767    17.346  &lt; 2e-16 ***\nORIGIN_GRID1208   1.7019077  0.0770365    22.092  &lt; 2e-16 ***\nORIGIN_GRID1209   0.9242533  0.0780323    11.844  &lt; 2e-16 ***\nORIGIN_GRID121   -0.5061244  0.0862096    -5.871 4.34e-09 ***\nORIGIN_GRID1210  -1.5249877  0.1383747   -11.021  &lt; 2e-16 ***\nORIGIN_GRID1211  -0.8709018  0.0918256    -9.484  &lt; 2e-16 ***\nORIGIN_GRID1212  -1.6939884  0.1227740   -13.798  &lt; 2e-16 ***\nORIGIN_GRID1213   3.9185366  0.0763208    51.343  &lt; 2e-16 ***\nORIGIN_GRID1214   2.1520873  0.0767215    28.051  &lt; 2e-16 ***\nORIGIN_GRID1215  -1.3341340  0.2179005    -6.123 9.20e-10 ***\nORIGIN_GRID1218   2.5611821  0.0764897    33.484  &lt; 2e-16 ***\nORIGIN_GRID1219   3.8146063  0.0763003    49.995  &lt; 2e-16 ***\nORIGIN_GRID122    2.4073671  0.0799821    30.099  &lt; 2e-16 ***\nORIGIN_GRID1220   2.0129118  0.0764917    26.315  &lt; 2e-16 ***\nORIGIN_GRID1221   1.8435182  0.0766422    24.054  &lt; 2e-16 ***\nORIGIN_GRID1222   1.5129101  0.0769588    19.659  &lt; 2e-16 ***\nORIGIN_GRID1225   1.7695577  0.0766592    23.083  &lt; 2e-16 ***\nORIGIN_GRID1226   1.1826106  0.0772346    15.312  &lt; 2e-16 ***\nORIGIN_GRID1227   2.0710843  0.0766706    27.013  &lt; 2e-16 ***\nORIGIN_GRID1229   1.1132217  0.0784101    14.197  &lt; 2e-16 ***\nORIGIN_GRID1230   2.4102562  0.0765354    31.492  &lt; 2e-16 ***\nORIGIN_GRID1231   3.1928856  0.0764010    41.791  &lt; 2e-16 ***\nORIGIN_GRID1232   3.3140082  0.0764141    43.369  &lt; 2e-16 ***\nORIGIN_GRID1233   4.2053106  0.0763321    55.092  &lt; 2e-16 ***\nORIGIN_GRID1234   0.0559453  0.0857745     0.652 0.514248    \nORIGIN_GRID1238   1.5885887  0.0767145    20.708  &lt; 2e-16 ***\nORIGIN_GRID1239   1.3341157  0.0767543    17.382  &lt; 2e-16 ***\nORIGIN_GRID1240   2.3170494  0.0763946    30.330  &lt; 2e-16 ***\nORIGIN_GRID1241   1.6832585  0.0768589    21.901  &lt; 2e-16 ***\nORIGIN_GRID1242   1.0988918  0.0772858    14.219  &lt; 2e-16 ***\nORIGIN_GRID1243  -0.9056032  0.0893230   -10.139  &lt; 2e-16 ***\nORIGIN_GRID1244   1.2217246  0.0770992    15.846  &lt; 2e-16 ***\nORIGIN_GRID1245   2.5093085  0.0765808    32.767  &lt; 2e-16 ***\nORIGIN_GRID1246   1.8972619  0.0771920    24.578  &lt; 2e-16 ***\nORIGIN_GRID1249   0.5987004  0.0835851     7.163 7.91e-13 ***\nORIGIN_GRID1250   4.0087919  0.0762908    52.546  &lt; 2e-16 ***\nORIGIN_GRID1251   3.7326385  0.0763186    48.909  &lt; 2e-16 ***\nORIGIN_GRID1252   3.2698623  0.0764163    42.790  &lt; 2e-16 ***\nORIGIN_GRID1253   0.8437545  0.0799887    10.548  &lt; 2e-16 ***\nORIGIN_GRID1256   2.0092397  0.0765175    26.259  &lt; 2e-16 ***\nORIGIN_GRID1257   1.0459553  0.0769502    13.593  &lt; 2e-16 ***\nORIGIN_GRID1258   2.0287596  0.0765075    26.517  &lt; 2e-16 ***\nORIGIN_GRID1259   2.2857834  0.0765126    29.875  &lt; 2e-16 ***\nORIGIN_GRID1260   1.2171715  0.0780152    15.602  &lt; 2e-16 ***\nORIGIN_GRID1261   0.6365443  0.0775919     8.204 2.33e-16 ***\nORIGIN_GRID1262   1.7768407  0.0765878    23.200  &lt; 2e-16 ***\nORIGIN_GRID1263   1.9271804  0.0765625    25.171  &lt; 2e-16 ***\nORIGIN_GRID1264   2.8611838  0.0763896    37.455  &lt; 2e-16 ***\nORIGIN_GRID1265   3.1477085  0.0764000    41.200  &lt; 2e-16 ***\nORIGIN_GRID1266   1.8955318  0.0769730    24.626  &lt; 2e-16 ***\nORIGIN_GRID1268   3.4204937  0.0764800    44.724  &lt; 2e-16 ***\nORIGIN_GRID1269   3.3598629  0.0763296    44.018  &lt; 2e-16 ***\nORIGIN_GRID1270   3.7964229  0.0763476    49.726  &lt; 2e-16 ***\nORIGIN_GRID1272   2.6852551  0.0776166    34.596  &lt; 2e-16 ***\nORIGIN_GRID1276   1.6129849  0.0765830    21.062  &lt; 2e-16 ***\nORIGIN_GRID1277   1.8158361  0.0766224    23.699  &lt; 2e-16 ***\nORIGIN_GRID1278   1.8180647  0.0764851    23.770  &lt; 2e-16 ***\nORIGIN_GRID1279   2.6311203  0.0763860    34.445  &lt; 2e-16 ***\nORIGIN_GRID1280   2.0214140  0.0764875    26.428  &lt; 2e-16 ***\nORIGIN_GRID1281   1.5019684  0.0767495    19.570  &lt; 2e-16 ***\nORIGIN_GRID1282   2.1265771  0.0765193    27.791  &lt; 2e-16 ***\nORIGIN_GRID1283   2.2891479  0.0764941    29.926  &lt; 2e-16 ***\nORIGIN_GRID1284   3.0772408  0.0763691    40.294  &lt; 2e-16 ***\nORIGIN_GRID1285   2.4026915  0.0764944    31.410  &lt; 2e-16 ***\nORIGIN_GRID1288   3.8147059  0.0763848    49.941  &lt; 2e-16 ***\nORIGIN_GRID1289   4.8432192  0.0763009    63.475  &lt; 2e-16 ***\nORIGIN_GRID1294   2.3390470  0.0764466    30.597  &lt; 2e-16 ***\nORIGIN_GRID1295   2.4246862  0.0763800    31.745  &lt; 2e-16 ***\nORIGIN_GRID1296   2.4300941  0.0763822    31.815  &lt; 2e-16 ***\nORIGIN_GRID1297   0.9520144  0.0778214    12.233  &lt; 2e-16 ***\nORIGIN_GRID1298   2.5345394  0.0764102    33.170  &lt; 2e-16 ***\nORIGIN_GRID1299   3.1102135  0.0763391    40.742  &lt; 2e-16 ***\nORIGIN_GRID1300  -0.0309456  0.0796007    -0.389 0.697453    \nORIGIN_GRID1301   3.1825036  0.0763546    41.681  &lt; 2e-16 ***\nORIGIN_GRID1302   3.5730628  0.0763041    46.827  &lt; 2e-16 ***\nORIGIN_GRID1303   4.0171037  0.0762865    52.658  &lt; 2e-16 ***\nORIGIN_GRID1304   0.4440990  0.0787271     5.641 1.69e-08 ***\nORIGIN_GRID1306   3.1451792  0.0765103    41.108  &lt; 2e-16 ***\nORIGIN_GRID1307   4.4452424  0.0763155    58.248  &lt; 2e-16 ***\nORIGIN_GRID1308   3.5473094  0.0765649    46.331  &lt; 2e-16 ***\nORIGIN_GRID1314   1.5018415  0.0765969    19.607  &lt; 2e-16 ***\nORIGIN_GRID1315   1.7979950  0.0765045    23.502  &lt; 2e-16 ***\nORIGIN_GRID1316   1.1603346  0.0774019    14.991  &lt; 2e-16 ***\nORIGIN_GRID1317   2.0380070  0.0766554    26.587  &lt; 2e-16 ***\nORIGIN_GRID1318   2.6712733  0.0764433    34.944  &lt; 2e-16 ***\nORIGIN_GRID1319   3.2274577  0.0763310    42.282  &lt; 2e-16 ***\nORIGIN_GRID1320   3.2819579  0.0763155    43.005  &lt; 2e-16 ***\nORIGIN_GRID1321   3.1239603  0.0763654    40.908  &lt; 2e-16 ***\nORIGIN_GRID1322   2.4576107  0.0764545    32.145  &lt; 2e-16 ***\nORIGIN_GRID1323   1.7238840  0.0771220    22.353  &lt; 2e-16 ***\nORIGIN_GRID1326   4.5232974  0.0763068    59.278  &lt; 2e-16 ***\nORIGIN_GRID1327   4.2117929  0.0763657    55.153  &lt; 2e-16 ***\nORIGIN_GRID1332   0.1904362  0.0786235     2.422 0.015430 *  \nORIGIN_GRID1333   1.1254088  0.0768174    14.650  &lt; 2e-16 ***\nORIGIN_GRID1334   2.1270997  0.0764031    27.840  &lt; 2e-16 ***\nORIGIN_GRID1335   3.0038729  0.0763366    39.350  &lt; 2e-16 ***\nORIGIN_GRID1336   2.5696444  0.0764686    33.604  &lt; 2e-16 ***\nORIGIN_GRID1337   3.7653831  0.0762811    49.362  &lt; 2e-16 ***\nORIGIN_GRID1338   2.2195023  0.0764829    29.020  &lt; 2e-16 ***\nORIGIN_GRID1339   2.4772005  0.0764340    32.410  &lt; 2e-16 ***\nORIGIN_GRID1340   3.9324939  0.0762807    51.553  &lt; 2e-16 ***\nORIGIN_GRID1341   1.9282408  0.0768342    25.096  &lt; 2e-16 ***\nORIGIN_GRID1342   1.3695096  0.0772817    17.721  &lt; 2e-16 ***\nORIGIN_GRID1345   3.9119354  0.0763744    51.221  &lt; 2e-16 ***\nORIGIN_GRID1352   1.0978116  0.0771170    14.236  &lt; 2e-16 ***\nORIGIN_GRID1353   1.8289450  0.0765204    23.901  &lt; 2e-16 ***\nORIGIN_GRID1354   2.5062357  0.0763557    32.823  &lt; 2e-16 ***\nORIGIN_GRID1355   2.9341526  0.0763796    38.415  &lt; 2e-16 ***\nORIGIN_GRID1356   3.3555397  0.0763339    43.959  &lt; 2e-16 ***\nORIGIN_GRID1357   3.4448921  0.0763114    45.143  &lt; 2e-16 ***\nORIGIN_GRID1358   3.2126336  0.0764031    42.048  &lt; 2e-16 ***\nORIGIN_GRID1359   3.4727142  0.0763155    45.505  &lt; 2e-16 ***\nORIGIN_GRID136    1.7751283  0.0787710    22.535  &lt; 2e-16 ***\nORIGIN_GRID1360   3.2208376  0.0763630    42.178  &lt; 2e-16 ***\nORIGIN_GRID1364  -0.8868064  0.1183677    -7.492 6.79e-14 ***\nORIGIN_GRID137   -0.2707702  0.1009946    -2.681 0.007339 ** \nORIGIN_GRID1371   0.3714315  0.0788766     4.709 2.49e-06 ***\nORIGIN_GRID1372   1.8959518  0.0764890    24.787  &lt; 2e-16 ***\nORIGIN_GRID1373   2.1851721  0.0765032    28.563  &lt; 2e-16 ***\nORIGIN_GRID1374   2.3629785  0.0765480    30.869  &lt; 2e-16 ***\nORIGIN_GRID1375   3.9215585  0.0763685    51.350  &lt; 2e-16 ***\nORIGIN_GRID1376   2.8525427  0.0763778    37.348  &lt; 2e-16 ***\nORIGIN_GRID1377   1.4346760  0.0769634    18.641  &lt; 2e-16 ***\nORIGIN_GRID1378   3.8500903  0.0763047    50.457  &lt; 2e-16 ***\nORIGIN_GRID1379   1.9418371  0.0775621    25.036  &lt; 2e-16 ***\nORIGIN_GRID138   -0.7218784  0.1123240    -6.427 1.30e-10 ***\nORIGIN_GRID1380   2.0763839  0.0767688    27.047  &lt; 2e-16 ***\nORIGIN_GRID1383   1.8604764  0.0778630    23.894  &lt; 2e-16 ***\nORIGIN_GRID1389  -0.9075119  0.1152249    -7.876 3.38e-15 ***\nORIGIN_GRID139    0.0471789  0.0869613     0.543 0.587456    \nORIGIN_GRID1390  -0.1046947  0.0819596    -1.277 0.201463    \nORIGIN_GRID1391   0.4191454  0.0779533     5.377 7.58e-08 ***\nORIGIN_GRID1392   1.9696614  0.0764627    25.760  &lt; 2e-16 ***\nORIGIN_GRID1393   2.4541980  0.0763836    32.130  &lt; 2e-16 ***\nORIGIN_GRID1394   3.1746386  0.0763441    41.583  &lt; 2e-16 ***\nORIGIN_GRID1395   4.5967970  0.0763653    60.195  &lt; 2e-16 ***\nORIGIN_GRID1396   1.2642583  0.0774787    16.318  &lt; 2e-16 ***\nORIGIN_GRID1397   1.8180302  0.0789291    23.034  &lt; 2e-16 ***\nORIGIN_GRID1398   3.2308466  0.0764803    42.244  &lt; 2e-16 ***\nORIGIN_GRID140    2.7124927  0.0767270    35.353  &lt; 2e-16 ***\nORIGIN_GRID1401  -0.4947515  0.0958776    -5.160 2.47e-07 ***\nORIGIN_GRID1408  -0.8918128  0.0965425    -9.238  &lt; 2e-16 ***\nORIGIN_GRID1409  -0.2074808  0.0827993    -2.506 0.012216 *  \nORIGIN_GRID141   -0.6658871  0.0840476    -7.923 2.32e-15 ***\nORIGIN_GRID1410   1.2916385  0.0781386    16.530  &lt; 2e-16 ***\nORIGIN_GRID1411   2.4862474  0.0763623    32.559  &lt; 2e-16 ***\nORIGIN_GRID1412   3.4559643  0.0763056    45.291  &lt; 2e-16 ***\nORIGIN_GRID1413   3.3821915  0.0763554    44.295  &lt; 2e-16 ***\nORIGIN_GRID1414   0.5413548  0.0785783     6.889 5.60e-12 ***\nORIGIN_GRID1415   2.0971470  0.0765394    27.400  &lt; 2e-16 ***\nORIGIN_GRID1416   1.3528942  0.0772544    17.512  &lt; 2e-16 ***\nORIGIN_GRID1417   1.3131071  0.0773434    16.978  &lt; 2e-16 ***\nORIGIN_GRID1418   0.6863197  0.0784319     8.751  &lt; 2e-16 ***\nORIGIN_GRID1419  -0.9824279  0.1159642    -8.472  &lt; 2e-16 ***\nORIGIN_GRID142    0.7120112  0.0877743     8.112 4.99e-16 ***\nORIGIN_GRID1420  -0.7472001  0.0968792    -7.713 1.23e-14 ***\nORIGIN_GRID1428  -2.5141572  0.2613696    -9.619  &lt; 2e-16 ***\nORIGIN_GRID1430   1.3069123  0.0776963    16.821  &lt; 2e-16 ***\nORIGIN_GRID1431   0.0782888  0.0784782     0.998 0.318480    \nORIGIN_GRID1432   3.2403760  0.0763168    42.460  &lt; 2e-16 ***\nORIGIN_GRID1433   1.8651556  0.0785709    23.739  &lt; 2e-16 ***\nORIGIN_GRID1434   1.7304399  0.0768190    22.526  &lt; 2e-16 ***\nORIGIN_GRID1435   2.5412949  0.0766830    33.140  &lt; 2e-16 ***\nORIGIN_GRID1436   1.2504779  0.0772932    16.178  &lt; 2e-16 ***\nORIGIN_GRID1439  -0.3416872  0.0846062    -4.039 5.38e-05 ***\nORIGIN_GRID1440  -0.6757017  0.0998175    -6.769 1.29e-11 ***\nORIGIN_GRID1448   2.8417511  0.0767304    37.036  &lt; 2e-16 ***\nORIGIN_GRID1449   1.6366096  0.0765475    21.380  &lt; 2e-16 ***\nORIGIN_GRID1450   2.5536227  0.0764449    33.405  &lt; 2e-16 ***\nORIGIN_GRID1451   3.4312495  0.0763190    44.959  &lt; 2e-16 ***\nORIGIN_GRID1452   1.8942641  0.0765860    24.734  &lt; 2e-16 ***\nORIGIN_GRID1453   3.2198469  0.0763356    42.180  &lt; 2e-16 ***\nORIGIN_GRID1454   3.2968247  0.0767129    42.976  &lt; 2e-16 ***\nORIGIN_GRID1455   1.9191721  0.0767653    25.001  &lt; 2e-16 ***\nORIGIN_GRID1456   3.4203531  0.0763437    44.802  &lt; 2e-16 ***\nORIGIN_GRID1457   3.1274745  0.0764071    40.932  &lt; 2e-16 ***\nORIGIN_GRID1458  -0.2454104  0.0969454    -2.531 0.011360 *  \nORIGIN_GRID1468   2.1410861  0.0786328    27.229  &lt; 2e-16 ***\nORIGIN_GRID1469   2.9175048  0.0763255    38.225  &lt; 2e-16 ***\nORIGIN_GRID1470   1.9451316  0.0766046    25.392  &lt; 2e-16 ***\nORIGIN_GRID1471   3.3094774  0.0763406    43.351  &lt; 2e-16 ***\nORIGIN_GRID1472   3.5713428  0.0762957    46.809  &lt; 2e-16 ***\nORIGIN_GRID1473   2.1886643  0.0765300    28.599  &lt; 2e-16 ***\nORIGIN_GRID1474   3.8836901  0.0762990    50.901  &lt; 2e-16 ***\nORIGIN_GRID1475   2.6736110  0.0765013    34.949  &lt; 2e-16 ***\nORIGIN_GRID1476   2.4171182  0.0765754    31.565  &lt; 2e-16 ***\nORIGIN_GRID1477  -0.7241106  0.0930761    -7.780 7.27e-15 ***\nORIGIN_GRID1486   0.6559506  0.0804487     8.154 3.53e-16 ***\nORIGIN_GRID1487   2.8732108  0.0763432    37.635  &lt; 2e-16 ***\nORIGIN_GRID1488   1.0681032  0.0777764    13.733  &lt; 2e-16 ***\nORIGIN_GRID1489   2.4356602  0.0764468    31.861  &lt; 2e-16 ***\nORIGIN_GRID1490   2.1223901  0.0766618    27.685  &lt; 2e-16 ***\nORIGIN_GRID1491   2.5043357  0.0764255    32.768  &lt; 2e-16 ***\nORIGIN_GRID1492   2.9532409  0.0763675    38.671  &lt; 2e-16 ***\nORIGIN_GRID1493   3.6799038  0.0763099    48.223  &lt; 2e-16 ***\nORIGIN_GRID1494   3.1522719  0.0763861    41.268  &lt; 2e-16 ***\nORIGIN_GRID1506  -1.6350247  0.1490221   -10.972  &lt; 2e-16 ***\nORIGIN_GRID1507   3.0679537  0.0763205    40.198  &lt; 2e-16 ***\nORIGIN_GRID1508   1.8870319  0.0764984    24.668  &lt; 2e-16 ***\nORIGIN_GRID1509   3.4455876  0.0768148    44.856  &lt; 2e-16 ***\nORIGIN_GRID1510   3.1236618  0.0763558    40.909  &lt; 2e-16 ***\nORIGIN_GRID1512   3.8613827  0.0763003    50.608  &lt; 2e-16 ***\nORIGIN_GRID1513   4.4938497  0.0763813    58.834  &lt; 2e-16 ***\nORIGIN_GRID1514   3.2755760  0.0764230    42.861  &lt; 2e-16 ***\nORIGIN_GRID1524   1.9549050  0.0771459    25.340  &lt; 2e-16 ***\nORIGIN_GRID1525   2.6627936  0.0763958    34.855  &lt; 2e-16 ***\nORIGIN_GRID1526   2.7590709  0.0763905    36.118  &lt; 2e-16 ***\nORIGIN_GRID1527   2.4150524  0.0765554    31.546  &lt; 2e-16 ***\nORIGIN_GRID1528   1.5809142  0.0766614    20.622  &lt; 2e-16 ***\nORIGIN_GRID1529   1.4245557  0.0771342    18.469  &lt; 2e-16 ***\nORIGIN_GRID1530   3.0056109  0.0764859    39.296  &lt; 2e-16 ***\nORIGIN_GRID1531   3.5059697  0.0763415    45.925  &lt; 2e-16 ***\nORIGIN_GRID1532   2.4035635  0.0766155    31.372  &lt; 2e-16 ***\nORIGIN_GRID1544   2.6811185  0.0764527    35.069  &lt; 2e-16 ***\nORIGIN_GRID1545   2.5988283  0.0763806    34.025  &lt; 2e-16 ***\nORIGIN_GRID1546   3.3048622  0.0763169    43.304  &lt; 2e-16 ***\nORIGIN_GRID1547   2.1287566  0.0764704    27.838  &lt; 2e-16 ***\nORIGIN_GRID1548   3.4021189  0.0763347    44.568  &lt; 2e-16 ***\nORIGIN_GRID1549   3.1541799  0.0763616    41.306  &lt; 2e-16 ***\nORIGIN_GRID1550   3.8348692  0.0762986    50.261  &lt; 2e-16 ***\nORIGIN_GRID1551   1.4474204  0.0772114    18.746  &lt; 2e-16 ***\nORIGIN_GRID1552   3.4655851  0.0763590    45.385  &lt; 2e-16 ***\nORIGIN_GRID156    0.9640342  0.0994766     9.691  &lt; 2e-16 ***\nORIGIN_GRID1563   2.8619498  0.0763906    37.465  &lt; 2e-16 ***\nORIGIN_GRID1564   2.7754088  0.0763630    36.345  &lt; 2e-16 ***\nORIGIN_GRID1565   2.3882838  0.0764091    31.257  &lt; 2e-16 ***\nORIGIN_GRID1566   0.3331208  0.0791228     4.210 2.55e-05 ***\nORIGIN_GRID1567   3.0867076  0.0763756    40.415  &lt; 2e-16 ***\nORIGIN_GRID1568   3.5621025  0.0763122    46.678  &lt; 2e-16 ***\nORIGIN_GRID1569   3.3328010  0.0763494    43.652  &lt; 2e-16 ***\nORIGIN_GRID1570   3.3954429  0.0763391    44.478  &lt; 2e-16 ***\nORIGIN_GRID1571   4.2382198  0.0764321    55.451  &lt; 2e-16 ***\nORIGIN_GRID158    0.2944830  0.0895628     3.288 0.001009 ** \nORIGIN_GRID1582   1.6451459  0.0767786    21.427  &lt; 2e-16 ***\nORIGIN_GRID1583   2.7140118  0.0763538    35.545  &lt; 2e-16 ***\nORIGIN_GRID1584   1.8587783  0.0765169    24.292  &lt; 2e-16 ***\nORIGIN_GRID1585   1.4490809  0.0769750    18.825  &lt; 2e-16 ***\nORIGIN_GRID1587   3.6068434  0.0763194    47.260  &lt; 2e-16 ***\nORIGIN_GRID1588   3.6683321  0.0762959    48.080  &lt; 2e-16 ***\nORIGIN_GRID1589   3.3764382  0.0763271    44.236  &lt; 2e-16 ***\nORIGIN_GRID159    1.9018149  0.0768889    24.735  &lt; 2e-16 ***\nORIGIN_GRID1590   3.0128495  0.0763987    39.436  &lt; 2e-16 ***\nORIGIN_GRID1591   1.0384177  0.0821406    12.642  &lt; 2e-16 ***\nORIGIN_GRID160    3.1730324  0.0764795    41.489  &lt; 2e-16 ***\nORIGIN_GRID1601   2.5357594  0.0764412    33.173  &lt; 2e-16 ***\nORIGIN_GRID1602   2.8248525  0.0766386    36.859  &lt; 2e-16 ***\nORIGIN_GRID1603   1.4201334  0.0768310    18.484  &lt; 2e-16 ***\nORIGIN_GRID1604   1.1067129  0.0795968    13.904  &lt; 2e-16 ***\nORIGIN_GRID1606   3.2126015  0.0763404    42.083  &lt; 2e-16 ***\nORIGIN_GRID1607   2.8994867  0.0764095    37.947  &lt; 2e-16 ***\nORIGIN_GRID1608   3.7506895  0.0762973    49.159  &lt; 2e-16 ***\nORIGIN_GRID1609   3.6896093  0.0763230    48.342  &lt; 2e-16 ***\nORIGIN_GRID1610   3.3697476  0.0769859    43.771  &lt; 2e-16 ***\nORIGIN_GRID1620   3.0210428  0.0763736    39.556  &lt; 2e-16 ***\nORIGIN_GRID1621   2.3985228  0.0764694    31.366  &lt; 2e-16 ***\nORIGIN_GRID1622   2.8251817  0.0764825    36.939  &lt; 2e-16 ***\nORIGIN_GRID1623   1.0744304  0.0773270    13.895  &lt; 2e-16 ***\nORIGIN_GRID1624   0.9895935  0.0806632    12.268  &lt; 2e-16 ***\nORIGIN_GRID1625  -0.0077866  0.0826580    -0.094 0.924948    \nORIGIN_GRID1626   3.5570712  0.0763398    46.595  &lt; 2e-16 ***\nORIGIN_GRID1627   3.4039351  0.0763230    44.599  &lt; 2e-16 ***\nORIGIN_GRID1628   3.6040986  0.0763238    47.221  &lt; 2e-16 ***\nORIGIN_GRID1629   2.3901534  0.0765770    31.212  &lt; 2e-16 ***\nORIGIN_GRID1630   1.7966667  0.0799457    22.474  &lt; 2e-16 ***\nORIGIN_GRID1639   2.5299988  0.0765483    33.051  &lt; 2e-16 ***\nORIGIN_GRID1640   3.3185224  0.0763070    43.489  &lt; 2e-16 ***\nORIGIN_GRID1641   3.2848469  0.0763188    43.041  &lt; 2e-16 ***\nORIGIN_GRID1645   3.3316507  0.0763982    43.609  &lt; 2e-16 ***\nORIGIN_GRID1646   3.2891041  0.0763474    43.081  &lt; 2e-16 ***\nORIGIN_GRID1647   3.6455685  0.0763033    47.777  &lt; 2e-16 ***\nORIGIN_GRID1648   0.9525253  0.0833015    11.435  &lt; 2e-16 ***\nORIGIN_GRID1658   2.8771152  0.0763947    37.661  &lt; 2e-16 ***\nORIGIN_GRID1659   2.5289851  0.0764391    33.085  &lt; 2e-16 ***\nORIGIN_GRID1660   2.9716657  0.0763578    38.918  &lt; 2e-16 ***\nORIGIN_GRID1661   2.2587235  0.0765643    29.501  &lt; 2e-16 ***\nORIGIN_GRID1663  -0.0621687  0.0973500    -0.639 0.523077    \nORIGIN_GRID1665   2.4623322  0.0765470    32.168  &lt; 2e-16 ***\nORIGIN_GRID1666   4.3897747  0.0762792    57.549  &lt; 2e-16 ***\nORIGIN_GRID1667   0.6029088  0.0839032     7.186 6.68e-13 ***\nORIGIN_GRID1668   2.6343471  0.0768781    34.267  &lt; 2e-16 ***\nORIGIN_GRID1677   2.8398293  0.0763780    37.181  &lt; 2e-16 ***\nORIGIN_GRID1678   3.0639393  0.0763536    40.128  &lt; 2e-16 ***\nORIGIN_GRID1679   3.3735016  0.0763353    44.193  &lt; 2e-16 ***\nORIGIN_GRID1682   1.0165139  0.0801839    12.677  &lt; 2e-16 ***\nORIGIN_GRID1684   4.2448131  0.0766484    55.380  &lt; 2e-16 ***\nORIGIN_GRID1685   3.3668783  0.0763550    44.095  &lt; 2e-16 ***\nORIGIN_GRID1696   3.1459584  0.0764419    41.155  &lt; 2e-16 ***\nORIGIN_GRID1697   1.7520854  0.0772283    22.687  &lt; 2e-16 ***\nORIGIN_GRID1698   3.3439701  0.0768251    43.527  &lt; 2e-16 ***\nORIGIN_GRID1699   3.0977501  0.0763643    40.565  &lt; 2e-16 ***\nORIGIN_GRID1702  -0.2116087  0.0892191    -2.372 0.017702 *  \nORIGIN_GRID1704   3.1327596  0.0763727    41.019  &lt; 2e-16 ***\nORIGIN_GRID1705   3.3028749  0.0766725    43.078  &lt; 2e-16 ***\nORIGIN_GRID1715   2.9767777  0.0763672    38.980  &lt; 2e-16 ***\nORIGIN_GRID1716   1.6249263  0.0767802    21.163  &lt; 2e-16 ***\nORIGIN_GRID1717   2.3663474  0.0766916    30.855  &lt; 2e-16 ***\nORIGIN_GRID1718  -1.7011829  0.1447948   -11.749  &lt; 2e-16 ***\nORIGIN_GRID1721  -0.7622524  0.1021947    -7.459 8.73e-14 ***\nORIGIN_GRID1723   2.5332453  0.0766818    33.036  &lt; 2e-16 ***\nORIGIN_GRID1735   1.9222787  0.0767195    25.056  &lt; 2e-16 ***\nORIGIN_GRID1736   3.8643769  0.0764168    50.570  &lt; 2e-16 ***\nORIGIN_GRID1737   3.0646974  0.0763900    40.119  &lt; 2e-16 ***\nORIGIN_GRID1740   0.8304702  0.0809688    10.257  &lt; 2e-16 ***\nORIGIN_GRID1742   2.5934883  0.0767421    33.795  &lt; 2e-16 ***\nORIGIN_GRID1753   2.4319111  0.0765090    31.786  &lt; 2e-16 ***\nORIGIN_GRID1754   3.2687838  0.0763473    42.815  &lt; 2e-16 ***\nORIGIN_GRID1755   4.1447960  0.0763283    54.302  &lt; 2e-16 ***\nORIGIN_GRID1758   0.0766906  0.0862257     0.889 0.373779    \nORIGIN_GRID177   -0.4801915  0.1091400    -4.400 1.08e-05 ***\nORIGIN_GRID1773   2.2070096  0.0766677    28.787  &lt; 2e-16 ***\nORIGIN_GRID1774   4.0353470  0.0762794    52.902  &lt; 2e-16 ***\nORIGIN_GRID1775   2.7245940  0.0765144    35.609  &lt; 2e-16 ***\nORIGIN_GRID1776   3.6926602  0.0763409    48.371  &lt; 2e-16 ***\nORIGIN_GRID1778  -0.0624210  0.1123244    -0.556 0.578402    \nORIGIN_GRID178   -0.4625527  0.0854393    -5.414 6.17e-08 ***\nORIGIN_GRID179   -1.1337732  0.1455974    -7.787 6.86e-15 ***\nORIGIN_GRID1791   2.2704526  0.0766068    29.638  &lt; 2e-16 ***\nORIGIN_GRID1792   1.2018345  0.0773353    15.541  &lt; 2e-16 ***\nORIGIN_GRID1793   3.6433316  0.0763431    47.723  &lt; 2e-16 ***\nORIGIN_GRID1794   2.3116770  0.0769667    30.035  &lt; 2e-16 ***\nORIGIN_GRID1795   3.8818155  0.0763444    50.846  &lt; 2e-16 ***\nORIGIN_GRID1796   2.4982934  0.0765838    32.622  &lt; 2e-16 ***\nORIGIN_GRID1797   3.0806652  0.0764668    40.288  &lt; 2e-16 ***\nORIGIN_GRID1811   2.7094925  0.0764318    35.450  &lt; 2e-16 ***\nORIGIN_GRID1812   3.5087913  0.0763169    45.977  &lt; 2e-16 ***\nORIGIN_GRID1813   3.0213044  0.0763804    39.556  &lt; 2e-16 ***\nORIGIN_GRID1814   4.2035649  0.0763303    55.071  &lt; 2e-16 ***\nORIGIN_GRID1815   3.7804919  0.0763331    49.526  &lt; 2e-16 ***\nORIGIN_GRID1816   2.4306861  0.0767552    31.668  &lt; 2e-16 ***\nORIGIN_GRID1817   1.6499620  0.0778526    21.193  &lt; 2e-16 ***\nORIGIN_GRID1830   3.4152295  0.0764298    44.685  &lt; 2e-16 ***\nORIGIN_GRID1831   3.8353316  0.0763104    50.260  &lt; 2e-16 ***\nORIGIN_GRID1832   3.0417277  0.0763631    39.832  &lt; 2e-16 ***\nORIGIN_GRID1833   3.5850711  0.0763590    46.950  &lt; 2e-16 ***\nORIGIN_GRID1834   2.1985302  0.0770483    28.534  &lt; 2e-16 ***\nORIGIN_GRID1835   3.8223557  0.0763237    50.081  &lt; 2e-16 ***\nORIGIN_GRID1849   2.3811896  0.0765839    31.093  &lt; 2e-16 ***\nORIGIN_GRID1850   3.4553955  0.0763373    45.265  &lt; 2e-16 ***\nORIGIN_GRID1851  -0.0106244  0.0998173    -0.106 0.915234    \nORIGIN_GRID1852   3.5043938  0.0763194    45.917  &lt; 2e-16 ***\nORIGIN_GRID1853   3.6326164  0.0763957    47.550  &lt; 2e-16 ***\nORIGIN_GRID1854   3.5883511  0.0763577    46.994  &lt; 2e-16 ***\nORIGIN_GRID1855   3.1176149  0.0772942    40.334  &lt; 2e-16 ***\nORIGIN_GRID1868   3.4937707  0.0763650    45.751  &lt; 2e-16 ***\nORIGIN_GRID1869   2.0617628  0.0766634    26.894  &lt; 2e-16 ***\nORIGIN_GRID1870   2.6804545  0.0795668    33.688  &lt; 2e-16 ***\nORIGIN_GRID1871   4.2940050  0.0762746    56.297  &lt; 2e-16 ***\nORIGIN_GRID1872   3.5696645  0.0765190    46.651  &lt; 2e-16 ***\nORIGIN_GRID1873   3.4224282  0.0764055    44.793  &lt; 2e-16 ***\nORIGIN_GRID1887   1.9617130  0.0767693    25.553  &lt; 2e-16 ***\nORIGIN_GRID1888   3.5490420  0.0763269    46.498  &lt; 2e-16 ***\nORIGIN_GRID1889   2.5429025  0.0765113    33.236  &lt; 2e-16 ***\nORIGIN_GRID1890   3.2856196  0.0763561    43.030  &lt; 2e-16 ***\nORIGIN_GRID1891   3.1966501  0.0764777    41.798  &lt; 2e-16 ***\nORIGIN_GRID1892   3.8328409  0.0762998    50.234  &lt; 2e-16 ***\nORIGIN_GRID1893   0.4849683  0.0989862     4.899 9.62e-07 ***\nORIGIN_GRID1905  -0.1451538  0.1245905    -1.165 0.244000    \nORIGIN_GRID1906   0.5801699  0.0784218     7.398 1.38e-13 ***\nORIGIN_GRID1907   1.8159406  0.0766989    23.676  &lt; 2e-16 ***\nORIGIN_GRID1908   3.1196302  0.0764032    40.831  &lt; 2e-16 ***\nORIGIN_GRID1909   3.6228382  0.0763405    47.456  &lt; 2e-16 ***\nORIGIN_GRID1910   2.8358319  0.0765493    37.046  &lt; 2e-16 ***\nORIGIN_GRID1911   1.4916611  0.0853638    17.474  &lt; 2e-16 ***\nORIGIN_GRID1926   1.6743306  0.0773888    21.635  &lt; 2e-16 ***\nORIGIN_GRID1927   1.1230138  0.0776103    14.470  &lt; 2e-16 ***\nORIGIN_GRID1928   3.5963745  0.0763199    47.122  &lt; 2e-16 ***\nORIGIN_GRID1929   4.0356034  0.0763478    52.858  &lt; 2e-16 ***\nORIGIN_GRID1930   2.9509747  0.0764446    38.603  &lt; 2e-16 ***\nORIGIN_GRID1944   2.1838300  0.0770056    28.359  &lt; 2e-16 ***\nORIGIN_GRID1945   1.1316572  0.0777847    14.549  &lt; 2e-16 ***\nORIGIN_GRID1946   3.4336145  0.0763522    44.971  &lt; 2e-16 ***\nORIGIN_GRID1947   3.8439677  0.0762976    50.381  &lt; 2e-16 ***\nORIGIN_GRID1948   3.9713129  0.0763132    52.040  &lt; 2e-16 ***\nORIGIN_GRID1949   3.4114715  0.0764109    44.646  &lt; 2e-16 ***\nORIGIN_GRID195   -0.1696293  0.1152245    -1.472 0.140977    \nORIGIN_GRID196    3.3609229  0.0764091    43.986  &lt; 2e-16 ***\nORIGIN_GRID1965   2.3667296  0.0765213    30.929  &lt; 2e-16 ***\nORIGIN_GRID1966   2.8151456  0.0765951    36.754  &lt; 2e-16 ***\nORIGIN_GRID1967   3.0470483  0.0763870    39.890  &lt; 2e-16 ***\nORIGIN_GRID1968   3.4148650  0.0763957    44.700  &lt; 2e-16 ***\nORIGIN_GRID197    0.7471381  0.0790793     9.448  &lt; 2e-16 ***\nORIGIN_GRID1983   2.4313707  0.0766163    31.734  &lt; 2e-16 ***\nORIGIN_GRID1984   1.5478497  0.0769560    20.113  &lt; 2e-16 ***\nORIGIN_GRID1985   2.9966358  0.0764449    39.200  &lt; 2e-16 ***\nORIGIN_GRID1986   3.1533941  0.0763840    41.283  &lt; 2e-16 ***\nORIGIN_GRID1987   3.1500177  0.0788020    39.974  &lt; 2e-16 ***\nORIGIN_GRID2002   0.0586012  0.1123248     0.522 0.601871    \nORIGIN_GRID2003  -0.2960506  0.0843470    -3.510 0.000448 ***\nORIGIN_GRID2004   0.9408349  0.0802631    11.722  &lt; 2e-16 ***\nORIGIN_GRID2005   2.9353099  0.0764960    38.372  &lt; 2e-16 ***\nORIGIN_GRID2006   1.9268003  0.0769609    25.036  &lt; 2e-16 ***\nORIGIN_GRID2021  -0.2432466  0.0879188    -2.767 0.005662 ** \nORIGIN_GRID2022   1.8495425  0.0785948    23.533  &lt; 2e-16 ***\nORIGIN_GRID2023   1.8520353  0.0772085    23.987  &lt; 2e-16 ***\nORIGIN_GRID2024   1.9012983  0.0772491    24.613  &lt; 2e-16 ***\nORIGIN_GRID2025   0.0560258  0.0945463     0.593 0.553465    \nORIGIN_GRID2042   0.7575682  0.0869437     8.713  &lt; 2e-16 ***\nORIGIN_GRID2043   1.5436350  0.0785273    19.657  &lt; 2e-16 ***\nORIGIN_GRID2044   1.1111748  0.0775914    14.321  &lt; 2e-16 ***\nORIGIN_GRID2045   1.1898221  0.0830861    14.320  &lt; 2e-16 ***\nORIGIN_GRID2061   1.5753441  0.0845848    18.624  &lt; 2e-16 ***\nORIGIN_GRID2062   1.5623031  0.0777224    20.101  &lt; 2e-16 ***\nORIGIN_GRID2063   0.7463465  0.0786970     9.484  &lt; 2e-16 ***\nORIGIN_GRID2064  -1.4198166  0.1269780   -11.182  &lt; 2e-16 ***\nORIGIN_GRID2079   2.5642509  0.0767208    33.423  &lt; 2e-16 ***\nORIGIN_GRID2082  -0.6017904  0.1017816    -5.913 3.37e-09 ***\nORIGIN_GRID2083   0.8660095  0.0783720    11.050  &lt; 2e-16 ***\nORIGIN_GRID2098   1.0983789  0.0783018    14.028  &lt; 2e-16 ***\nORIGIN_GRID2099   2.3843481  0.0768629    31.021  &lt; 2e-16 ***\nORIGIN_GRID21    -0.4029104  0.1481317    -2.720 0.006529 ** \nORIGIN_GRID2102   2.0186520  0.0769996    26.216  &lt; 2e-16 ***\nORIGIN_GRID2115   3.3243033  0.0776214    42.827  &lt; 2e-16 ***\nORIGIN_GRID2119   2.6058818  0.0767333    33.960  &lt; 2e-16 ***\nORIGIN_GRID2121   1.7174141  0.0774109    22.186  &lt; 2e-16 ***\nORIGIN_GRID2137   2.2272888  0.0770489    28.907  &lt; 2e-16 ***\nORIGIN_GRID2140  -1.2422991  0.1053809   -11.789  &lt; 2e-16 ***\nORIGIN_GRID215   -2.2906572  0.1773559   -12.916  &lt; 2e-16 ***\nORIGIN_GRID2153   3.1719303  0.0779442    40.695  &lt; 2e-16 ***\nORIGIN_GRID2158   1.9153071  0.0775518    24.697  &lt; 2e-16 ***\nORIGIN_GRID216   -0.6987852  0.1043557    -6.696 2.14e-11 ***\nORIGIN_GRID217   -0.5178035  0.1559887    -3.319 0.000902 ***\nORIGIN_GRID2177   1.8019400  0.0775309    23.242  &lt; 2e-16 ***\nORIGIN_GRID2178   0.3273895  0.0827867     3.955 7.67e-05 ***\nORIGIN_GRID2196   1.4052635  0.0803512    17.489  &lt; 2e-16 ***\nORIGIN_GRID2197   2.6467690  0.0769339    34.403  &lt; 2e-16 ***\nORIGIN_GRID2267   2.2736642  0.0853761    26.631  &lt; 2e-16 ***\nORIGIN_GRID233   -0.0506344  0.0956415    -0.529 0.596515    \nORIGIN_GRID234    0.2902035  0.0813943     3.565 0.000363 ***\nORIGIN_GRID235    0.4212129  0.0859292     4.902 9.49e-07 ***\nORIGIN_GRID252    0.6616409  0.0837184     7.903 2.72e-15 ***\nORIGIN_GRID253   -0.6533122  0.0877744    -7.443 9.84e-14 ***\nORIGIN_GRID254   -0.6583869  0.0898689    -7.326 2.37e-13 ***\nORIGIN_GRID270   -2.6682605  0.3419431    -7.803 6.03e-15 ***\nORIGIN_GRID271   -0.1603680  0.0924861    -1.734 0.082924 .  \nORIGIN_GRID272    2.3536504  0.0767005    30.686  &lt; 2e-16 ***\nORIGIN_GRID290    0.5266524  0.0905887     5.814 6.11e-09 ***\nORIGIN_GRID291   -0.8925754  0.1066286    -8.371  &lt; 2e-16 ***\nORIGIN_GRID292    0.9883634  0.0861192    11.477  &lt; 2e-16 ***\nORIGIN_GRID308    0.9225093  0.0809110    11.402  &lt; 2e-16 ***\nORIGIN_GRID309   -0.3368898  0.0884195    -3.810 0.000139 ***\nORIGIN_GRID310   -0.0755313  0.0861196    -0.877 0.380459    \nORIGIN_GRID329    1.5922042  0.0848132    18.773  &lt; 2e-16 ***\nORIGIN_GRID330    0.7080620  0.0805957     8.785  &lt; 2e-16 ***\nORIGIN_GRID347    0.3941887  0.0821338     4.799 1.59e-06 ***\nORIGIN_GRID348   -0.6568109  0.0904019    -7.265 3.72e-13 ***\nORIGIN_GRID349    0.8924155  0.0893224     9.991  &lt; 2e-16 ***\nORIGIN_GRID366    0.9896248  0.0815442    12.136  &lt; 2e-16 ***\nORIGIN_GRID367   -0.2818594  0.0919001    -3.067 0.002162 ** \nORIGIN_GRID368    4.3879778  0.0762855    57.520  &lt; 2e-16 ***\nORIGIN_GRID369    0.5922998  0.0855983     6.920 4.53e-12 ***\nORIGIN_GRID370    1.8672015  0.0782547    23.861  &lt; 2e-16 ***\nORIGIN_GRID385   -1.5589060  0.1224268   -12.733  &lt; 2e-16 ***\nORIGIN_GRID386    0.4691259  0.0820096     5.720 1.06e-08 ***\nORIGIN_GRID387   -0.2705513  0.0871945    -3.103 0.001917 ** \nORIGIN_GRID388    0.2508827  0.1062010     2.362 0.018160 *  \nORIGIN_GRID389    2.0926286  0.0781704    26.770  &lt; 2e-16 ***\nORIGIN_GRID40     0.0813975  0.1606673     0.507 0.612421    \nORIGIN_GRID404    0.4813445  0.0959966     5.014 5.33e-07 ***\nORIGIN_GRID405    0.2005363  0.0861944     2.327 0.019989 *  \nORIGIN_GRID406    0.5666258  0.0803534     7.052 1.77e-12 ***\nORIGIN_GRID407    3.5549484  0.0764809    46.482  &lt; 2e-16 ***\nORIGIN_GRID408    1.7845883  0.0781685    22.830  &lt; 2e-16 ***\nORIGIN_GRID42    -0.7494686  0.1198373    -6.254 4.00e-10 ***\nORIGIN_GRID424    0.4896713  0.0821233     5.963 2.48e-09 ***\nORIGIN_GRID425    1.4981799  0.0777050    19.280  &lt; 2e-16 ***\nORIGIN_GRID426    4.1638702  0.0763647    54.526  &lt; 2e-16 ***\nORIGIN_GRID427    2.3842646  0.0776169    30.718  &lt; 2e-16 ***\nORIGIN_GRID442    0.6262383  0.0941917     6.649 2.96e-11 ***\nORIGIN_GRID443   -1.5948308  0.1773557    -8.992  &lt; 2e-16 ***\nORIGIN_GRID444    2.0295826  0.0772203    26.283  &lt; 2e-16 ***\nORIGIN_GRID445    3.0447823  0.0765793    39.760  &lt; 2e-16 ***\nORIGIN_GRID447   -2.5405508  0.1832811   -13.861  &lt; 2e-16 ***\nORIGIN_GRID448    0.0465884  0.0986699     0.472 0.636809    \nORIGIN_GRID461    0.2223220  0.0845415     2.630 0.008545 ** \nORIGIN_GRID462    0.8444352  0.0803027    10.516  &lt; 2e-16 ***\nORIGIN_GRID463    1.8682895  0.0770062    24.262  &lt; 2e-16 ***\nORIGIN_GRID464    4.5381424  0.0763010    59.477  &lt; 2e-16 ***\nORIGIN_GRID465    1.0818154  0.0796567    13.581  &lt; 2e-16 ***\nORIGIN_GRID466    0.2325381  0.0854276     2.722 0.006488 ** \nORIGIN_GRID467   -2.3046472  0.1689422   -13.642  &lt; 2e-16 ***\nORIGIN_GRID480    0.0550496  0.1157141     0.476 0.634261    \nORIGIN_GRID481    1.1297323  0.0786231    14.369  &lt; 2e-16 ***\nORIGIN_GRID482    0.3441036  0.0802875     4.286 1.82e-05 ***\nORIGIN_GRID483    4.2669987  0.0762974    55.926  &lt; 2e-16 ***\nORIGIN_GRID484    4.5627535  0.0763172    59.787  &lt; 2e-16 ***\nORIGIN_GRID486    1.2305282  0.0803113    15.322  &lt; 2e-16 ***\nORIGIN_GRID487   -1.7933933  0.1417740   -12.650  &lt; 2e-16 ***\nORIGIN_GRID488   -1.3685478  0.2220191    -6.164 7.09e-10 ***\nORIGIN_GRID489   -2.3661036  1.0029028    -2.359 0.018312 *  \nORIGIN_GRID499    0.3436447  0.0929026     3.699 0.000216 ***\nORIGIN_GRID500    0.8571729  0.0843576    10.161  &lt; 2e-16 ***\nORIGIN_GRID501    1.0592705  0.0782026    13.545  &lt; 2e-16 ***\nORIGIN_GRID502    4.3104706  0.0763161    56.482  &lt; 2e-16 ***\nORIGIN_GRID503    3.3674622  0.0765420    43.995  &lt; 2e-16 ***\nORIGIN_GRID507   -0.2837632  0.1238467    -2.291 0.021949 *  \nORIGIN_GRID508    1.2398570  0.0885121    14.008  &lt; 2e-16 ***\nORIGIN_GRID509   -3.7388910  1.0029028    -3.728 0.000193 ***\nORIGIN_GRID518   -2.7420498  0.4153079    -6.602 4.04e-11 ***\nORIGIN_GRID519   -0.0161031  0.0868055    -0.186 0.852830    \nORIGIN_GRID520    1.2492400  0.0846590    14.756  &lt; 2e-16 ***\nORIGIN_GRID521    4.8124531  0.0762664    63.101  &lt; 2e-16 ***\nORIGIN_GRID522    3.8183677  0.0763791    49.992  &lt; 2e-16 ***\nORIGIN_GRID524   -0.9526180  0.1238467    -7.692 1.45e-14 ***\nORIGIN_GRID528   -1.4101017  0.1291656   -10.917  &lt; 2e-16 ***\nORIGIN_GRID529   -1.7101966  0.4153082    -4.118 3.82e-05 ***\nORIGIN_GRID530    1.3497371  0.0919768    14.675  &lt; 2e-16 ***\nORIGIN_GRID537    0.4138667  0.0901897     4.589 4.46e-06 ***\nORIGIN_GRID538    1.0668956  0.0803079    13.285  &lt; 2e-16 ***\nORIGIN_GRID539    0.8525479  0.0785088    10.859  &lt; 2e-16 ***\nORIGIN_GRID540    3.5826438  0.0763470    46.926  &lt; 2e-16 ***\nORIGIN_GRID541    0.6469738  0.0954125     6.781 1.20e-11 ***\nORIGIN_GRID547   -0.5234372  0.1336502    -3.916 8.99e-05 ***\nORIGIN_GRID548   -0.5977970  0.1978574    -3.021 0.002516 ** \nORIGIN_GRID557   -0.1874950  0.0890151    -2.106 0.035176 *  \nORIGIN_GRID558    0.7950795  0.0824398     9.644  &lt; 2e-16 ***\nORIGIN_GRID559    1.3036170  0.0783336    16.642  &lt; 2e-16 ***\nORIGIN_GRID560    4.0025811  0.0763218    52.443  &lt; 2e-16 ***\nORIGIN_GRID562    0.8915945  0.0818722    10.890  &lt; 2e-16 ***\nORIGIN_GRID577   -0.1230153  0.0867715    -1.418 0.156281    \nORIGIN_GRID578    3.6788268  0.0763404    48.190  &lt; 2e-16 ***\nORIGIN_GRID595    1.5482804  0.0778625    19.885  &lt; 2e-16 ***\nORIGIN_GRID596    2.7732569  0.0764854    36.259  &lt; 2e-16 ***\nORIGIN_GRID597    3.2820524  0.0764137    42.951  &lt; 2e-16 ***\nORIGIN_GRID598    4.2216835  0.0763012    55.329  &lt; 2e-16 ***\nORIGIN_GRID60    -0.5558348  0.1508745    -3.684 0.000230 ***\nORIGIN_GRID600    3.4784630  0.0765481    45.442  &lt; 2e-16 ***\nORIGIN_GRID61     0.6609555  0.0805247     8.208 2.25e-16 ***\nORIGIN_GRID613    1.7538125  0.0794798    22.066  &lt; 2e-16 ***\nORIGIN_GRID614   -0.6483421  0.0892702    -7.263 3.79e-13 ***\nORIGIN_GRID615    4.0397686  0.0763126    52.937  &lt; 2e-16 ***\nORIGIN_GRID616    4.0022748  0.0763108    52.447  &lt; 2e-16 ***\nORIGIN_GRID617    3.2644227  0.0766715    42.577  &lt; 2e-16 ***\nORIGIN_GRID62    -0.8444457  0.1341979    -6.293 3.12e-10 ***\nORIGIN_GRID633    1.2732216  0.0794622    16.023  &lt; 2e-16 ***\nORIGIN_GRID634    2.9058710  0.0764634    38.003  &lt; 2e-16 ***\nORIGIN_GRID635    3.3009849  0.0764674    43.169  &lt; 2e-16 ***\nORIGIN_GRID636    4.0270333  0.0763106    52.772  &lt; 2e-16 ***\nORIGIN_GRID638    0.4422048  0.0825905     5.354 8.59e-08 ***\nORIGIN_GRID654    1.3506792  0.0782478    17.262  &lt; 2e-16 ***\nORIGIN_GRID657    0.4574354  0.0862566     5.303 1.14e-07 ***\nORIGIN_GRID671    1.5124745  0.0779394    19.406  &lt; 2e-16 ***\nORIGIN_GRID673    1.6344266  0.0772204    21.166  &lt; 2e-16 ***\nORIGIN_GRID674    3.4795010  0.0763544    45.570  &lt; 2e-16 ***\nORIGIN_GRID689    0.8132062  0.0810582    10.032  &lt; 2e-16 ***\nORIGIN_GRID690    3.1042554  0.0765570    40.548  &lt; 2e-16 ***\nORIGIN_GRID691    0.3670863  0.0808237     4.542 5.58e-06 ***\nORIGIN_GRID692    3.9110436  0.0763012    51.258  &lt; 2e-16 ***\nORIGIN_GRID693    3.4298435  0.0766732    44.733  &lt; 2e-16 ***\nORIGIN_GRID695    4.5335993  0.0763190    59.403  &lt; 2e-16 ***\nORIGIN_GRID700   -0.5510905  0.1064842    -5.175 2.28e-07 ***\nORIGIN_GRID710    0.1646604  0.0807084     2.040 0.041332 *  \nORIGIN_GRID711    3.2307072  0.0763500    42.314  &lt; 2e-16 ***\nORIGIN_GRID712    2.7492999  0.0764609    35.957  &lt; 2e-16 ***\nORIGIN_GRID713    3.2502239  0.0765636    42.451  &lt; 2e-16 ***\nORIGIN_GRID714    3.9172239  0.0764108    51.265  &lt; 2e-16 ***\nORIGIN_GRID715    2.7593892  0.0769185    35.874  &lt; 2e-16 ***\nORIGIN_GRID727   -0.1553065  0.0928600    -1.672 0.094430 .  \nORIGIN_GRID728    3.9265877  0.0763371    51.437  &lt; 2e-16 ***\nORIGIN_GRID729    3.5979726  0.0763082    47.151  &lt; 2e-16 ***\nORIGIN_GRID730    3.4683332  0.0763507    45.426  &lt; 2e-16 ***\nORIGIN_GRID731    4.4357253  0.0763455    58.101  &lt; 2e-16 ***\nORIGIN_GRID732    2.7705337  0.0769964    35.983  &lt; 2e-16 ***\nORIGIN_GRID733    4.0745054  0.0763023    53.400  &lt; 2e-16 ***\nORIGIN_GRID734    3.8215028  0.0764355    49.996  &lt; 2e-16 ***\nORIGIN_GRID738    1.2134317  0.0807541    15.026  &lt; 2e-16 ***\nORIGIN_GRID746    0.1644019  0.0851034     1.932 0.053385 .  \nORIGIN_GRID748    1.5211723  0.0768690    19.789  &lt; 2e-16 ***\nORIGIN_GRID749    3.7026947  0.0763271    48.511  &lt; 2e-16 ***\nORIGIN_GRID750    3.7482309  0.0763192    49.113  &lt; 2e-16 ***\nORIGIN_GRID751    3.7531534  0.0763621    49.149  &lt; 2e-16 ***\nORIGIN_GRID752    3.9519700  0.0763964    51.730  &lt; 2e-16 ***\nORIGIN_GRID753    4.2196753  0.0762872    55.313  &lt; 2e-16 ***\nORIGIN_GRID754    3.6727762  0.0763954    48.076  &lt; 2e-16 ***\nORIGIN_GRID757    0.6717163  0.0813944     8.253  &lt; 2e-16 ***\nORIGIN_GRID764   -0.3697459  0.1063416    -3.477 0.000507 ***\nORIGIN_GRID766    2.9529112  0.0764028    38.649  &lt; 2e-16 ***\nORIGIN_GRID767    2.1308581  0.0767294    27.771  &lt; 2e-16 ***\nORIGIN_GRID768    3.3273919  0.0763759    43.566  &lt; 2e-16 ***\nORIGIN_GRID769    2.4879601  0.0766044    32.478  &lt; 2e-16 ***\nORIGIN_GRID770    3.1495359  0.0764120    41.218  &lt; 2e-16 ***\nORIGIN_GRID771    3.4829559  0.0763396    45.625  &lt; 2e-16 ***\nORIGIN_GRID772    3.5689749  0.0764651    46.675  &lt; 2e-16 ***\nORIGIN_GRID773    5.2260307  0.0763168    68.478  &lt; 2e-16 ***\nORIGIN_GRID774    1.3740726  0.0802878    17.114  &lt; 2e-16 ***\nORIGIN_GRID775   -0.2061475  0.0874771    -2.357 0.018444 *  \nORIGIN_GRID776    1.4935814  0.0783514    19.063  &lt; 2e-16 ***\nORIGIN_GRID78     0.0202084  0.1107501     0.182 0.855215    \nORIGIN_GRID784    0.8440584  0.0807142    10.457  &lt; 2e-16 ***\nORIGIN_GRID785    1.8144157  0.0770365    23.553  &lt; 2e-16 ***\nORIGIN_GRID786    0.9594887  0.0782254    12.266  &lt; 2e-16 ***\nORIGIN_GRID787    3.7266727  0.0764599    48.740  &lt; 2e-16 ***\nORIGIN_GRID788    4.0960932  0.0762851    53.695  &lt; 2e-16 ***\nORIGIN_GRID789    3.6935182  0.0764070    48.340  &lt; 2e-16 ***\nORIGIN_GRID79     0.7836344  0.1062001     7.379 1.60e-13 ***\nORIGIN_GRID790    1.7884427  0.0770166    23.222  &lt; 2e-16 ***\nORIGIN_GRID791    2.4403695  0.0768605    31.751  &lt; 2e-16 ***\nORIGIN_GRID792    2.3667542  0.0766284    30.886  &lt; 2e-16 ***\nORIGIN_GRID793   -0.9721307  0.0999906    -9.722  &lt; 2e-16 ***\nORIGIN_GRID794    0.3528419  0.0819745     4.304 1.68e-05 ***\nORIGIN_GRID795   -0.1203014  0.0854784    -1.407 0.159312    \nORIGIN_GRID80     1.3216443  0.0785468    16.826  &lt; 2e-16 ***\nORIGIN_GRID803    1.5910326  0.0773516    20.569  &lt; 2e-16 ***\nORIGIN_GRID804    2.7168832  0.0765325    35.500  &lt; 2e-16 ***\nORIGIN_GRID805    0.0641764  0.0823025     0.780 0.435531    \nORIGIN_GRID806    3.6478429  0.0763181    47.798  &lt; 2e-16 ***\nORIGIN_GRID807    2.7918775  0.0769808    36.267  &lt; 2e-16 ***\nORIGIN_GRID809    3.4897389  0.0763285    45.720  &lt; 2e-16 ***\nORIGIN_GRID81     0.1704642  0.0909449     1.874 0.060880 .  \nORIGIN_GRID810    1.7814067  0.0769231    23.158  &lt; 2e-16 ***\nORIGIN_GRID811    1.2995716  0.0776764    16.731  &lt; 2e-16 ***\nORIGIN_GRID812    0.3102050  0.0815192     3.805 0.000142 ***\nORIGIN_GRID813   -0.9581079  0.0971456    -9.863  &lt; 2e-16 ***\nORIGIN_GRID814    0.9814833  0.0822859    11.928  &lt; 2e-16 ***\nORIGIN_GRID82    -0.9064434  0.1447946    -6.260 3.84e-10 ***\nORIGIN_GRID822    2.3120813  0.0771301    29.976  &lt; 2e-16 ***\nORIGIN_GRID823    2.7638231  0.0764285    36.162  &lt; 2e-16 ***\nORIGIN_GRID824    0.9216689  0.0779371    11.826  &lt; 2e-16 ***\nORIGIN_GRID825    2.1662013  0.0766950    28.244  &lt; 2e-16 ***\nORIGIN_GRID826    3.3151854  0.0763449    43.424  &lt; 2e-16 ***\nORIGIN_GRID829    3.4575732  0.0763452    45.289  &lt; 2e-16 ***\nORIGIN_GRID831    2.7187950  0.0765551    35.514  &lt; 2e-16 ***\nORIGIN_GRID832   -0.4246983  0.0852130    -4.984 6.23e-07 ***\nORIGIN_GRID833    2.8331439  0.0767668    36.906  &lt; 2e-16 ***\nORIGIN_GRID840    1.8772616  0.0773225    24.278  &lt; 2e-16 ***\nORIGIN_GRID841    3.2799636  0.0763577    42.955  &lt; 2e-16 ***\nORIGIN_GRID842    3.8789485  0.0762897    50.845  &lt; 2e-16 ***\nORIGIN_GRID843    1.1472919  0.0780105    14.707  &lt; 2e-16 ***\nORIGIN_GRID844    1.5028486  0.0781835    19.222  &lt; 2e-16 ***\nORIGIN_GRID845    3.1457251  0.0764252    41.161  &lt; 2e-16 ***\nORIGIN_GRID846    0.6718177  0.0778679     8.628  &lt; 2e-16 ***\nORIGIN_GRID847    3.9191630  0.0762891    51.373  &lt; 2e-16 ***\nORIGIN_GRID850   -2.0313988  0.2613695    -7.772 7.72e-15 ***\nORIGIN_GRID851    3.9802723  0.0763207    52.152  &lt; 2e-16 ***\nORIGIN_GRID852   -0.1493982  0.1039910    -1.437 0.150819    \nORIGIN_GRID859    1.3832236  0.0773036    17.893  &lt; 2e-16 ***\nORIGIN_GRID860    3.5289824  0.0763767    46.205  &lt; 2e-16 ***\nORIGIN_GRID861    4.1714448  0.0762780    54.687  &lt; 2e-16 ***\nORIGIN_GRID862    1.7303750  0.0788016    21.959  &lt; 2e-16 ***\nORIGIN_GRID863    2.4328350  0.0767732    31.689  &lt; 2e-16 ***\nORIGIN_GRID864    0.7619997  0.0779702     9.773  &lt; 2e-16 ***\nORIGIN_GRID865    2.7426796  0.0764154    35.892  &lt; 2e-16 ***\nORIGIN_GRID866    1.4185360  0.0769890    18.425  &lt; 2e-16 ***\nORIGIN_GRID867    3.3878783  0.0764217    44.331  &lt; 2e-16 ***\nORIGIN_GRID869    0.7813196  0.0898411     8.697  &lt; 2e-16 ***\nORIGIN_GRID871    0.5938804  0.0819452     7.247 4.25e-13 ***\nORIGIN_GRID872    0.1616531  0.1508756     1.071 0.283975    \nORIGIN_GRID878    2.1522105  0.0765994    28.097  &lt; 2e-16 ***\nORIGIN_GRID879    3.3579959  0.0763203    43.999  &lt; 2e-16 ***\nORIGIN_GRID880    3.2067678  0.0763642    41.993  &lt; 2e-16 ***\nORIGIN_GRID882    2.4828124  0.0765555    32.432  &lt; 2e-16 ***\nORIGIN_GRID883    2.0053991  0.0767189    26.140  &lt; 2e-16 ***\nORIGIN_GRID884    0.6631119  0.0779243     8.510  &lt; 2e-16 ***\nORIGIN_GRID885    3.6854132  0.0763163    48.291  &lt; 2e-16 ***\nORIGIN_GRID886    3.0559710  0.0765201    39.937  &lt; 2e-16 ***\nORIGIN_GRID890    1.4034132  0.0776304    18.078  &lt; 2e-16 ***\nORIGIN_GRID891    5.4141198  0.0763124    70.947  &lt; 2e-16 ***\nORIGIN_GRID897    1.9867562  0.0767081    25.900  &lt; 2e-16 ***\nORIGIN_GRID898    2.4319327  0.0765164    31.783  &lt; 2e-16 ***\nORIGIN_GRID899    2.1183188  0.0765715    27.665  &lt; 2e-16 ***\nORIGIN_GRID900    1.5066150  0.0769547    19.578  &lt; 2e-16 ***\nORIGIN_GRID901    2.9568643  0.0764127    38.696  &lt; 2e-16 ***\nORIGIN_GRID902    2.2861942  0.0765915    29.849  &lt; 2e-16 ***\nORIGIN_GRID903    0.9809618  0.0809225    12.122  &lt; 2e-16 ***\nORIGIN_GRID904    3.6915927  0.0763230    48.368  &lt; 2e-16 ***\nORIGIN_GRID905    3.4978674  0.0764099    45.778  &lt; 2e-16 ***\nORIGIN_GRID907    1.0109892  0.0799978    12.638  &lt; 2e-16 ***\nORIGIN_GRID909    3.5695983  0.0763343    46.763  &lt; 2e-16 ***\nORIGIN_GRID910    4.7316437  0.0762879    62.024  &lt; 2e-16 ***\nORIGIN_GRID915    0.4844967  0.0821607     5.897 3.70e-09 ***\nORIGIN_GRID916    0.3726208  0.0813670     4.580 4.66e-06 ***\nORIGIN_GRID917    0.9378886  0.0778971    12.040  &lt; 2e-16 ***\nORIGIN_GRID918    1.5261134  0.0769539    19.832  &lt; 2e-16 ***\nORIGIN_GRID919    0.9827691  0.0777231    12.644  &lt; 2e-16 ***\nORIGIN_GRID920    2.1343593  0.0765363    27.887  &lt; 2e-16 ***\nORIGIN_GRID922    2.5965679  0.0768062    33.807  &lt; 2e-16 ***\nORIGIN_GRID923    3.8113970  0.0763608    49.913  &lt; 2e-16 ***\nORIGIN_GRID927    2.9476492  0.0767596    38.401  &lt; 2e-16 ***\nORIGIN_GRID928    4.0850918  0.0763511    53.504  &lt; 2e-16 ***\nORIGIN_GRID929   -0.2218333  0.0924866    -2.399 0.016460 *  \nORIGIN_GRID935    1.5482177  0.0769993    20.107  &lt; 2e-16 ***\nORIGIN_GRID936    2.3504145  0.0765497    30.704  &lt; 2e-16 ***\nORIGIN_GRID937    2.8755980  0.0764128    37.632  &lt; 2e-16 ***\nORIGIN_GRID938    0.9736625  0.0776123    12.545  &lt; 2e-16 ***\nORIGIN_GRID939    2.0326442  0.0765458    26.555  &lt; 2e-16 ***\nORIGIN_GRID945    1.0266926  0.0799222    12.846  &lt; 2e-16 ***\nORIGIN_GRID947    3.4736015  0.0763507    45.495  &lt; 2e-16 ***\nORIGIN_GRID948    3.5982969  0.0763809    47.110  &lt; 2e-16 ***\nORIGIN_GRID953    2.7718986  0.0764194    36.272  &lt; 2e-16 ***\nORIGIN_GRID954    2.0454717  0.0766041    26.702  &lt; 2e-16 ***\nORIGIN_GRID955    3.0259965  0.0763950    39.610  &lt; 2e-16 ***\nORIGIN_GRID956    1.8046135  0.0767589    23.510  &lt; 2e-16 ***\nORIGIN_GRID964   -1.7118055  0.2477291    -6.910 4.85e-12 ***\nORIGIN_GRID966    3.6018124  0.0763742    47.160  &lt; 2e-16 ***\nORIGIN_GRID967    3.2767689  0.0765046    42.831  &lt; 2e-16 ***\nORIGIN_GRID972    2.3248645  0.0765761    30.360  &lt; 2e-16 ***\nORIGIN_GRID973    2.1455624  0.0766148    28.005  &lt; 2e-16 ***\nORIGIN_GRID974    1.6671909  0.0766917    21.739  &lt; 2e-16 ***\nORIGIN_GRID975    1.8663467  0.0768406    24.289  &lt; 2e-16 ***\nORIGIN_GRID977    2.6570055  0.0764103    34.773  &lt; 2e-16 ***\nORIGIN_GRID983   -1.4138668  0.1876858    -7.533 4.95e-14 ***\nORIGIN_GRID985    3.5132201  0.0764017    45.984  &lt; 2e-16 ***\nORIGIN_GRID986    2.1917747  0.0771042    28.426  &lt; 2e-16 ***\nORIGIN_GRID99    -0.3542500  0.1175328    -3.014 0.002578 ** \nORIGIN_GRID990    0.3752568  0.0878157     4.273 1.93e-05 ***\nORIGIN_GRID991    0.2894561  0.0850916     3.402 0.000670 ***\nORIGIN_GRID992    2.0499282  0.0770857    26.593  &lt; 2e-16 ***\nORIGIN_GRID993    3.3897441  0.0763130    44.419  &lt; 2e-16 ***\nORIGIN_GRID994    0.8714128  0.0782353    11.138  &lt; 2e-16 ***\nORIGIN_GRID995    2.2193809  0.0765174    29.005  &lt; 2e-16 ***\nlog(MRTLRTEXITS) 85.2290321  0.0412291  2067.207  &lt; 2e-16 ***\nlog(BIZ)          0.0846818  0.0001670   507.055  &lt; 2e-16 ***\nlog(SCHOOLS)      0.3395476  0.0006257   542.689  &lt; 2e-16 ***\nlog(dist)        -0.8499148  0.0001405 -6049.352  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 103154058  on 65520  degrees of freedom\nResidual deviance:  50488127  on 64702  degrees of freedom\nAIC: 50851812\n\nNumber of Fisher Scoring iterations: 7\n\n\nThe R-squared values are calculated to measure how much variation of the trips can be accounted for by the origin constrained SIM.\n\nBased on the outcome from the cor() function in the stats package, the R2 is 0.1397128. This means that about 14.0% of the variation in the number of trips can be accounted for by the origin constrained SIM.\nBased on the performance package, the R-squared values for generalised linear models are computed using the r2_kullback() and r2_mcfadden() functions. The results are 0.5043682 and 0.509 respectively, i.e., that about 50.4% or 50.9% of the variation in the number of trips can be accounted for by the origin constrained SIM.\nCompared to the unconstrained SIM, the origin constrained SIM has improved R-squared values, meaning that the latter model is better fitted to the data.\n\n\nCalcRSquared(orcSIM$data$TRIPS, orcSIM$fitted.values)\n\n[1] 0.1397128\n\nr2_kullback(orcSIM)\n\nKullback-Leibler R2 \n          0.5043682 \n\nr2_mcfadden(orcSIM)\n\n# R2 for Generalized Linear Regression\n       R2: 0.509\n  adj. R2: 0.509\n\n\n\n\n7.5 Destination (Attraction) Constrained Spatial Interaction Model\nA destination constrained SIM, decSIM, is calibrated below by using the glm() function of the stats package. The explanatory variables are origin populations by different HDB housing types, and the distance between the origin and destination.\n\ndecSIM = glm(formula = TRIPS ~ \n               DESTIN_GRID +\n               log(DU) + \n               log(HDB12R) +\n               log(HDB34R) +\n               log(HDB5RMore) +\n               log(HDBRent) +\n               log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM,\n              na.action = na.exclude)\n\nsummary(decSIM)\n\n\nCall:\nglm(formula = TRIPS ~ DESTIN_GRID + log(DU) + log(HDB12R) + log(HDB34R) + \n    log(HDB5RMore) + log(HDBRent) + log(dist), family = poisson(link = \"log\"), \n    data = SIM, na.action = na.exclude)\n\nCoefficients:\n                  Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)      8.675e+00  1.005e-01    86.309  &lt; 2e-16 ***\nDESTIN_GRID1001  3.959e+00  1.008e-01    39.254  &lt; 2e-16 ***\nDESTIN_GRID1002 -1.137e+00  1.363e-01    -8.346  &lt; 2e-16 ***\nDESTIN_GRID1003  3.358e+00  1.007e-01    33.325  &lt; 2e-16 ***\nDESTIN_GRID1004  4.838e+00  1.005e-01    48.129  &lt; 2e-16 ***\nDESTIN_GRID1005  1.648e+00  1.026e-01    16.067  &lt; 2e-16 ***\nDESTIN_GRID101   3.104e+00  1.012e-01    30.678  &lt; 2e-16 ***\nDESTIN_GRID1010  1.970e+00  1.008e-01    19.535  &lt; 2e-16 ***\nDESTIN_GRID1011  2.561e+00  1.007e-01    25.425  &lt; 2e-16 ***\nDESTIN_GRID1012  1.037e+00  1.019e-01    10.172  &lt; 2e-16 ***\nDESTIN_GRID1013  1.568e+00  1.010e-01    15.527  &lt; 2e-16 ***\nDESTIN_GRID1014  1.254e+00  1.018e-01    12.311  &lt; 2e-16 ***\nDESTIN_GRID102   1.558e+00  1.056e-01    14.760  &lt; 2e-16 ***\nDESTIN_GRID1023  2.366e+00  1.007e-01    23.484  &lt; 2e-16 ***\nDESTIN_GRID1024  2.995e+00  1.006e-01    29.770  &lt; 2e-16 ***\nDESTIN_GRID1025  4.366e+00  1.006e-01    43.392  &lt; 2e-16 ***\nDESTIN_GRID1028  3.322e+00  1.006e-01    33.021  &lt; 2e-16 ***\nDESTIN_GRID1030  1.394e+00  1.019e-01    13.684  &lt; 2e-16 ***\nDESTIN_GRID1031  2.020e+00  1.007e-01    20.055  &lt; 2e-16 ***\nDESTIN_GRID1033  1.857e+00  1.008e-01    18.426  &lt; 2e-16 ***\nDESTIN_GRID1040  1.364e+00  1.045e-01    13.050  &lt; 2e-16 ***\nDESTIN_GRID1041  1.709e+00  1.014e-01    16.863  &lt; 2e-16 ***\nDESTIN_GRID1042  2.309e+00  1.007e-01    22.935  &lt; 2e-16 ***\nDESTIN_GRID1043  2.727e+00  1.007e-01    27.087  &lt; 2e-16 ***\nDESTIN_GRID1048  1.421e+00  1.011e-01    14.061  &lt; 2e-16 ***\nDESTIN_GRID1049  1.453e+00  1.009e-01    14.401  &lt; 2e-16 ***\nDESTIN_GRID1050  3.089e+00  1.006e-01    30.715  &lt; 2e-16 ***\nDESTIN_GRID1061  2.899e+00  1.006e-01    28.806  &lt; 2e-16 ***\nDESTIN_GRID1062  4.520e+00  1.005e-01    44.965  &lt; 2e-16 ***\nDESTIN_GRID1063  3.614e+00  1.006e-01    35.917  &lt; 2e-16 ***\nDESTIN_GRID1064  1.105e+00  1.083e-01    10.202  &lt; 2e-16 ***\nDESTIN_GRID1066  3.537e+00  1.006e-01    35.179  &lt; 2e-16 ***\nDESTIN_GRID1067  2.592e+00  1.006e-01    25.763  &lt; 2e-16 ***\nDESTIN_GRID1068  2.751e+00  1.006e-01    27.353  &lt; 2e-16 ***\nDESTIN_GRID1069  1.583e+00  1.009e-01    15.691  &lt; 2e-16 ***\nDESTIN_GRID1071  3.140e+00  1.006e-01    31.211  &lt; 2e-16 ***\nDESTIN_GRID1078  1.581e+00  1.036e-01    15.263  &lt; 2e-16 ***\nDESTIN_GRID1080  3.176e+00  1.006e-01    31.570  &lt; 2e-16 ***\nDESTIN_GRID1081  2.994e+00  1.006e-01    29.751  &lt; 2e-16 ***\nDESTIN_GRID1082  3.322e+00  1.007e-01    32.999  &lt; 2e-16 ***\nDESTIN_GRID1086  2.287e+00  1.007e-01    22.707  &lt; 2e-16 ***\nDESTIN_GRID1087  2.020e+00  1.008e-01    20.054  &lt; 2e-16 ***\nDESTIN_GRID1089  2.032e+00  1.008e-01    20.172  &lt; 2e-16 ***\nDESTIN_GRID1090  1.740e+00  1.009e-01    17.255  &lt; 2e-16 ***\nDESTIN_GRID1097 -1.733e+00  2.771e-01    -6.256 3.94e-10 ***\nDESTIN_GRID1100  2.018e+00  1.008e-01    20.015  &lt; 2e-16 ***\nDESTIN_GRID1101  2.807e+00  1.011e-01    27.758  &lt; 2e-16 ***\nDESTIN_GRID1102  2.917e+00  1.010e-01    28.895  &lt; 2e-16 ***\nDESTIN_GRID1104  2.269e+00  1.007e-01    22.538  &lt; 2e-16 ***\nDESTIN_GRID1105  2.895e+00  1.006e-01    28.779  &lt; 2e-16 ***\nDESTIN_GRID1106  1.658e+00  1.012e-01    16.383  &lt; 2e-16 ***\nDESTIN_GRID1107  1.557e+00  1.011e-01    15.407  &lt; 2e-16 ***\nDESTIN_GRID1108  2.230e+00  1.007e-01    22.140  &lt; 2e-16 ***\nDESTIN_GRID1115  5.051e-01  1.151e-01     4.387 1.15e-05 ***\nDESTIN_GRID1116  1.971e+00  1.030e-01    19.134  &lt; 2e-16 ***\nDESTIN_GRID1119  3.053e+00  1.007e-01    30.330  &lt; 2e-16 ***\nDESTIN_GRID1120  2.560e+00  1.008e-01    25.393  &lt; 2e-16 ***\nDESTIN_GRID1123  1.297e+00  1.011e-01    12.822  &lt; 2e-16 ***\nDESTIN_GRID1124  1.765e+00  1.009e-01    17.498  &lt; 2e-16 ***\nDESTIN_GRID1125  2.760e+00  1.006e-01    27.435  &lt; 2e-16 ***\nDESTIN_GRID1128  1.654e+00  1.008e-01    16.403  &lt; 2e-16 ***\nDESTIN_GRID1138  2.060e+00  1.008e-01    20.425  &lt; 2e-16 ***\nDESTIN_GRID1139  2.816e+00  1.007e-01    27.975  &lt; 2e-16 ***\nDESTIN_GRID1140  3.731e+00  1.006e-01    37.082  &lt; 2e-16 ***\nDESTIN_GRID1142  1.248e+00  1.013e-01    12.314  &lt; 2e-16 ***\nDESTIN_GRID1143  3.220e+00  1.006e-01    32.027  &lt; 2e-16 ***\nDESTIN_GRID1144  2.622e+00  1.007e-01    26.029  &lt; 2e-16 ***\nDESTIN_GRID1145  2.285e+00  1.008e-01    22.675  &lt; 2e-16 ***\nDESTIN_GRID1146  2.422e+00  1.007e-01    24.051  &lt; 2e-16 ***\nDESTIN_GRID1147  7.680e-01  1.018e-01     7.540 4.68e-14 ***\nDESTIN_GRID1152 -1.501e+00  1.407e-01   -10.667  &lt; 2e-16 ***\nDESTIN_GRID1153  2.845e+00  1.007e-01    28.248  &lt; 2e-16 ***\nDESTIN_GRID1157  3.412e+00  1.006e-01    33.922  &lt; 2e-16 ***\nDESTIN_GRID1158  2.947e+00  1.007e-01    29.276  &lt; 2e-16 ***\nDESTIN_GRID116   3.343e+00  1.031e-01    32.416  &lt; 2e-16 ***\nDESTIN_GRID1161  3.576e+00  1.006e-01    35.568  &lt; 2e-16 ***\nDESTIN_GRID1162  3.383e+00  1.006e-01    33.639  &lt; 2e-16 ***\nDESTIN_GRID1163  3.019e+00  1.006e-01    30.016  &lt; 2e-16 ***\nDESTIN_GRID1164  2.027e+00  1.009e-01    20.090  &lt; 2e-16 ***\nDESTIN_GRID1167 -4.445e-01  1.068e-01    -4.160 3.18e-05 ***\nDESTIN_GRID117   5.053e-01  1.663e-01     3.039 0.002374 ** \nDESTIN_GRID1171 -1.209e+00  1.245e-01    -9.709  &lt; 2e-16 ***\nDESTIN_GRID1172  2.617e+00  1.008e-01    25.953  &lt; 2e-16 ***\nDESTIN_GRID1173  4.322e-01  1.032e-01     4.186 2.83e-05 ***\nDESTIN_GRID1176  2.468e+00  1.007e-01    24.514  &lt; 2e-16 ***\nDESTIN_GRID1177  2.365e+00  1.008e-01    23.454  &lt; 2e-16 ***\nDESTIN_GRID118   2.137e+00  1.029e-01    20.776  &lt; 2e-16 ***\nDESTIN_GRID1180  2.806e+00  1.006e-01    27.879  &lt; 2e-16 ***\nDESTIN_GRID1181  2.770e+00  1.006e-01    27.537  &lt; 2e-16 ***\nDESTIN_GRID1183  1.450e+00  1.020e-01    14.214  &lt; 2e-16 ***\nDESTIN_GRID1184  2.611e+00  1.006e-01    25.948  &lt; 2e-16 ***\nDESTIN_GRID1186 -2.157e+00  1.927e-01   -11.192  &lt; 2e-16 ***\nDESTIN_GRID119   2.332e+00  1.028e-01    22.677  &lt; 2e-16 ***\nDESTIN_GRID1192  1.278e+00  1.016e-01    12.573  &lt; 2e-16 ***\nDESTIN_GRID1193  1.255e+00  1.014e-01    12.378  &lt; 2e-16 ***\nDESTIN_GRID1194  1.103e+00  1.018e-01    10.837  &lt; 2e-16 ***\nDESTIN_GRID1195  3.830e+00  1.005e-01    38.090  &lt; 2e-16 ***\nDESTIN_GRID1196  1.685e+00  1.013e-01    16.631  &lt; 2e-16 ***\nDESTIN_GRID1198  2.658e+00  1.018e-01    26.112  &lt; 2e-16 ***\nDESTIN_GRID1199  7.844e-01  1.015e-01     7.725 1.12e-14 ***\nDESTIN_GRID120   2.856e+00  1.016e-01    28.118  &lt; 2e-16 ***\nDESTIN_GRID1200  2.347e+00  1.006e-01    23.320  &lt; 2e-16 ***\nDESTIN_GRID1201  2.594e+00  1.006e-01    25.776  &lt; 2e-16 ***\nDESTIN_GRID1202  2.361e+00  1.007e-01    23.447  &lt; 2e-16 ***\nDESTIN_GRID1203  2.308e+00  1.009e-01    22.878  &lt; 2e-16 ***\nDESTIN_GRID1204  3.337e+00  1.006e-01    33.162  &lt; 2e-16 ***\nDESTIN_GRID1205 -2.955e+00  2.855e-01   -10.349  &lt; 2e-16 ***\nDESTIN_GRID1207  8.784e-01  1.017e-01     8.639  &lt; 2e-16 ***\nDESTIN_GRID1208  1.515e+00  1.013e-01    14.954  &lt; 2e-16 ***\nDESTIN_GRID1209  3.312e+00  1.006e-01    32.912  &lt; 2e-16 ***\nDESTIN_GRID121   2.693e+00  1.012e-01    26.602  &lt; 2e-16 ***\nDESTIN_GRID1210 -1.173e-01  1.100e-01    -1.066 0.286442    \nDESTIN_GRID1211 -3.993e-01  1.055e-01    -3.785 0.000154 ***\nDESTIN_GRID1212  1.557e-01  1.044e-01     1.492 0.135709    \nDESTIN_GRID1213  3.484e+00  1.006e-01    34.648  &lt; 2e-16 ***\nDESTIN_GRID1214  2.134e+00  1.009e-01    21.148  &lt; 2e-16 ***\nDESTIN_GRID1215 -1.160e+00  1.374e-01    -8.442  &lt; 2e-16 ***\nDESTIN_GRID1218  2.136e+00  1.008e-01    21.197  &lt; 2e-16 ***\nDESTIN_GRID1219  3.641e+00  1.005e-01    36.208  &lt; 2e-16 ***\nDESTIN_GRID122   3.086e+00  1.011e-01    30.508  &lt; 2e-16 ***\nDESTIN_GRID1220  2.186e+00  1.007e-01    21.703  &lt; 2e-16 ***\nDESTIN_GRID1221  3.083e+00  1.006e-01    30.643  &lt; 2e-16 ***\nDESTIN_GRID1222  1.797e+00  1.013e-01    17.733  &lt; 2e-16 ***\nDESTIN_GRID1225  2.361e+00  1.007e-01    23.447  &lt; 2e-16 ***\nDESTIN_GRID1226  1.540e+00  1.010e-01    15.250  &lt; 2e-16 ***\nDESTIN_GRID1227  1.574e+00  1.011e-01    15.578  &lt; 2e-16 ***\nDESTIN_GRID1229  7.696e-01  1.022e-01     7.529 5.12e-14 ***\nDESTIN_GRID1230  3.294e+00  1.006e-01    32.754  &lt; 2e-16 ***\nDESTIN_GRID1231  2.543e+00  1.007e-01    25.258  &lt; 2e-16 ***\nDESTIN_GRID1232  2.201e+00  1.007e-01    21.847  &lt; 2e-16 ***\nDESTIN_GRID1233  2.205e+00  1.008e-01    21.875  &lt; 2e-16 ***\nDESTIN_GRID1234  7.157e-01  1.041e-01     6.872 6.32e-12 ***\nDESTIN_GRID1238  1.279e+00  1.009e-01    12.665  &lt; 2e-16 ***\nDESTIN_GRID1239  1.633e+00  1.008e-01    16.194  &lt; 2e-16 ***\nDESTIN_GRID1240  3.237e+00  1.006e-01    32.188  &lt; 2e-16 ***\nDESTIN_GRID1241  2.430e+00  1.007e-01    24.118  &lt; 2e-16 ***\nDESTIN_GRID1242  2.279e+00  1.007e-01    22.623  &lt; 2e-16 ***\nDESTIN_GRID1243 -5.176e-01  1.057e-01    -4.899 9.65e-07 ***\nDESTIN_GRID1244  8.236e-01  1.014e-01     8.119 4.69e-16 ***\nDESTIN_GRID1245  2.600e+00  1.007e-01    25.806  &lt; 2e-16 ***\nDESTIN_GRID1246  1.218e+00  1.017e-01    11.973  &lt; 2e-16 ***\nDESTIN_GRID1249 -1.221e+00  1.205e-01   -10.127  &lt; 2e-16 ***\nDESTIN_GRID1250  4.027e+00  1.005e-01    40.060  &lt; 2e-16 ***\nDESTIN_GRID1251  4.541e+00  1.005e-01    45.175  &lt; 2e-16 ***\nDESTIN_GRID1252  3.572e+00  1.006e-01    35.516  &lt; 2e-16 ***\nDESTIN_GRID1253  1.148e+00  1.022e-01    11.227  &lt; 2e-16 ***\nDESTIN_GRID1256  1.890e+00  1.007e-01    18.761  &lt; 2e-16 ***\nDESTIN_GRID1257  1.922e+00  1.008e-01    19.077  &lt; 2e-16 ***\nDESTIN_GRID1258  2.445e+00  1.007e-01    24.278  &lt; 2e-16 ***\nDESTIN_GRID1259  3.276e+00  1.006e-01    32.564  &lt; 2e-16 ***\nDESTIN_GRID1260  2.698e+00  1.011e-01    26.682  &lt; 2e-16 ***\nDESTIN_GRID1261  1.922e+00  1.008e-01    19.066  &lt; 2e-16 ***\nDESTIN_GRID1262  2.101e+00  1.007e-01    20.868  &lt; 2e-16 ***\nDESTIN_GRID1263  1.982e+00  1.007e-01    19.677  &lt; 2e-16 ***\nDESTIN_GRID1264  2.772e+00  1.006e-01    27.547  &lt; 2e-16 ***\nDESTIN_GRID1265  1.941e+00  1.008e-01    19.264  &lt; 2e-16 ***\nDESTIN_GRID1266  1.304e+00  1.015e-01    12.845  &lt; 2e-16 ***\nDESTIN_GRID1268  1.810e+00  1.009e-01    17.928  &lt; 2e-16 ***\nDESTIN_GRID1269  3.389e+00  1.005e-01    33.702  &lt; 2e-16 ***\nDESTIN_GRID1270  2.792e+00  1.006e-01    27.748  &lt; 2e-16 ***\nDESTIN_GRID1272  1.886e+00  1.029e-01    18.337  &lt; 2e-16 ***\nDESTIN_GRID1276  2.527e+00  1.006e-01    25.117  &lt; 2e-16 ***\nDESTIN_GRID1277  2.329e+00  1.007e-01    23.119  &lt; 2e-16 ***\nDESTIN_GRID1278  2.959e+00  1.006e-01    29.424  &lt; 2e-16 ***\nDESTIN_GRID1279  2.438e+00  1.007e-01    24.224  &lt; 2e-16 ***\nDESTIN_GRID1280  2.247e+00  1.007e-01    22.323  &lt; 2e-16 ***\nDESTIN_GRID1281  2.700e+00  1.006e-01    26.828  &lt; 2e-16 ***\nDESTIN_GRID1282  2.246e+00  1.007e-01    22.299  &lt; 2e-16 ***\nDESTIN_GRID1283  2.472e+00  1.006e-01    24.564  &lt; 2e-16 ***\nDESTIN_GRID1284  2.688e+00  1.006e-01    26.717  &lt; 2e-16 ***\nDESTIN_GRID1285  2.091e+00  1.008e-01    20.759  &lt; 2e-16 ***\nDESTIN_GRID1288  2.595e+00  1.007e-01    25.777  &lt; 2e-16 ***\nDESTIN_GRID1289  3.229e+00  1.006e-01    32.097  &lt; 2e-16 ***\nDESTIN_GRID1294  2.505e+00  1.006e-01    24.899  &lt; 2e-16 ***\nDESTIN_GRID1295  3.217e+00  1.006e-01    31.996  &lt; 2e-16 ***\nDESTIN_GRID1296  2.831e+00  1.006e-01    28.151  &lt; 2e-16 ***\nDESTIN_GRID1297  2.349e+00  1.009e-01    23.276  &lt; 2e-16 ***\nDESTIN_GRID1298  3.227e+00  1.006e-01    32.083  &lt; 2e-16 ***\nDESTIN_GRID1299  2.765e+00  1.006e-01    27.484  &lt; 2e-16 ***\nDESTIN_GRID1300  1.423e+00  1.010e-01    14.086  &lt; 2e-16 ***\nDESTIN_GRID1301  2.171e+00  1.007e-01    21.560  &lt; 2e-16 ***\nDESTIN_GRID1302  2.780e+00  1.006e-01    27.642  &lt; 2e-16 ***\nDESTIN_GRID1303  3.528e+00  1.005e-01    35.086  &lt; 2e-16 ***\nDESTIN_GRID1304  2.865e+00  1.007e-01    28.459  &lt; 2e-16 ***\nDESTIN_GRID1306  6.983e-01  1.019e-01     6.854 7.16e-12 ***\nDESTIN_GRID1307  2.862e+00  1.006e-01    28.436  &lt; 2e-16 ***\nDESTIN_GRID1308  3.419e+00  1.007e-01    33.964  &lt; 2e-16 ***\nDESTIN_GRID1314  3.343e+00  1.005e-01    33.250  &lt; 2e-16 ***\nDESTIN_GRID1315  2.878e+00  1.006e-01    28.603  &lt; 2e-16 ***\nDESTIN_GRID1316  2.110e+00  1.010e-01    20.901  &lt; 2e-16 ***\nDESTIN_GRID1317  2.383e+00  1.007e-01    23.661  &lt; 2e-16 ***\nDESTIN_GRID1318  2.629e+00  1.006e-01    26.125  &lt; 2e-16 ***\nDESTIN_GRID1319  3.264e+00  1.006e-01    32.451  &lt; 2e-16 ***\nDESTIN_GRID1320  3.969e+00  1.005e-01    39.484  &lt; 2e-16 ***\nDESTIN_GRID1321  1.595e+00  1.008e-01    15.825  &lt; 2e-16 ***\nDESTIN_GRID1322  2.891e+00  1.006e-01    28.746  &lt; 2e-16 ***\nDESTIN_GRID1323  2.902e+00  1.007e-01    28.830  &lt; 2e-16 ***\nDESTIN_GRID1326  2.357e+00  1.007e-01    23.405  &lt; 2e-16 ***\nDESTIN_GRID1327  1.849e+00  1.010e-01    18.309  &lt; 2e-16 ***\nDESTIN_GRID1332  2.177e+00  1.007e-01    21.610  &lt; 2e-16 ***\nDESTIN_GRID1333  3.231e+00  1.006e-01    32.128  &lt; 2e-16 ***\nDESTIN_GRID1334  3.111e+00  1.006e-01    30.935  &lt; 2e-16 ***\nDESTIN_GRID1335  2.967e+00  1.006e-01    29.498  &lt; 2e-16 ***\nDESTIN_GRID1336  2.165e+00  1.007e-01    21.495  &lt; 2e-16 ***\nDESTIN_GRID1337  3.936e+00  1.005e-01    39.159  &lt; 2e-16 ***\nDESTIN_GRID1338  2.429e+00  1.006e-01    24.137  &lt; 2e-16 ***\nDESTIN_GRID1339  1.716e+00  1.007e-01    17.039  &lt; 2e-16 ***\nDESTIN_GRID1340  3.829e+00  1.005e-01    38.084  &lt; 2e-16 ***\nDESTIN_GRID1341  2.429e+00  1.007e-01    24.124  &lt; 2e-16 ***\nDESTIN_GRID1342  3.393e+00  1.006e-01    33.722  &lt; 2e-16 ***\nDESTIN_GRID1345  1.287e+00  1.012e-01    12.722  &lt; 2e-16 ***\nDESTIN_GRID1352  2.904e+00  1.006e-01    28.866  &lt; 2e-16 ***\nDESTIN_GRID1353  2.415e+00  1.006e-01    24.000  &lt; 2e-16 ***\nDESTIN_GRID1354  3.216e+00  1.006e-01    31.984  &lt; 2e-16 ***\nDESTIN_GRID1355  2.148e+00  1.007e-01    21.324  &lt; 2e-16 ***\nDESTIN_GRID1356  2.298e+00  1.007e-01    22.823  &lt; 2e-16 ***\nDESTIN_GRID1357  2.698e+00  1.006e-01    26.823  &lt; 2e-16 ***\nDESTIN_GRID1358  2.151e+00  1.008e-01    21.345  &lt; 2e-16 ***\nDESTIN_GRID1359  2.967e+00  1.006e-01    29.506  &lt; 2e-16 ***\nDESTIN_GRID136   1.989e+00  1.036e-01    19.193  &lt; 2e-16 ***\nDESTIN_GRID1360  2.947e+00  1.006e-01    29.300  &lt; 2e-16 ***\nDESTIN_GRID1364 -6.189e-01  1.196e-01    -5.175 2.28e-07 ***\nDESTIN_GRID137   2.455e+00  1.029e-01    23.849  &lt; 2e-16 ***\nDESTIN_GRID1370 -3.095e+00  7.142e-01    -4.334 1.47e-05 ***\nDESTIN_GRID1371  1.997e+00  1.013e-01    19.714  &lt; 2e-16 ***\nDESTIN_GRID1372  3.117e+00  1.006e-01    31.000  &lt; 2e-16 ***\nDESTIN_GRID1373  2.404e+00  1.007e-01    23.873  &lt; 2e-16 ***\nDESTIN_GRID1374  1.768e+00  1.008e-01    17.537  &lt; 2e-16 ***\nDESTIN_GRID1375  2.401e+00  1.008e-01    23.826  &lt; 2e-16 ***\nDESTIN_GRID1376  2.381e+00  1.006e-01    23.666  &lt; 2e-16 ***\nDESTIN_GRID1377  1.899e+00  1.008e-01    18.848  &lt; 2e-16 ***\nDESTIN_GRID1378  2.670e+00  1.006e-01    26.541  &lt; 2e-16 ***\nDESTIN_GRID1379  4.370e+00  1.006e-01    43.449  &lt; 2e-16 ***\nDESTIN_GRID138   3.948e+00  1.015e-01    38.904  &lt; 2e-16 ***\nDESTIN_GRID1380  1.618e+00  1.011e-01    16.001  &lt; 2e-16 ***\nDESTIN_GRID1383  7.388e-02  1.053e-01     0.702 0.482766    \nDESTIN_GRID1389  1.401e+00  1.157e-01    12.107  &lt; 2e-16 ***\nDESTIN_GRID139   3.208e+00  1.013e-01    31.662  &lt; 2e-16 ***\nDESTIN_GRID1390  8.334e-01  1.033e-01     8.065 7.34e-16 ***\nDESTIN_GRID1391  2.624e+00  1.007e-01    26.069  &lt; 2e-16 ***\nDESTIN_GRID1392  2.461e+00  1.006e-01    24.462  &lt; 2e-16 ***\nDESTIN_GRID1393  2.582e+00  1.006e-01    25.666  &lt; 2e-16 ***\nDESTIN_GRID1394  2.088e+00  1.007e-01    20.745  &lt; 2e-16 ***\nDESTIN_GRID1395  3.051e+00  1.007e-01    30.302  &lt; 2e-16 ***\nDESTIN_GRID1396  2.107e+00  1.009e-01    20.882  &lt; 2e-16 ***\nDESTIN_GRID1397  1.164e+00  1.039e-01    11.201  &lt; 2e-16 ***\nDESTIN_GRID1398  2.055e+00  1.009e-01    20.373  &lt; 2e-16 ***\nDESTIN_GRID140   1.936e+00  1.026e-01    18.868  &lt; 2e-16 ***\nDESTIN_GRID1401  1.740e+00  1.015e-01    17.138  &lt; 2e-16 ***\nDESTIN_GRID1408 -9.392e-02  1.222e-01    -0.769 0.442130    \nDESTIN_GRID1409  1.338e+00  1.019e-01    13.140  &lt; 2e-16 ***\nDESTIN_GRID141   2.064e+00  1.022e-01    20.209  &lt; 2e-16 ***\nDESTIN_GRID1410  2.537e+00  1.012e-01    25.060  &lt; 2e-16 ***\nDESTIN_GRID1411  2.988e+00  1.006e-01    29.709  &lt; 2e-16 ***\nDESTIN_GRID1412  3.165e+00  1.006e-01    31.478  &lt; 2e-16 ***\nDESTIN_GRID1413  2.322e+00  1.007e-01    23.058  &lt; 2e-16 ***\nDESTIN_GRID1414  4.051e-01  1.018e-01     3.980 6.90e-05 ***\nDESTIN_GRID1415  1.332e+00  1.009e-01    13.205  &lt; 2e-16 ***\nDESTIN_GRID1416  1.907e+00  1.008e-01    18.910  &lt; 2e-16 ***\nDESTIN_GRID1417  2.500e+00  1.007e-01    24.832  &lt; 2e-16 ***\nDESTIN_GRID1418  8.468e-01  1.018e-01     8.320  &lt; 2e-16 ***\nDESTIN_GRID1419  1.341e+00  1.020e-01    13.145  &lt; 2e-16 ***\nDESTIN_GRID142   3.245e+00  1.024e-01    31.696  &lt; 2e-16 ***\nDESTIN_GRID1420  2.062e+00  1.011e-01    20.386  &lt; 2e-16 ***\nDESTIN_GRID1428  1.211e+00  1.366e-01     8.864  &lt; 2e-16 ***\nDESTIN_GRID1430  2.556e-01  1.032e-01     2.477 0.013249 *  \nDESTIN_GRID1431  2.818e+00  1.006e-01    28.010  &lt; 2e-16 ***\nDESTIN_GRID1432  2.943e+00  1.006e-01    29.264  &lt; 2e-16 ***\nDESTIN_GRID1433  1.252e+00  1.024e-01    12.229  &lt; 2e-16 ***\nDESTIN_GRID1434  1.332e+00  1.011e-01    13.167  &lt; 2e-16 ***\nDESTIN_GRID1435  2.392e+00  1.008e-01    23.740  &lt; 2e-16 ***\nDESTIN_GRID1436  2.755e+00  1.006e-01    27.376  &lt; 2e-16 ***\nDESTIN_GRID1439  1.436e+00  1.013e-01    14.169  &lt; 2e-16 ***\nDESTIN_GRID1440  1.968e+00  1.014e-01    19.419  &lt; 2e-16 ***\nDESTIN_GRID1448  2.210e+00  1.014e-01    21.791  &lt; 2e-16 ***\nDESTIN_GRID1449  1.739e+00  1.007e-01    17.260  &lt; 2e-16 ***\nDESTIN_GRID1450  2.299e+00  1.007e-01    22.830  &lt; 2e-16 ***\nDESTIN_GRID1451  3.252e+00  1.006e-01    32.342  &lt; 2e-16 ***\nDESTIN_GRID1452  1.120e+00  1.010e-01    11.092  &lt; 2e-16 ***\nDESTIN_GRID1453  2.249e+00  1.006e-01    22.343  &lt; 2e-16 ***\nDESTIN_GRID1454  1.816e+00  1.013e-01    17.931  &lt; 2e-16 ***\nDESTIN_GRID1455  3.177e+00  1.006e-01    31.583  &lt; 2e-16 ***\nDESTIN_GRID1456  2.295e+00  1.007e-01    22.799  &lt; 2e-16 ***\nDESTIN_GRID1457  2.968e+00  1.006e-01    29.497  &lt; 2e-16 ***\nDESTIN_GRID1458  1.140e+00  1.037e-01    11.000  &lt; 2e-16 ***\nDESTIN_GRID1468  3.523e+00  1.010e-01    34.875  &lt; 2e-16 ***\nDESTIN_GRID1469  2.750e+00  1.006e-01    27.342  &lt; 2e-16 ***\nDESTIN_GRID1470  3.485e+00  1.006e-01    34.655  &lt; 2e-16 ***\nDESTIN_GRID1471  2.756e+00  1.006e-01    27.391  &lt; 2e-16 ***\nDESTIN_GRID1472  4.169e+00  1.005e-01    41.472  &lt; 2e-16 ***\nDESTIN_GRID1473  1.398e+00  1.009e-01    13.862  &lt; 2e-16 ***\nDESTIN_GRID1474  3.412e+00  1.006e-01    33.929  &lt; 2e-16 ***\nDESTIN_GRID1475  6.776e-01  1.015e-01     6.675 2.48e-11 ***\nDESTIN_GRID1476  1.353e+00  1.011e-01    13.382  &lt; 2e-16 ***\nDESTIN_GRID1477  1.061e+00  1.019e-01    10.413  &lt; 2e-16 ***\nDESTIN_GRID1486  5.718e-01  1.049e-01     5.453 4.97e-08 ***\nDESTIN_GRID1487  2.367e+00  1.006e-01    23.517  &lt; 2e-16 ***\nDESTIN_GRID1488  2.417e+00  1.008e-01    23.994  &lt; 2e-16 ***\nDESTIN_GRID1489  2.296e+00  1.007e-01    22.807  &lt; 2e-16 ***\nDESTIN_GRID1490  2.391e+00  1.008e-01    23.727  &lt; 2e-16 ***\nDESTIN_GRID1491  2.020e+00  1.007e-01    20.068  &lt; 2e-16 ***\nDESTIN_GRID1492  2.192e+00  1.006e-01    21.783  &lt; 2e-16 ***\nDESTIN_GRID1493  2.869e+00  1.006e-01    28.524  &lt; 2e-16 ***\nDESTIN_GRID1494  2.175e+00  1.007e-01    21.597  &lt; 2e-16 ***\nDESTIN_GRID1506 -5.852e-01  1.398e-01    -4.187 2.83e-05 ***\nDESTIN_GRID1507  2.943e+00  1.006e-01    29.263  &lt; 2e-16 ***\nDESTIN_GRID1508  3.054e+00  1.006e-01    30.368  &lt; 2e-16 ***\nDESTIN_GRID1509  2.119e+00  1.015e-01    20.876  &lt; 2e-16 ***\nDESTIN_GRID1510  2.033e+00  1.007e-01    20.191  &lt; 2e-16 ***\nDESTIN_GRID1512  2.776e+00  1.006e-01    27.599  &lt; 2e-16 ***\nDESTIN_GRID1513  2.047e+00  1.010e-01    20.266  &lt; 2e-16 ***\nDESTIN_GRID1514  1.424e+00  1.011e-01    14.077  &lt; 2e-16 ***\nDESTIN_GRID1524  2.647e+00  1.009e-01    26.245  &lt; 2e-16 ***\nDESTIN_GRID1525  1.586e+00  1.008e-01    15.723  &lt; 2e-16 ***\nDESTIN_GRID1526  2.428e+00  1.006e-01    24.125  &lt; 2e-16 ***\nDESTIN_GRID1527  2.605e+00  1.007e-01    25.871  &lt; 2e-16 ***\nDESTIN_GRID1528  1.969e+00  1.007e-01    19.554  &lt; 2e-16 ***\nDESTIN_GRID1529  1.369e+00  1.010e-01    13.563  &lt; 2e-16 ***\nDESTIN_GRID1530  1.053e+00  1.013e-01    10.395  &lt; 2e-16 ***\nDESTIN_GRID1531  3.004e+00  1.006e-01    29.869  &lt; 2e-16 ***\nDESTIN_GRID1532  9.095e-01  1.014e-01     8.970  &lt; 2e-16 ***\nDESTIN_GRID1544  2.277e+00  1.008e-01    22.597  &lt; 2e-16 ***\nDESTIN_GRID1545  1.523e+00  1.008e-01    15.107  &lt; 2e-16 ***\nDESTIN_GRID1546  2.429e+00  1.006e-01    24.139  &lt; 2e-16 ***\nDESTIN_GRID1547  2.810e+00  1.006e-01    27.938  &lt; 2e-16 ***\nDESTIN_GRID1548  2.637e+00  1.006e-01    26.206  &lt; 2e-16 ***\nDESTIN_GRID1549  3.575e+00  1.005e-01    35.557  &lt; 2e-16 ***\nDESTIN_GRID1550  2.826e+00  1.006e-01    28.094  &lt; 2e-16 ***\nDESTIN_GRID1551  6.346e-01  1.016e-01     6.245 4.24e-10 ***\nDESTIN_GRID1552  1.922e+00  1.008e-01    19.064  &lt; 2e-16 ***\nDESTIN_GRID156   1.581e+00  1.093e-01    14.463  &lt; 2e-16 ***\nDESTIN_GRID1563  2.745e+00  1.006e-01    27.276  &lt; 2e-16 ***\nDESTIN_GRID1564  2.722e+00  1.006e-01    27.058  &lt; 2e-16 ***\nDESTIN_GRID1565  2.926e+00  1.006e-01    29.095  &lt; 2e-16 ***\nDESTIN_GRID1566  1.912e+00  1.008e-01    18.964  &lt; 2e-16 ***\nDESTIN_GRID1567  2.939e+00  1.006e-01    29.220  &lt; 2e-16 ***\nDESTIN_GRID1568  2.559e+00  1.006e-01    25.436  &lt; 2e-16 ***\nDESTIN_GRID1569  1.567e+00  1.008e-01    15.546  &lt; 2e-16 ***\nDESTIN_GRID1570  2.743e+00  1.006e-01    27.267  &lt; 2e-16 ***\nDESTIN_GRID1571  1.654e+00  1.014e-01    16.314  &lt; 2e-16 ***\nDESTIN_GRID158   3.427e+00  1.015e-01    33.761  &lt; 2e-16 ***\nDESTIN_GRID1582  1.806e+00  1.009e-01    17.899  &lt; 2e-16 ***\nDESTIN_GRID1583  3.032e+00  1.006e-01    30.148  &lt; 2e-16 ***\nDESTIN_GRID1584  2.941e+00  1.006e-01    29.241  &lt; 2e-16 ***\nDESTIN_GRID1585  2.381e+00  1.007e-01    23.645  &lt; 2e-16 ***\nDESTIN_GRID1587  2.863e+00  1.006e-01    28.465  &lt; 2e-16 ***\nDESTIN_GRID1588  3.907e+00  1.005e-01    38.861  &lt; 2e-16 ***\nDESTIN_GRID1589  3.438e+00  1.005e-01    34.194  &lt; 2e-16 ***\nDESTIN_GRID159   2.932e+00  1.010e-01    29.025  &lt; 2e-16 ***\nDESTIN_GRID1590  2.417e+00  1.006e-01    24.021  &lt; 2e-16 ***\nDESTIN_GRID1591  1.387e+00  1.029e-01    13.471  &lt; 2e-16 ***\nDESTIN_GRID160   1.278e+00  1.039e-01    12.300  &lt; 2e-16 ***\nDESTIN_GRID1601  2.534e+00  1.007e-01    25.174  &lt; 2e-16 ***\nDESTIN_GRID1602  2.132e+00  1.007e-01    21.171  &lt; 2e-16 ***\nDESTIN_GRID1603  3.111e+00  1.006e-01    30.925  &lt; 2e-16 ***\nDESTIN_GRID1604  3.825e+00  1.007e-01    37.972  &lt; 2e-16 ***\nDESTIN_GRID1606  2.014e+00  1.007e-01    20.004  &lt; 2e-16 ***\nDESTIN_GRID1607  1.746e+00  1.008e-01    17.324  &lt; 2e-16 ***\nDESTIN_GRID1608  3.934e+00  1.005e-01    39.134  &lt; 2e-16 ***\nDESTIN_GRID1609  2.089e+00  1.007e-01    20.740  &lt; 2e-16 ***\nDESTIN_GRID1610  1.705e+00  1.025e-01    16.623  &lt; 2e-16 ***\nDESTIN_GRID1620  3.027e+00  1.006e-01    30.086  &lt; 2e-16 ***\nDESTIN_GRID1621  2.539e+00  1.006e-01    25.223  &lt; 2e-16 ***\nDESTIN_GRID1622  2.655e+00  1.007e-01    26.363  &lt; 2e-16 ***\nDESTIN_GRID1623  2.683e+00  1.006e-01    26.656  &lt; 2e-16 ***\nDESTIN_GRID1624  3.824e+00  1.008e-01    37.949  &lt; 2e-16 ***\nDESTIN_GRID1625  5.336e-01  1.025e-01     5.204 1.95e-07 ***\nDESTIN_GRID1626  2.645e+00  1.006e-01    26.291  &lt; 2e-16 ***\nDESTIN_GRID1627  2.339e+00  1.006e-01    23.245  &lt; 2e-16 ***\nDESTIN_GRID1628  2.586e+00  1.006e-01    25.702  &lt; 2e-16 ***\nDESTIN_GRID1629  1.742e+00  1.009e-01    17.277  &lt; 2e-16 ***\nDESTIN_GRID1630  4.837e-01  1.124e-01     4.302 1.69e-05 ***\nDESTIN_GRID1639  2.388e+00  1.008e-01    23.699  &lt; 2e-16 ***\nDESTIN_GRID1640  3.324e+00  1.005e-01    33.064  &lt; 2e-16 ***\nDESTIN_GRID1641  3.452e+00  1.005e-01    34.336  &lt; 2e-16 ***\nDESTIN_GRID1645  1.115e+00  1.012e-01    11.018  &lt; 2e-16 ***\nDESTIN_GRID1646  2.279e+00  1.006e-01    22.648  &lt; 2e-16 ***\nDESTIN_GRID1647  3.956e+00  1.005e-01    39.348  &lt; 2e-16 ***\nDESTIN_GRID1648  8.248e-02  1.092e-01     0.755 0.450198    \nDESTIN_GRID1658  3.300e+00  1.006e-01    32.808  &lt; 2e-16 ***\nDESTIN_GRID1659  2.211e+00  1.007e-01    21.955  &lt; 2e-16 ***\nDESTIN_GRID1660  1.938e+00  1.007e-01    19.250  &lt; 2e-16 ***\nDESTIN_GRID1661  2.043e+00  1.008e-01    20.277  &lt; 2e-16 ***\nDESTIN_GRID1663  2.281e+00  1.014e-01    22.498  &lt; 2e-16 ***\nDESTIN_GRID1665  1.006e+00  1.012e-01     9.940  &lt; 2e-16 ***\nDESTIN_GRID1666  3.635e+00  1.005e-01    36.151  &lt; 2e-16 ***\nDESTIN_GRID1667  1.003e+00  1.032e-01     9.727  &lt; 2e-16 ***\nDESTIN_GRID1668  1.534e+00  1.015e-01    15.107  &lt; 2e-16 ***\nDESTIN_GRID1677  2.503e+00  1.006e-01    24.865  &lt; 2e-16 ***\nDESTIN_GRID1678  2.798e+00  1.006e-01    27.812  &lt; 2e-16 ***\nDESTIN_GRID1679  2.868e+00  1.006e-01    28.513  &lt; 2e-16 ***\nDESTIN_GRID1682  3.076e+00  1.008e-01    30.508  &lt; 2e-16 ***\nDESTIN_GRID1684  2.311e+00  1.021e-01    22.629  &lt; 2e-16 ***\nDESTIN_GRID1685  2.468e+00  1.007e-01    24.525  &lt; 2e-16 ***\nDESTIN_GRID1696  1.946e+00  1.009e-01    19.290  &lt; 2e-16 ***\nDESTIN_GRID1697  7.715e-01  1.025e-01     7.526 5.23e-14 ***\nDESTIN_GRID1698  1.407e+00  1.026e-01    13.721  &lt; 2e-16 ***\nDESTIN_GRID1699  2.782e+00  1.006e-01    27.652  &lt; 2e-16 ***\nDESTIN_GRID1702  2.100e+00  1.014e-01    20.701  &lt; 2e-16 ***\nDESTIN_GRID1704  2.324e+00  1.007e-01    23.087  &lt; 2e-16 ***\nDESTIN_GRID1705  1.160e+00  1.022e-01    11.348  &lt; 2e-16 ***\nDESTIN_GRID1715  2.765e+00  1.006e-01    27.478  &lt; 2e-16 ***\nDESTIN_GRID1716  2.012e+00  1.008e-01    19.970  &lt; 2e-16 ***\nDESTIN_GRID1717  1.326e+00  1.011e-01    13.117  &lt; 2e-16 ***\nDESTIN_GRID1718  1.131e+00  1.035e-01    10.926  &lt; 2e-16 ***\nDESTIN_GRID1721  1.446e+00  1.025e-01    14.114  &lt; 2e-16 ***\nDESTIN_GRID1723  8.114e-01  1.018e-01     7.969 1.60e-15 ***\nDESTIN_GRID1735  1.984e+00  1.009e-01    19.672  &lt; 2e-16 ***\nDESTIN_GRID1736  2.994e+00  1.007e-01    29.746  &lt; 2e-16 ***\nDESTIN_GRID1737  2.940e+00  1.006e-01    29.224  &lt; 2e-16 ***\nDESTIN_GRID1740  2.623e+00  1.010e-01    25.957  &lt; 2e-16 ***\nDESTIN_GRID1742  5.803e-01  1.023e-01     5.674 1.40e-08 ***\nDESTIN_GRID1753  2.254e+00  1.008e-01    22.367  &lt; 2e-16 ***\nDESTIN_GRID1754  3.031e+00  1.006e-01    30.138  &lt; 2e-16 ***\nDESTIN_GRID1755  2.105e+00  1.008e-01    20.887  &lt; 2e-16 ***\nDESTIN_GRID1758  1.555e+00  1.022e-01    15.213  &lt; 2e-16 ***\nDESTIN_GRID177   2.665e+00  1.047e-01    25.438  &lt; 2e-16 ***\nDESTIN_GRID1773  1.955e+00  1.009e-01    19.377  &lt; 2e-16 ***\nDESTIN_GRID1774  4.186e+00  1.005e-01    41.645  &lt; 2e-16 ***\nDESTIN_GRID1775  1.612e+00  1.009e-01    15.976  &lt; 2e-16 ***\nDESTIN_GRID1776  2.501e+00  1.007e-01    24.842  &lt; 2e-16 ***\nDESTIN_GRID1778  3.582e+00  1.011e-01    35.436  &lt; 2e-16 ***\nDESTIN_GRID178   3.058e+00  1.010e-01    30.280  &lt; 2e-16 ***\nDESTIN_GRID179   3.879e-01  1.255e-01     3.090 0.001999 ** \nDESTIN_GRID1791  2.171e+00  1.008e-01    21.538  &lt; 2e-16 ***\nDESTIN_GRID1792  2.369e+00  1.007e-01    23.528  &lt; 2e-16 ***\nDESTIN_GRID1793  2.185e+00  1.007e-01    21.689  &lt; 2e-16 ***\nDESTIN_GRID1794  2.891e+00  1.007e-01    28.701  &lt; 2e-16 ***\nDESTIN_GRID1795  2.489e+00  1.007e-01    24.722  &lt; 2e-16 ***\nDESTIN_GRID1796  2.565e+00  1.007e-01    25.475  &lt; 2e-16 ***\nDESTIN_GRID1797  2.676e+00  1.007e-01    26.582  &lt; 2e-16 ***\nDESTIN_GRID1811  2.319e+00  1.007e-01    23.027  &lt; 2e-16 ***\nDESTIN_GRID1812  2.560e+00  1.006e-01    25.445  &lt; 2e-16 ***\nDESTIN_GRID1813  2.996e+00  1.006e-01    29.786  &lt; 2e-16 ***\nDESTIN_GRID1814  3.315e+00  1.006e-01    32.963  &lt; 2e-16 ***\nDESTIN_GRID1815  2.221e+00  1.007e-01    22.063  &lt; 2e-16 ***\nDESTIN_GRID1816  3.447e+00  1.006e-01    34.270  &lt; 2e-16 ***\nDESTIN_GRID1817  3.516e-02  1.048e-01     0.336 0.737195    \nDESTIN_GRID1830  2.785e+00  1.007e-01    27.661  &lt; 2e-16 ***\nDESTIN_GRID1831  2.969e+00  1.006e-01    29.514  &lt; 2e-16 ***\nDESTIN_GRID1832  3.143e+00  1.006e-01    31.258  &lt; 2e-16 ***\nDESTIN_GRID1833  2.098e+00  1.007e-01    20.832  &lt; 2e-16 ***\nDESTIN_GRID1834  1.310e+00  1.012e-01    12.949  &lt; 2e-16 ***\nDESTIN_GRID1835  3.025e+00  1.006e-01    30.073  &lt; 2e-16 ***\nDESTIN_GRID1849  1.417e+00  1.011e-01    14.013  &lt; 2e-16 ***\nDESTIN_GRID1850  2.472e+00  1.006e-01    24.558  &lt; 2e-16 ***\nDESTIN_GRID1851  2.128e+00  1.012e-01    21.033  &lt; 2e-16 ***\nDESTIN_GRID1852  3.254e+00  1.006e-01    32.366  &lt; 2e-16 ***\nDESTIN_GRID1853  1.529e+00  1.009e-01    15.158  &lt; 2e-16 ***\nDESTIN_GRID1854  1.666e+00  1.008e-01    16.526  &lt; 2e-16 ***\nDESTIN_GRID1855  1.432e-01  1.042e-01     1.373 0.169603    \nDESTIN_GRID1868  2.379e+00  1.007e-01    23.622  &lt; 2e-16 ***\nDESTIN_GRID1869  2.173e+00  1.007e-01    21.572  &lt; 2e-16 ***\nDESTIN_GRID1870  6.479e-01  1.056e-01     6.135 8.54e-10 ***\nDESTIN_GRID1871  4.560e+00  1.005e-01    45.369  &lt; 2e-16 ***\nDESTIN_GRID1872  1.272e+00  1.013e-01    12.551  &lt; 2e-16 ***\nDESTIN_GRID1873  1.951e+00  1.008e-01    19.356  &lt; 2e-16 ***\nDESTIN_GRID1887  2.152e+00  1.008e-01    21.361  &lt; 2e-16 ***\nDESTIN_GRID1888  3.715e+00  1.006e-01    36.945  &lt; 2e-16 ***\nDESTIN_GRID1889  3.447e+00  1.006e-01    34.278  &lt; 2e-16 ***\nDESTIN_GRID1890  2.351e+00  1.006e-01    23.362  &lt; 2e-16 ***\nDESTIN_GRID1891  1.898e+00  1.009e-01    18.816  &lt; 2e-16 ***\nDESTIN_GRID1892  4.168e+00  1.005e-01    41.462  &lt; 2e-16 ***\nDESTIN_GRID1893 -1.503e-01  1.205e-01    -1.247 0.212508    \nDESTIN_GRID1905  1.828e+00  1.190e-01    15.371  &lt; 2e-16 ***\nDESTIN_GRID1906  8.722e-01  1.016e-01     8.586  &lt; 2e-16 ***\nDESTIN_GRID1907  3.694e+00  1.006e-01    36.732  &lt; 2e-16 ***\nDESTIN_GRID1908  3.254e+00  1.006e-01    32.354  &lt; 2e-16 ***\nDESTIN_GRID1909  2.358e+00  1.006e-01    23.426  &lt; 2e-16 ***\nDESTIN_GRID1910  1.279e+00  1.011e-01    12.653  &lt; 2e-16 ***\nDESTIN_GRID1911  1.027e+00  1.058e-01     9.707  &lt; 2e-16 ***\nDESTIN_GRID1926  2.775e+00  1.008e-01    27.526  &lt; 2e-16 ***\nDESTIN_GRID1927  2.283e+00  1.010e-01    22.607  &lt; 2e-16 ***\nDESTIN_GRID1928  2.420e+00  1.006e-01    24.048  &lt; 2e-16 ***\nDESTIN_GRID1929  2.330e+00  1.007e-01    23.133  &lt; 2e-16 ***\nDESTIN_GRID1930  2.030e+00  1.008e-01    20.151  &lt; 2e-16 ***\nDESTIN_GRID1944  1.726e+00  1.015e-01    16.996  &lt; 2e-16 ***\nDESTIN_GRID1945  1.795e+00  1.011e-01    17.764  &lt; 2e-16 ***\nDESTIN_GRID1946  1.961e+00  1.008e-01    19.456  &lt; 2e-16 ***\nDESTIN_GRID1947  3.794e+00  1.005e-01    37.741  &lt; 2e-16 ***\nDESTIN_GRID1948  2.700e+00  1.006e-01    26.833  &lt; 2e-16 ***\nDESTIN_GRID1949  1.697e+00  1.011e-01    16.789  &lt; 2e-16 ***\nDESTIN_GRID195   3.226e+00  1.046e-01    30.839  &lt; 2e-16 ***\nDESTIN_GRID196   2.596e+00  1.014e-01    25.592  &lt; 2e-16 ***\nDESTIN_GRID1965  2.942e+00  1.006e-01    29.235  &lt; 2e-16 ***\nDESTIN_GRID1966  1.333e+00  1.011e-01    13.183  &lt; 2e-16 ***\nDESTIN_GRID1967  1.785e+00  1.007e-01    17.717  &lt; 2e-16 ***\nDESTIN_GRID1968  2.393e+00  1.007e-01    23.765  &lt; 2e-16 ***\nDESTIN_GRID197   3.474e+00  1.009e-01    34.430  &lt; 2e-16 ***\nDESTIN_GRID1983  3.576e+00  1.007e-01    35.519  &lt; 2e-16 ***\nDESTIN_GRID1984  1.820e+00  1.011e-01    18.010  &lt; 2e-16 ***\nDESTIN_GRID1985  2.466e+00  1.007e-01    24.497  &lt; 2e-16 ***\nDESTIN_GRID1986  2.440e+00  1.006e-01    24.247  &lt; 2e-16 ***\nDESTIN_GRID1987  1.708e+00  1.066e-01    16.027  &lt; 2e-16 ***\nDESTIN_GRID2002  3.714e+00  1.013e-01    36.663  &lt; 2e-16 ***\nDESTIN_GRID2003  2.926e+00  1.008e-01    29.027  &lt; 2e-16 ***\nDESTIN_GRID2004  3.855e+00  1.007e-01    38.271  &lt; 2e-16 ***\nDESTIN_GRID2005  1.971e+00  1.009e-01    19.535  &lt; 2e-16 ***\nDESTIN_GRID2006  2.723e+00  1.007e-01    27.048  &lt; 2e-16 ***\nDESTIN_GRID2021  3.368e+00  1.010e-01    33.367  &lt; 2e-16 ***\nDESTIN_GRID2022  3.824e+00  1.008e-01    37.927  &lt; 2e-16 ***\nDESTIN_GRID2023  2.809e+00  1.009e-01    27.845  &lt; 2e-16 ***\nDESTIN_GRID2024  1.280e+00  1.014e-01    12.619  &lt; 2e-16 ***\nDESTIN_GRID2025  3.147e+00  1.011e-01    31.118  &lt; 2e-16 ***\nDESTIN_GRID2042  3.374e+00  1.012e-01    33.334  &lt; 2e-16 ***\nDESTIN_GRID2043  7.226e-01  1.039e-01     6.958 3.46e-12 ***\nDESTIN_GRID2044  2.347e+00  1.007e-01    23.298  &lt; 2e-16 ***\nDESTIN_GRID2045  3.720e+00  1.010e-01    36.829  &lt; 2e-16 ***\nDESTIN_GRID2061  2.236e+00  1.037e-01    21.559  &lt; 2e-16 ***\nDESTIN_GRID2062  1.645e+00  1.018e-01    16.162  &lt; 2e-16 ***\nDESTIN_GRID2063  2.302e+00  1.008e-01    22.843  &lt; 2e-16 ***\nDESTIN_GRID2064  1.030e+00  1.052e-01     9.788  &lt; 2e-16 ***\nDESTIN_GRID2079  1.218e+00  1.020e-01    11.939  &lt; 2e-16 ***\nDESTIN_GRID2082  1.519e+00  1.026e-01    14.814  &lt; 2e-16 ***\nDESTIN_GRID2083  1.922e+00  1.010e-01    19.032  &lt; 2e-16 ***\nDESTIN_GRID2098  3.345e+00  1.006e-01    33.237  &lt; 2e-16 ***\nDESTIN_GRID2099  3.612e+00  1.006e-01    35.899  &lt; 2e-16 ***\nDESTIN_GRID21    2.814e+00  1.125e-01    25.025  &lt; 2e-16 ***\nDESTIN_GRID2102  2.195e+00  1.009e-01    21.756  &lt; 2e-16 ***\nDESTIN_GRID2115  3.679e+00  1.016e-01    36.197  &lt; 2e-16 ***\nDESTIN_GRID2119  3.736e+00  1.006e-01    37.127  &lt; 2e-16 ***\nDESTIN_GRID2121  1.470e+00  1.013e-01    14.515  &lt; 2e-16 ***\nDESTIN_GRID2137  2.481e+00  1.009e-01    24.583  &lt; 2e-16 ***\nDESTIN_GRID2140  4.558e-01  1.047e-01     4.352 1.35e-05 ***\nDESTIN_GRID215   1.842e+00  1.050e-01    17.542  &lt; 2e-16 ***\nDESTIN_GRID2153  2.815e+00  1.033e-01    27.237  &lt; 2e-16 ***\nDESTIN_GRID2158  3.261e+00  1.007e-01    32.380  &lt; 2e-16 ***\nDESTIN_GRID216   2.958e+00  1.016e-01    29.127  &lt; 2e-16 ***\nDESTIN_GRID217   2.430e+00  1.049e-01    23.161  &lt; 2e-16 ***\nDESTIN_GRID2177  3.988e+00  1.006e-01    39.641  &lt; 2e-16 ***\nDESTIN_GRID2178  9.455e-01  1.032e-01     9.162  &lt; 2e-16 ***\nDESTIN_GRID2196  3.037e+00  1.011e-01    30.046  &lt; 2e-16 ***\nDESTIN_GRID2197  3.549e+00  1.007e-01    35.242  &lt; 2e-16 ***\nDESTIN_GRID2267  3.719e+00  1.021e-01    36.414  &lt; 2e-16 ***\nDESTIN_GRID233   3.495e+00  1.017e-01    34.375  &lt; 2e-16 ***\nDESTIN_GRID234   1.937e+00  1.023e-01    18.938  &lt; 2e-16 ***\nDESTIN_GRID235   3.539e+00  1.012e-01    34.978  &lt; 2e-16 ***\nDESTIN_GRID252   3.112e+00  1.014e-01    30.679  &lt; 2e-16 ***\nDESTIN_GRID253   2.742e+00  1.013e-01    27.060  &lt; 2e-16 ***\nDESTIN_GRID254   2.913e+00  1.012e-01    28.774  &lt; 2e-16 ***\nDESTIN_GRID270   7.699e-01  1.636e-01     4.706 2.53e-06 ***\nDESTIN_GRID271   3.599e+00  1.017e-01    35.385  &lt; 2e-16 ***\nDESTIN_GRID272   2.089e+00  1.018e-01    20.517  &lt; 2e-16 ***\nDESTIN_GRID290   4.133e+00  1.014e-01    40.750  &lt; 2e-16 ***\nDESTIN_GRID291   2.172e+00  1.032e-01    21.050  &lt; 2e-16 ***\nDESTIN_GRID292   4.478e+00  1.011e-01    44.275  &lt; 2e-16 ***\nDESTIN_GRID308   3.892e+00  1.010e-01    38.521  &lt; 2e-16 ***\nDESTIN_GRID309   3.255e+00  1.012e-01    32.160  &lt; 2e-16 ***\nDESTIN_GRID310   3.337e+00  1.010e-01    33.040  &lt; 2e-16 ***\nDESTIN_GRID329   4.130e+00  1.013e-01    40.763  &lt; 2e-16 ***\nDESTIN_GRID330   4.150e+00  1.008e-01    41.179  &lt; 2e-16 ***\nDESTIN_GRID347   3.666e+00  1.009e-01    36.341  &lt; 2e-16 ***\nDESTIN_GRID348   3.735e+00  1.008e-01    37.044  &lt; 2e-16 ***\nDESTIN_GRID349   4.269e+00  1.015e-01    42.046  &lt; 2e-16 ***\nDESTIN_GRID366   3.606e+00  1.012e-01    35.612  &lt; 2e-16 ***\nDESTIN_GRID367   3.592e+00  1.010e-01    35.560  &lt; 2e-16 ***\nDESTIN_GRID368   3.450e+00  1.006e-01    34.293  &lt; 2e-16 ***\nDESTIN_GRID369   3.849e+00  1.008e-01    38.192  &lt; 2e-16 ***\nDESTIN_GRID370   4.831e+00  1.006e-01    48.029  &lt; 2e-16 ***\nDESTIN_GRID385   1.705e+00  1.034e-01    16.488  &lt; 2e-16 ***\nDESTIN_GRID386   3.051e+00  1.010e-01    30.210  &lt; 2e-16 ***\nDESTIN_GRID387   6.339e-01  1.031e-01     6.152 7.67e-10 ***\nDESTIN_GRID388   3.386e+00  1.010e-01    33.539  &lt; 2e-16 ***\nDESTIN_GRID389   2.005e+00  1.027e-01    19.519  &lt; 2e-16 ***\nDESTIN_GRID40    4.031e+00  1.030e-01    39.131  &lt; 2e-16 ***\nDESTIN_GRID404   2.829e+00  1.029e-01    27.484  &lt; 2e-16 ***\nDESTIN_GRID405   2.624e+00  1.019e-01    25.752  &lt; 2e-16 ***\nDESTIN_GRID406   2.754e+00  1.011e-01    27.234  &lt; 2e-16 ***\nDESTIN_GRID407   2.754e+00  1.007e-01    27.333  &lt; 2e-16 ***\nDESTIN_GRID408   2.564e+00  1.011e-01    25.355  &lt; 2e-16 ***\nDESTIN_GRID42    3.586e+00  1.023e-01    35.058  &lt; 2e-16 ***\nDESTIN_GRID424   2.933e+00  1.010e-01    29.029  &lt; 2e-16 ***\nDESTIN_GRID425   2.454e+00  1.008e-01    24.340  &lt; 2e-16 ***\nDESTIN_GRID426   2.713e+00  1.007e-01    26.940  &lt; 2e-16 ***\nDESTIN_GRID427   2.420e+00  1.016e-01    23.806  &lt; 2e-16 ***\nDESTIN_GRID442   2.494e+00  1.028e-01    24.254  &lt; 2e-16 ***\nDESTIN_GRID443   9.375e-01  1.104e-01     8.492  &lt; 2e-16 ***\nDESTIN_GRID444   3.164e+00  1.008e-01    31.371  &lt; 2e-16 ***\nDESTIN_GRID445   1.330e+00  1.013e-01    13.137  &lt; 2e-16 ***\nDESTIN_GRID447  -8.453e-02  1.112e-01    -0.760 0.447239    \nDESTIN_GRID448   2.007e+00  1.028e-01    19.528  &lt; 2e-16 ***\nDESTIN_GRID461   2.356e+00  1.016e-01    23.200  &lt; 2e-16 ***\nDESTIN_GRID462   3.048e+00  1.009e-01    30.194  &lt; 2e-16 ***\nDESTIN_GRID463   2.579e+00  1.007e-01    25.614  &lt; 2e-16 ***\nDESTIN_GRID464   2.568e+00  1.007e-01    25.506  &lt; 2e-16 ***\nDESTIN_GRID465   3.530e+00  1.007e-01    35.037  &lt; 2e-16 ***\nDESTIN_GRID466   2.719e+00  1.012e-01    26.883  &lt; 2e-16 ***\nDESTIN_GRID467   1.244e+00  1.048e-01    11.870  &lt; 2e-16 ***\nDESTIN_GRID480   2.223e+00  1.044e-01    21.291  &lt; 2e-16 ***\nDESTIN_GRID481   4.260e+00  1.007e-01    42.322  &lt; 2e-16 ***\nDESTIN_GRID482   2.921e+00  1.009e-01    28.965  &lt; 2e-16 ***\nDESTIN_GRID483   4.185e+00  1.005e-01    41.631  &lt; 2e-16 ***\nDESTIN_GRID484   2.618e+00  1.007e-01    26.000  &lt; 2e-16 ***\nDESTIN_GRID486   1.963e+00  1.020e-01    19.242  &lt; 2e-16 ***\nDESTIN_GRID487   9.168e-01  1.059e-01     8.661  &lt; 2e-16 ***\nDESTIN_GRID488   9.438e-01  1.092e-01     8.645  &lt; 2e-16 ***\nDESTIN_GRID489  -6.034e-01  2.694e-01    -2.239 0.025139 *  \nDESTIN_GRID499   3.106e+00  1.020e-01    30.454  &lt; 2e-16 ***\nDESTIN_GRID500   3.892e+00  1.010e-01    38.529  &lt; 2e-16 ***\nDESTIN_GRID501   2.478e+00  1.008e-01    24.570  &lt; 2e-16 ***\nDESTIN_GRID502   2.407e+00  1.007e-01    23.902  &lt; 2e-16 ***\nDESTIN_GRID503   2.855e+00  1.008e-01    28.337  &lt; 2e-16 ***\nDESTIN_GRID507   8.968e-01  1.136e-01     7.895 2.89e-15 ***\nDESTIN_GRID508   2.899e+00  1.018e-01    28.486  &lt; 2e-16 ***\nDESTIN_GRID509   6.621e-01  1.192e-01     5.553 2.81e-08 ***\nDESTIN_GRID518   2.645e+00  1.062e-01    24.910  &lt; 2e-16 ***\nDESTIN_GRID519   3.562e+00  1.010e-01    35.278  &lt; 2e-16 ***\nDESTIN_GRID520   3.555e+00  1.017e-01    34.970  &lt; 2e-16 ***\nDESTIN_GRID521   4.659e+00  1.005e-01    46.348  &lt; 2e-16 ***\nDESTIN_GRID522   2.681e+00  1.007e-01    26.636  &lt; 2e-16 ***\nDESTIN_GRID524  -1.083e+00  1.401e-01    -7.729 1.09e-14 ***\nDESTIN_GRID528  -7.226e-02  1.176e-01    -0.614 0.538958    \nDESTIN_GRID529  -5.236e-01  2.084e-01    -2.512 0.011994 *  \nDESTIN_GRID530   1.808e+00  1.062e-01    17.028  &lt; 2e-16 ***\nDESTIN_GRID537   1.325e+00  1.035e-01    12.801  &lt; 2e-16 ***\nDESTIN_GRID538   2.921e+00  1.014e-01    28.817  &lt; 2e-16 ***\nDESTIN_GRID539   3.491e+00  1.007e-01    34.684  &lt; 2e-16 ***\nDESTIN_GRID540   2.711e+00  1.006e-01    26.940  &lt; 2e-16 ***\nDESTIN_GRID541   2.366e+00  1.016e-01    23.285  &lt; 2e-16 ***\nDESTIN_GRID547   7.532e-01  1.127e-01     6.681 2.38e-11 ***\nDESTIN_GRID548   1.293e+00  1.119e-01    11.553  &lt; 2e-16 ***\nDESTIN_GRID557   1.960e+00  1.015e-01    19.306  &lt; 2e-16 ***\nDESTIN_GRID558   3.156e+00  1.009e-01    31.292  &lt; 2e-16 ***\nDESTIN_GRID559   1.938e+00  1.009e-01    19.211  &lt; 2e-16 ***\nDESTIN_GRID560   2.355e+00  1.007e-01    23.387  &lt; 2e-16 ***\nDESTIN_GRID562   2.972e+00  1.011e-01    29.415  &lt; 2e-16 ***\nDESTIN_GRID577   2.712e+00  1.011e-01    26.832  &lt; 2e-16 ***\nDESTIN_GRID578   2.500e+00  1.006e-01    24.840  &lt; 2e-16 ***\nDESTIN_GRID595   3.254e+00  1.007e-01    32.301  &lt; 2e-16 ***\nDESTIN_GRID596   2.609e+00  1.007e-01    25.915  &lt; 2e-16 ***\nDESTIN_GRID597   2.657e+00  1.006e-01    26.396  &lt; 2e-16 ***\nDESTIN_GRID598   3.206e+00  1.006e-01    31.878  &lt; 2e-16 ***\nDESTIN_GRID60    2.474e+00  1.106e-01    22.368  &lt; 2e-16 ***\nDESTIN_GRID600   2.527e+00  1.012e-01    24.986  &lt; 2e-16 ***\nDESTIN_GRID61    2.954e+00  1.014e-01    29.129  &lt; 2e-16 ***\nDESTIN_GRID613   3.255e+00  1.009e-01    32.257  &lt; 2e-16 ***\nDESTIN_GRID614   1.721e+00  1.014e-01    16.965  &lt; 2e-16 ***\nDESTIN_GRID615   2.934e+00  1.006e-01    29.166  &lt; 2e-16 ***\nDESTIN_GRID616   4.667e+00  1.005e-01    46.423  &lt; 2e-16 ***\nDESTIN_GRID617   9.296e-01  1.020e-01     9.115  &lt; 2e-16 ***\nDESTIN_GRID62    3.503e+00  1.023e-01    34.238  &lt; 2e-16 ***\nDESTIN_GRID633   2.903e+00  1.009e-01    28.771  &lt; 2e-16 ***\nDESTIN_GRID634   2.305e+00  1.007e-01    22.886  &lt; 2e-16 ***\nDESTIN_GRID635   3.709e-01  1.023e-01     3.626 0.000288 ***\nDESTIN_GRID636   2.861e+00  1.006e-01    28.441  &lt; 2e-16 ***\nDESTIN_GRID638   2.703e+00  1.010e-01    26.745  &lt; 2e-16 ***\nDESTIN_GRID654   2.546e+00  1.009e-01    25.246  &lt; 2e-16 ***\nDESTIN_GRID657   1.036e+00  1.038e-01     9.986  &lt; 2e-16 ***\nDESTIN_GRID671   3.398e+00  1.007e-01    33.732  &lt; 2e-16 ***\nDESTIN_GRID673   2.362e-01  1.025e-01     2.304 0.021207 *  \nDESTIN_GRID674   2.886e+00  1.006e-01    28.691  &lt; 2e-16 ***\nDESTIN_GRID689   3.434e+00  1.008e-01    34.063  &lt; 2e-16 ***\nDESTIN_GRID690   1.458e+00  1.013e-01    14.386  &lt; 2e-16 ***\nDESTIN_GRID691   4.859e-01  1.024e-01     4.746 2.07e-06 ***\nDESTIN_GRID692   3.453e+00  1.005e-01    34.343  &lt; 2e-16 ***\nDESTIN_GRID693   2.843e+00  1.009e-01    28.167  &lt; 2e-16 ***\nDESTIN_GRID695   2.674e+00  1.007e-01    26.553  &lt; 2e-16 ***\nDESTIN_GRID700   1.519e+00  1.074e-01    14.143  &lt; 2e-16 ***\nDESTIN_GRID710   3.150e-01  1.026e-01     3.069 0.002148 ** \nDESTIN_GRID711   2.378e+00  1.006e-01    23.625  &lt; 2e-16 ***\nDESTIN_GRID712   2.724e+00  1.006e-01    27.076  &lt; 2e-16 ***\nDESTIN_GRID713   1.886e+00  1.010e-01    18.665  &lt; 2e-16 ***\nDESTIN_GRID714   1.127e+00  1.015e-01    11.106  &lt; 2e-16 ***\nDESTIN_GRID715   1.115e+00  1.019e-01    10.947  &lt; 2e-16 ***\nDESTIN_GRID727   2.613e+00  1.014e-01    25.762  &lt; 2e-16 ***\nDESTIN_GRID728   2.747e+00  1.007e-01    27.286  &lt; 2e-16 ***\nDESTIN_GRID729   3.929e+00  1.005e-01    39.086  &lt; 2e-16 ***\nDESTIN_GRID730   2.409e+00  1.006e-01    23.934  &lt; 2e-16 ***\nDESTIN_GRID731   2.589e+00  1.007e-01    25.709  &lt; 2e-16 ***\nDESTIN_GRID732   1.356e+00  1.020e-01    13.296  &lt; 2e-16 ***\nDESTIN_GRID733   2.979e+00  1.006e-01    29.614  &lt; 2e-16 ***\nDESTIN_GRID734   2.385e+00  1.008e-01    23.664  &lt; 2e-16 ***\nDESTIN_GRID738   2.452e+00  1.023e-01    23.962  &lt; 2e-16 ***\nDESTIN_GRID746   2.412e+00  1.014e-01    23.795  &lt; 2e-16 ***\nDESTIN_GRID748   2.480e+00  1.007e-01    24.637  &lt; 2e-16 ***\nDESTIN_GRID749   2.258e+00  1.007e-01    22.428  &lt; 2e-16 ***\nDESTIN_GRID750   2.724e+00  1.006e-01    27.072  &lt; 2e-16 ***\nDESTIN_GRID751   2.072e+00  1.008e-01    20.557  &lt; 2e-16 ***\nDESTIN_GRID752   1.287e+00  1.013e-01    12.710  &lt; 2e-16 ***\nDESTIN_GRID753   4.326e+00  1.005e-01    43.037  &lt; 2e-16 ***\nDESTIN_GRID754   4.396e+00  1.005e-01    43.720  &lt; 2e-16 ***\nDESTIN_GRID757   1.818e+00  1.025e-01    17.740  &lt; 2e-16 ***\nDESTIN_GRID764   2.341e+00  1.021e-01    22.934  &lt; 2e-16 ***\nDESTIN_GRID766   2.247e+00  1.007e-01    22.308  &lt; 2e-16 ***\nDESTIN_GRID767   3.247e+00  1.006e-01    32.281  &lt; 2e-16 ***\nDESTIN_GRID768   2.368e+00  1.007e-01    23.525  &lt; 2e-16 ***\nDESTIN_GRID769   1.822e+00  1.008e-01    18.071  &lt; 2e-16 ***\nDESTIN_GRID770   2.754e+00  1.006e-01    27.369  &lt; 2e-16 ***\nDESTIN_GRID771   2.296e+00  1.007e-01    22.809  &lt; 2e-16 ***\nDESTIN_GRID772   2.334e+00  1.008e-01    23.151  &lt; 2e-16 ***\nDESTIN_GRID773   2.607e+00  1.008e-01    25.867  &lt; 2e-16 ***\nDESTIN_GRID774   2.871e+00  1.014e-01    28.307  &lt; 2e-16 ***\nDESTIN_GRID775   1.745e+00  1.023e-01    17.051  &lt; 2e-16 ***\nDESTIN_GRID776   1.057e+00  1.050e-01    10.061  &lt; 2e-16 ***\nDESTIN_GRID78    3.170e+00  1.062e-01    29.841  &lt; 2e-16 ***\nDESTIN_GRID784   2.977e+00  1.010e-01    29.490  &lt; 2e-16 ***\nDESTIN_GRID785   3.656e+00  1.006e-01    36.341  &lt; 2e-16 ***\nDESTIN_GRID786   3.176e+00  1.006e-01    31.561  &lt; 2e-16 ***\nDESTIN_GRID787   4.359e+00  1.006e-01    43.330  &lt; 2e-16 ***\nDESTIN_GRID788   3.892e+00  1.005e-01    38.712  &lt; 2e-16 ***\nDESTIN_GRID789   4.052e+00  1.006e-01    40.295  &lt; 2e-16 ***\nDESTIN_GRID79    8.548e-01  1.307e-01     6.538 6.25e-11 ***\nDESTIN_GRID790   2.804e+00  1.006e-01    27.861  &lt; 2e-16 ***\nDESTIN_GRID791   2.894e+00  1.008e-01    28.713  &lt; 2e-16 ***\nDESTIN_GRID792   1.092e+00  1.013e-01    10.783  &lt; 2e-16 ***\nDESTIN_GRID793   1.217e+00  1.039e-01    11.714  &lt; 2e-16 ***\nDESTIN_GRID794   1.810e+00  1.021e-01    17.725  &lt; 2e-16 ***\nDESTIN_GRID795   2.668e+00  1.014e-01    26.302  &lt; 2e-16 ***\nDESTIN_GRID80    2.452e+00  1.019e-01    24.056  &lt; 2e-16 ***\nDESTIN_GRID803   2.413e+00  1.009e-01    23.924  &lt; 2e-16 ***\nDESTIN_GRID804   1.199e+00  1.014e-01    11.824  &lt; 2e-16 ***\nDESTIN_GRID805   2.086e+00  1.013e-01    20.595  &lt; 2e-16 ***\nDESTIN_GRID806   2.791e+00  1.006e-01    27.742  &lt; 2e-16 ***\nDESTIN_GRID807   1.802e+00  1.014e-01    17.766  &lt; 2e-16 ***\nDESTIN_GRID809   3.018e+00  1.006e-01    30.005  &lt; 2e-16 ***\nDESTIN_GRID81    3.362e+00  1.025e-01    32.814  &lt; 2e-16 ***\nDESTIN_GRID810   1.508e+00  1.011e-01    14.922  &lt; 2e-16 ***\nDESTIN_GRID811   2.285e+00  1.009e-01    22.651  &lt; 2e-16 ***\nDESTIN_GRID812   3.328e-01  1.054e-01     3.159 0.001584 ** \nDESTIN_GRID813   5.168e-01  1.043e-01     4.953 7.31e-07 ***\nDESTIN_GRID814   2.684e+00  1.018e-01    26.374  &lt; 2e-16 ***\nDESTIN_GRID82   -1.355e+00  7.142e-01    -1.898 0.057761 .  \nDESTIN_GRID822   2.503e+00  1.010e-01    24.776  &lt; 2e-16 ***\nDESTIN_GRID823   2.404e+00  1.007e-01    23.876  &lt; 2e-16 ***\nDESTIN_GRID824   1.473e+00  1.011e-01    14.563  &lt; 2e-16 ***\nDESTIN_GRID825   3.856e+00  1.006e-01    38.344  &lt; 2e-16 ***\nDESTIN_GRID826   1.935e+00  1.007e-01    19.205  &lt; 2e-16 ***\nDESTIN_GRID829   2.533e+00  1.006e-01    25.168  &lt; 2e-16 ***\nDESTIN_GRID831   3.384e+00  1.006e-01    33.629  &lt; 2e-16 ***\nDESTIN_GRID832   9.022e-02  1.076e-01     0.839 0.401608    \nDESTIN_GRID833   2.007e+00  1.016e-01    19.762  &lt; 2e-16 ***\nDESTIN_GRID840   1.285e+00  1.020e-01    12.604  &lt; 2e-16 ***\nDESTIN_GRID841   2.095e+00  1.007e-01    20.800  &lt; 2e-16 ***\nDESTIN_GRID842   3.229e+00  1.006e-01    32.109  &lt; 2e-16 ***\nDESTIN_GRID843   2.222e+00  1.010e-01    21.997  &lt; 2e-16 ***\nDESTIN_GRID844   9.728e-01  1.033e-01     9.418  &lt; 2e-16 ***\nDESTIN_GRID845   2.630e+00  1.008e-01    26.102  &lt; 2e-16 ***\nDESTIN_GRID846   2.364e+00  1.008e-01    23.462  &lt; 2e-16 ***\nDESTIN_GRID847   4.187e+00  1.005e-01    41.648  &lt; 2e-16 ***\nDESTIN_GRID850  -3.878e-01  1.692e-01    -2.292 0.021892 *  \nDESTIN_GRID851   4.435e+00  1.006e-01    44.111  &lt; 2e-16 ***\nDESTIN_GRID852   1.866e+00  1.023e-01    18.246  &lt; 2e-16 ***\nDESTIN_GRID859   1.179e+00  1.015e-01    11.621  &lt; 2e-16 ***\nDESTIN_GRID860   3.216e+00  1.006e-01    31.966  &lt; 2e-16 ***\nDESTIN_GRID861   3.986e+00  1.005e-01    39.647  &lt; 2e-16 ***\nDESTIN_GRID862   3.235e+00  1.008e-01    32.103  &lt; 2e-16 ***\nDESTIN_GRID863   2.628e+00  1.008e-01    26.057  &lt; 2e-16 ***\nDESTIN_GRID864   6.958e-01  1.018e-01     6.836 8.14e-12 ***\nDESTIN_GRID865   3.400e+00  1.006e-01    33.805  &lt; 2e-16 ***\nDESTIN_GRID866   1.713e+00  1.009e-01    16.979  &lt; 2e-16 ***\nDESTIN_GRID867   2.321e+00  1.008e-01    23.024  &lt; 2e-16 ***\nDESTIN_GRID869   2.650e+00  1.023e-01    25.913  &lt; 2e-16 ***\nDESTIN_GRID871   2.474e+00  1.012e-01    24.451  &lt; 2e-16 ***\nDESTIN_GRID872   4.399e+00  1.006e-01    43.723  &lt; 2e-16 ***\nDESTIN_GRID878   2.458e+00  1.007e-01    24.403  &lt; 2e-16 ***\nDESTIN_GRID879   2.729e+00  1.006e-01    27.135  &lt; 2e-16 ***\nDESTIN_GRID880   2.063e+00  1.007e-01    20.486  &lt; 2e-16 ***\nDESTIN_GRID882   1.791e+00  1.010e-01    17.736  &lt; 2e-16 ***\nDESTIN_GRID883   8.794e-01  1.017e-01     8.644  &lt; 2e-16 ***\nDESTIN_GRID884   1.633e+00  1.010e-01    16.162  &lt; 2e-16 ***\nDESTIN_GRID885   2.284e+00  1.007e-01    22.689  &lt; 2e-16 ***\nDESTIN_GRID886   1.881e+00  1.010e-01    18.618  &lt; 2e-16 ***\nDESTIN_GRID890   1.859e+00  1.011e-01    18.390  &lt; 2e-16 ***\nDESTIN_GRID891  -4.697e+00  1.005e+00    -4.673 2.96e-06 ***\nDESTIN_GRID897   2.580e+00  1.007e-01    25.615  &lt; 2e-16 ***\nDESTIN_GRID898   2.724e+00  1.006e-01    27.061  &lt; 2e-16 ***\nDESTIN_GRID899   1.464e+00  1.009e-01    14.509  &lt; 2e-16 ***\nDESTIN_GRID900   1.139e+00  1.012e-01    11.259  &lt; 2e-16 ***\nDESTIN_GRID901   2.058e+00  1.008e-01    20.430  &lt; 2e-16 ***\nDESTIN_GRID902   1.594e+00  1.011e-01    15.768  &lt; 2e-16 ***\nDESTIN_GRID903   2.798e+00  1.013e-01    27.630  &lt; 2e-16 ***\nDESTIN_GRID904   2.772e+00  1.006e-01    27.546  &lt; 2e-16 ***\nDESTIN_GRID905   2.034e+00  1.009e-01    20.155  &lt; 2e-16 ***\nDESTIN_GRID907   2.115e+00  1.017e-01    20.795  &lt; 2e-16 ***\nDESTIN_GRID909   3.964e+00  1.005e-01    39.430  &lt; 2e-16 ***\nDESTIN_GRID910   3.402e+00  1.006e-01    33.822  &lt; 2e-16 ***\nDESTIN_GRID915   2.276e+00  1.012e-01    22.498  &lt; 2e-16 ***\nDESTIN_GRID916   3.514e+00  1.007e-01    34.903  &lt; 2e-16 ***\nDESTIN_GRID917   2.672e+00  1.007e-01    26.524  &lt; 2e-16 ***\nDESTIN_GRID918   7.581e-01  1.017e-01     7.454 9.07e-14 ***\nDESTIN_GRID919   3.257e+00  1.006e-01    32.378  &lt; 2e-16 ***\nDESTIN_GRID920   3.606e+00  1.006e-01    35.853  &lt; 2e-16 ***\nDESTIN_GRID922   2.165e+00  1.012e-01    21.393  &lt; 2e-16 ***\nDESTIN_GRID923   2.752e+00  1.007e-01    27.345  &lt; 2e-16 ***\nDESTIN_GRID927   1.560e+00  1.013e-01    15.399  &lt; 2e-16 ***\nDESTIN_GRID928   2.839e+00  1.007e-01    28.198  &lt; 2e-16 ***\nDESTIN_GRID929  -8.305e-01  1.287e-01    -6.455 1.08e-10 ***\nDESTIN_GRID935   3.000e+00  1.007e-01    29.805  &lt; 2e-16 ***\nDESTIN_GRID936   3.140e+00  1.006e-01    31.211  &lt; 2e-16 ***\nDESTIN_GRID937   3.027e+00  1.006e-01    30.086  &lt; 2e-16 ***\nDESTIN_GRID938   3.308e+00  1.006e-01    32.881  &lt; 2e-16 ***\nDESTIN_GRID939   2.241e+00  1.007e-01    22.264  &lt; 2e-16 ***\nDESTIN_GRID945   2.788e+00  1.010e-01    27.599  &lt; 2e-16 ***\nDESTIN_GRID947   2.627e+00  1.006e-01    26.106  &lt; 2e-16 ***\nDESTIN_GRID948   3.258e+00  1.006e-01    32.369  &lt; 2e-16 ***\nDESTIN_GRID953   3.364e+00  1.006e-01    33.436  &lt; 2e-16 ***\nDESTIN_GRID954   3.198e+00  1.006e-01    31.789  &lt; 2e-16 ***\nDESTIN_GRID955   1.823e+00  1.008e-01    18.079  &lt; 2e-16 ***\nDESTIN_GRID956   1.488e+00  1.011e-01    14.725  &lt; 2e-16 ***\nDESTIN_GRID964   7.119e-02  1.306e-01     0.545 0.585573    \nDESTIN_GRID966   3.760e+00  1.006e-01    37.386  &lt; 2e-16 ***\nDESTIN_GRID967   3.751e+00  1.007e-01    37.258  &lt; 2e-16 ***\nDESTIN_GRID972   1.268e+00  1.013e-01    12.517  &lt; 2e-16 ***\nDESTIN_GRID973   3.172e+00  1.006e-01    31.521  &lt; 2e-16 ***\nDESTIN_GRID974   2.206e+00  1.007e-01    21.905  &lt; 2e-16 ***\nDESTIN_GRID975   1.702e+00  1.009e-01    16.862  &lt; 2e-16 ***\nDESTIN_GRID977   2.497e+00  1.007e-01    24.804  &lt; 2e-16 ***\nDESTIN_GRID983   8.970e-01  1.121e-01     8.002 1.22e-15 ***\nDESTIN_GRID985   3.023e+00  1.006e-01    30.040  &lt; 2e-16 ***\nDESTIN_GRID986   3.362e+00  1.006e-01    33.412  &lt; 2e-16 ***\nDESTIN_GRID99    2.544e+00  1.033e-01    24.618  &lt; 2e-16 ***\nDESTIN_GRID990  -6.619e-01  1.119e-01    -5.916 3.29e-09 ***\nDESTIN_GRID991   2.853e+00  1.014e-01    28.122  &lt; 2e-16 ***\nDESTIN_GRID992   3.167e+00  1.010e-01    31.353  &lt; 2e-16 ***\nDESTIN_GRID993   3.207e+00  1.006e-01    31.892  &lt; 2e-16 ***\nDESTIN_GRID994   7.107e-01  1.027e-01     6.919 4.56e-12 ***\nDESTIN_GRID995   1.882e+00  1.008e-01    18.668  &lt; 2e-16 ***\nlog(DU)          6.563e-02  5.081e-04   129.184  &lt; 2e-16 ***\nlog(HDB12R)      1.359e-02  8.074e-05   168.309  &lt; 2e-16 ***\nlog(HDB34R)      1.697e-02  3.831e-04    44.286  &lt; 2e-16 ***\nlog(HDB5RMore)   1.168e-01  2.001e-04   583.642  &lt; 2e-16 ***\nlog(HDBRent)    -2.555e-03  7.917e-05   -32.276  &lt; 2e-16 ***\nlog(dist)       -8.425e-01  1.439e-04 -5854.813  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 103154058  on 65520  degrees of freedom\nResidual deviance:  47586453  on 64698  degrees of freedom\nAIC: 47950147\n\nNumber of Fisher Scoring iterations: 8\n\n\nThe R-squared values are calculated to measure how much variation of the trips can be accounted for by the destination constrained SIM.\n\nBased on the outcome from the cor() function in the stats package, the R2 is 0.1934442. This means that about 20.3% of the variation in the number of trips can be accounted for by the destination constrained SIM.\nBased on the performance package, the R-squared values for generalised linear models are computed using the r2_kullback() and r2_mcfadden() functions. The results are 0.5328245 and 0.537 respectively, i.e., that about 54.9% or 63.6% of the variation in the number of trips can be accounted for by the destination constrained SIM.\nCompared to the unconstrained SIM and the origin constrained SIM, the destination constrained SIM has improved R-squared values, meaning that it is better fitted to the data.\n\n\nCalcRSquared(decSIM$data$TRIPS, decSIM$fitted.values)\n\n[1] 0.1934442\n\nr2_kullback(decSIM)\n\nKullback-Leibler R2 \n          0.5328245 \n\nr2_mcfadden(decSIM)\n\n# R2 for Generalized Linear Regression\n       R2: 0.537\n  adj. R2: 0.537\n\n\n\n\n7.6 Doubly Constrained Spatial Interaction Model\nA doubly constrained SIM, dbcSIM, is calibrated below by using the glm() function of the stats package. The explanatory variable is the distance between the origin and destination.\n\ndbcSIM = glm(formula = TRIPS ~ \n               ORIGIN_GRID +\n               DESTIN_GRID +\n               log(dist),\n              family = poisson(link = \"log\"),\n              data = SIM,\n              na.action = na.exclude)\n\nsummary(dbcSIM)\n\n\nCall:\nglm(formula = TRIPS ~ ORIGIN_GRID + DESTIN_GRID + log(dist), \n    family = poisson(link = \"log\"), data = SIM, na.action = na.exclude)\n\nCoefficients:\n                  Estimate Std. Error   z value Pr(&gt;|z|)    \n(Intercept)      7.1268075  0.1264968    56.340  &lt; 2e-16 ***\nORIGIN_GRID1001 -0.0739624  0.0993326    -0.745 0.456517    \nORIGIN_GRID1002 -1.4143950  0.1239268   -11.413  &lt; 2e-16 ***\nORIGIN_GRID1003  1.1604722  0.0819251    14.165  &lt; 2e-16 ***\nORIGIN_GRID1004  4.1672744  0.0768677    54.214  &lt; 2e-16 ***\nORIGIN_GRID1005  2.0914212  0.0775194    26.979  &lt; 2e-16 ***\nORIGIN_GRID101   1.8958610  0.0772977    24.527  &lt; 2e-16 ***\nORIGIN_GRID1010  1.8041262  0.0772847    23.344  &lt; 2e-16 ***\nORIGIN_GRID1011  0.0835760  0.0793978     1.053 0.292514    \nORIGIN_GRID1012  0.8987278  0.0789638    11.382  &lt; 2e-16 ***\nORIGIN_GRID1013  1.6808750  0.0774261    21.709  &lt; 2e-16 ***\nORIGIN_GRID1014  1.5785749  0.0779411    20.253  &lt; 2e-16 ***\nORIGIN_GRID102  -0.9729818  0.1027582    -9.469  &lt; 2e-16 ***\nORIGIN_GRID1023  3.7682715  0.0769766    48.953  &lt; 2e-16 ***\nORIGIN_GRID1024  3.5704101  0.0769280    46.412  &lt; 2e-16 ***\nORIGIN_GRID1025  1.5371234  0.0774951    19.835  &lt; 2e-16 ***\nORIGIN_GRID1028  0.5975241  0.0780760     7.653 1.96e-14 ***\nORIGIN_GRID1030 -0.2692635  0.0843923    -3.191 0.001420 ** \nORIGIN_GRID1031  2.5776308  0.0769881    33.481  &lt; 2e-16 ***\nORIGIN_GRID1033  2.2269484  0.0770793    28.892  &lt; 2e-16 ***\nORIGIN_GRID1040 -0.3296234  0.0927055    -3.556 0.000377 ***\nORIGIN_GRID1041  1.2953925  0.0789264    16.413  &lt; 2e-16 ***\nORIGIN_GRID1042  3.8676276  0.0769141    50.285  &lt; 2e-16 ***\nORIGIN_GRID1043  2.5283112  0.0770999    32.793  &lt; 2e-16 ***\nORIGIN_GRID1048  1.2042799  0.0776423    15.511  &lt; 2e-16 ***\nORIGIN_GRID1049  2.3596422  0.0770230    30.636  &lt; 2e-16 ***\nORIGIN_GRID1050  3.2389774  0.0769087    42.115  &lt; 2e-16 ***\nORIGIN_GRID1061  4.1219815  0.0769360    53.577  &lt; 2e-16 ***\nORIGIN_GRID1062  3.9150012  0.0769038    50.908  &lt; 2e-16 ***\nORIGIN_GRID1063  0.9533024  0.0778869    12.240  &lt; 2e-16 ***\nORIGIN_GRID1064 -2.5919441  0.2615984    -9.908  &lt; 2e-16 ***\nORIGIN_GRID1066  1.2108748  0.0773443    15.656  &lt; 2e-16 ***\nORIGIN_GRID1067  1.9438129  0.0771192    25.205  &lt; 2e-16 ***\nORIGIN_GRID1068  2.9430579  0.0769307    38.256  &lt; 2e-16 ***\nORIGIN_GRID1069  2.1048061  0.0770950    27.301  &lt; 2e-16 ***\nORIGIN_GRID1071  0.7238956  0.0778835     9.295  &lt; 2e-16 ***\nORIGIN_GRID1078  0.0237898  0.0903181     0.263 0.792242    \nORIGIN_GRID1080  3.0164508  0.0770554    39.147  &lt; 2e-16 ***\nORIGIN_GRID1081  2.8789159  0.0770150    37.381  &lt; 2e-16 ***\nORIGIN_GRID1082  0.9056345  0.0781081    11.595  &lt; 2e-16 ***\nORIGIN_GRID1086  2.2850282  0.0771194    29.630  &lt; 2e-16 ***\nORIGIN_GRID1087  2.0088569  0.0771438    26.040  &lt; 2e-16 ***\nORIGIN_GRID1089  2.5568634  0.0770305    33.193  &lt; 2e-16 ***\nORIGIN_GRID1090  2.1735308  0.0771045    28.189  &lt; 2e-16 ***\nORIGIN_GRID1097 -0.7642918  0.1295466    -5.900 3.64e-09 ***\nORIGIN_GRID1100  3.7972462  0.0769393    49.354  &lt; 2e-16 ***\nORIGIN_GRID1101  0.3048211  0.0866809     3.517 0.000437 ***\nORIGIN_GRID1102 -0.8691275  0.0868536   -10.007  &lt; 2e-16 ***\nORIGIN_GRID1104  3.0168471  0.0769321    39.214  &lt; 2e-16 ***\nORIGIN_GRID1105  2.6289510  0.0769603    34.160  &lt; 2e-16 ***\nORIGIN_GRID1106  2.4273493  0.0774434    31.344  &lt; 2e-16 ***\nORIGIN_GRID1107  0.6379706  0.0786228     8.114 4.88e-16 ***\nORIGIN_GRID1108  1.6440808  0.0773362    21.259  &lt; 2e-16 ***\nORIGIN_GRID1115 -1.9121407  0.1635568   -11.691  &lt; 2e-16 ***\nORIGIN_GRID1116 -0.5263150  0.1196283    -4.400 1.08e-05 ***\nORIGIN_GRID1119  1.2698610  0.0778818    16.305  &lt; 2e-16 ***\nORIGIN_GRID1120  1.0702028  0.0782404    13.678  &lt; 2e-16 ***\nORIGIN_GRID1123  1.2447635  0.0775121    16.059  &lt; 2e-16 ***\nORIGIN_GRID1124  2.2514892  0.0771180    29.195  &lt; 2e-16 ***\nORIGIN_GRID1125  2.6151130  0.0769785    33.972  &lt; 2e-16 ***\nORIGIN_GRID1128  1.4394467  0.0773557    18.608  &lt; 2e-16 ***\nORIGIN_GRID1138  2.5818182  0.0771769    33.453  &lt; 2e-16 ***\nORIGIN_GRID1139  3.4291344  0.0770265    44.519  &lt; 2e-16 ***\nORIGIN_GRID1140  0.9177940  0.0780299    11.762  &lt; 2e-16 ***\nORIGIN_GRID1142  2.0378315  0.0772611    26.376  &lt; 2e-16 ***\nORIGIN_GRID1143  2.2674812  0.0769840    29.454  &lt; 2e-16 ***\nORIGIN_GRID1144  1.3628866  0.0777354    17.532  &lt; 2e-16 ***\nORIGIN_GRID1145  0.8422145  0.0781700    10.774  &lt; 2e-16 ***\nORIGIN_GRID1146  1.9757365  0.0771916    25.595  &lt; 2e-16 ***\nORIGIN_GRID1147  0.0568698  0.0814548     0.698 0.485067    \nORIGIN_GRID1152 -2.1001437  0.1459234   -14.392  &lt; 2e-16 ***\nORIGIN_GRID1153  1.5353563  0.0777156    19.756  &lt; 2e-16 ***\nORIGIN_GRID1157  3.6189123  0.0769278    47.043  &lt; 2e-16 ***\nORIGIN_GRID1158  0.9810950  0.0779952    12.579  &lt; 2e-16 ***\nORIGIN_GRID116   2.5290800  0.0805996    31.378  &lt; 2e-16 ***\nORIGIN_GRID1161  3.0186104  0.0769204    39.243  &lt; 2e-16 ***\nORIGIN_GRID1162  2.7082136  0.0769743    35.183  &lt; 2e-16 ***\nORIGIN_GRID1163  3.4256636  0.0769009    44.546  &lt; 2e-16 ***\nORIGIN_GRID1164  1.6478542  0.0774644    21.272  &lt; 2e-16 ***\nORIGIN_GRID1167 -0.4613677  0.0896297    -5.147 2.64e-07 ***\nORIGIN_GRID117  -0.6768583  0.1930291    -3.507 0.000454 ***\nORIGIN_GRID1171 -1.1891118  0.1065028   -11.165  &lt; 2e-16 ***\nORIGIN_GRID1172  3.2205101  0.0770611    41.792  &lt; 2e-16 ***\nORIGIN_GRID1173  0.7510948  0.0795199     9.445  &lt; 2e-16 ***\nORIGIN_GRID1176  2.6542176  0.0771005    34.425  &lt; 2e-16 ***\nORIGIN_GRID1177  3.0180583  0.0770693    39.160  &lt; 2e-16 ***\nORIGIN_GRID118  -0.2400153  0.0939619    -2.554 0.010637 *  \nORIGIN_GRID1180  3.5148299  0.0769265    45.691  &lt; 2e-16 ***\nORIGIN_GRID1181  2.7361263  0.0769374    35.563  &lt; 2e-16 ***\nORIGIN_GRID1183 -0.3743075  0.0846830    -4.420 9.87e-06 ***\nORIGIN_GRID1184  2.1647570  0.0770734    28.087  &lt; 2e-16 ***\nORIGIN_GRID1186 -2.3551246  0.2040127   -11.544  &lt; 2e-16 ***\nORIGIN_GRID119   0.5183628  0.0829457     6.249 4.12e-10 ***\nORIGIN_GRID1192 -0.2403151  0.0843437    -2.849 0.004382 ** \nORIGIN_GRID1193  1.6338814  0.0776472    21.042  &lt; 2e-16 ***\nORIGIN_GRID1194  0.9329289  0.0783855    11.902  &lt; 2e-16 ***\nORIGIN_GRID1195  3.5866149  0.0769210    46.627  &lt; 2e-16 ***\nORIGIN_GRID1196  2.2145466  0.0773709    28.622  &lt; 2e-16 ***\nORIGIN_GRID1199  1.0494721  0.0777552    13.497  &lt; 2e-16 ***\nORIGIN_GRID120  -1.0018668  0.0934084   -10.726  &lt; 2e-16 ***\nORIGIN_GRID1200  2.9647197  0.0769350    38.535  &lt; 2e-16 ***\nORIGIN_GRID1201  2.7274593  0.0769595    35.440  &lt; 2e-16 ***\nORIGIN_GRID1202  1.3945926  0.0773825    18.022  &lt; 2e-16 ***\nORIGIN_GRID1203  1.5231951  0.0776610    19.613  &lt; 2e-16 ***\nORIGIN_GRID1204  2.0139273  0.0772684    26.064  &lt; 2e-16 ***\nORIGIN_GRID1205 -2.5760873  0.2693962    -9.562  &lt; 2e-16 ***\nORIGIN_GRID1207  1.4055016  0.0777662    18.073  &lt; 2e-16 ***\nORIGIN_GRID1208  1.6746403  0.0776258    21.573  &lt; 2e-16 ***\nORIGIN_GRID1209  0.6922383  0.0786363     8.803  &lt; 2e-16 ***\nORIGIN_GRID121  -0.5660246  0.0866336    -6.534 6.42e-11 ***\nORIGIN_GRID1210 -1.8761490  0.1387060   -13.526  &lt; 2e-16 ***\nORIGIN_GRID1211 -1.1416919  0.0923218   -12.366  &lt; 2e-16 ***\nORIGIN_GRID1212 -2.0752375  0.1231496   -16.851  &lt; 2e-16 ***\nORIGIN_GRID1213  3.5239752  0.0769226    45.812  &lt; 2e-16 ***\nORIGIN_GRID1214  1.9901018  0.0773235    25.737  &lt; 2e-16 ***\nORIGIN_GRID1215 -1.8241080  0.2181344    -8.362  &lt; 2e-16 ***\nORIGIN_GRID1218  2.4141880  0.0770849    31.319  &lt; 2e-16 ***\nORIGIN_GRID1219  3.5624299  0.0768995    46.326  &lt; 2e-16 ***\nORIGIN_GRID122   3.1439929  0.0816044    38.527  &lt; 2e-16 ***\nORIGIN_GRID1220  2.0012986  0.0770837    25.963  &lt; 2e-16 ***\nORIGIN_GRID1221  1.6622899  0.0772362    21.522  &lt; 2e-16 ***\nORIGIN_GRID1222  1.9566718  0.0775555    25.229  &lt; 2e-16 ***\nORIGIN_GRID1225  1.7957254  0.0772531    23.245  &lt; 2e-16 ***\nORIGIN_GRID1226  1.1628798  0.0778244    14.942  &lt; 2e-16 ***\nORIGIN_GRID1227  2.0497973  0.0772654    26.529  &lt; 2e-16 ***\nORIGIN_GRID1229  0.8736336  0.0789895    11.060  &lt; 2e-16 ***\nORIGIN_GRID1230  2.1274308  0.0771320    27.582  &lt; 2e-16 ***\nORIGIN_GRID1231  2.9802270  0.0770013    38.704  &lt; 2e-16 ***\nORIGIN_GRID1232  2.9600703  0.0770165    38.434  &lt; 2e-16 ***\nORIGIN_GRID1233  3.9981588  0.0769397    51.965  &lt; 2e-16 ***\nORIGIN_GRID1234 -0.1382706  0.0863363    -1.602 0.109259    \nORIGIN_GRID1238  1.5005127  0.0773043    19.410  &lt; 2e-16 ***\nORIGIN_GRID1239  1.3792052  0.0773449    17.832  &lt; 2e-16 ***\nORIGIN_GRID1240  2.2638577  0.0769865    29.406  &lt; 2e-16 ***\nORIGIN_GRID1241  1.6471966  0.0774529    21.267  &lt; 2e-16 ***\nORIGIN_GRID1242  0.8999040  0.0778705    11.556  &lt; 2e-16 ***\nORIGIN_GRID1243 -0.9957305  0.0898305   -11.085  &lt; 2e-16 ***\nORIGIN_GRID1244  1.1700659  0.0776864    15.061  &lt; 2e-16 ***\nORIGIN_GRID1245  2.5652937  0.0772015    33.229  &lt; 2e-16 ***\nORIGIN_GRID1246  2.2596828  0.0778290    29.034  &lt; 2e-16 ***\nORIGIN_GRID1249  0.2835565  0.0841377     3.370 0.000751 ***\nORIGIN_GRID1250  3.7530931  0.0768886    48.812  &lt; 2e-16 ***\nORIGIN_GRID1251  3.2341552  0.0769221    42.045  &lt; 2e-16 ***\nORIGIN_GRID1252  2.9665568  0.0770347    38.509  &lt; 2e-16 ***\nORIGIN_GRID1253  0.7669795  0.0805846     9.518  &lt; 2e-16 ***\nORIGIN_GRID1256  1.9012717  0.0771084    24.657  &lt; 2e-16 ***\nORIGIN_GRID1257  1.0658390  0.0775398    13.746  &lt; 2e-16 ***\nORIGIN_GRID1258  2.0618425  0.0771008    26.742  &lt; 2e-16 ***\nORIGIN_GRID1259  2.1170423  0.0771088    27.455  &lt; 2e-16 ***\nORIGIN_GRID1260  1.2065786  0.0786461    15.342  &lt; 2e-16 ***\nORIGIN_GRID1261  0.5921233  0.0781777     7.574 3.62e-14 ***\nORIGIN_GRID1262  1.7423791  0.0771785    22.576  &lt; 2e-16 ***\nORIGIN_GRID1263  1.9885427  0.0771556    25.773  &lt; 2e-16 ***\nORIGIN_GRID1264  2.8479426  0.0769872    36.992  &lt; 2e-16 ***\nORIGIN_GRID1265  3.1784361  0.0769989    41.279  &lt; 2e-16 ***\nORIGIN_GRID1266  1.8721278  0.0775693    24.135  &lt; 2e-16 ***\nORIGIN_GRID1268  3.3221638  0.0770900    43.095  &lt; 2e-16 ***\nORIGIN_GRID1269  3.1826423  0.0769266    41.372  &lt; 2e-16 ***\nORIGIN_GRID1270  3.4640990  0.0769516    45.017  &lt; 2e-16 ***\nORIGIN_GRID1272  3.1291538  0.0785735    39.825  &lt; 2e-16 ***\nORIGIN_GRID1276  1.5571956  0.0771739    20.178  &lt; 2e-16 ***\nORIGIN_GRID1277  1.7585007  0.0772166    22.774  &lt; 2e-16 ***\nORIGIN_GRID1278  1.7903488  0.0770760    23.228  &lt; 2e-16 ***\nORIGIN_GRID1279  2.6584067  0.0769788    34.534  &lt; 2e-16 ***\nORIGIN_GRID1280  1.9314267  0.0770795    25.058  &lt; 2e-16 ***\nORIGIN_GRID1281  1.4804764  0.0773431    19.142  &lt; 2e-16 ***\nORIGIN_GRID1282  2.1400991  0.0771134    27.753  &lt; 2e-16 ***\nORIGIN_GRID1283  2.1461157  0.0770882    27.840  &lt; 2e-16 ***\nORIGIN_GRID1284  3.0287264  0.0769664    39.351  &lt; 2e-16 ***\nORIGIN_GRID1285  2.4377752  0.0770907    31.622  &lt; 2e-16 ***\nORIGIN_GRID1288  3.6796065  0.0769937    47.791  &lt; 2e-16 ***\nORIGIN_GRID1289  4.6227667  0.0769138    60.103  &lt; 2e-16 ***\nORIGIN_GRID1294  2.2245134  0.0770387    28.875  &lt; 2e-16 ***\nORIGIN_GRID1295  2.3364609  0.0769727    30.354  &lt; 2e-16 ***\nORIGIN_GRID1296  2.4408018  0.0769742    31.709  &lt; 2e-16 ***\nORIGIN_GRID1297  1.0007201  0.0784172    12.761  &lt; 2e-16 ***\nORIGIN_GRID1298  2.4074041  0.0770054    31.263  &lt; 2e-16 ***\nORIGIN_GRID1299  2.9139883  0.0769304    37.878  &lt; 2e-16 ***\nORIGIN_GRID1300  0.0070981  0.0801737     0.089 0.929452    \nORIGIN_GRID1301  3.0396890  0.0769490    39.503  &lt; 2e-16 ***\nORIGIN_GRID1302  3.3712004  0.0768982    43.840  &lt; 2e-16 ***\nORIGIN_GRID1303  3.8459880  0.0768828    50.024  &lt; 2e-16 ***\nORIGIN_GRID1304  0.2438779  0.0793170     3.075 0.002107 ** \nORIGIN_GRID1306  3.2457829  0.0771122    42.092  &lt; 2e-16 ***\nORIGIN_GRID1307  4.3959667  0.0769219    57.148  &lt; 2e-16 ***\nORIGIN_GRID1308  2.9524521  0.0772274    38.231  &lt; 2e-16 ***\nORIGIN_GRID1314  1.4675336  0.0771893    19.012  &lt; 2e-16 ***\nORIGIN_GRID1315  1.7648130  0.0770966    22.891  &lt; 2e-16 ***\nORIGIN_GRID1316  1.2199699  0.0780026    15.640  &lt; 2e-16 ***\nORIGIN_GRID1317  1.9326037  0.0772530    25.017  &lt; 2e-16 ***\nORIGIN_GRID1318  2.5007051  0.0770408    32.460  &lt; 2e-16 ***\nORIGIN_GRID1319  3.0644414  0.0769283    39.835  &lt; 2e-16 ***\nORIGIN_GRID1320  3.0012630  0.0769108    39.023  &lt; 2e-16 ***\nORIGIN_GRID1321  2.9602383  0.0769597    38.465  &lt; 2e-16 ***\nORIGIN_GRID1322  2.2005028  0.0770500    28.559  &lt; 2e-16 ***\nORIGIN_GRID1323  1.4002662  0.0777294    18.015  &lt; 2e-16 ***\nORIGIN_GRID1326  4.5578197  0.0769102    59.262  &lt; 2e-16 ***\nORIGIN_GRID1327  4.2388816  0.0769737    55.069  &lt; 2e-16 ***\nORIGIN_GRID1332  0.1980141  0.0792101     2.500 0.012424 *  \nORIGIN_GRID1333  1.0773852  0.0774082    13.918  &lt; 2e-16 ***\nORIGIN_GRID1334  2.0974024  0.0769947    27.241  &lt; 2e-16 ***\nORIGIN_GRID1335  2.9268110  0.0769302    38.045  &lt; 2e-16 ***\nORIGIN_GRID1336  2.4230187  0.0770638    31.442  &lt; 2e-16 ***\nORIGIN_GRID1337  3.5197068  0.0768744    45.785  &lt; 2e-16 ***\nORIGIN_GRID1338  2.1105457  0.0770761    27.383  &lt; 2e-16 ***\nORIGIN_GRID1339  2.3318264  0.0770272    30.273  &lt; 2e-16 ***\nORIGIN_GRID1340  3.6738616  0.0768752    47.790  &lt; 2e-16 ***\nORIGIN_GRID1341  1.4925501  0.0774319    19.276  &lt; 2e-16 ***\nORIGIN_GRID1342  1.0636560  0.0778875    13.656  &lt; 2e-16 ***\nORIGIN_GRID1345  4.0659292  0.0769779    52.819  &lt; 2e-16 ***\nORIGIN_GRID1352  1.2325428  0.0777161    15.860  &lt; 2e-16 ***\nORIGIN_GRID1353  1.8512769  0.0771119    24.008  &lt; 2e-16 ***\nORIGIN_GRID1354  2.4709227  0.0769485    32.111  &lt; 2e-16 ***\nORIGIN_GRID1355  2.9176933  0.0769751    37.904  &lt; 2e-16 ***\nORIGIN_GRID1356  3.2088030  0.0769291    41.711  &lt; 2e-16 ***\nORIGIN_GRID1357  3.2622974  0.0769048    42.420  &lt; 2e-16 ***\nORIGIN_GRID1358  3.3754985  0.0770094    43.832  &lt; 2e-16 ***\nORIGIN_GRID1359  3.2555768  0.0769109    42.329  &lt; 2e-16 ***\nORIGIN_GRID136   2.3050708  0.0806751    28.572  &lt; 2e-16 ***\nORIGIN_GRID1360  2.8281256  0.0769606    36.748  &lt; 2e-16 ***\nORIGIN_GRID1364 -1.1817380  0.1187600    -9.951  &lt; 2e-16 ***\nORIGIN_GRID137  -0.2057518  0.1014454    -2.028 0.042539 *  \nORIGIN_GRID1371  0.3738231  0.0794513     4.705 2.54e-06 ***\nORIGIN_GRID1372  1.8755484  0.0770809    24.332  &lt; 2e-16 ***\nORIGIN_GRID1373  2.2724540  0.0770993    29.474  &lt; 2e-16 ***\nORIGIN_GRID1374  2.2312488  0.0771432    28.923  &lt; 2e-16 ***\nORIGIN_GRID1375  3.6807164  0.0769748    47.817  &lt; 2e-16 ***\nORIGIN_GRID1376  2.6729301  0.0769716    34.726  &lt; 2e-16 ***\nORIGIN_GRID1377  1.1650034  0.0775525    15.022  &lt; 2e-16 ***\nORIGIN_GRID1378  3.5458691  0.0769002    46.110  &lt; 2e-16 ***\nORIGIN_GRID1379  1.8016337  0.0781510    23.053  &lt; 2e-16 ***\nORIGIN_GRID138  -0.7999754  0.1127671    -7.094 1.30e-12 ***\nORIGIN_GRID1380  2.0634461  0.0773658    26.671  &lt; 2e-16 ***\nORIGIN_GRID1383  1.8299915  0.0784537    23.326  &lt; 2e-16 ***\nORIGIN_GRID1389 -0.1821073  0.1159476    -1.571 0.116276    \nORIGIN_GRID139  -0.7268083  0.0878801    -8.270  &lt; 2e-16 ***\nORIGIN_GRID1390 -0.0876435  0.0825190    -1.062 0.288190    \nORIGIN_GRID1391  0.4691699  0.0785377     5.974 2.32e-09 ***\nORIGIN_GRID1392  1.9223059  0.0770547    24.947  &lt; 2e-16 ***\nORIGIN_GRID1393  2.4523974  0.0769768    31.859  &lt; 2e-16 ***\nORIGIN_GRID1394  3.0367040  0.0769378    39.470  &lt; 2e-16 ***\nORIGIN_GRID1395  4.3677486  0.0770150    56.713  &lt; 2e-16 ***\nORIGIN_GRID1396  1.1377219  0.0780741    14.572  &lt; 2e-16 ***\nORIGIN_GRID1397  1.8829938  0.0800717    23.516  &lt; 2e-16 ***\nORIGIN_GRID1398  2.8975512  0.0770840    37.590  &lt; 2e-16 ***\nORIGIN_GRID140   2.9662567  0.0773000    38.373  &lt; 2e-16 ***\nORIGIN_GRID1401 -0.4618649  0.0963595    -4.793 1.64e-06 ***\nORIGIN_GRID1408 -0.0347076  0.1008502    -0.344 0.730733    \nORIGIN_GRID1409 -0.1820627  0.0833456    -2.184 0.028931 *  \nORIGIN_GRID141  -0.4530890  0.0844457    -5.365 8.07e-08 ***\nORIGIN_GRID1410  1.3029957  0.0787196    16.552  &lt; 2e-16 ***\nORIGIN_GRID1411  2.4424218  0.0769551    31.738  &lt; 2e-16 ***\nORIGIN_GRID1412  3.3410066  0.0769004    43.446  &lt; 2e-16 ***\nORIGIN_GRID1413  3.0951492  0.0769501    40.223  &lt; 2e-16 ***\nORIGIN_GRID1414  0.2836930  0.0791551     3.584 0.000338 ***\nORIGIN_GRID1415  1.9262249  0.0771320    24.973  &lt; 2e-16 ***\nORIGIN_GRID1416  1.1280290  0.0778448    14.491  &lt; 2e-16 ***\nORIGIN_GRID1417  1.0502292  0.0779363    13.475  &lt; 2e-16 ***\nORIGIN_GRID1418  0.7594129  0.0790148     9.611  &lt; 2e-16 ***\nORIGIN_GRID1419 -1.1092451  0.1163660    -9.532  &lt; 2e-16 ***\nORIGIN_GRID142   0.9874702  0.0881630    11.201  &lt; 2e-16 ***\nORIGIN_GRID1420 -0.5309615  0.0974322    -5.450 5.05e-08 ***\nORIGIN_GRID1428 -1.9898415  0.2622855    -7.587 3.29e-14 ***\nORIGIN_GRID1430  1.5070638  0.0782911    19.249  &lt; 2e-16 ***\nORIGIN_GRID1431 -0.0701401  0.0790592    -0.887 0.374979    \nORIGIN_GRID1432  2.9927566  0.0769100    38.912  &lt; 2e-16 ***\nORIGIN_GRID1433  1.7468808  0.0793649    22.011  &lt; 2e-16 ***\nORIGIN_GRID1434  1.7804430  0.0774123    22.999  &lt; 2e-16 ***\nORIGIN_GRID1435  2.3503805  0.0772905    30.410  &lt; 2e-16 ***\nORIGIN_GRID1436  0.9443956  0.0778860    12.125  &lt; 2e-16 ***\nORIGIN_GRID1439 -0.0748854  0.0851621    -0.879 0.379223    \nORIGIN_GRID1440 -0.7169281  0.1002799    -7.149 8.72e-13 ***\nORIGIN_GRID1448  2.9553587  0.0774570    38.155  &lt; 2e-16 ***\nORIGIN_GRID1449  1.6461941  0.0771401    21.340  &lt; 2e-16 ***\nORIGIN_GRID1450  2.5043081  0.0770407    32.506  &lt; 2e-16 ***\nORIGIN_GRID1451  3.1888454  0.0769150    41.459  &lt; 2e-16 ***\nORIGIN_GRID1452  1.8160985  0.0771776    23.531  &lt; 2e-16 ***\nORIGIN_GRID1453  3.0198931  0.0769298    39.255  &lt; 2e-16 ***\nORIGIN_GRID1454  2.9519134  0.0773777    38.149  &lt; 2e-16 ***\nORIGIN_GRID1455  1.6004395  0.0773625    20.688  &lt; 2e-16 ***\nORIGIN_GRID1456  3.5173463  0.0769411    45.715  &lt; 2e-16 ***\nORIGIN_GRID1457  3.0777160  0.0770066    39.967  &lt; 2e-16 ***\nORIGIN_GRID1458  0.0449038  0.0974275     0.461 0.644874    \nORIGIN_GRID1468  2.7389063  0.0793045    34.537  &lt; 2e-16 ***\nORIGIN_GRID1469  2.8722173  0.0769190    37.341  &lt; 2e-16 ***\nORIGIN_GRID1470  1.5870483  0.0772008    20.557  &lt; 2e-16 ***\nORIGIN_GRID1471  3.2075488  0.0769358    41.691  &lt; 2e-16 ***\nORIGIN_GRID1472  3.2618713  0.0768906    42.422  &lt; 2e-16 ***\nORIGIN_GRID1473  2.0884810  0.0771231    27.080  &lt; 2e-16 ***\nORIGIN_GRID1474  3.5769130  0.0768955    46.517  &lt; 2e-16 ***\nORIGIN_GRID1475  2.7409916  0.0770967    35.553  &lt; 2e-16 ***\nORIGIN_GRID1476  2.8393752  0.0771748    36.791  &lt; 2e-16 ***\nORIGIN_GRID1477 -0.5778545  0.0935709    -6.176 6.59e-10 ***\nORIGIN_GRID1486  0.9411583  0.0811413    11.599  &lt; 2e-16 ***\nORIGIN_GRID1487  2.8210286  0.0769378    36.666  &lt; 2e-16 ***\nORIGIN_GRID1488  0.9295485  0.0783824    11.859  &lt; 2e-16 ***\nORIGIN_GRID1489  2.2279475  0.0770412    28.919  &lt; 2e-16 ***\nORIGIN_GRID1490  2.1196295  0.0772677    27.432  &lt; 2e-16 ***\nORIGIN_GRID1491  2.3427276  0.0770188    30.418  &lt; 2e-16 ***\nORIGIN_GRID1492  2.7901003  0.0769615    36.253  &lt; 2e-16 ***\nORIGIN_GRID1493  3.5226344  0.0769057    45.805  &lt; 2e-16 ***\nORIGIN_GRID1494  3.5983999  0.0769888    46.739  &lt; 2e-16 ***\nORIGIN_GRID1506 -1.6554890  0.1494630   -11.076  &lt; 2e-16 ***\nORIGIN_GRID1507  3.0223935  0.0769148    39.295  &lt; 2e-16 ***\nORIGIN_GRID1508  1.8584338  0.0770922    24.107  &lt; 2e-16 ***\nORIGIN_GRID1509  3.1751021  0.0774118    41.016  &lt; 2e-16 ***\nORIGIN_GRID1510  2.9804927  0.0769509    38.732  &lt; 2e-16 ***\nORIGIN_GRID1512  3.6105059  0.0768952    46.954  &lt; 2e-16 ***\nORIGIN_GRID1513  4.3712689  0.0769978    56.771  &lt; 2e-16 ***\nORIGIN_GRID1514  3.9117293  0.0770307    50.781  &lt; 2e-16 ***\nORIGIN_GRID1524  1.7697049  0.0777827    22.752  &lt; 2e-16 ***\nORIGIN_GRID1525  2.6910597  0.0769889    34.954  &lt; 2e-16 ***\nORIGIN_GRID1526  2.6904998  0.0769861    34.948  &lt; 2e-16 ***\nORIGIN_GRID1527  2.1861647  0.0771583    28.334  &lt; 2e-16 ***\nORIGIN_GRID1528  1.6068449  0.0772541    20.799  &lt; 2e-16 ***\nORIGIN_GRID1529  1.2942683  0.0777247    16.652  &lt; 2e-16 ***\nORIGIN_GRID1530  2.7571011  0.0770819    35.768  &lt; 2e-16 ***\nORIGIN_GRID1531  3.2771675  0.0769385    42.595  &lt; 2e-16 ***\nORIGIN_GRID1532  2.8486868  0.0772155    36.893  &lt; 2e-16 ***\nORIGIN_GRID1544  2.5813599  0.0770487    33.503  &lt; 2e-16 ***\nORIGIN_GRID1545  2.5445984  0.0769736    33.058  &lt; 2e-16 ***\nORIGIN_GRID1546  3.2610179  0.0769109    42.400  &lt; 2e-16 ***\nORIGIN_GRID1547  2.1091788  0.0770651    27.369  &lt; 2e-16 ***\nORIGIN_GRID1548  3.1977567  0.0769304    41.567  &lt; 2e-16 ***\nORIGIN_GRID1549  2.9361979  0.0769605    38.152  &lt; 2e-16 ***\nORIGIN_GRID1550  3.6278856  0.0768936    47.181  &lt; 2e-16 ***\nORIGIN_GRID1551  1.3560015  0.0778010    17.429  &lt; 2e-16 ***\nORIGIN_GRID1552  3.8198195  0.0769596    49.634  &lt; 2e-16 ***\nORIGIN_GRID156   0.8198883  0.1000457     8.195 2.50e-16 ***\nORIGIN_GRID1563  2.7787033  0.0769867    36.093  &lt; 2e-16 ***\nORIGIN_GRID1564  2.7030267  0.0769576    35.124  &lt; 2e-16 ***\nORIGIN_GRID1565  2.2346893  0.0770044    29.020  &lt; 2e-16 ***\nORIGIN_GRID1566  0.0736328  0.0796999     0.924 0.355551    \nORIGIN_GRID1567  2.8206136  0.0769720    36.645  &lt; 2e-16 ***\nORIGIN_GRID1568  3.3538973  0.0769071    43.610  &lt; 2e-16 ***\nORIGIN_GRID1569  3.1403628  0.0769439    40.814  &lt; 2e-16 ***\nORIGIN_GRID1570  3.3934171  0.0769360    44.107  &lt; 2e-16 ***\nORIGIN_GRID1571  5.2326867  0.0771012    67.868  &lt; 2e-16 ***\nORIGIN_GRID158   0.1666275  0.0902255     1.847 0.064778 .  \nORIGIN_GRID1582  1.5271719  0.0773705    19.738  &lt; 2e-16 ***\nORIGIN_GRID1583  2.5792248  0.0769469    33.520  &lt; 2e-16 ***\nORIGIN_GRID1584  1.7618548  0.0771106    22.848  &lt; 2e-16 ***\nORIGIN_GRID1585  1.0863065  0.0775715    14.004  &lt; 2e-16 ***\nORIGIN_GRID1587  3.3089790  0.0769154    43.021  &lt; 2e-16 ***\nORIGIN_GRID1588  3.3861006  0.0768910    44.038  &lt; 2e-16 ***\nORIGIN_GRID1589  3.2489682  0.0769239    42.236  &lt; 2e-16 ***\nORIGIN_GRID159   2.2019832  0.0774308    28.438  &lt; 2e-16 ***\nORIGIN_GRID1590  3.2142743  0.0769979    41.745  &lt; 2e-16 ***\nORIGIN_GRID1591  1.7182283  0.0827431    20.766  &lt; 2e-16 ***\nORIGIN_GRID160   3.2615222  0.0769165    42.403  &lt; 2e-16 ***\nORIGIN_GRID1601  2.3835728  0.0770360    30.941  &lt; 2e-16 ***\nORIGIN_GRID1602  2.4415654  0.0772324    31.613  &lt; 2e-16 ***\nORIGIN_GRID1603  1.2894696  0.0774279    16.654  &lt; 2e-16 ***\nORIGIN_GRID1604 -0.3226033  0.0803046    -4.017 5.89e-05 ***\nORIGIN_GRID1606  3.0881148  0.0769349    40.139  &lt; 2e-16 ***\nORIGIN_GRID1607  2.8362048  0.0770049    36.831  &lt; 2e-16 ***\nORIGIN_GRID1608  3.5823897  0.0768940    46.589  &lt; 2e-16 ***\nORIGIN_GRID1609  3.8245446  0.0769200    49.721  &lt; 2e-16 ***\nORIGIN_GRID1610  4.1116671  0.0776412    52.957  &lt; 2e-16 ***\nORIGIN_GRID1620  2.7969492  0.0769696    36.338  &lt; 2e-16 ***\nORIGIN_GRID1621  2.3032525  0.0770636    29.888  &lt; 2e-16 ***\nORIGIN_GRID1622  2.6518466  0.0770942    34.397  &lt; 2e-16 ***\nORIGIN_GRID1623  0.7401765  0.0779198     9.499  &lt; 2e-16 ***\nORIGIN_GRID1624 -0.5811343  0.0814026    -7.139 9.40e-13 ***\nORIGIN_GRID1625 -0.2739605  0.0832162    -3.292 0.000994 ***\nORIGIN_GRID1626  3.5223669  0.0769372    45.782  &lt; 2e-16 ***\nORIGIN_GRID1627  3.5110483  0.0769186    45.646  &lt; 2e-16 ***\nORIGIN_GRID1628  3.5743051  0.0769204    46.468  &lt; 2e-16 ***\nORIGIN_GRID1629  2.7128123  0.0771769    35.151  &lt; 2e-16 ***\nORIGIN_GRID1630  2.7185048  0.0805900    33.733  &lt; 2e-16 ***\nORIGIN_GRID1639  2.3217737  0.0771412    30.098  &lt; 2e-16 ***\nORIGIN_GRID1640  3.0974770  0.0769012    40.279  &lt; 2e-16 ***\nORIGIN_GRID1641  2.9311120  0.0769150    38.108  &lt; 2e-16 ***\nORIGIN_GRID1645  3.5335754  0.0769965    45.893  &lt; 2e-16 ***\nORIGIN_GRID1646  3.5137492  0.0769453    45.666  &lt; 2e-16 ***\nORIGIN_GRID1647  3.6152658  0.0769014    47.012  &lt; 2e-16 ***\nORIGIN_GRID1648  1.7044723  0.0838988    20.316  &lt; 2e-16 ***\nORIGIN_GRID1658  2.5710458  0.0769918    33.394  &lt; 2e-16 ***\nORIGIN_GRID1659  2.3749253  0.0770328    30.830  &lt; 2e-16 ***\nORIGIN_GRID1660  2.7106800  0.0769524    35.225  &lt; 2e-16 ***\nORIGIN_GRID1661  2.0292986  0.0771602    26.300  &lt; 2e-16 ***\nORIGIN_GRID1663 -0.6006174  0.0978447    -6.138 8.33e-10 ***\nORIGIN_GRID1665  2.8094868  0.0771434    36.419  &lt; 2e-16 ***\nORIGIN_GRID1666  4.2705411  0.0768759    55.551  &lt; 2e-16 ***\nORIGIN_GRID1667  1.1886525  0.0844813    14.070  &lt; 2e-16 ***\nORIGIN_GRID1668  4.1286387  0.0777887    53.075  &lt; 2e-16 ***\nORIGIN_GRID1677  2.6213736  0.0769721    34.056  &lt; 2e-16 ***\nORIGIN_GRID1678  2.9458889  0.0769487    38.284  &lt; 2e-16 ***\nORIGIN_GRID1679  3.1554084  0.0769322    41.015  &lt; 2e-16 ***\nORIGIN_GRID1682  0.2972963  0.0808757     3.676 0.000237 ***\nORIGIN_GRID1684  4.4812900  0.0772654    57.999  &lt; 2e-16 ***\nORIGIN_GRID1685  3.6333830  0.0769547    47.215  &lt; 2e-16 ***\nORIGIN_GRID1696  2.9992858  0.0770433    38.930  &lt; 2e-16 ***\nORIGIN_GRID1697  1.5877744  0.0778228    20.402  &lt; 2e-16 ***\nORIGIN_GRID1698  3.9099324  0.0775724    50.404  &lt; 2e-16 ***\nORIGIN_GRID1699  2.8317617  0.0769608    36.795  &lt; 2e-16 ***\nORIGIN_GRID1702 -0.6358851  0.0898318    -7.079 1.46e-12 ***\nORIGIN_GRID1704  3.3972219  0.0769706    44.137  &lt; 2e-16 ***\nORIGIN_GRID1705  4.2028777  0.0773486    54.337  &lt; 2e-16 ***\nORIGIN_GRID1715  2.7800210  0.0769621    36.122  &lt; 2e-16 ***\nORIGIN_GRID1716  1.4051319  0.0773719    18.161  &lt; 2e-16 ***\nORIGIN_GRID1717  2.4417362  0.0772922    31.591  &lt; 2e-16 ***\nORIGIN_GRID1718 -1.9000885  0.1451165   -13.094  &lt; 2e-16 ***\nORIGIN_GRID1721 -1.0274651  0.1027472   -10.000  &lt; 2e-16 ***\nORIGIN_GRID1723  3.2807803  0.0772935    42.446  &lt; 2e-16 ***\nORIGIN_GRID1735  1.7381945  0.0773133    22.482  &lt; 2e-16 ***\nORIGIN_GRID1736  3.2868787  0.0770457    42.661  &lt; 2e-16 ***\nORIGIN_GRID1737  2.7262435  0.0769877    35.411  &lt; 2e-16 ***\nORIGIN_GRID1740  0.2930495  0.0816584     3.589 0.000332 ***\nORIGIN_GRID1742  3.0932054  0.0773496    39.990  &lt; 2e-16 ***\nORIGIN_GRID1753  2.2435912  0.0771041    29.098  &lt; 2e-16 ***\nORIGIN_GRID1754  2.9680384  0.0769431    38.574  &lt; 2e-16 ***\nORIGIN_GRID1755  3.9128720  0.0769289    50.864  &lt; 2e-16 ***\nORIGIN_GRID1758 -0.2357339  0.0868312    -2.715 0.006631 ** \nORIGIN_GRID177  -0.8371110  0.1097601    -7.627 2.41e-14 ***\nORIGIN_GRID1773  1.9462819  0.0772630    25.190  &lt; 2e-16 ***\nORIGIN_GRID1774  3.6179025  0.0768746    47.062  &lt; 2e-16 ***\nORIGIN_GRID1775  2.4248625  0.0771110    31.446  &lt; 2e-16 ***\nORIGIN_GRID1776  3.3177867  0.0769385    43.123  &lt; 2e-16 ***\nORIGIN_GRID1778 -0.8144690  0.1127654    -7.223 5.10e-13 ***\nORIGIN_GRID178  -0.6355508  0.0859302    -7.396 1.40e-13 ***\nORIGIN_GRID179  -1.1198546  0.1458884    -7.676 1.64e-14 ***\nORIGIN_GRID1791  2.0428276  0.0772022    26.461  &lt; 2e-16 ***\nORIGIN_GRID1792  0.8727459  0.0779276    11.199  &lt; 2e-16 ***\nORIGIN_GRID1793  3.2725696  0.0769412    42.533  &lt; 2e-16 ***\nORIGIN_GRID1794  1.9432961  0.0775584    25.056  &lt; 2e-16 ***\nORIGIN_GRID1795  3.3782098  0.0769445    43.904  &lt; 2e-16 ***\nORIGIN_GRID1796  1.9897068  0.0771850    25.778  &lt; 2e-16 ***\nORIGIN_GRID1797  2.7479946  0.0770621    35.659  &lt; 2e-16 ***\nORIGIN_GRID1811  2.4686422  0.0770268    32.049  &lt; 2e-16 ***\nORIGIN_GRID1812  3.1906344  0.0769127    41.484  &lt; 2e-16 ***\nORIGIN_GRID1813  2.7087122  0.0769781    35.188  &lt; 2e-16 ***\nORIGIN_GRID1814  3.5179290  0.0769349    45.726  &lt; 2e-16 ***\nORIGIN_GRID1815  3.3087974  0.0769320    43.009  &lt; 2e-16 ***\nORIGIN_GRID1816  1.9676263  0.0773486    25.438  &lt; 2e-16 ***\nORIGIN_GRID1817  1.2858582  0.0784389    16.393  &lt; 2e-16 ***\nORIGIN_GRID1830  2.9562286  0.0770410    38.372  &lt; 2e-16 ***\nORIGIN_GRID1831  3.4523922  0.0769077    44.890  &lt; 2e-16 ***\nORIGIN_GRID1832  2.6929342  0.0769602    34.991  &lt; 2e-16 ***\nORIGIN_GRID1833  3.0377048  0.0769569    39.473  &lt; 2e-16 ***\nORIGIN_GRID1834  1.8039509  0.0776515    23.231  &lt; 2e-16 ***\nORIGIN_GRID1835  3.4689224  0.0769229    45.096  &lt; 2e-16 ***\nORIGIN_GRID1849  2.1779673  0.0771780    28.220  &lt; 2e-16 ***\nORIGIN_GRID1850  3.0718795  0.0769344    39.929  &lt; 2e-16 ***\nORIGIN_GRID1851 -0.8382789  0.1002842    -8.359  &lt; 2e-16 ***\nORIGIN_GRID1852  3.0529659  0.0769160    39.692  &lt; 2e-16 ***\nORIGIN_GRID1853  3.1203061  0.0769952    40.526  &lt; 2e-16 ***\nORIGIN_GRID1854  3.2437925  0.0769556    42.151  &lt; 2e-16 ***\nORIGIN_GRID1855  2.7624495  0.0779037    35.460  &lt; 2e-16 ***\nORIGIN_GRID1868  3.1442057  0.0769646    40.853  &lt; 2e-16 ***\nORIGIN_GRID1869  1.7031067  0.0772600    22.044  &lt; 2e-16 ***\nORIGIN_GRID1870  1.5520664  0.0801505    19.364  &lt; 2e-16 ***\nORIGIN_GRID1871  3.6794259  0.0768721    47.864  &lt; 2e-16 ***\nORIGIN_GRID1872  3.0500601  0.0771257    39.547  &lt; 2e-16 ***\nORIGIN_GRID1873  3.1341070  0.0770063    40.699  &lt; 2e-16 ***\nORIGIN_GRID1887  1.6385035  0.0773639    21.179  &lt; 2e-16 ***\nORIGIN_GRID1888  3.1344151  0.0769275    40.745  &lt; 2e-16 ***\nORIGIN_GRID1889  1.9934215  0.0771114    25.851  &lt; 2e-16 ***\nORIGIN_GRID1890  2.8883128  0.0769537    37.533  &lt; 2e-16 ***\nORIGIN_GRID1891  2.7939005  0.0770809    36.246  &lt; 2e-16 ***\nORIGIN_GRID1892  3.3093006  0.0768987    43.035  &lt; 2e-16 ***\nORIGIN_GRID1893 -0.0502909  0.0994759    -0.506 0.613167    \nORIGIN_GRID1905 -0.2616018  0.1249659    -2.093 0.036315 *  \nORIGIN_GRID1906  0.2885891  0.0790029     3.653 0.000259 ***\nORIGIN_GRID1907  1.2885151  0.0772971    16.670  &lt; 2e-16 ***\nORIGIN_GRID1908  2.6491365  0.0770091    34.400  &lt; 2e-16 ***\nORIGIN_GRID1909  3.0954136  0.0769404    40.231  &lt; 2e-16 ***\nORIGIN_GRID1910  2.4521049  0.0771470    31.785  &lt; 2e-16 ***\nORIGIN_GRID1911  0.5959989  0.0859175     6.937 4.01e-12 ***\nORIGIN_GRID1926  1.1728653  0.0779970    15.037  &lt; 2e-16 ***\nORIGIN_GRID1927  0.7102037  0.0782075     9.081  &lt; 2e-16 ***\nORIGIN_GRID1928  3.2408919  0.0769173    42.135  &lt; 2e-16 ***\nORIGIN_GRID1929  3.6648493  0.0769530    47.625  &lt; 2e-16 ***\nORIGIN_GRID1930  2.5732438  0.0770439    33.400  &lt; 2e-16 ***\nORIGIN_GRID1944  1.8722089  0.0776099    24.123  &lt; 2e-16 ***\nORIGIN_GRID1945  0.6973968  0.0783802     8.898  &lt; 2e-16 ***\nORIGIN_GRID1946  3.2170961  0.0769529    41.806  &lt; 2e-16 ***\nORIGIN_GRID1947  3.3639440  0.0768975    43.746  &lt; 2e-16 ***\nORIGIN_GRID1948  3.6425582  0.0769114    47.360  &lt; 2e-16 ***\nORIGIN_GRID1949  3.0448922  0.0770149    39.536  &lt; 2e-16 ***\nORIGIN_GRID195   0.9916526  0.1157832     8.565  &lt; 2e-16 ***\nORIGIN_GRID196   3.7724568  0.0769575    49.020  &lt; 2e-16 ***\nORIGIN_GRID1965  2.1016274  0.0771233    27.250  &lt; 2e-16 ***\nORIGIN_GRID1966  2.4148710  0.0771961    31.282  &lt; 2e-16 ***\nORIGIN_GRID1967  2.7340927  0.0769831    35.515  &lt; 2e-16 ***\nORIGIN_GRID1968  2.9855992  0.0770004    38.774  &lt; 2e-16 ***\nORIGIN_GRID197   0.4926992  0.0796461     6.186 6.17e-10 ***\nORIGIN_GRID1983  1.9778989  0.0772523    25.603  &lt; 2e-16 ***\nORIGIN_GRID1984  1.4630005  0.0775536    18.864  &lt; 2e-16 ***\nORIGIN_GRID1985  2.4619874  0.0770539    31.952  &lt; 2e-16 ***\nORIGIN_GRID1986  2.7516857  0.0769825    35.744  &lt; 2e-16 ***\nORIGIN_GRID1987  2.5946054  0.0794084    32.674  &lt; 2e-16 ***\nORIGIN_GRID2002 -0.7925474  0.1127773    -7.028 2.10e-12 ***\nORIGIN_GRID2003 -0.6512697  0.0849365    -7.668 1.75e-14 ***\nORIGIN_GRID2004 -0.5112762  0.0809828    -6.313 2.73e-10 ***\nORIGIN_GRID2005  2.5452459  0.0771037    33.011  &lt; 2e-16 ***\nORIGIN_GRID2006  1.4080290  0.0775677    18.152  &lt; 2e-16 ***\nORIGIN_GRID2021 -1.1071919  0.0886727   -12.486  &lt; 2e-16 ***\nORIGIN_GRID2022  0.0954128  0.0794530     1.201 0.229801    \nORIGIN_GRID2023  1.2790375  0.0778522    16.429  &lt; 2e-16 ***\nORIGIN_GRID2024  1.3299771  0.0778452    17.085  &lt; 2e-16 ***\nORIGIN_GRID2025 -0.2451653  0.0950514    -2.579 0.009900 ** \nORIGIN_GRID2042 -0.5296956  0.0875606    -6.049 1.45e-09 ***\nORIGIN_GRID2043  1.1918795  0.0791186    15.064  &lt; 2e-16 ***\nORIGIN_GRID2044  0.7209023  0.0781914     9.220  &lt; 2e-16 ***\nORIGIN_GRID2045  0.7316597  0.0837214     8.739  &lt; 2e-16 ***\nORIGIN_GRID2061  1.0830155  0.0851420    12.720  &lt; 2e-16 ***\nORIGIN_GRID2062  1.4811469  0.0783524    18.904  &lt; 2e-16 ***\nORIGIN_GRID2063  0.2531796  0.0792989     3.193 0.001409 ** \nORIGIN_GRID2064 -1.4397913  0.1276841   -11.276  &lt; 2e-16 ***\nORIGIN_GRID2079  2.3330617  0.0773179    30.175  &lt; 2e-16 ***\nORIGIN_GRID2082 -0.9643974  0.1022395    -9.433  &lt; 2e-16 ***\nORIGIN_GRID2083  0.5371988  0.0789644     6.803 1.02e-11 ***\nORIGIN_GRID2098  0.4504041  0.0789068     5.708 1.14e-08 ***\nORIGIN_GRID2099  1.9180148  0.0774561    24.763  &lt; 2e-16 ***\nORIGIN_GRID21   -0.9918038  0.1490197    -6.656 2.82e-11 ***\nORIGIN_GRID2102  1.6836458  0.0776084    21.694  &lt; 2e-16 ***\nORIGIN_GRID2115  2.5922736  0.0783562    33.083  &lt; 2e-16 ***\nORIGIN_GRID2119  2.2190451  0.0773270    28.697  &lt; 2e-16 ***\nORIGIN_GRID2121  1.2616661  0.0780047    16.174  &lt; 2e-16 ***\nORIGIN_GRID2137  1.7719614  0.0776400    22.823  &lt; 2e-16 ***\nORIGIN_GRID2140 -1.6061079  0.1058354   -15.176  &lt; 2e-16 ***\nORIGIN_GRID215  -1.8804486  0.1779195   -10.569  &lt; 2e-16 ***\nORIGIN_GRID2153  2.1792603  0.0787627    27.669  &lt; 2e-16 ***\nORIGIN_GRID2158  1.0101608  0.0781900    12.919  &lt; 2e-16 ***\nORIGIN_GRID216  -0.6313669  0.1047599    -6.027 1.67e-09 ***\nORIGIN_GRID217  -0.2142520  0.1564569    -1.369 0.170874    \nORIGIN_GRID2177  0.6179254  0.0781691     7.905 2.68e-15 ***\nORIGIN_GRID2178 -0.1010589  0.0833711    -1.212 0.225452    \nORIGIN_GRID2196  0.3021664  0.0812029     3.721 0.000198 ***\nORIGIN_GRID2197  1.6239884  0.0776108    20.925  &lt; 2e-16 ***\nORIGIN_GRID2267  1.5646214  0.0860325    18.186  &lt; 2e-16 ***\nORIGIN_GRID233  -0.7709243  0.0963560    -8.001 1.24e-15 ***\nORIGIN_GRID234   0.6254582  0.0820177     7.626 2.42e-14 ***\nORIGIN_GRID235   0.2991571  0.0863547     3.464 0.000532 ***\nORIGIN_GRID252  -0.8763642  0.0849086   -10.321  &lt; 2e-16 ***\nORIGIN_GRID253  -1.0401783  0.0883215   -11.777  &lt; 2e-16 ***\nORIGIN_GRID254  -0.8630987  0.0904051    -9.547  &lt; 2e-16 ***\nORIGIN_GRID270  -4.0902873  0.3421676   -11.954  &lt; 2e-16 ***\nORIGIN_GRID271  -0.9098841  0.0930631    -9.777  &lt; 2e-16 ***\nORIGIN_GRID272   2.4901868  0.0772746    32.225  &lt; 2e-16 ***\nORIGIN_GRID290  -1.0804269  0.0912391   -11.842  &lt; 2e-16 ***\nORIGIN_GRID291  -1.1194420  0.1076499   -10.399  &lt; 2e-16 ***\nORIGIN_GRID292   0.6771761  0.0866638     7.814 5.55e-15 ***\nORIGIN_GRID308  -0.9649542  0.0818424   -11.790  &lt; 2e-16 ***\nORIGIN_GRID309  -1.4761920  0.0890217   -16.582  &lt; 2e-16 ***\nORIGIN_GRID310  -0.2319974  0.0868878    -2.670 0.007583 ** \nORIGIN_GRID329   0.6982196  0.0855534     8.161 3.32e-16 ***\nORIGIN_GRID330  -0.0587040  0.0812460    -0.723 0.469958    \nORIGIN_GRID347  -0.9445034  0.0827841   -11.409  &lt; 2e-16 ***\nORIGIN_GRID348  -1.3261791  0.0909434   -14.582  &lt; 2e-16 ***\nORIGIN_GRID349   1.2236490  0.0896826    13.644  &lt; 2e-16 ***\nORIGIN_GRID366  -0.4307091  0.0827110    -5.207 1.92e-07 ***\nORIGIN_GRID367  -1.5941154  0.0925971   -17.216  &lt; 2e-16 ***\nORIGIN_GRID368   4.0599803  0.0768040    52.862  &lt; 2e-16 ***\nORIGIN_GRID369  -0.7522082  0.0863162    -8.715  &lt; 2e-16 ***\nORIGIN_GRID370  -0.1071407  0.0788986    -1.358 0.174479    \nORIGIN_GRID385  -1.9034061  0.1230133   -15.473  &lt; 2e-16 ***\nORIGIN_GRID386  -0.1899992  0.0826151    -2.300 0.021459 *  \nORIGIN_GRID387  -0.5392561  0.0876396    -6.153 7.60e-10 ***\nORIGIN_GRID388  -0.4493293  0.1066239    -4.214 2.51e-05 ***\nORIGIN_GRID389   1.1397485  0.0788736    14.450  &lt; 2e-16 ***\nORIGIN_GRID40    0.4024035  0.1614117     2.493 0.012666 *  \nORIGIN_GRID404  -0.2348377  0.0966156    -2.431 0.015072 *  \nORIGIN_GRID405  -0.7845037  0.0867321    -9.045  &lt; 2e-16 ***\nORIGIN_GRID406   0.3698606  0.0809219     4.571 4.86e-06 ***\nORIGIN_GRID407   3.4391059  0.0770758    44.620  &lt; 2e-16 ***\nORIGIN_GRID408   0.7974272  0.0787845    10.122  &lt; 2e-16 ***\nORIGIN_GRID42   -1.0733302  0.1202175    -8.928  &lt; 2e-16 ***\nORIGIN_GRID424   0.0007523  0.0827226     0.009 0.992744    \nORIGIN_GRID425   1.3618199  0.0782724    17.398  &lt; 2e-16 ***\nORIGIN_GRID426   3.6035181  0.0769585    46.824  &lt; 2e-16 ***\nORIGIN_GRID427   1.5041915  0.0783359    19.202  &lt; 2e-16 ***\nORIGIN_GRID442  -0.8140634  0.0947495    -8.592  &lt; 2e-16 ***\nORIGIN_GRID443  -2.2826023  0.1777088   -12.845  &lt; 2e-16 ***\nORIGIN_GRID444   1.6690454  0.0778242    21.446  &lt; 2e-16 ***\nORIGIN_GRID445   2.8887797  0.0771572    37.440  &lt; 2e-16 ***\nORIGIN_GRID447  -2.6553791  0.1835564   -14.466  &lt; 2e-16 ***\nORIGIN_GRID448  -0.4108157  0.0991632    -4.143 3.43e-05 ***\nORIGIN_GRID461  -1.0682632  0.0852424   -12.532  &lt; 2e-16 ***\nORIGIN_GRID462  -0.1083042  0.0809378    -1.338 0.180859    \nORIGIN_GRID463   1.4520888  0.0775769    18.718  &lt; 2e-16 ***\nORIGIN_GRID464   4.1451571  0.0768740    53.921  &lt; 2e-16 ***\nORIGIN_GRID465   0.1916486  0.0803087     2.386 0.017014 *  \nORIGIN_GRID466  -0.1545653  0.0861294    -1.795 0.072722 .  \nORIGIN_GRID467  -1.7444104  0.1695050   -10.291  &lt; 2e-16 ***\nORIGIN_GRID480  -1.7105467  0.1161889   -14.722  &lt; 2e-16 ***\nORIGIN_GRID481  -0.6777416  0.0793093    -8.546  &lt; 2e-16 ***\nORIGIN_GRID482  -0.2550613  0.0808517    -3.155 0.001607 ** \nORIGIN_GRID483   3.6986402  0.0768698    48.116  &lt; 2e-16 ***\nORIGIN_GRID484   4.3303367  0.0768975    56.313  &lt; 2e-16 ***\nORIGIN_GRID486   1.1227127  0.0809061    13.877  &lt; 2e-16 ***\nORIGIN_GRID487  -1.2269166  0.1423801    -8.617  &lt; 2e-16 ***\nORIGIN_GRID488  -1.6497440  0.2222365    -7.423 1.14e-13 ***\nORIGIN_GRID489  -1.4462442  1.0035373    -1.441 0.149543    \nORIGIN_GRID499  -1.3970972  0.0934909   -14.944  &lt; 2e-16 ***\nORIGIN_GRID500  -0.9905942  0.0853591   -11.605  &lt; 2e-16 ***\nORIGIN_GRID501   0.4668594  0.0787770     5.926 3.10e-09 ***\nORIGIN_GRID502   4.0563010  0.0768806    52.761  &lt; 2e-16 ***\nORIGIN_GRID503   2.7982462  0.0771567    36.267  &lt; 2e-16 ***\nORIGIN_GRID507  -0.3287968  0.1243142    -2.645 0.008172 ** \nORIGIN_GRID508   1.2361837  0.0890518    13.882  &lt; 2e-16 ***\nORIGIN_GRID509  -1.8654032  1.0042536    -1.858 0.063240 .  \nORIGIN_GRID518  -3.4250786  0.4155700    -8.242  &lt; 2e-16 ***\nORIGIN_GRID519  -1.8307938  0.0875454   -20.913  &lt; 2e-16 ***\nORIGIN_GRID520   0.5344056  0.0851847     6.273 3.53e-10 ***\nORIGIN_GRID521   4.1407978  0.0768429    53.887  &lt; 2e-16 ***\nORIGIN_GRID522   3.4013683  0.0769645    44.194  &lt; 2e-16 ***\nORIGIN_GRID524  -1.3063570  0.1242357   -10.515  &lt; 2e-16 ***\nORIGIN_GRID528  -0.7600641  0.1298204    -5.855 4.78e-09 ***\nORIGIN_GRID529  -1.9483644  0.4154291    -4.690 2.73e-06 ***\nORIGIN_GRID530   1.3585817  0.0925049    14.687  &lt; 2e-16 ***\nORIGIN_GRID537  -0.2020425  0.0907118    -2.227 0.025927 *  \nORIGIN_GRID538  -0.4714363  0.0810543    -5.816 6.02e-09 ***\nORIGIN_GRID539  -0.0419619  0.0790929    -0.531 0.595738    \nORIGIN_GRID540   3.1567365  0.0769282    41.035  &lt; 2e-16 ***\nORIGIN_GRID541   0.4125088  0.0958931     4.302 1.69e-05 ***\nORIGIN_GRID547  -0.5022582  0.1340771    -3.746 0.000180 ***\nORIGIN_GRID548  -0.9217580  0.1980948    -4.653 3.27e-06 ***\nORIGIN_GRID557  -1.3846993  0.0895670   -15.460  &lt; 2e-16 ***\nORIGIN_GRID558  -0.3940320  0.0830219    -4.746 2.07e-06 ***\nORIGIN_GRID559   0.6040350  0.0789222     7.654 1.96e-14 ***\nORIGIN_GRID560   3.6948052  0.0769053    48.044  &lt; 2e-16 ***\nORIGIN_GRID562   0.8364131  0.0824375    10.146  &lt; 2e-16 ***\nORIGIN_GRID577  -0.6845777  0.0873678    -7.836 4.67e-15 ***\nORIGIN_GRID578   3.2557475  0.0769256    42.323  &lt; 2e-16 ***\nORIGIN_GRID595   0.8286601  0.0784934    10.557  &lt; 2e-16 ***\nORIGIN_GRID596   2.3577656  0.0770770    30.590  &lt; 2e-16 ***\nORIGIN_GRID597   2.8311047  0.0770044    36.765  &lt; 2e-16 ***\nORIGIN_GRID598   3.8123748  0.0768870    49.584  &lt; 2e-16 ***\nORIGIN_GRID60   -0.1495295  0.1514356    -0.987 0.323440    \nORIGIN_GRID600   3.5050310  0.0771863    45.410  &lt; 2e-16 ***\nORIGIN_GRID61    0.1461005  0.0814410     1.794 0.072822 .  \nORIGIN_GRID613   1.1767169  0.0800713    14.696  &lt; 2e-16 ***\nORIGIN_GRID614  -1.0773028  0.0897950   -11.997  &lt; 2e-16 ***\nORIGIN_GRID615   3.6051522  0.0769035    46.879  &lt; 2e-16 ***\nORIGIN_GRID616   3.2604860  0.0769052    42.396  &lt; 2e-16 ***\nORIGIN_GRID617   2.9494762  0.0772722    38.170  &lt; 2e-16 ***\nORIGIN_GRID62   -1.3881806  0.1347529   -10.302  &lt; 2e-16 ***\nORIGIN_GRID633   0.6677554  0.0800414     8.343  &lt; 2e-16 ***\nORIGIN_GRID634   2.5466250  0.0770535    33.050  &lt; 2e-16 ***\nORIGIN_GRID635   2.9064540  0.0770556    37.719  &lt; 2e-16 ***\nORIGIN_GRID636   3.6614546  0.0768967    47.615  &lt; 2e-16 ***\nORIGIN_GRID638   0.3227841  0.0832118     3.879 0.000105 ***\nORIGIN_GRID654   0.8033597  0.0788414    10.190  &lt; 2e-16 ***\nORIGIN_GRID657   0.2820509  0.0867889     3.250 0.001155 ** \nORIGIN_GRID671   0.7036077  0.0785935     8.952  &lt; 2e-16 ***\nORIGIN_GRID673   1.3663965  0.0778021    17.562  &lt; 2e-16 ***\nORIGIN_GRID674   3.1640044  0.0769408    41.123  &lt; 2e-16 ***\nORIGIN_GRID689  -0.1857255  0.0818068    -2.270 0.023190 *  \nORIGIN_GRID690   2.6976378  0.0771644    34.960  &lt; 2e-16 ***\nORIGIN_GRID691  -0.0380951  0.0813793    -0.468 0.639700    \nORIGIN_GRID692   3.6399837  0.0768881    47.341  &lt; 2e-16 ***\nORIGIN_GRID693   2.9513113  0.0772604    38.200  &lt; 2e-16 ***\nORIGIN_GRID695   4.5635527  0.0769196    59.329  &lt; 2e-16 ***\nORIGIN_GRID700  -0.6662283  0.1069908    -6.227 4.76e-10 ***\nORIGIN_GRID710  -0.1509477  0.0812672    -1.857 0.063251 .  \nORIGIN_GRID711   2.8812235  0.0769374    37.449  &lt; 2e-16 ***\nORIGIN_GRID712   2.5091788  0.0770495    32.566  &lt; 2e-16 ***\nORIGIN_GRID713   2.9771367  0.0771627    38.583  &lt; 2e-16 ***\nORIGIN_GRID714   4.0553695  0.0770108    52.660  &lt; 2e-16 ***\nORIGIN_GRID715   2.8834516  0.0775287    37.192  &lt; 2e-16 ***\nORIGIN_GRID727  -0.8016387  0.0933901    -8.584  &lt; 2e-16 ***\nORIGIN_GRID728   3.4737475  0.0769350    45.152  &lt; 2e-16 ***\nORIGIN_GRID729   3.1634009  0.0768984    41.137  &lt; 2e-16 ***\nORIGIN_GRID730   3.2030205  0.0769380    41.631  &lt; 2e-16 ***\nORIGIN_GRID731   4.2966454  0.0769516    55.836  &lt; 2e-16 ***\nORIGIN_GRID732   2.3481901  0.0775821    30.267  &lt; 2e-16 ***\nORIGIN_GRID733   4.1242791  0.0768933    53.636  &lt; 2e-16 ***\nORIGIN_GRID734   3.6594390  0.0770587    47.489  &lt; 2e-16 ***\nORIGIN_GRID738   1.2338541  0.0814099    15.156  &lt; 2e-16 ***\nORIGIN_GRID746  -0.3753742  0.0857974    -4.375 1.21e-05 ***\nORIGIN_GRID748   1.1928040  0.0774555    15.400  &lt; 2e-16 ***\nORIGIN_GRID749   3.3539761  0.0769162    43.606  &lt; 2e-16 ***\nORIGIN_GRID750   3.5145216  0.0769084    45.697  &lt; 2e-16 ***\nORIGIN_GRID751   3.4951722  0.0769539    45.419  &lt; 2e-16 ***\nORIGIN_GRID752   4.0349144  0.0769969    52.404  &lt; 2e-16 ***\nORIGIN_GRID753   3.9903578  0.0768807    51.903  &lt; 2e-16 ***\nORIGIN_GRID754   3.2310616  0.0770435    41.938  &lt; 2e-16 ***\nORIGIN_GRID757   0.7849076  0.0822997     9.537  &lt; 2e-16 ***\nORIGIN_GRID764  -1.0577223  0.1068064    -9.903  &lt; 2e-16 ***\nORIGIN_GRID766   2.6304229  0.0769940    34.164  &lt; 2e-16 ***\nORIGIN_GRID767   1.7500205  0.0773195    22.634  &lt; 2e-16 ***\nORIGIN_GRID768   3.0302045  0.0769654    39.371  &lt; 2e-16 ***\nORIGIN_GRID769   2.2548182  0.0771935    29.210  &lt; 2e-16 ***\nORIGIN_GRID770   2.9299184  0.0770030    38.049  &lt; 2e-16 ***\nORIGIN_GRID771   3.5720159  0.0769296    46.432  &lt; 2e-16 ***\nORIGIN_GRID772   3.4435357  0.0770849    44.672  &lt; 2e-16 ***\nORIGIN_GRID773   5.1465598  0.0769511    66.881  &lt; 2e-16 ***\nORIGIN_GRID774   1.4175773  0.0809075    17.521  &lt; 2e-16 ***\nORIGIN_GRID775  -0.1407793  0.0882248    -1.596 0.110558    \nORIGIN_GRID776   1.6468264  0.0790996    20.820  &lt; 2e-16 ***\nORIGIN_GRID78   -0.7063597  0.1121828    -6.297 3.04e-10 ***\nORIGIN_GRID784   0.1734178  0.0814495     2.129 0.033242 *  \nORIGIN_GRID785   1.1968495  0.0776393    15.416  &lt; 2e-16 ***\nORIGIN_GRID786   0.5143388  0.0788101     6.526 6.74e-11 ***\nORIGIN_GRID787   2.6899802  0.0771263    34.878  &lt; 2e-16 ***\nORIGIN_GRID788   3.8209948  0.0768751    49.704  &lt; 2e-16 ***\nORIGIN_GRID789   3.2407587  0.0770419    42.065  &lt; 2e-16 ***\nORIGIN_GRID79    1.1308055  0.1066432    10.604  &lt; 2e-16 ***\nORIGIN_GRID790   1.5508083  0.0776040    19.984  &lt; 2e-16 ***\nORIGIN_GRID791   2.2948383  0.0774513    29.629  &lt; 2e-16 ***\nORIGIN_GRID792   2.2687197  0.0772230    29.379  &lt; 2e-16 ***\nORIGIN_GRID793  -0.8044168  0.1006226    -7.994 1.30e-15 ***\nORIGIN_GRID794   0.3124781  0.0826394     3.781 0.000156 ***\nORIGIN_GRID795  -0.2769912  0.0862497    -3.212 0.001320 ** \nORIGIN_GRID80    1.0895121  0.0793761    13.726  &lt; 2e-16 ***\nORIGIN_GRID803   1.1436758  0.0779517    14.672  &lt; 2e-16 ***\nORIGIN_GRID804   2.5263272  0.0771216    32.758  &lt; 2e-16 ***\nORIGIN_GRID805  -0.3570444  0.0828758    -4.308 1.65e-05 ***\nORIGIN_GRID806   3.4636875  0.0769086    45.036  &lt; 2e-16 ***\nORIGIN_GRID807   2.6808997  0.0776746    34.515  &lt; 2e-16 ***\nORIGIN_GRID809   3.4832844  0.0769182    45.286  &lt; 2e-16 ***\nORIGIN_GRID81   -0.2887320  0.0913884    -3.159 0.001581 ** \nORIGIN_GRID810   1.7010428  0.0775144    21.945  &lt; 2e-16 ***\nORIGIN_GRID811   1.1265360  0.0782746    14.392  &lt; 2e-16 ***\nORIGIN_GRID812   0.2003738  0.0820883     2.441 0.014649 *  \nORIGIN_GRID813  -1.1395533  0.0976472   -11.670  &lt; 2e-16 ***\nORIGIN_GRID814   0.8519321  0.0829092    10.275  &lt; 2e-16 ***\nORIGIN_GRID82   -0.4852578  0.1451334    -3.344 0.000827 ***\nORIGIN_GRID822   1.9691620  0.0778193    25.304  &lt; 2e-16 ***\nORIGIN_GRID823   2.4832719  0.0770183    32.243  &lt; 2e-16 ***\nORIGIN_GRID824   0.6269484  0.0785174     7.985 1.41e-15 ***\nORIGIN_GRID825   1.5937897  0.0772950    20.620  &lt; 2e-16 ***\nORIGIN_GRID826   3.1986486  0.0769343    41.576  &lt; 2e-16 ***\nORIGIN_GRID829   3.4504636  0.0769366    44.848  &lt; 2e-16 ***\nORIGIN_GRID831   2.4297888  0.0771637    31.489  &lt; 2e-16 ***\nORIGIN_GRID832  -0.3329283  0.0857668    -3.882 0.000104 ***\nORIGIN_GRID833   2.6040136  0.0773796    33.652  &lt; 2e-16 ***\nORIGIN_GRID840   1.6489833  0.0779233    21.162  &lt; 2e-16 ***\nORIGIN_GRID841   2.9499635  0.0769488    38.337  &lt; 2e-16 ***\nORIGIN_GRID842   3.5594094  0.0768786    46.299  &lt; 2e-16 ***\nORIGIN_GRID843   0.7937236  0.0785917    10.099  &lt; 2e-16 ***\nORIGIN_GRID844   1.1565003  0.0787649    14.683  &lt; 2e-16 ***\nORIGIN_GRID845   3.0475222  0.0770218    39.567  &lt; 2e-16 ***\nORIGIN_GRID846   0.6812148  0.0784491     8.684  &lt; 2e-16 ***\nORIGIN_GRID847   3.7363888  0.0768790    48.601  &lt; 2e-16 ***\nORIGIN_GRID850  -2.9519895  0.2615983   -11.284  &lt; 2e-16 ***\nORIGIN_GRID851   3.6395226  0.0769305    47.309  &lt; 2e-16 ***\nORIGIN_GRID852  -0.9831290  0.1044574    -9.412  &lt; 2e-16 ***\nORIGIN_GRID859   1.1426404  0.0778898    14.670  &lt; 2e-16 ***\nORIGIN_GRID860   3.0793652  0.0769779    40.003  &lt; 2e-16 ***\nORIGIN_GRID861   3.8063185  0.0768684    49.517  &lt; 2e-16 ***\nORIGIN_GRID862   1.2030078  0.0793745    15.156  &lt; 2e-16 ***\nORIGIN_GRID863   2.1104378  0.0773827    27.273  &lt; 2e-16 ***\nORIGIN_GRID864   0.7698171  0.0785480     9.801  &lt; 2e-16 ***\nORIGIN_GRID865   2.6412708  0.0770079    34.299  &lt; 2e-16 ***\nORIGIN_GRID866   1.3695268  0.0775744    17.654  &lt; 2e-16 ***\nORIGIN_GRID867   3.8467385  0.0770328    49.936  &lt; 2e-16 ***\nORIGIN_GRID869   0.1919504  0.0904095     2.123 0.033744 *  \nORIGIN_GRID871   0.1145365  0.0825090     1.388 0.165085    \nORIGIN_GRID872  -0.5378703  0.1512023    -3.557 0.000375 ***\nORIGIN_GRID878   1.7911925  0.0771911    23.205  &lt; 2e-16 ***\nORIGIN_GRID879   3.0389015  0.0769105    39.512  &lt; 2e-16 ***\nORIGIN_GRID880   3.0236925  0.0769550    39.292  &lt; 2e-16 ***\nORIGIN_GRID882   2.4500209  0.0771463    31.758  &lt; 2e-16 ***\nORIGIN_GRID883   2.0178566  0.0773073    26.102  &lt; 2e-16 ***\nORIGIN_GRID884   0.6538771  0.0785042     8.329  &lt; 2e-16 ***\nORIGIN_GRID885   3.8036150  0.0769069    49.457  &lt; 2e-16 ***\nORIGIN_GRID886   3.7132806  0.0771346    48.140  &lt; 2e-16 ***\nORIGIN_GRID890   0.9438714  0.0782221    12.067  &lt; 2e-16 ***\nORIGIN_GRID891   5.3511290  0.0769099    69.577  &lt; 2e-16 ***\nORIGIN_GRID897   1.6842212  0.0773008    21.788  &lt; 2e-16 ***\nORIGIN_GRID898   2.0640760  0.0771086    26.768  &lt; 2e-16 ***\nORIGIN_GRID899   1.9251015  0.0771602    24.949  &lt; 2e-16 ***\nORIGIN_GRID900   1.3559299  0.0775410    17.487  &lt; 2e-16 ***\nORIGIN_GRID901   2.8139870  0.0770045    36.543  &lt; 2e-16 ***\nORIGIN_GRID902   2.2646332  0.0771807    29.342  &lt; 2e-16 ***\nORIGIN_GRID903   0.8647497  0.0817773    10.574  &lt; 2e-16 ***\nORIGIN_GRID904   3.7517863  0.0769154    48.778  &lt; 2e-16 ***\nORIGIN_GRID905   4.1358776  0.0770190    53.699  &lt; 2e-16 ***\nORIGIN_GRID907   0.7740779  0.0807112     9.591  &lt; 2e-16 ***\nORIGIN_GRID909   3.1531054  0.0769326    40.985  &lt; 2e-16 ***\nORIGIN_GRID910   4.3094900  0.0768894    56.048  &lt; 2e-16 ***\nORIGIN_GRID915   0.1307727  0.0827150     1.581 0.113877    \nORIGIN_GRID916  -0.4056479  0.0820047    -4.947 7.55e-07 ***\nORIGIN_GRID917   0.5631260  0.0784870     7.175 7.24e-13 ***\nORIGIN_GRID918   1.5156157  0.0775420    19.546  &lt; 2e-16 ***\nORIGIN_GRID919   0.7937635  0.0783022    10.137  &lt; 2e-16 ***\nORIGIN_GRID920   1.9753262  0.0771295    25.611  &lt; 2e-16 ***\nORIGIN_GRID922   2.7571953  0.0774261    35.611  &lt; 2e-16 ***\nORIGIN_GRID923   4.1919846  0.0769673    54.465  &lt; 2e-16 ***\nORIGIN_GRID927   2.6818782  0.0773767    34.660  &lt; 2e-16 ***\nORIGIN_GRID928   3.6585617  0.0769567    47.541  &lt; 2e-16 ***\nORIGIN_GRID929  -0.9023068  0.0929918    -9.703  &lt; 2e-16 ***\nORIGIN_GRID935   1.2177073  0.0775945    15.693  &lt; 2e-16 ***\nORIGIN_GRID936   1.9959129  0.0771444    25.872  &lt; 2e-16 ***\nORIGIN_GRID937   2.6562482  0.0770078    34.493  &lt; 2e-16 ***\nORIGIN_GRID938   0.8116854  0.0781922    10.381  &lt; 2e-16 ***\nORIGIN_GRID939   1.8786009  0.0771340    24.355  &lt; 2e-16 ***\nORIGIN_GRID945   0.5695432  0.0806293     7.064 1.62e-12 ***\nORIGIN_GRID947   3.1092682  0.0769468    40.408  &lt; 2e-16 ***\nORIGIN_GRID948   3.0905859  0.0769875    40.144  &lt; 2e-16 ***\nORIGIN_GRID953   2.5389254  0.0770177    32.965  &lt; 2e-16 ***\nORIGIN_GRID954   1.7794576  0.0772006    23.050  &lt; 2e-16 ***\nORIGIN_GRID955   2.8508435  0.0769870    37.030  &lt; 2e-16 ***\nORIGIN_GRID956   1.8082471  0.0773501    23.377  &lt; 2e-16 ***\nORIGIN_GRID964  -1.5911573  0.2479485    -6.417 1.39e-10 ***\nORIGIN_GRID966   3.1188034  0.0769833    40.513  &lt; 2e-16 ***\nORIGIN_GRID967   2.8489792  0.0771487    36.928  &lt; 2e-16 ***\nORIGIN_GRID972   2.1524144  0.0771689    27.892  &lt; 2e-16 ***\nORIGIN_GRID973   1.9551517  0.0772182    25.320  &lt; 2e-16 ***\nORIGIN_GRID974   1.6040501  0.0772857    20.755  &lt; 2e-16 ***\nORIGIN_GRID975   1.8140761  0.0774339    23.427  &lt; 2e-16 ***\nORIGIN_GRID977   2.5973167  0.0770004    33.731  &lt; 2e-16 ***\nORIGIN_GRID983  -2.5632004  0.1880173   -13.633  &lt; 2e-16 ***\nORIGIN_GRID985   3.2047320  0.0770122    41.613  &lt; 2e-16 ***\nORIGIN_GRID986   1.3641567  0.0777206    17.552  &lt; 2e-16 ***\nORIGIN_GRID99   -0.2792562  0.1178422    -2.370 0.017800 *  \nORIGIN_GRID990  -0.0243794  0.0883349    -0.276 0.782557    \nORIGIN_GRID991   0.2416771  0.0856437     2.822 0.004774 ** \nORIGIN_GRID992   2.0748769  0.0782900    26.502  &lt; 2e-16 ***\nORIGIN_GRID993   3.2520967  0.0769059    42.287  &lt; 2e-16 ***\nORIGIN_GRID994   1.0319295  0.0788203    13.092  &lt; 2e-16 ***\nORIGIN_GRID995   2.1561004  0.0771064    27.963  &lt; 2e-16 ***\nDESTIN_GRID1001  4.0966463  0.1010274    40.550  &lt; 2e-16 ***\nDESTIN_GRID1002 -1.1204331  0.1364305    -8.212  &lt; 2e-16 ***\nDESTIN_GRID1003  3.0471829  0.1009299    30.191  &lt; 2e-16 ***\nDESTIN_GRID1004  4.4767367  0.1006831    44.464  &lt; 2e-16 ***\nDESTIN_GRID1005  1.1690099  0.1027680    11.375  &lt; 2e-16 ***\nDESTIN_GRID101   3.1967138  0.1015670    31.474  &lt; 2e-16 ***\nDESTIN_GRID1010  2.1763448  0.1010043    21.547  &lt; 2e-16 ***\nDESTIN_GRID1011  2.7704530  0.1009044    27.456  &lt; 2e-16 ***\nDESTIN_GRID1012  1.2765071  0.1020719    12.506  &lt; 2e-16 ***\nDESTIN_GRID1013  1.7540642  0.1011541    17.341  &lt; 2e-16 ***\nDESTIN_GRID1014  1.2347835  0.1019941    12.106  &lt; 2e-16 ***\nDESTIN_GRID102   0.9427638  0.1056861     8.920  &lt; 2e-16 ***\nDESTIN_GRID1023  2.0123611  0.1009360    19.937  &lt; 2e-16 ***\nDESTIN_GRID1024  2.7243955  0.1007957    27.029  &lt; 2e-16 ***\nDESTIN_GRID1025  4.0576057  0.1008036    40.253  &lt; 2e-16 ***\nDESTIN_GRID1028  3.4973952  0.1007646    34.709  &lt; 2e-16 ***\nDESTIN_GRID1030  1.8319890  0.1020404    17.954  &lt; 2e-16 ***\nDESTIN_GRID1031  2.1776965  0.1008778    21.587  &lt; 2e-16 ***\nDESTIN_GRID1033  1.8086763  0.1009524    17.916  &lt; 2e-16 ***\nDESTIN_GRID1040  1.0603879  0.1046676    10.131  &lt; 2e-16 ***\nDESTIN_GRID1041  1.7423672  0.1015576    17.156  &lt; 2e-16 ***\nDESTIN_GRID1042  1.9705841  0.1008676    19.536  &lt; 2e-16 ***\nDESTIN_GRID1043  2.6388353  0.1008666    26.162  &lt; 2e-16 ***\nDESTIN_GRID1048  1.6824767  0.1012210    16.622  &lt; 2e-16 ***\nDESTIN_GRID1049  1.6726422  0.1010363    16.555  &lt; 2e-16 ***\nDESTIN_GRID1050  3.2212721  0.1007319    31.979  &lt; 2e-16 ***\nDESTIN_GRID1061  2.4380141  0.1008311    24.179  &lt; 2e-16 ***\nDESTIN_GRID1062  4.2130048  0.1007026    41.836  &lt; 2e-16 ***\nDESTIN_GRID1063  3.5302828  0.1007882    35.027  &lt; 2e-16 ***\nDESTIN_GRID1064  1.2174408  0.1084748    11.223  &lt; 2e-16 ***\nDESTIN_GRID1066  3.7400803  0.1007173    37.134  &lt; 2e-16 ***\nDESTIN_GRID1067  2.7966399  0.1007852    27.749  &lt; 2e-16 ***\nDESTIN_GRID1068  2.9622890  0.1007526    29.402  &lt; 2e-16 ***\nDESTIN_GRID1069  1.7053611  0.1010166    16.882  &lt; 2e-16 ***\nDESTIN_GRID1071  3.1481379  0.1007525    31.246  &lt; 2e-16 ***\nDESTIN_GRID1078  1.2679893  0.1037703    12.219  &lt; 2e-16 ***\nDESTIN_GRID1080  3.0484980  0.1007900    30.246  &lt; 2e-16 ***\nDESTIN_GRID1081  2.9358278  0.1008020    29.125  &lt; 2e-16 ***\nDESTIN_GRID1082  3.2864792  0.1008390    32.591  &lt; 2e-16 ***\nDESTIN_GRID1086  2.6604302  0.1009002    26.367  &lt; 2e-16 ***\nDESTIN_GRID1087  2.3542395  0.1009146    23.329  &lt; 2e-16 ***\nDESTIN_GRID1089  2.1559214  0.1009164    21.363  &lt; 2e-16 ***\nDESTIN_GRID1090  1.6998018  0.1010176    16.827  &lt; 2e-16 ***\nDESTIN_GRID1097 -1.8037149  0.2771674    -6.508 7.63e-11 ***\nDESTIN_GRID1100  1.7278267  0.1009808    17.110  &lt; 2e-16 ***\nDESTIN_GRID1101  2.5892963  0.1013052    25.559  &lt; 2e-16 ***\nDESTIN_GRID1102  2.9355901  0.1011360    29.026  &lt; 2e-16 ***\nDESTIN_GRID1104  2.4481954  0.1008219    24.282  &lt; 2e-16 ***\nDESTIN_GRID1105  3.1375026  0.1007438    31.143  &lt; 2e-16 ***\nDESTIN_GRID1106  2.0856142  0.1013928    20.570  &lt; 2e-16 ***\nDESTIN_GRID1107  1.7145195  0.1012203    16.938  &lt; 2e-16 ***\nDESTIN_GRID1108  2.3466790  0.1008942    23.259  &lt; 2e-16 ***\nDESTIN_GRID1115  0.3058536  0.1153075     2.653 0.007990 ** \nDESTIN_GRID1116  1.8473306  0.1032073    17.899  &lt; 2e-16 ***\nDESTIN_GRID1119  2.8770412  0.1008308    28.533  &lt; 2e-16 ***\nDESTIN_GRID1120  2.4949527  0.1009944    24.704  &lt; 2e-16 ***\nDESTIN_GRID1123  1.3902627  0.1012993    13.724  &lt; 2e-16 ***\nDESTIN_GRID1124  2.0930904  0.1010368    20.716  &lt; 2e-16 ***\nDESTIN_GRID1125  3.0430732  0.1007752    30.197  &lt; 2e-16 ***\nDESTIN_GRID1128  1.6999263  0.1009933    16.832  &lt; 2e-16 ***\nDESTIN_GRID1138  1.9490504  0.1010223    19.293  &lt; 2e-16 ***\nDESTIN_GRID1139  2.6470453  0.1008682    26.243  &lt; 2e-16 ***\nDESTIN_GRID1140  3.6763732  0.1007954    36.474  &lt; 2e-16 ***\nDESTIN_GRID1142  1.4310881  0.1015078    14.098  &lt; 2e-16 ***\nDESTIN_GRID1143  3.4281766  0.1007144    34.039  &lt; 2e-16 ***\nDESTIN_GRID1144  2.8322720  0.1009036    28.069  &lt; 2e-16 ***\nDESTIN_GRID1145  2.4049431  0.1009549    23.822  &lt; 2e-16 ***\nDESTIN_GRID1146  2.4089773  0.1008685    23.882  &lt; 2e-16 ***\nDESTIN_GRID1147  0.9206058  0.1020062     9.025  &lt; 2e-16 ***\nDESTIN_GRID1152 -2.0631408  0.1408725   -14.645  &lt; 2e-16 ***\nDESTIN_GRID1153  2.6187203  0.1009001    25.954  &lt; 2e-16 ***\nDESTIN_GRID1157  3.2391498  0.1007449    32.152  &lt; 2e-16 ***\nDESTIN_GRID1158  2.8545543  0.1008422    28.307  &lt; 2e-16 ***\nDESTIN_GRID116   3.7480339  0.1033526    36.265  &lt; 2e-16 ***\nDESTIN_GRID1161  3.5695957  0.1007136    35.443  &lt; 2e-16 ***\nDESTIN_GRID1162  3.6307080  0.1007301    36.044  &lt; 2e-16 ***\nDESTIN_GRID1163  3.1519561  0.1007458    31.286  &lt; 2e-16 ***\nDESTIN_GRID1164  2.1636482  0.1010844    21.404  &lt; 2e-16 ***\nDESTIN_GRID1167 -0.1955068  0.1069911    -1.827 0.067652 .  \nDESTIN_GRID117  -0.4239454  0.1668657    -2.541 0.011065 *  \nDESTIN_GRID1171 -1.3479068  0.1246632   -10.812  &lt; 2e-16 ***\nDESTIN_GRID1172  2.4462883  0.1010165    24.217  &lt; 2e-16 ***\nDESTIN_GRID1173  0.1294260  0.1033989     1.252 0.210674    \nDESTIN_GRID1176  2.4881443  0.1008713    24.667  &lt; 2e-16 ***\nDESTIN_GRID1177  2.3494029  0.1010101    23.259  &lt; 2e-16 ***\nDESTIN_GRID118   2.3667816  0.1031103    22.954  &lt; 2e-16 ***\nDESTIN_GRID1180  2.8589936  0.1008079    28.361  &lt; 2e-16 ***\nDESTIN_GRID1181  2.9822291  0.1007451    29.602  &lt; 2e-16 ***\nDESTIN_GRID1183  1.5807646  0.1021773    15.471  &lt; 2e-16 ***\nDESTIN_GRID1184  2.6086290  0.1008019    25.879  &lt; 2e-16 ***\nDESTIN_GRID1186 -2.0247453  0.1927749   -10.503  &lt; 2e-16 ***\nDESTIN_GRID119   2.1946868  0.1029577    21.316  &lt; 2e-16 ***\nDESTIN_GRID1192  0.8890011  0.1018160     8.731  &lt; 2e-16 ***\nDESTIN_GRID1193  0.9202451  0.1015502     9.062  &lt; 2e-16 ***\nDESTIN_GRID1194  0.9542919  0.1019864     9.357  &lt; 2e-16 ***\nDESTIN_GRID1195  3.6360678  0.1007206    36.101  &lt; 2e-16 ***\nDESTIN_GRID1196  1.4904837  0.1014913    14.686  &lt; 2e-16 ***\nDESTIN_GRID1198  2.7299405  0.1019631    26.774  &lt; 2e-16 ***\nDESTIN_GRID1199  0.9373335  0.1017001     9.217  &lt; 2e-16 ***\nDESTIN_GRID120   2.5875404  0.1016939    25.444  &lt; 2e-16 ***\nDESTIN_GRID1200  2.5408896  0.1008109    25.205  &lt; 2e-16 ***\nDESTIN_GRID1201  2.7970920  0.1007842    27.753  &lt; 2e-16 ***\nDESTIN_GRID1202  2.4845272  0.1008595    24.634  &lt; 2e-16 ***\nDESTIN_GRID1203  2.3150168  0.1010438    22.911  &lt; 2e-16 ***\nDESTIN_GRID1204  3.3101939  0.1007904    32.842  &lt; 2e-16 ***\nDESTIN_GRID1205 -2.9917666  0.2855930   -10.476  &lt; 2e-16 ***\nDESTIN_GRID1207  0.9775983  0.1018406     9.599  &lt; 2e-16 ***\nDESTIN_GRID1208  1.5686809  0.1014534    15.462  &lt; 2e-16 ***\nDESTIN_GRID1209  3.1743697  0.1008120    31.488  &lt; 2e-16 ***\nDESTIN_GRID121   2.6750911  0.1013417    26.397  &lt; 2e-16 ***\nDESTIN_GRID1210 -0.3388188  0.1101951    -3.075 0.002107 ** \nDESTIN_GRID1211 -0.4588867  0.1056714    -4.343 1.41e-05 ***\nDESTIN_GRID1212 -0.2510719  0.1045476    -2.402 0.016328 *  \nDESTIN_GRID1213  3.1592079  0.1007351    31.362  &lt; 2e-16 ***\nDESTIN_GRID1214  2.0604827  0.1010603    20.389  &lt; 2e-16 ***\nDESTIN_GRID1215 -1.4944917  0.1375193   -10.868  &lt; 2e-16 ***\nDESTIN_GRID1218  2.3235174  0.1009461    23.017  &lt; 2e-16 ***\nDESTIN_GRID1219  3.7949087  0.1007174    37.679  &lt; 2e-16 ***\nDESTIN_GRID122   2.7682418  0.1012381    27.344  &lt; 2e-16 ***\nDESTIN_GRID1220  2.3311446  0.1008678    23.111  &lt; 2e-16 ***\nDESTIN_GRID1221  3.1404710  0.1007857    31.160  &lt; 2e-16 ***\nDESTIN_GRID1222  1.5277874  0.1015024    15.052  &lt; 2e-16 ***\nDESTIN_GRID1225  2.6063449  0.1008374    25.847  &lt; 2e-16 ***\nDESTIN_GRID1226  1.7191099  0.1011470    16.996  &lt; 2e-16 ***\nDESTIN_GRID1227  1.4642729  0.1012302    14.465  &lt; 2e-16 ***\nDESTIN_GRID1229  0.6886264  0.1023888     6.726 1.75e-11 ***\nDESTIN_GRID1230  3.2107921  0.1007300    31.875  &lt; 2e-16 ***\nDESTIN_GRID1231  2.2489973  0.1008446    22.302  &lt; 2e-16 ***\nDESTIN_GRID1232  1.9350096  0.1009046    19.177  &lt; 2e-16 ***\nDESTIN_GRID1233  1.7563733  0.1010041    17.389  &lt; 2e-16 ***\nDESTIN_GRID1234  0.7078793  0.1043255     6.785 1.16e-11 ***\nDESTIN_GRID1238  1.5630378  0.1011111    15.459  &lt; 2e-16 ***\nDESTIN_GRID1239  1.9594271  0.1009955    19.401  &lt; 2e-16 ***\nDESTIN_GRID1240  3.2728240  0.1007218    32.494  &lt; 2e-16 ***\nDESTIN_GRID1241  2.4385431  0.1009125    24.165  &lt; 2e-16 ***\nDESTIN_GRID1242  2.3889820  0.1008881    23.680  &lt; 2e-16 ***\nDESTIN_GRID1243 -0.4041799  0.1058249    -3.819 0.000134 ***\nDESTIN_GRID1244  0.9859257  0.1016036     9.704  &lt; 2e-16 ***\nDESTIN_GRID1245  2.8642028  0.1009178    28.382  &lt; 2e-16 ***\nDESTIN_GRID1246  1.4900092  0.1019150    14.620  &lt; 2e-16 ***\nDESTIN_GRID1249 -1.5059439  0.1206709   -12.480  &lt; 2e-16 ***\nDESTIN_GRID1250  3.7657962  0.1006963    37.398  &lt; 2e-16 ***\nDESTIN_GRID1251  4.2209171  0.1006930    41.919  &lt; 2e-16 ***\nDESTIN_GRID1252  3.4810100  0.1007576    34.548  &lt; 2e-16 ***\nDESTIN_GRID1253  0.8996221  0.1024198     8.784  &lt; 2e-16 ***\nDESTIN_GRID1256  2.1671819  0.1008763    21.484  &lt; 2e-16 ***\nDESTIN_GRID1257  2.2134238  0.1009187    21.933  &lt; 2e-16 ***\nDESTIN_GRID1258  2.6057022  0.1008554    25.836  &lt; 2e-16 ***\nDESTIN_GRID1259  3.2499900  0.1007564    32.256  &lt; 2e-16 ***\nDESTIN_GRID1260  2.3722000  0.1012920    23.419  &lt; 2e-16 ***\nDESTIN_GRID1261  2.0621134  0.1009770    20.422  &lt; 2e-16 ***\nDESTIN_GRID1262  2.2407292  0.1008418    22.220  &lt; 2e-16 ***\nDESTIN_GRID1263  2.1703600  0.1008931    21.511  &lt; 2e-16 ***\nDESTIN_GRID1264  2.8997135  0.1007867    28.771  &lt; 2e-16 ***\nDESTIN_GRID1265  1.8979928  0.1009413    18.803  &lt; 2e-16 ***\nDESTIN_GRID1266  1.3055035  0.1016796    12.839  &lt; 2e-16 ***\nDESTIN_GRID1268  1.5260843  0.1011351    15.090  &lt; 2e-16 ***\nDESTIN_GRID1269  3.1057454  0.1007168    30.836  &lt; 2e-16 ***\nDESTIN_GRID1270  2.3913959  0.1007999    23.724  &lt; 2e-16 ***\nDESTIN_GRID1272  0.8725184  0.1036114     8.421  &lt; 2e-16 ***\nDESTIN_GRID1276  2.8135124  0.1007734    27.919  &lt; 2e-16 ***\nDESTIN_GRID1277  2.6075266  0.1009082    25.841  &lt; 2e-16 ***\nDESTIN_GRID1278  3.0190997  0.1007414    29.969  &lt; 2e-16 ***\nDESTIN_GRID1279  2.3967070  0.1008244    23.771  &lt; 2e-16 ***\nDESTIN_GRID1280  2.3485870  0.1008225    23.294  &lt; 2e-16 ***\nDESTIN_GRID1281  2.8376894  0.1007995    28.152  &lt; 2e-16 ***\nDESTIN_GRID1282  2.4508212  0.1008744    24.296  &lt; 2e-16 ***\nDESTIN_GRID1283  2.6413657  0.1007944    26.205  &lt; 2e-16 ***\nDESTIN_GRID1284  2.7541481  0.1007966    27.324  &lt; 2e-16 ***\nDESTIN_GRID1285  2.1959819  0.1009174    21.760  &lt; 2e-16 ***\nDESTIN_GRID1288  2.1285254  0.1008435    21.107  &lt; 2e-16 ***\nDESTIN_GRID1289  2.3490037  0.1007902    23.306  &lt; 2e-16 ***\nDESTIN_GRID1294  2.6958947  0.1007828    26.750  &lt; 2e-16 ***\nDESTIN_GRID1295  3.3945246  0.1007218    33.702  &lt; 2e-16 ***\nDESTIN_GRID1296  2.8419676  0.1007415    28.210  &lt; 2e-16 ***\nDESTIN_GRID1297  2.2845108  0.1010734    22.602  &lt; 2e-16 ***\nDESTIN_GRID1298  3.3090689  0.1007377    32.848  &lt; 2e-16 ***\nDESTIN_GRID1299  2.8770347  0.1007623    28.553  &lt; 2e-16 ***\nDESTIN_GRID1300  1.7280952  0.1011968    17.077  &lt; 2e-16 ***\nDESTIN_GRID1301  2.2802088  0.1008444    22.611  &lt; 2e-16 ***\nDESTIN_GRID1302  2.8347610  0.1007390    28.140  &lt; 2e-16 ***\nDESTIN_GRID1303  3.3673898  0.1007143    33.435  &lt; 2e-16 ***\nDESTIN_GRID1304  2.9339556  0.1008461    29.093  &lt; 2e-16 ***\nDESTIN_GRID1306  0.2605824  0.1020599     2.553 0.010673 *  \nDESTIN_GRID1307  2.0513515  0.1008249    20.346  &lt; 2e-16 ***\nDESTIN_GRID1308  3.0340780  0.1008626    30.081  &lt; 2e-16 ***\nDESTIN_GRID1314  3.4471686  0.1007089    34.229  &lt; 2e-16 ***\nDESTIN_GRID1315  2.9987873  0.1007678    29.759  &lt; 2e-16 ***\nDESTIN_GRID1316  2.3206445  0.1011416    22.945  &lt; 2e-16 ***\nDESTIN_GRID1317  2.6169510  0.1008987    25.936  &lt; 2e-16 ***\nDESTIN_GRID1318  2.8361590  0.1008109    28.133  &lt; 2e-16 ***\nDESTIN_GRID1319  3.3983922  0.1007496    33.731  &lt; 2e-16 ***\nDESTIN_GRID1320  4.0626161  0.1006913    40.347  &lt; 2e-16 ***\nDESTIN_GRID1321  1.6977688  0.1009675    16.815  &lt; 2e-16 ***\nDESTIN_GRID1322  3.0300154  0.1007456    30.076  &lt; 2e-16 ***\nDESTIN_GRID1323  2.9476574  0.1008471    29.229  &lt; 2e-16 ***\nDESTIN_GRID1326  1.6106247  0.1008856    15.965  &lt; 2e-16 ***\nDESTIN_GRID1327  1.0008684  0.1011848     9.891  &lt; 2e-16 ***\nDESTIN_GRID1332  2.2636297  0.1009105    22.432  &lt; 2e-16 ***\nDESTIN_GRID1333  3.3644483  0.1007235    33.403  &lt; 2e-16 ***\nDESTIN_GRID1334  3.1854012  0.1007153    31.628  &lt; 2e-16 ***\nDESTIN_GRID1335  3.0192058  0.1007427    29.969  &lt; 2e-16 ***\nDESTIN_GRID1336  2.3181939  0.1008904    22.977  &lt; 2e-16 ***\nDESTIN_GRID1337  3.9554849  0.1006863    39.285  &lt; 2e-16 ***\nDESTIN_GRID1338  2.5600252  0.1007814    25.402  &lt; 2e-16 ***\nDESTIN_GRID1339  1.8608210  0.1009011    18.442  &lt; 2e-16 ***\nDESTIN_GRID1340  3.8303592  0.1006912    38.041  &lt; 2e-16 ***\nDESTIN_GRID1341  2.5141674  0.1008701    24.925  &lt; 2e-16 ***\nDESTIN_GRID1342  3.4182340  0.1007773    33.919  &lt; 2e-16 ***\nDESTIN_GRID1345  0.6315582  0.1013734     6.230 4.66e-10 ***\nDESTIN_GRID1352  2.9456750  0.1007480    29.238  &lt; 2e-16 ***\nDESTIN_GRID1353  2.5092722  0.1007941    24.895  &lt; 2e-16 ***\nDESTIN_GRID1354  3.3229805  0.1007152    32.994  &lt; 2e-16 ***\nDESTIN_GRID1355  2.2977767  0.1008767    22.778  &lt; 2e-16 ***\nDESTIN_GRID1356  2.4396512  0.1008362    24.194  &lt; 2e-16 ***\nDESTIN_GRID1357  2.7264797  0.1007445    27.063  &lt; 2e-16 ***\nDESTIN_GRID1358  2.2598755  0.1009846    22.378  &lt; 2e-16 ***\nDESTIN_GRID1359  2.9863018  0.1007333    29.646  &lt; 2e-16 ***\nDESTIN_GRID136   1.4591290  0.1053462    13.851  &lt; 2e-16 ***\nDESTIN_GRID1360  3.0380348  0.1007441    30.156  &lt; 2e-16 ***\nDESTIN_GRID1364 -0.9018907  0.1197563    -7.531 5.03e-14 ***\nDESTIN_GRID137   2.4840403  0.1030526    24.105  &lt; 2e-16 ***\nDESTIN_GRID1370 -2.3019709  0.7145007    -3.222 0.001274 ** \nDESTIN_GRID1371  2.3245499  0.1014765    22.907  &lt; 2e-16 ***\nDESTIN_GRID1372  3.2278839  0.1007170    32.049  &lt; 2e-16 ***\nDESTIN_GRID1373  2.6660225  0.1008591    26.433  &lt; 2e-16 ***\nDESTIN_GRID1374  2.0669915  0.1009617    20.473  &lt; 2e-16 ***\nDESTIN_GRID1375  2.1461943  0.1009674    21.256  &lt; 2e-16 ***\nDESTIN_GRID1376  2.4833529  0.1007877    24.639  &lt; 2e-16 ***\nDESTIN_GRID1377  1.9448967  0.1009277    19.270  &lt; 2e-16 ***\nDESTIN_GRID1378  2.6286900  0.1007721    26.085  &lt; 2e-16 ***\nDESTIN_GRID1379  4.4706203  0.1007427    44.377  &lt; 2e-16 ***\nDESTIN_GRID138   3.6100162  0.1016925    35.499  &lt; 2e-16 ***\nDESTIN_GRID1380  1.5579345  0.1012882    15.381  &lt; 2e-16 ***\nDESTIN_GRID1383 -0.4079272  0.1054357    -3.869 0.000109 ***\nDESTIN_GRID1389  2.4436546  0.1166027    20.957  &lt; 2e-16 ***\nDESTIN_GRID139   3.4303444  0.1015824    33.769  &lt; 2e-16 ***\nDESTIN_GRID1390  0.8900044  0.1034934     8.600  &lt; 2e-16 ***\nDESTIN_GRID1391  2.7319514  0.1008241    27.096  &lt; 2e-16 ***\nDESTIN_GRID1392  2.6641180  0.1007785    26.435  &lt; 2e-16 ***\nDESTIN_GRID1393  2.7961566  0.1007564    27.752  &lt; 2e-16 ***\nDESTIN_GRID1394  2.1619231  0.1008291    21.441  &lt; 2e-16 ***\nDESTIN_GRID1395  2.3011449  0.1009368    22.798  &lt; 2e-16 ***\nDESTIN_GRID1396  2.2335149  0.1010547    22.102  &lt; 2e-16 ***\nDESTIN_GRID1397  1.5281495  0.1047583    14.587  &lt; 2e-16 ***\nDESTIN_GRID1398  2.0694768  0.1010572    20.478  &lt; 2e-16 ***\nDESTIN_GRID140   0.9940649  0.1028307     9.667  &lt; 2e-16 ***\nDESTIN_GRID1401  1.4347304  0.1017095    14.106  &lt; 2e-16 ***\nDESTIN_GRID1408  1.3098223  0.1260421    10.392  &lt; 2e-16 ***\nDESTIN_GRID1409  1.3741865  0.1020216    13.470  &lt; 2e-16 ***\nDESTIN_GRID141   1.8877690  0.1022518    18.462  &lt; 2e-16 ***\nDESTIN_GRID1410  2.4364823  0.1013865    24.032  &lt; 2e-16 ***\nDESTIN_GRID1411  3.1902184  0.1007261    31.672  &lt; 2e-16 ***\nDESTIN_GRID1412  3.2894758  0.1007223    32.659  &lt; 2e-16 ***\nDESTIN_GRID1413  2.3020379  0.1008696    22.822  &lt; 2e-16 ***\nDESTIN_GRID1414  0.5597686  0.1019539     5.490 4.01e-08 ***\nDESTIN_GRID1415  1.4268323  0.1010577    14.119  &lt; 2e-16 ***\nDESTIN_GRID1416  1.9551897  0.1009886    19.361  &lt; 2e-16 ***\nDESTIN_GRID1417  2.4850118  0.1008537    24.640  &lt; 2e-16 ***\nDESTIN_GRID1418  0.8459018  0.1019496     8.297  &lt; 2e-16 ***\nDESTIN_GRID1419  1.0457796  0.1021611    10.237  &lt; 2e-16 ***\nDESTIN_GRID142   2.1635650  0.1029764    21.010  &lt; 2e-16 ***\nDESTIN_GRID1420  1.8376690  0.1013040    18.140  &lt; 2e-16 ***\nDESTIN_GRID1428  1.7900037  0.1368392    13.081  &lt; 2e-16 ***\nDESTIN_GRID1430  0.6632016  0.1033522     6.417 1.39e-10 ***\nDESTIN_GRID1431  3.0817473  0.1007635    30.584  &lt; 2e-16 ***\nDESTIN_GRID1432  3.0662246  0.1007279    30.441  &lt; 2e-16 ***\nDESTIN_GRID1433  1.6591122  0.1027489    16.147  &lt; 2e-16 ***\nDESTIN_GRID1434  1.6091920  0.1012965    15.886  &lt; 2e-16 ***\nDESTIN_GRID1435  2.3436173  0.1009383    23.218  &lt; 2e-16 ***\nDESTIN_GRID1436  2.8113755  0.1008020    27.890  &lt; 2e-16 ***\nDESTIN_GRID1439  1.2537140  0.1015013    12.352  &lt; 2e-16 ***\nDESTIN_GRID1440  1.6407156  0.1015280    16.160  &lt; 2e-16 ***\nDESTIN_GRID1448  1.7891554  0.1017524    17.583  &lt; 2e-16 ***\nDESTIN_GRID1449  1.9077525  0.1008926    18.909  &lt; 2e-16 ***\nDESTIN_GRID1450  2.5046012  0.1008642    24.831  &lt; 2e-16 ***\nDESTIN_GRID1451  3.3426137  0.1007284    33.184  &lt; 2e-16 ***\nDESTIN_GRID1452  1.3065098  0.1011620    12.915  &lt; 2e-16 ***\nDESTIN_GRID1453  2.3183690  0.1008034    22.999  &lt; 2e-16 ***\nDESTIN_GRID1454  1.9105728  0.1015414    18.816  &lt; 2e-16 ***\nDESTIN_GRID1455  3.1437936  0.1007468    31.205  &lt; 2e-16 ***\nDESTIN_GRID1456  2.1748887  0.1008352    21.569  &lt; 2e-16 ***\nDESTIN_GRID1457  2.6629555  0.1007830    26.423  &lt; 2e-16 ***\nDESTIN_GRID1458  0.9243381  0.1038414     8.901  &lt; 2e-16 ***\nDESTIN_GRID1468  3.6148787  0.1012679    35.696  &lt; 2e-16 ***\nDESTIN_GRID1469  2.8923364  0.1007374    28.712  &lt; 2e-16 ***\nDESTIN_GRID1470  3.6320387  0.1007273    36.058  &lt; 2e-16 ***\nDESTIN_GRID1471  2.7633506  0.1007795    27.420  &lt; 2e-16 ***\nDESTIN_GRID1472  4.2128474  0.1006846    41.842  &lt; 2e-16 ***\nDESTIN_GRID1473  1.4083833  0.1010249    13.941  &lt; 2e-16 ***\nDESTIN_GRID1474  3.3871304  0.1007181    33.630  &lt; 2e-16 ***\nDESTIN_GRID1475  0.6106294  0.1016921     6.005 1.92e-09 ***\nDESTIN_GRID1476  1.2088802  0.1012467    11.940  &lt; 2e-16 ***\nDESTIN_GRID1477  0.7695683  0.1020792     7.539 4.74e-14 ***\nDESTIN_GRID1486  0.6673563  0.1051244     6.348 2.18e-10 ***\nDESTIN_GRID1487  2.3950047  0.1008108    23.757  &lt; 2e-16 ***\nDESTIN_GRID1488  2.8016638  0.1009212    27.761  &lt; 2e-16 ***\nDESTIN_GRID1489  2.4123119  0.1008429    23.921  &lt; 2e-16 ***\nDESTIN_GRID1490  2.7164043  0.1009386    26.911  &lt; 2e-16 ***\nDESTIN_GRID1491  2.0347096  0.1008356    20.178  &lt; 2e-16 ***\nDESTIN_GRID1492  2.2166429  0.1008076    21.989  &lt; 2e-16 ***\nDESTIN_GRID1493  2.7856183  0.1007400    27.652  &lt; 2e-16 ***\nDESTIN_GRID1494  2.0712001  0.1009008    20.527  &lt; 2e-16 ***\nDESTIN_GRID1506 -0.9764845  0.1400090    -6.974 3.07e-12 ***\nDESTIN_GRID1507  3.0525041  0.1007317    30.303  &lt; 2e-16 ***\nDESTIN_GRID1508  3.2102959  0.1007317    31.870  &lt; 2e-16 ***\nDESTIN_GRID1509  2.2937271  0.1016775    22.559  &lt; 2e-16 ***\nDESTIN_GRID1510  2.0690720  0.1008592    20.514  &lt; 2e-16 ***\nDESTIN_GRID1512  2.6698156  0.1007496    26.500  &lt; 2e-16 ***\nDESTIN_GRID1513  1.2900920  0.1012448    12.742  &lt; 2e-16 ***\nDESTIN_GRID1514  1.0632778  0.1013473    10.491  &lt; 2e-16 ***\nDESTIN_GRID1524  2.7207234  0.1010485    26.925  &lt; 2e-16 ***\nDESTIN_GRID1525  1.7141685  0.1010144    16.970  &lt; 2e-16 ***\nDESTIN_GRID1526  2.5975945  0.1007997    25.770  &lt; 2e-16 ***\nDESTIN_GRID1527  2.7687805  0.1008737    27.448  &lt; 2e-16 ***\nDESTIN_GRID1528  2.0537883  0.1008782    20.359  &lt; 2e-16 ***\nDESTIN_GRID1529  1.5156065  0.1011313    14.987  &lt; 2e-16 ***\nDESTIN_GRID1530  1.0468830  0.1014327    10.321  &lt; 2e-16 ***\nDESTIN_GRID1531  2.8994552  0.1007468    28.780  &lt; 2e-16 ***\nDESTIN_GRID1532  0.9916787  0.1015712     9.763  &lt; 2e-16 ***\nDESTIN_GRID1544  2.3071569  0.1009306    22.859  &lt; 2e-16 ***\nDESTIN_GRID1545  1.6743585  0.1009580    16.585  &lt; 2e-16 ***\nDESTIN_GRID1546  2.5017739  0.1007824    24.824  &lt; 2e-16 ***\nDESTIN_GRID1547  2.8695746  0.1007563    28.480  &lt; 2e-16 ***\nDESTIN_GRID1548  2.6517313  0.1007761    26.313  &lt; 2e-16 ***\nDESTIN_GRID1549  3.5644827  0.1007151    35.392  &lt; 2e-16 ***\nDESTIN_GRID1550  2.7440357  0.1007412    27.238  &lt; 2e-16 ***\nDESTIN_GRID1551  0.6419919  0.1017850     6.307 2.84e-10 ***\nDESTIN_GRID1552  1.6739102  0.1009724    16.578  &lt; 2e-16 ***\nDESTIN_GRID156   1.4998899  0.1095148    13.696  &lt; 2e-16 ***\nDESTIN_GRID1563  2.8282716  0.1008011    28.058  &lt; 2e-16 ***\nDESTIN_GRID1564  2.8121409  0.1007516    27.912  &lt; 2e-16 ***\nDESTIN_GRID1565  2.9977662  0.1007397    29.758  &lt; 2e-16 ***\nDESTIN_GRID1566  1.9769992  0.1010028    19.574  &lt; 2e-16 ***\nDESTIN_GRID1567  2.9747577  0.1007509    29.526  &lt; 2e-16 ***\nDESTIN_GRID1568  2.5048474  0.1007603    24.859  &lt; 2e-16 ***\nDESTIN_GRID1569  1.5380859  0.1009512    15.236  &lt; 2e-16 ***\nDESTIN_GRID1570  2.6799105  0.1007630    26.596  &lt; 2e-16 ***\nDESTIN_GRID1571  0.0682485  0.1017288     0.671 0.502293    \nDESTIN_GRID158   2.8277359  0.1017125    27.801  &lt; 2e-16 ***\nDESTIN_GRID1582  1.8643017  0.1010407    18.451  &lt; 2e-16 ***\nDESTIN_GRID1583  3.1467506  0.1007219    31.242  &lt; 2e-16 ***\nDESTIN_GRID1584  3.0195926  0.1007394    29.974  &lt; 2e-16 ***\nDESTIN_GRID1585  2.4703209  0.1008456    24.496  &lt; 2e-16 ***\nDESTIN_GRID1587  2.8535542  0.1007488    28.323  &lt; 2e-16 ***\nDESTIN_GRID1588  3.8700600  0.1006906    38.435  &lt; 2e-16 ***\nDESTIN_GRID1589  3.3656028  0.1007115    33.418  &lt; 2e-16 ***\nDESTIN_GRID159   2.4668470  0.1011482    24.388  &lt; 2e-16 ***\nDESTIN_GRID1590  2.3243080  0.1008064    23.057  &lt; 2e-16 ***\nDESTIN_GRID1591  0.4618062  0.1031794     4.476 7.61e-06 ***\nDESTIN_GRID160   0.2938874  0.1040318     2.825 0.004728 ** \nDESTIN_GRID1601  2.5916068  0.1008305    25.703  &lt; 2e-16 ***\nDESTIN_GRID1602  2.2480584  0.1008638    22.288  &lt; 2e-16 ***\nDESTIN_GRID1603  3.2384862  0.1007722    32.137  &lt; 2e-16 ***\nDESTIN_GRID1604  4.2252605  0.1009029    41.875  &lt; 2e-16 ***\nDESTIN_GRID1606  1.9544600  0.1008681    19.376  &lt; 2e-16 ***\nDESTIN_GRID1607  1.6906626  0.1009294    16.751  &lt; 2e-16 ***\nDESTIN_GRID1608  3.7976165  0.1006939    37.714  &lt; 2e-16 ***\nDESTIN_GRID1609  1.7276419  0.1008851    17.125  &lt; 2e-16 ***\nDESTIN_GRID1610  1.0811320  0.1027904    10.518  &lt; 2e-16 ***\nDESTIN_GRID1620  2.9643660  0.1007748    29.416  &lt; 2e-16 ***\nDESTIN_GRID1621  2.6675244  0.1008112    26.461  &lt; 2e-16 ***\nDESTIN_GRID1622  2.9312966  0.1008839    29.056  &lt; 2e-16 ***\nDESTIN_GRID1623  2.7733489  0.1008114    27.510  &lt; 2e-16 ***\nDESTIN_GRID1624  4.2685280  0.1009404    42.288  &lt; 2e-16 ***\nDESTIN_GRID1625  0.6441879  0.1027030     6.272 3.56e-10 ***\nDESTIN_GRID1626  2.5065138  0.1007866    24.870  &lt; 2e-16 ***\nDESTIN_GRID1627  2.2648155  0.1007914    22.470  &lt; 2e-16 ***\nDESTIN_GRID1628  2.3958258  0.1007856    23.772  &lt; 2e-16 ***\nDESTIN_GRID1629  1.5668317  0.1010432    15.507  &lt; 2e-16 ***\nDESTIN_GRID1630 -0.0333780  0.1128496    -0.296 0.767402    \nDESTIN_GRID1639  2.4402254  0.1009332    24.177  &lt; 2e-16 ***\nDESTIN_GRID1640  3.4078709  0.1007073    33.839  &lt; 2e-16 ***\nDESTIN_GRID1641  3.5745846  0.1007063    35.495  &lt; 2e-16 ***\nDESTIN_GRID1645  0.9192519  0.1013421     9.071  &lt; 2e-16 ***\nDESTIN_GRID1646  2.0852274  0.1008158    20.684  &lt; 2e-16 ***\nDESTIN_GRID1647  3.7095670  0.1006981    36.838  &lt; 2e-16 ***\nDESTIN_GRID1648 -0.0214651  0.1096420    -0.196 0.844787    \nDESTIN_GRID1658  3.3942085  0.1007386    33.693  &lt; 2e-16 ***\nDESTIN_GRID1659  2.1997465  0.1008793    21.806  &lt; 2e-16 ***\nDESTIN_GRID1660  2.0424843  0.1008630    20.250  &lt; 2e-16 ***\nDESTIN_GRID1661  2.1712049  0.1009281    21.512  &lt; 2e-16 ***\nDESTIN_GRID1663  2.2466688  0.1015660    22.120  &lt; 2e-16 ***\nDESTIN_GRID1665  0.9527959  0.1013501     9.401  &lt; 2e-16 ***\nDESTIN_GRID1666  3.3608306  0.1007065    33.373  &lt; 2e-16 ***\nDESTIN_GRID1667  0.4595733  0.1033873     4.445 8.78e-06 ***\nDESTIN_GRID1668  0.8813809  0.1021809     8.626  &lt; 2e-16 ***\nDESTIN_GRID1677  2.4596633  0.1008092    24.399  &lt; 2e-16 ***\nDESTIN_GRID1678  2.7616617  0.1007698    27.406  &lt; 2e-16 ***\nDESTIN_GRID1679  2.9869974  0.1007551    29.646  &lt; 2e-16 ***\nDESTIN_GRID1682  3.2317168  0.1010027    31.996  &lt; 2e-16 ***\nDESTIN_GRID1684  2.1330634  0.1023297    20.845  &lt; 2e-16 ***\nDESTIN_GRID1685  2.2185169  0.1008260    22.003  &lt; 2e-16 ***\nDESTIN_GRID1696  2.0635585  0.1010733    20.416  &lt; 2e-16 ***\nDESTIN_GRID1697  0.7480500  0.1026810     7.285 3.21e-13 ***\nDESTIN_GRID1698  0.4977275  0.1031387     4.826 1.39e-06 ***\nDESTIN_GRID1699  2.8744341  0.1007669    28.526  &lt; 2e-16 ***\nDESTIN_GRID1702  2.2838735  0.1016159    22.476  &lt; 2e-16 ***\nDESTIN_GRID1704  2.1697139  0.1008369    21.517  &lt; 2e-16 ***\nDESTIN_GRID1705  0.2749571  0.1025933     2.680 0.007361 ** \nDESTIN_GRID1715  2.7500924  0.1007811    27.288  &lt; 2e-16 ***\nDESTIN_GRID1716  1.9789672  0.1009400    19.605  &lt; 2e-16 ***\nDESTIN_GRID1717  1.4751332  0.1013008    14.562  &lt; 2e-16 ***\nDESTIN_GRID1718  1.0861569  0.1036613    10.478  &lt; 2e-16 ***\nDESTIN_GRID1721  1.6572345  0.1026299    16.148  &lt; 2e-16 ***\nDESTIN_GRID1723  0.6501058  0.1020355     6.371 1.87e-10 ***\nDESTIN_GRID1735  1.9251995  0.1010216    19.057  &lt; 2e-16 ***\nDESTIN_GRID1736  3.0071221  0.1008664    29.813  &lt; 2e-16 ***\nDESTIN_GRID1737  3.0483179  0.1007586    30.254  &lt; 2e-16 ***\nDESTIN_GRID1740  2.7969764  0.1012197    27.633  &lt; 2e-16 ***\nDESTIN_GRID1742  0.4687980  0.1024933     4.574 4.79e-06 ***\nDESTIN_GRID1753  2.2164710  0.1009241    21.962  &lt; 2e-16 ***\nDESTIN_GRID1754  3.0083707  0.1007524    29.859  &lt; 2e-16 ***\nDESTIN_GRID1755  1.8452558  0.1009749    18.274  &lt; 2e-16 ***\nDESTIN_GRID1758  1.6888429  0.1023819    16.496  &lt; 2e-16 ***\nDESTIN_GRID177   1.5235185  0.1049738    14.513  &lt; 2e-16 ***\nDESTIN_GRID1773  1.9536492  0.1010759    19.329  &lt; 2e-16 ***\nDESTIN_GRID1774  4.1481055  0.1006852    41.199  &lt; 2e-16 ***\nDESTIN_GRID1775  1.8072335  0.1010948    17.877  &lt; 2e-16 ***\nDESTIN_GRID1776  2.4447564  0.1008257    24.247  &lt; 2e-16 ***\nDESTIN_GRID1778  3.5253892  0.1012616    34.815  &lt; 2e-16 ***\nDESTIN_GRID178   2.6694706  0.1011131    26.401  &lt; 2e-16 ***\nDESTIN_GRID179  -0.4750420  0.1257518    -3.778 0.000158 ***\nDESTIN_GRID1791  2.1602628  0.1009827    21.392  &lt; 2e-16 ***\nDESTIN_GRID1792  2.5077458  0.1008685    24.862  &lt; 2e-16 ***\nDESTIN_GRID1793  2.1846303  0.1008924    21.653  &lt; 2e-16 ***\nDESTIN_GRID1794  2.9605940  0.1009037    29.341  &lt; 2e-16 ***\nDESTIN_GRID1795  2.4727111  0.1008334    24.523  &lt; 2e-16 ***\nDESTIN_GRID1796  2.5943609  0.1008432    25.727  &lt; 2e-16 ***\nDESTIN_GRID1797  2.7214382  0.1008192    26.993  &lt; 2e-16 ***\nDESTIN_GRID1811  2.2843435  0.1008572    22.649  &lt; 2e-16 ***\nDESTIN_GRID1812  2.5705376  0.1007730    25.508  &lt; 2e-16 ***\nDESTIN_GRID1813  3.1227289  0.1007475    30.996  &lt; 2e-16 ***\nDESTIN_GRID1814  3.3066997  0.1007401    32.824  &lt; 2e-16 ***\nDESTIN_GRID1815  2.2643956  0.1008489    22.453  &lt; 2e-16 ***\nDESTIN_GRID1816  3.4420593  0.1007620    34.160  &lt; 2e-16 ***\nDESTIN_GRID1817  0.0138856  0.1049284     0.132 0.894720    \nDESTIN_GRID1830  2.8767157  0.1008697    28.519  &lt; 2e-16 ***\nDESTIN_GRID1831  2.9705326  0.1007515    29.484  &lt; 2e-16 ***\nDESTIN_GRID1832  3.2485409  0.1007293    32.250  &lt; 2e-16 ***\nDESTIN_GRID1833  2.1789153  0.1008579    21.604  &lt; 2e-16 ***\nDESTIN_GRID1834  1.6105695  0.1013293    15.894  &lt; 2e-16 ***\nDESTIN_GRID1835  3.0190718  0.1007494    29.966  &lt; 2e-16 ***\nDESTIN_GRID1849  1.3878308  0.1012659    13.705  &lt; 2e-16 ***\nDESTIN_GRID1850  2.4885074  0.1008117    24.685  &lt; 2e-16 ***\nDESTIN_GRID1851  2.2687831  0.1013379    22.388  &lt; 2e-16 ***\nDESTIN_GRID1852  3.3236955  0.1007174    33.000  &lt; 2e-16 ***\nDESTIN_GRID1853  1.5962582  0.1010494    15.797  &lt; 2e-16 ***\nDESTIN_GRID1854  1.6877720  0.1009966    16.711  &lt; 2e-16 ***\nDESTIN_GRID1855  0.1031744  0.1043960     0.988 0.323007    \nDESTIN_GRID1868  2.4353222  0.1008620    24.145  &lt; 2e-16 ***\nDESTIN_GRID1869  2.3484532  0.1009029    23.274  &lt; 2e-16 ***\nDESTIN_GRID1870  0.7659883  0.1057755     7.242 4.43e-13 ***\nDESTIN_GRID1871  4.5518161  0.1006815    45.210  &lt; 2e-16 ***\nDESTIN_GRID1872  1.4110697  0.1015075    13.901  &lt; 2e-16 ***\nDESTIN_GRID1873  1.9706285  0.1009821    19.515  &lt; 2e-16 ***\nDESTIN_GRID1887  2.2739931  0.1009205    22.533  &lt; 2e-16 ***\nDESTIN_GRID1888  3.5923202  0.1007253    35.665  &lt; 2e-16 ***\nDESTIN_GRID1889  3.5209266  0.1007333    34.953  &lt; 2e-16 ***\nDESTIN_GRID1890  2.4735937  0.1008077    24.538  &lt; 2e-16 ***\nDESTIN_GRID1891  2.0257612  0.1010438    20.048  &lt; 2e-16 ***\nDESTIN_GRID1892  4.2373868  0.1006904    42.083  &lt; 2e-16 ***\nDESTIN_GRID1893 -0.3774916  0.1207142    -3.127 0.001765 ** \nDESTIN_GRID1905  1.4014731  0.1191265    11.765  &lt; 2e-16 ***\nDESTIN_GRID1906  0.9093453  0.1017449     8.937  &lt; 2e-16 ***\nDESTIN_GRID1907  3.7561186  0.1007213    37.292  &lt; 2e-16 ***\nDESTIN_GRID1908  3.4880429  0.1007604    34.617  &lt; 2e-16 ***\nDESTIN_GRID1909  2.4424812  0.1008133    24.228  &lt; 2e-16 ***\nDESTIN_GRID1910  1.4385023  0.1012921    14.202  &lt; 2e-16 ***\nDESTIN_GRID1911  0.9349244  0.1059454     8.825  &lt; 2e-16 ***\nDESTIN_GRID1926  2.6924786  0.1009951    26.659  &lt; 2e-16 ***\nDESTIN_GRID1927  2.4212243  0.1011421    23.939  &lt; 2e-16 ***\nDESTIN_GRID1928  2.5047974  0.1007917    24.851  &lt; 2e-16 ***\nDESTIN_GRID1929  2.3131697  0.1009001    22.925  &lt; 2e-16 ***\nDESTIN_GRID1930  2.1310897  0.1009230    21.116  &lt; 2e-16 ***\nDESTIN_GRID1944  1.5935443  0.1017260    15.665  &lt; 2e-16 ***\nDESTIN_GRID1945  1.7725579  0.1012405    17.508  &lt; 2e-16 ***\nDESTIN_GRID1946  2.0580749  0.1009786    20.381  &lt; 2e-16 ***\nDESTIN_GRID1947  3.8632243  0.1007014    38.363  &lt; 2e-16 ***\nDESTIN_GRID1948  2.6956778  0.1007780    26.749  &lt; 2e-16 ***\nDESTIN_GRID1949  1.5012400  0.1012605    14.826  &lt; 2e-16 ***\nDESTIN_GRID195   2.8232796  0.1047110    26.963  &lt; 2e-16 ***\nDESTIN_GRID196   1.3651837  0.1016721    13.427  &lt; 2e-16 ***\nDESTIN_GRID1965  2.9562913  0.1007998    29.328  &lt; 2e-16 ***\nDESTIN_GRID1966  1.5228230  0.1012522    15.040  &lt; 2e-16 ***\nDESTIN_GRID1967  1.8705397  0.1009128    18.536  &lt; 2e-16 ***\nDESTIN_GRID1968  2.4973166  0.1008734    24.757  &lt; 2e-16 ***\nDESTIN_GRID197   3.1512553  0.1010259    31.193  &lt; 2e-16 ***\nDESTIN_GRID1983  3.4709453  0.1008739    34.409  &lt; 2e-16 ***\nDESTIN_GRID1984  1.8532655  0.1012280    18.308  &lt; 2e-16 ***\nDESTIN_GRID1985  2.6686978  0.1008528    26.461  &lt; 2e-16 ***\nDESTIN_GRID1986  2.5342938  0.1008106    25.139  &lt; 2e-16 ***\nDESTIN_GRID1987  1.4148242  0.1067622    13.252  &lt; 2e-16 ***\nDESTIN_GRID2002  3.3486251  0.1014924    32.994  &lt; 2e-16 ***\nDESTIN_GRID2003  2.9848402  0.1009841    29.558  &lt; 2e-16 ***\nDESTIN_GRID2004  4.2115025  0.1009221    41.730  &lt; 2e-16 ***\nDESTIN_GRID2005  2.0244910  0.1010958    20.025  &lt; 2e-16 ***\nDESTIN_GRID2006  2.8147008  0.1008373    27.913  &lt; 2e-16 ***\nDESTIN_GRID2021  3.6955169  0.1011391    36.539  &lt; 2e-16 ***\nDESTIN_GRID2022  4.3076795  0.1010338    42.636  &lt; 2e-16 ***\nDESTIN_GRID2023  2.9426897  0.1010537    29.120  &lt; 2e-16 ***\nDESTIN_GRID2024  1.3826535  0.1015712    13.613  &lt; 2e-16 ***\nDESTIN_GRID2025  3.3536291  0.1013177    33.100  &lt; 2e-16 ***\nDESTIN_GRID2042  3.4138369  0.1013869    33.671  &lt; 2e-16 ***\nDESTIN_GRID2043  0.8211839  0.1040296     7.894 2.93e-15 ***\nDESTIN_GRID2044  2.4737021  0.1009144    24.513  &lt; 2e-16 ***\nDESTIN_GRID2045  3.8928558  0.1011928    38.470  &lt; 2e-16 ***\nDESTIN_GRID2061  2.0898489  0.1038777    20.118  &lt; 2e-16 ***\nDESTIN_GRID2062  1.7617247  0.1019801    17.275  &lt; 2e-16 ***\nDESTIN_GRID2063  2.4678500  0.1009366    24.450  &lt; 2e-16 ***\nDESTIN_GRID2064  1.5520783  0.1054143    14.724  &lt; 2e-16 ***\nDESTIN_GRID2079  1.0144992  0.1021555     9.931  &lt; 2e-16 ***\nDESTIN_GRID2082  1.6255149  0.1027270    15.824  &lt; 2e-16 ***\nDESTIN_GRID2083  2.0978205  0.1011371    20.742  &lt; 2e-16 ***\nDESTIN_GRID2098  3.3530312  0.1008159    33.259  &lt; 2e-16 ***\nDESTIN_GRID2099  3.5615534  0.1007864    35.338  &lt; 2e-16 ***\nDESTIN_GRID21    2.4090654  0.1125648    21.402  &lt; 2e-16 ***\nDESTIN_GRID2102  2.3601689  0.1010532    23.356  &lt; 2e-16 ***\nDESTIN_GRID2115  3.4007254  0.1019359    33.361  &lt; 2e-16 ***\nDESTIN_GRID2119  3.6916745  0.1007813    36.631  &lt; 2e-16 ***\nDESTIN_GRID2121  1.5946582  0.1014701    15.716  &lt; 2e-16 ***\nDESTIN_GRID2137  2.4128793  0.1010731    23.873  &lt; 2e-16 ***\nDESTIN_GRID2140  0.7163211  0.1048929     6.829 8.55e-12 ***\nDESTIN_GRID215   1.1923226  0.1052004    11.334  &lt; 2e-16 ***\nDESTIN_GRID2153  2.3540063  0.1036995    22.700  &lt; 2e-16 ***\nDESTIN_GRID2158  3.3725208  0.1008814    33.431  &lt; 2e-16 ***\nDESTIN_GRID216   2.0346668  0.1016862    20.009  &lt; 2e-16 ***\nDESTIN_GRID217   1.5893789  0.1051662    15.113  &lt; 2e-16 ***\nDESTIN_GRID2177  4.1357591  0.1007731    41.040  &lt; 2e-16 ***\nDESTIN_GRID2178  1.1792990  0.1033773    11.408  &lt; 2e-16 ***\nDESTIN_GRID2196  3.2814987  0.1012863    32.398  &lt; 2e-16 ***\nDESTIN_GRID2197  3.6327179  0.1009017    36.003  &lt; 2e-16 ***\nDESTIN_GRID2267  3.3535564  0.1023635    32.761  &lt; 2e-16 ***\nDESTIN_GRID233   3.8917007  0.1017919    38.232  &lt; 2e-16 ***\nDESTIN_GRID234   1.7662219  0.1024404    17.241  &lt; 2e-16 ***\nDESTIN_GRID235   2.9953752  0.1012850    29.574  &lt; 2e-16 ***\nDESTIN_GRID252   4.0555363  0.1016467    39.898  &lt; 2e-16 ***\nDESTIN_GRID253   2.5071500  0.1014607    24.711  &lt; 2e-16 ***\nDESTIN_GRID254   2.7881107  0.1013540    27.509  &lt; 2e-16 ***\nDESTIN_GRID270  -0.1788730  0.1636811    -1.093 0.274475    \nDESTIN_GRID271   2.7894189  0.1018529    27.387  &lt; 2e-16 ***\nDESTIN_GRID272   1.6208629  0.1019955    15.892  &lt; 2e-16 ***\nDESTIN_GRID290   4.0792293  0.1015466    40.171  &lt; 2e-16 ***\nDESTIN_GRID291   2.2843618  0.1033606    22.101  &lt; 2e-16 ***\nDESTIN_GRID292   3.4823689  0.1012472    34.395  &lt; 2e-16 ***\nDESTIN_GRID308   4.6436447  0.1012037    45.884  &lt; 2e-16 ***\nDESTIN_GRID309   3.3543983  0.1013286    33.104  &lt; 2e-16 ***\nDESTIN_GRID310   3.0611035  0.1011463    30.264  &lt; 2e-16 ***\nDESTIN_GRID329   3.4439718  0.1014551    33.946  &lt; 2e-16 ***\nDESTIN_GRID330   3.6547105  0.1008878    36.225  &lt; 2e-16 ***\nDESTIN_GRID347   4.0690704  0.1010062    40.285  &lt; 2e-16 ***\nDESTIN_GRID348   3.2932546  0.1009443    32.624  &lt; 2e-16 ***\nDESTIN_GRID349   2.8253624  0.1016523    27.794  &lt; 2e-16 ***\nDESTIN_GRID366   4.0395924  0.1014605    39.814  &lt; 2e-16 ***\nDESTIN_GRID367   3.8378448  0.1011359    37.947  &lt; 2e-16 ***\nDESTIN_GRID368   2.7266130  0.1007288    27.069  &lt; 2e-16 ***\nDESTIN_GRID369   3.7250652  0.1009539    36.899  &lt; 2e-16 ***\nDESTIN_GRID370   4.7460763  0.1007474    47.109  &lt; 2e-16 ***\nDESTIN_GRID385   1.8843877  0.1035197    18.203  &lt; 2e-16 ***\nDESTIN_GRID386   2.7567751  0.1011196    27.263  &lt; 2e-16 ***\nDESTIN_GRID387   0.1313549  0.1031781     1.273 0.202986    \nDESTIN_GRID388   2.9949169  0.1011324    29.614  &lt; 2e-16 ***\nDESTIN_GRID389   2.0105391  0.1029824    19.523  &lt; 2e-16 ***\nDESTIN_GRID40    3.8886211  0.1031248    37.708  &lt; 2e-16 ***\nDESTIN_GRID404   2.8196502  0.1030914    27.351  &lt; 2e-16 ***\nDESTIN_GRID405   2.4286227  0.1020058    23.809  &lt; 2e-16 ***\nDESTIN_GRID406   2.2992543  0.1012504    22.709  &lt; 2e-16 ***\nDESTIN_GRID407   2.2488980  0.1009080    22.287  &lt; 2e-16 ***\nDESTIN_GRID408   2.3709375  0.1012742    23.411  &lt; 2e-16 ***\nDESTIN_GRID42    3.5268778  0.1023863    34.447  &lt; 2e-16 ***\nDESTIN_GRID424   2.6162795  0.1011770    25.858  &lt; 2e-16 ***\nDESTIN_GRID425   2.0845202  0.1009792    20.643  &lt; 2e-16 ***\nDESTIN_GRID426   2.2609658  0.1008634    22.416  &lt; 2e-16 ***\nDESTIN_GRID427   2.4062627  0.1019089    23.612  &lt; 2e-16 ***\nDESTIN_GRID442   2.7806221  0.1029876    27.000  &lt; 2e-16 ***\nDESTIN_GRID443   1.0002425  0.1105499     9.048  &lt; 2e-16 ***\nDESTIN_GRID444   2.8310592  0.1009917    28.033  &lt; 2e-16 ***\nDESTIN_GRID445   1.0220382  0.1014177    10.078  &lt; 2e-16 ***\nDESTIN_GRID447  -0.1544202  0.1113678    -1.387 0.165570    \nDESTIN_GRID448   1.5431376  0.1029571    14.988  &lt; 2e-16 ***\nDESTIN_GRID461   3.2816349  0.1017482    32.253  &lt; 2e-16 ***\nDESTIN_GRID462   3.0098541  0.1011087    29.768  &lt; 2e-16 ***\nDESTIN_GRID463   2.4402172  0.1008501    24.196  &lt; 2e-16 ***\nDESTIN_GRID464   2.0827132  0.1008223    20.657  &lt; 2e-16 ***\nDESTIN_GRID465   3.4348261  0.1009175    34.036  &lt; 2e-16 ***\nDESTIN_GRID466   2.6419301  0.1013378    26.071  &lt; 2e-16 ***\nDESTIN_GRID467   1.1454899  0.1049723    10.912  &lt; 2e-16 ***\nDESTIN_GRID480   2.7429299  0.1045914    26.225  &lt; 2e-16 ***\nDESTIN_GRID481   5.0099892  0.1008300    49.687  &lt; 2e-16 ***\nDESTIN_GRID482   2.7205542  0.1010014    26.936  &lt; 2e-16 ***\nDESTIN_GRID483   3.8484782  0.1006849    38.223  &lt; 2e-16 ***\nDESTIN_GRID484   1.9575791  0.1008475    19.411  &lt; 2e-16 ***\nDESTIN_GRID486   1.7503065  0.1021684    17.132  &lt; 2e-16 ***\nDESTIN_GRID487   0.8622898  0.1060495     8.131 4.26e-16 ***\nDESTIN_GRID488   0.4592610  0.1093450     4.200 2.67e-05 ***\nDESTIN_GRID489  -1.6443260  0.2695290    -6.101 1.06e-09 ***\nDESTIN_GRID499   3.5400215  0.1021424    34.658  &lt; 2e-16 ***\nDESTIN_GRID500   4.2176286  0.1012135    41.671  &lt; 2e-16 ***\nDESTIN_GRID501   2.1675951  0.1009933    21.463  &lt; 2e-16 ***\nDESTIN_GRID502   1.9048669  0.1008505    18.888  &lt; 2e-16 ***\nDESTIN_GRID503   2.6982592  0.1009354    26.733  &lt; 2e-16 ***\nDESTIN_GRID507   0.2432747  0.1137464     2.139 0.032456 *  \nDESTIN_GRID508   2.5484221  0.1019540    24.996  &lt; 2e-16 ***\nDESTIN_GRID509   0.0087350  0.1193800     0.073 0.941671    \nDESTIN_GRID518   2.4005683  0.1063203    22.579  &lt; 2e-16 ***\nDESTIN_GRID519   4.4410244  0.1011601    43.901  &lt; 2e-16 ***\nDESTIN_GRID520   3.0705958  0.1018304    30.154  &lt; 2e-16 ***\nDESTIN_GRID521   4.3566818  0.1006674    43.278  &lt; 2e-16 ***\nDESTIN_GRID522   2.2849368  0.1008239    22.663  &lt; 2e-16 ***\nDESTIN_GRID524  -1.4428452  0.1402101   -10.291  &lt; 2e-16 ***\nDESTIN_GRID528  -0.1195624  0.1178370    -1.015 0.310276    \nDESTIN_GRID529  -0.9551748  0.2086317    -4.578 4.69e-06 ***\nDESTIN_GRID530   1.3059929  0.1063776    12.277  &lt; 2e-16 ***\nDESTIN_GRID537   1.3373716  0.1036858    12.898  &lt; 2e-16 ***\nDESTIN_GRID538   3.5745173  0.1015658    35.194  &lt; 2e-16 ***\nDESTIN_GRID539   3.4514656  0.1008096    34.237  &lt; 2e-16 ***\nDESTIN_GRID540   2.4694320  0.1007669    24.506  &lt; 2e-16 ***\nDESTIN_GRID541   2.0298559  0.1017564    19.948  &lt; 2e-16 ***\nDESTIN_GRID547   0.3203643  0.1129352     2.837 0.004558 ** \nDESTIN_GRID548   0.6466199  0.1120578     5.770 7.91e-09 ***\nDESTIN_GRID557   2.0551229  0.1016781    20.212  &lt; 2e-16 ***\nDESTIN_GRID558   3.1049881  0.1010236    30.735  &lt; 2e-16 ***\nDESTIN_GRID559   1.8763317  0.1010477    18.569  &lt; 2e-16 ***\nDESTIN_GRID560   2.0560722  0.1008350    20.390  &lt; 2e-16 ***\nDESTIN_GRID562   2.4766048  0.1012260    24.466  &lt; 2e-16 ***\nDESTIN_GRID577   2.7382815  0.1012250    27.051  &lt; 2e-16 ***\nDESTIN_GRID578   2.3026257  0.1008027    22.843  &lt; 2e-16 ***\nDESTIN_GRID595   3.3210995  0.1008971    32.916  &lt; 2e-16 ***\nDESTIN_GRID596   2.6554244  0.1008292    26.336  &lt; 2e-16 ***\nDESTIN_GRID597   2.6427686  0.1008107    26.215  &lt; 2e-16 ***\nDESTIN_GRID598   2.9625766  0.1007250    29.413  &lt; 2e-16 ***\nDESTIN_GRID60    2.3378664  0.1106957    21.120  &lt; 2e-16 ***\nDESTIN_GRID600   1.5958214  0.1013937    15.739  &lt; 2e-16 ***\nDESTIN_GRID61    3.3231062  0.1016364    32.696  &lt; 2e-16 ***\nDESTIN_GRID613   3.2607186  0.1010750    32.260  &lt; 2e-16 ***\nDESTIN_GRID614   1.8053575  0.1015887    17.771  &lt; 2e-16 ***\nDESTIN_GRID615   2.8585955  0.1007659    28.369  &lt; 2e-16 ***\nDESTIN_GRID616   4.5511196  0.1006845    45.202  &lt; 2e-16 ***\nDESTIN_GRID617   0.8871592  0.1021883     8.682  &lt; 2e-16 ***\nDESTIN_GRID62    3.3640434  0.1024207    32.845  &lt; 2e-16 ***\nDESTIN_GRID633   2.8716079  0.1010441    28.419  &lt; 2e-16 ***\nDESTIN_GRID634   2.3376270  0.1008803    23.172  &lt; 2e-16 ***\nDESTIN_GRID635   0.3786775  0.1024556     3.696 0.000219 ***\nDESTIN_GRID636   2.6609127  0.1007521    26.410  &lt; 2e-16 ***\nDESTIN_GRID638   2.2032680  0.1012252    21.766  &lt; 2e-16 ***\nDESTIN_GRID654   2.4571236  0.1010243    24.322  &lt; 2e-16 ***\nDESTIN_GRID657   0.2803702  0.1039560     2.697 0.006997 ** \nDESTIN_GRID671   3.5204598  0.1009169    34.885  &lt; 2e-16 ***\nDESTIN_GRID673   0.2737013  0.1026704     2.666 0.007680 ** \nDESTIN_GRID674   2.7723097  0.1007539    27.516  &lt; 2e-16 ***\nDESTIN_GRID689   3.7084567  0.1010109    36.713  &lt; 2e-16 ***\nDESTIN_GRID690   1.5636799  0.1015122    15.404  &lt; 2e-16 ***\nDESTIN_GRID691   0.4353597  0.1025383     4.246 2.18e-05 ***\nDESTIN_GRID692   3.2416058  0.1007068    32.189  &lt; 2e-16 ***\nDESTIN_GRID693   2.5810005  0.1010997    25.529  &lt; 2e-16 ***\nDESTIN_GRID695   1.8366487  0.1008782    18.207  &lt; 2e-16 ***\nDESTIN_GRID700   1.2865122  0.1075890    11.958  &lt; 2e-16 ***\nDESTIN_GRID710   0.4895154  0.1027960     4.762 1.92e-06 ***\nDESTIN_GRID711   2.3063065  0.1007916    22.882  &lt; 2e-16 ***\nDESTIN_GRID712   2.5419955  0.1007735    25.225  &lt; 2e-16 ***\nDESTIN_GRID713   1.5975612  0.1012211    15.783  &lt; 2e-16 ***\nDESTIN_GRID714   0.4205196  0.1016666     4.136 3.53e-05 ***\nDESTIN_GRID715   0.6278466  0.1020818     6.150 7.73e-10 ***\nDESTIN_GRID727   2.5937941  0.1016107    25.527  &lt; 2e-16 ***\nDESTIN_GRID728   2.6562071  0.1008392    26.341  &lt; 2e-16 ***\nDESTIN_GRID729   3.7921394  0.1006950    37.660  &lt; 2e-16 ***\nDESTIN_GRID730   2.2433033  0.1008077    22.253  &lt; 2e-16 ***\nDESTIN_GRID731   1.9663586  0.1008973    19.489  &lt; 2e-16 ***\nDESTIN_GRID732   1.0811957  0.1021591    10.583  &lt; 2e-16 ***\nDESTIN_GRID733   2.4779111  0.1007556    24.593  &lt; 2e-16 ***\nDESTIN_GRID734   1.8992210  0.1010006    18.804  &lt; 2e-16 ***\nDESTIN_GRID738   2.3799796  0.1025314    23.212  &lt; 2e-16 ***\nDESTIN_GRID746   2.6741950  0.1015569    26.332  &lt; 2e-16 ***\nDESTIN_GRID748   2.4831242  0.1008264    24.628  &lt; 2e-16 ***\nDESTIN_GRID749   2.1310926  0.1008421    21.133  &lt; 2e-16 ***\nDESTIN_GRID750   2.5039470  0.1007623    24.850  &lt; 2e-16 ***\nDESTIN_GRID751   1.8708675  0.1009439    18.534  &lt; 2e-16 ***\nDESTIN_GRID752   0.6671617  0.1014524     6.576 4.83e-11 ***\nDESTIN_GRID753   3.8542202  0.1006897    38.278  &lt; 2e-16 ***\nDESTIN_GRID754   3.9868048  0.1007389    39.576  &lt; 2e-16 ***\nDESTIN_GRID757   2.0118998  0.1027806    19.575  &lt; 2e-16 ***\nDESTIN_GRID764   2.3280908  0.1022318    22.773  &lt; 2e-16 ***\nDESTIN_GRID766   2.3258643  0.1008685    23.058  &lt; 2e-16 ***\nDESTIN_GRID767   3.1342262  0.1007486    31.109  &lt; 2e-16 ***\nDESTIN_GRID768   2.2058677  0.1008381    21.875  &lt; 2e-16 ***\nDESTIN_GRID769   1.6245811  0.1009763    16.089  &lt; 2e-16 ***\nDESTIN_GRID770   2.4002660  0.1007887    23.815  &lt; 2e-16 ***\nDESTIN_GRID771   1.9479169  0.1008283    19.319  &lt; 2e-16 ***\nDESTIN_GRID772   1.8838249  0.1009991    18.652  &lt; 2e-16 ***\nDESTIN_GRID773   1.2591907  0.1010178    12.465  &lt; 2e-16 ***\nDESTIN_GRID774   2.8597002  0.1016152    28.142  &lt; 2e-16 ***\nDESTIN_GRID775   1.9589108  0.1025686    19.099  &lt; 2e-16 ***\nDESTIN_GRID776   0.9345432  0.1053940     8.867  &lt; 2e-16 ***\nDESTIN_GRID78    3.0236528  0.1063426    28.433  &lt; 2e-16 ***\nDESTIN_GRID784   3.2023958  0.1011416    31.663  &lt; 2e-16 ***\nDESTIN_GRID785   3.6604487  0.1007557    36.330  &lt; 2e-16 ***\nDESTIN_GRID786   3.0915161  0.1007850    30.674  &lt; 2e-16 ***\nDESTIN_GRID787   3.9409157  0.1008121    39.092  &lt; 2e-16 ***\nDESTIN_GRID788   3.6624266  0.1006917    36.373  &lt; 2e-16 ***\nDESTIN_GRID789   3.7575239  0.1007405    37.299  &lt; 2e-16 ***\nDESTIN_GRID79    0.2890075  0.1312860     2.201 0.027711 *  \nDESTIN_GRID790   2.4643584  0.1008012    24.448  &lt; 2e-16 ***\nDESTIN_GRID791   2.4563573  0.1009552    24.331  &lt; 2e-16 ***\nDESTIN_GRID792   0.7241152  0.1014870     7.135 9.67e-13 ***\nDESTIN_GRID793   1.4153049  0.1041398    13.590  &lt; 2e-16 ***\nDESTIN_GRID794   1.7964100  0.1022933    17.561  &lt; 2e-16 ***\nDESTIN_GRID795   2.6726304  0.1016437    26.294  &lt; 2e-16 ***\nDESTIN_GRID80    2.6608680  0.1021193    26.056  &lt; 2e-16 ***\nDESTIN_GRID803   2.4143221  0.1010214    23.899  &lt; 2e-16 ***\nDESTIN_GRID804   1.1032290  0.1015349    10.866  &lt; 2e-16 ***\nDESTIN_GRID805   2.0845859  0.1014326    20.551  &lt; 2e-16 ***\nDESTIN_GRID806   2.6765801  0.1007667    26.562  &lt; 2e-16 ***\nDESTIN_GRID807   1.8093519  0.1016886    17.793  &lt; 2e-16 ***\nDESTIN_GRID809   2.7059556  0.1007417    26.860  &lt; 2e-16 ***\nDESTIN_GRID81    3.0471549  0.1026062    29.698  &lt; 2e-16 ***\nDESTIN_GRID810   1.1319633  0.1012582    11.179  &lt; 2e-16 ***\nDESTIN_GRID811   2.0656130  0.1010492    20.442  &lt; 2e-16 ***\nDESTIN_GRID812  -0.1179340  0.1055297    -1.118 0.263762    \nDESTIN_GRID813   0.4496360  0.1045056     4.303 1.69e-05 ***\nDESTIN_GRID814   2.5969955  0.1019514    25.473  &lt; 2e-16 ***\nDESTIN_GRID82   -0.8938192  0.7144434    -1.251 0.210909    \nDESTIN_GRID822   2.6925074  0.1012405    26.595  &lt; 2e-16 ***\nDESTIN_GRID823   2.4033975  0.1008302    23.836  &lt; 2e-16 ***\nDESTIN_GRID824   1.3522588  0.1012926    13.350  &lt; 2e-16 ***\nDESTIN_GRID825   3.7546452  0.1007313    37.274  &lt; 2e-16 ***\nDESTIN_GRID826   1.8197154  0.1008991    18.035  &lt; 2e-16 ***\nDESTIN_GRID829   2.1673312  0.1008109    21.499  &lt; 2e-16 ***\nDESTIN_GRID831   3.0231982  0.1008072    29.990  &lt; 2e-16 ***\nDESTIN_GRID832  -0.4701259  0.1077240    -4.364 1.28e-05 ***\nDESTIN_GRID833   1.3033357  0.1017233    12.813  &lt; 2e-16 ***\nDESTIN_GRID840   1.2761836  0.1021299    12.496  &lt; 2e-16 ***\nDESTIN_GRID841   2.0800941  0.1008935    20.617  &lt; 2e-16 ***\nDESTIN_GRID842   3.1523910  0.1007136    31.301  &lt; 2e-16 ***\nDESTIN_GRID843   2.0577785  0.1011657    20.341  &lt; 2e-16 ***\nDESTIN_GRID844   0.6874497  0.1034473     6.645 3.02e-11 ***\nDESTIN_GRID845   2.2646396  0.1009353    22.437  &lt; 2e-16 ***\nDESTIN_GRID846   2.1276069  0.1009295    21.080  &lt; 2e-16 ***\nDESTIN_GRID847   3.8557406  0.1006852    38.295  &lt; 2e-16 ***\nDESTIN_GRID850  -0.8770549  0.1693067    -5.180 2.22e-07 ***\nDESTIN_GRID851   3.7238748  0.1007265    36.970  &lt; 2e-16 ***\nDESTIN_GRID852   0.7272652  0.1024444     7.099 1.26e-12 ***\nDESTIN_GRID859   1.2400105  0.1016586    12.198  &lt; 2e-16 ***\nDESTIN_GRID860   3.2733367  0.1007731    32.482  &lt; 2e-16 ***\nDESTIN_GRID861   3.9312491  0.1006894    39.043  &lt; 2e-16 ***\nDESTIN_GRID862   2.9861460  0.1009318    29.586  &lt; 2e-16 ***\nDESTIN_GRID863   2.4558550  0.1010245    24.310  &lt; 2e-16 ***\nDESTIN_GRID864   0.5838474  0.1019500     5.727 1.02e-08 ***\nDESTIN_GRID865   3.1473168  0.1007421    31.241  &lt; 2e-16 ***\nDESTIN_GRID866   1.6486258  0.1010409    16.316  &lt; 2e-16 ***\nDESTIN_GRID867   1.8017755  0.1010183    17.836  &lt; 2e-16 ***\nDESTIN_GRID869   2.7245829  0.1024821    26.586  &lt; 2e-16 ***\nDESTIN_GRID871   2.1632578  0.1013467    21.345  &lt; 2e-16 ***\nDESTIN_GRID872   4.0123488  0.1007808    39.813  &lt; 2e-16 ***\nDESTIN_GRID878   2.4990773  0.1008743    24.774  &lt; 2e-16 ***\nDESTIN_GRID879   2.8042752  0.1007463    27.835  &lt; 2e-16 ***\nDESTIN_GRID880   2.1330448  0.1008859    21.143  &lt; 2e-16 ***\nDESTIN_GRID882   1.6764408  0.1011554    16.573  &lt; 2e-16 ***\nDESTIN_GRID883   0.6111549  0.1018949     5.998 2.00e-09 ***\nDESTIN_GRID884   1.4017408  0.1012056    13.850  &lt; 2e-16 ***\nDESTIN_GRID885   1.9269830  0.1008507    19.107  &lt; 2e-16 ***\nDESTIN_GRID886   1.3392053  0.1012284    13.230  &lt; 2e-16 ***\nDESTIN_GRID890   1.2829981  0.1012370    12.673  &lt; 2e-16 ***\nDESTIN_GRID891  -5.8545289  1.0050578    -5.825 5.71e-09 ***\nDESTIN_GRID897   2.6153919  0.1008730    25.928  &lt; 2e-16 ***\nDESTIN_GRID898   2.7653118  0.1008090    27.431  &lt; 2e-16 ***\nDESTIN_GRID899   1.6053691  0.1010656    15.884  &lt; 2e-16 ***\nDESTIN_GRID900   1.3406330  0.1013194    13.232  &lt; 2e-16 ***\nDESTIN_GRID901   2.1163130  0.1009213    20.970  &lt; 2e-16 ***\nDESTIN_GRID902   1.3539460  0.1012507    13.372  &lt; 2e-16 ***\nDESTIN_GRID903   2.4635324  0.1015141    24.268  &lt; 2e-16 ***\nDESTIN_GRID904   2.3628332  0.1008174    23.437  &lt; 2e-16 ***\nDESTIN_GRID905   1.3698557  0.1010972    13.550  &lt; 2e-16 ***\nDESTIN_GRID907   2.0781325  0.1019053    20.393  &lt; 2e-16 ***\nDESTIN_GRID909   3.6548015  0.1007085    36.291  &lt; 2e-16 ***\nDESTIN_GRID910   2.5791980  0.1007616    25.597  &lt; 2e-16 ***\nDESTIN_GRID915   2.3084585  0.1013429    22.779  &lt; 2e-16 ***\nDESTIN_GRID916   3.7478849  0.1008619    37.159  &lt; 2e-16 ***\nDESTIN_GRID917   2.8435266  0.1008870    28.185  &lt; 2e-16 ***\nDESTIN_GRID918   0.8796621  0.1018701     8.635  &lt; 2e-16 ***\nDESTIN_GRID919   3.3375338  0.1007558    33.125  &lt; 2e-16 ***\nDESTIN_GRID920   3.4895056  0.1007249    34.644  &lt; 2e-16 ***\nDESTIN_GRID922   1.5231853  0.1013790    15.025  &lt; 2e-16 ***\nDESTIN_GRID923   2.1329346  0.1008337    21.153  &lt; 2e-16 ***\nDESTIN_GRID927   1.4647538  0.1014934    14.432  &lt; 2e-16 ***\nDESTIN_GRID928   2.5213655  0.1008418    25.003  &lt; 2e-16 ***\nDESTIN_GRID929  -1.6143605  0.1287985   -12.534  &lt; 2e-16 ***\nDESTIN_GRID935   3.0268083  0.1008265    30.020  &lt; 2e-16 ***\nDESTIN_GRID936   3.2678357  0.1007604    32.432  &lt; 2e-16 ***\nDESTIN_GRID937   3.1436396  0.1007672    31.197  &lt; 2e-16 ***\nDESTIN_GRID938   3.4120851  0.1007506    33.867  &lt; 2e-16 ***\nDESTIN_GRID939   2.2187806  0.1008359    22.004  &lt; 2e-16 ***\nDESTIN_GRID945   2.7672188  0.1012107    27.341  &lt; 2e-16 ***\nDESTIN_GRID947   2.3457654  0.1008089    23.269  &lt; 2e-16 ***\nDESTIN_GRID948   2.8513183  0.1008214    28.281  &lt; 2e-16 ***\nDESTIN_GRID953   3.3448431  0.1007632    33.195  &lt; 2e-16 ***\nDESTIN_GRID954   3.2959764  0.1007704    32.708  &lt; 2e-16 ***\nDESTIN_GRID955   1.9797445  0.1009796    19.605  &lt; 2e-16 ***\nDESTIN_GRID956   1.6903104  0.1012179    16.700  &lt; 2e-16 ***\nDESTIN_GRID964  -0.4257206  0.1307010    -3.257 0.001125 ** \nDESTIN_GRID966   3.4781510  0.1007407    34.526  &lt; 2e-16 ***\nDESTIN_GRID967   3.0863850  0.1008912    30.591  &lt; 2e-16 ***\nDESTIN_GRID972   1.3026531  0.1014983    12.834  &lt; 2e-16 ***\nDESTIN_GRID973   3.2522183  0.1007990    32.264  &lt; 2e-16 ***\nDESTIN_GRID974   2.4800651  0.1008879    24.582  &lt; 2e-16 ***\nDESTIN_GRID975   1.9328028  0.1010847    19.121  &lt; 2e-16 ***\nDESTIN_GRID977   2.4669461  0.1008172    24.469  &lt; 2e-16 ***\nDESTIN_GRID983   0.7252175  0.1122502     6.461 1.04e-10 ***\nDESTIN_GRID985   2.7964096  0.1008156    27.738  &lt; 2e-16 ***\nDESTIN_GRID986   3.3310037  0.1007948    33.047  &lt; 2e-16 ***\nDESTIN_GRID99    2.4100767  0.1034371    23.300  &lt; 2e-16 ***\nDESTIN_GRID990  -0.3936978  0.1120268    -3.514 0.000441 ***\nDESTIN_GRID991   2.8845906  0.1016169    28.387  &lt; 2e-16 ***\nDESTIN_GRID992   3.3300653  0.1015413    32.795  &lt; 2e-16 ***\nDESTIN_GRID993   3.3133191  0.1007292    32.893  &lt; 2e-16 ***\nDESTIN_GRID994   0.7807762  0.1028899     7.588 3.24e-14 ***\nDESTIN_GRID995   1.8281476  0.1009555    18.108  &lt; 2e-16 ***\nlog(dist)       -0.8431581  0.0001482 -5688.105  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 103154058  on 65520  degrees of freedom\nResidual deviance:  38627738  on 63889  degrees of freedom\nAIC: 38993049\n\nNumber of Fisher Scoring iterations: 8\n\n\nThe R-squared values are calculated to measure how much variation of the trips can be accounted for by the doubly constrained SIM.\n\nBased on the outcome from the cor() function in the stats package, the R2 is 0.2167286. This means that about 20.3% of the variation in the number of trips can be accounted for by the doubly constrained SIM.\nBased on the performance package, the R-squared values for generalised linear models are computed using the r2_kullback() and r2_mcfadden() functions. The results are 0.6159739 and 0.623 respectively, i.e., that about 61.6% or 62.3% of the variation in the number of trips can be accounted for by the doubly constrained SIM.\nCompared to the three other models, the doubly constrained SIM has improved R-squared values, meaning that it is the best fitted to the data.\n\n\nCalcRSquared(dbcSIM$data$TRIPS, dbcSIM$fitted.values)\n\n[1] 0.2167286\n\nr2_kullback(dbcSIM)\n\nKullback-Leibler R2 \n          0.6159739 \n\nr2_mcfadden(dbcSIM)\n\n# R2 for Generalized Linear Regression\n       R2: 0.623\n  adj. R2: 0.623\n\n\n\n\n7.7 Model Comparison\nAnother useful model performance measure for continuous dependent variable is the Root Mean Squared Error (RMSE). The compare_performance() in the performance package is used to compare the different models.\nA list called models is created to hold the four models.\n\nmodels = list(unconstrained = uncSIM,\n              originConstrained = orcSIM,\n              destinationConstrained = decSIM,\n              doublyConstrained = dbcSIM)\n\nThe RMSE of the models are computed using the compare_performance() function in the performance package. Based on the RMSE, the destination constrained SIM is the best model among the four SIMs because it has the smallest RMSE value of 1740.001.\n\ncompare_performance(models,                     \n                    metrics = \"RMSE\")\n\n# Comparison of Model Performance Indices\n\nName                   | Model |     RMSE\n-----------------------------------------\nunconstrained          |   glm | 1817.236\noriginConstrained      |   glm | 1803.962\ndestinationConstrained |   glm | 1740.001\ndoublyConstrained      |   glm | 1809.986\n\n\n\n\n7.8 Visualising Fitted Values\nThe observed values and the fitted values for the four models are visualised below.\nThe fitted values are extracted using the as.data.frame() function in the base package.\n\ndf_uncSIM = as.data.frame(uncSIM$fitted.values) %&gt;%   \n  round(digits = 0)\n\ndf_orcSIM = as.data.frame(orcSIM$fitted.values) %&gt;%   \n  round(digits = 0)\n\ndf_decSIM = as.data.frame(decSIM$fitted.values) %&gt;%   \n  round(digits = 0)\n\ndf_dbcSIM = as.data.frame(dbcSIM$fitted.values) %&gt;%   \n  round(digits = 0)\n\nThe fitted values are then added to the SIM data frame.\n\nSIM_vis = SIM %&gt;%\n  cbind(df_uncSIM) %&gt;%\n  rename(uncTRIPS = \"uncSIM$fitted.values\")%&gt;%\n  cbind(df_orcSIM) %&gt;%\n  rename(orcTRIPS = \"orcSIM$fitted.values\")%&gt;%\n  cbind(df_decSIM) %&gt;%\n  rename(decTRIPS = \"decSIM$fitted.values\")%&gt;%\n  cbind(df_dbcSIM) %&gt;%\n  rename(dbcTRIPS = \"dbcSIM$fitted.values\")\n\nThe plots are then visualised using functions in the ggplot package.\n\nunc_p = ggplot(data = SIM_vis,\n                aes(x = uncTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\norc_p = ggplot(data = SIM_vis,\n                aes(x = orcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndec_p = ggplot(data = SIM_vis,\n                aes(x = decTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\ndbc_p = ggplot(data = SIM_vis,\n                aes(x = dbcTRIPS,\n                    y = TRIPS)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\nggarrange(unc_p, orc_p, dec_p, dbc_p,\n          ncol = 2,\n          nrow = 2)\n\n\n\n\n\nSpatial Interaction Modelling (SIM):\n\nCalibrate spatial interactive models to determine factors affecting urban commuting flows during the selected time interval.\nPresent the modelling results using the appropriate geovisualisation and graphical visualisation methods.\nDescribe the modelling results based on the spatial interaction model output tables, maps, and data visualisations prepared.\n\n\n~~~ End of Take-home Exercise 2 ~~~"
  }
]